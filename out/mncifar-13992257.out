hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213138-osgbzkvp
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/osgbzkvp
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1203
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6011, 3, 32, 32) (5989, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:34,  1.37s/it] 19%|#9        | 5/26 [00:01<00:04,  4.26it/s] 35%|###4      | 9/26 [00:01<00:02,  8.19it/s] 50%|#####     | 13/26 [00:01<00:01, 12.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.18it/s] 81%|########  | 21/26 [00:02<00:00, 19.61it/s] 96%|#########6| 25/26 [00:02<00:00, 22.31it/s]100%|##########| 26/26 [00:02<00:00, 10.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.156 (12.615)	train_nll   0.42 (  0.56)	train_penalty   0.05 (  0.21)	weight_norm   9.74 ( 12.05)	train_acc   0.84 (  0.77)	train_minacc   0.00 (  0.11)	train_majacc   1.00 (  0.89)	train_corr   0.00 (  0.00)	l1 8.5806 (7.9799)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.52it/s] 15%|#5        | 4/26 [00:00<00:01, 17.28it/s] 35%|###4      | 9/26 [00:00<00:00, 30.30it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.70it/s] 92%|#########2| 24/26 [00:00<00:00, 40.29it/s]100%|##########| 26/26 [00:00<00:00, 33.74it/s]
Test: [   0/  26]	Loss 0.433 (0.433)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.433 (0.433)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.398 (0.422)	test_acc   0.87 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.398 (0.422)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.464 (0.417)	test_acc   0.81 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.464 (0.417)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.416 (0.419)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.416 (0.419)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.721 (1.721)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.721 (1.721)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.721 (1.721)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.721 (1.721)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/179/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0800 (0.0800)	validation_time 0.0069 (0.0069)	train_time 0.0711 (0.0711)
record: (train_acc, test_acc) (0.8435000259876251, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8435000259876251, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.26it/s] 23%|##3       | 6/26 [00:00<00:00, 24.15it/s] 38%|###8      | 10/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 28.12it/s] 62%|######1   | 16/26 [00:00<00:00, 28.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.06it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.328 (7.385)	train_nll   0.41 (  0.42)	train_penalty   0.06 (  0.06)	weight_norm   4.92 (  6.97)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.7239 (8.8728)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 23%|##3       | 6/26 [00:00<00:00, 23.97it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.97it/s] 42%|####2     | 11/26 [00:00<00:00, 32.50it/s] 62%|######1   | 16/26 [00:00<00:00, 37.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.92it/s] 81%|########  | 21/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 38.91it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.403)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.347 (0.405)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.405)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.450 (0.397)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.450 (0.397)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.395 (0.397)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.395 (0.397)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.672 (1.672)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.672 (1.672)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/179/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0491 (0.0645)	validation_time 0.0004 (0.0036)	train_time 0.0487 (0.0599)
record: (train_acc, test_acc) (0.8466000213623047, 0.1290000081062317)
last accs (train_acc, test_acc) (0.8466000213623047, 0.1290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 15%|#5        | 4/26 [00:00<00:01, 14.72it/s] 31%|###       | 8/26 [00:00<00:00, 21.68it/s] 42%|####2     | 11/26 [00:00<00:00, 24.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.21it/s] 65%|######5   | 17/26 [00:00<00:00, 26.39it/s] 81%|########  | 21/26 [00:00<00:00, 27.84it/s] 96%|#########6| 25/26 [00:01<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 23.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.242 (4.103)	train_nll   0.42 (  0.41)	train_penalty   0.07 (  0.06)	weight_norm   2.83 (  3.69)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4667 (8.2042)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s]  8%|7         | 2/26 [00:00<00:03,  7.98it/s] 27%|##6       | 7/26 [00:00<00:00, 23.54it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.54it/s] 46%|####6     | 12/26 [00:00<00:00, 32.49it/s] 65%|######5   | 17/26 [00:00<00:00, 37.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.39it/s] 81%|########  | 21/26 [00:00<00:00, 36.79it/s]100%|##########| 26/26 [00:00<00:00, 31.41it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.425 (0.425)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.364 (0.414)	test_acc   0.87 (  0.84)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.364 (0.414)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.455 (0.405)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.455 (0.405)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.404 (0.407)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.404 (0.407)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 1.773 (1.773)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.773 (1.773)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.773 (1.773)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.773 (1.773)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Overall Timing[  2/  1]	epoch_time 0.0419 (0.0570)	validation_time 0.0003 (0.0025)	train_time 0.0415 (0.0538)
record: (train_acc, test_acc) (0.8466000213623047, 0.1290000081062317)
last accs (train_acc, test_acc) (0.8474000207781792, 0.1290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 15%|#5        | 4/26 [00:00<00:01, 16.41it/s] 27%|##6       | 7/26 [00:00<00:00, 21.54it/s] 42%|####2     | 11/26 [00:00<00:00, 25.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.33it/s] 88%|########8 | 23/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:01<00:00, 24.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.168 (2.626)	train_nll   0.41 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   1.75 (  2.22)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6873 (7.0197)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 19%|#9        | 5/26 [00:00<00:00, 23.77it/s] 38%|###8      | 10/26 [00:00<00:00, 34.39it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.67it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.67it/s] 96%|#########6| 25/26 [00:00<00:00, 43.22it/s]100%|##########| 26/26 [00:00<00:00, 34.43it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.421 (0.421)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.372 (0.412)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.372 (0.412)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.446 (0.405)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.446 (0.405)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.405 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.405 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 1.588 (1.588)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.588 (1.588)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.588 (1.588)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.588 (1.588)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Overall Timing[  3/  1]	epoch_time 0.0416 (0.0531)	validation_time 0.0004 (0.0020)	train_time 0.0411 (0.0506)
record: (train_acc, test_acc) (0.8466000213623047, 0.1290000081062317)
last accs (train_acc, test_acc) (0.8489000214338303, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 19%|#9        | 5/26 [00:00<00:00, 22.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.41it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.02it/s] 81%|########  | 21/26 [00:00<00:00, 30.77it/s] 96%|#########6| 25/26 [00:00<00:00, 31.21it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.541 (1.820)	train_nll   0.40 (  0.41)	train_penalty   0.04 (  0.05)	weight_norm   1.15 (  1.41)	train_acc   0.84 (  0.84)	train_minacc   0.00 (  0.02)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.0138 (6.4059)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.75it/s] 35%|###4      | 9/26 [00:00<00:00, 36.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 43.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 44.26it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 44.26it/s] 96%|#########6| 25/26 [00:00<00:00, 44.68it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.421 (0.421)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.421 (0.421)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.353 (0.408)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.353 (0.408)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.448 (0.400)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.448 (0.400)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.375 (0.398)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.375 (0.398)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 1.742 (1.742)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.742 (1.742)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.742 (1.742)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.742 (1.742)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  4/  1]	epoch_time 0.0405 (0.0506)	validation_time 0.0003 (0.0017)	train_time 0.0402 (0.0485)
record: (train_acc, test_acc) (0.8466000213623047, 0.1290000081062317)
last accs (train_acc, test_acc) (0.8483000191450119, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 26.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.65it/s] 65%|######5   | 17/26 [00:00<00:00, 29.96it/s] 81%|########  | 21/26 [00:00<00:00, 30.74it/s] 96%|#########6| 25/26 [00:00<00:00, 30.58it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.098 (1.304)	train_nll   0.36 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   0.73 (  0.92)	train_acc   0.85 (  0.85)	train_minacc   0.15 (  0.07)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.5685 (6.3136)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 23%|##3       | 6/26 [00:00<00:00, 30.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.06it/s] 42%|####2     | 11/26 [00:00<00:00, 36.63it/s] 62%|######1   | 16/26 [00:00<00:00, 40.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.73it/s] 81%|########  | 21/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 34.68it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.342 (0.394)	test_acc   0.85 (  0.83)	test_minacc   0.20 (  0.20)	test_majacc   0.95 (  0.94)	Loss_d 0.342 (0.394)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.421 (0.386)	test_acc   0.81 (  0.84)	test_minacc   0.16 (  0.20)	test_majacc   0.95 (  0.95)	Loss_d 0.421 (0.386)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.16 (  0.20)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.337 (0.383)	test_acc   0.88 (  0.84)	test_minacc   0.36 (  0.21)	test_majacc   0.97 (  0.95)	Loss_d 0.337 (0.383)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.36 (  0.21)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 1.504 (1.504)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.91 (  0.91)	Loss_d 1.504 (1.504)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.504 (1.504)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.91 (  0.91)	Loss_d 1.504 (1.504)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/179/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0429 (0.0493)	validation_time 0.0004 (0.0015)	train_time 0.0425 (0.0475)
record: (train_acc, test_acc) (0.8397000244855881, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8397000244855881, 0.27300000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.88it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.80it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.41it/s] 96%|#########6| 25/26 [00:00<00:00, 31.75it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.848 (0.977)	train_nll   0.36 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   0.49 (  0.60)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.3903 (7.0074)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 15%|#5        | 4/26 [00:00<00:01, 15.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.07it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.15it/s] 92%|#########2| 24/26 [00:00<00:00, 37.20it/s]100%|##########| 26/26 [00:00<00:00, 31.53it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.84 (  0.84)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.357 (0.357)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.339 (0.387)	test_acc   0.86 (  0.83)	test_minacc   0.04 (  0.13)	test_majacc   0.98 (  0.96)	Loss_d 0.339 (0.387)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.04 (  0.13)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.411 (0.380)	test_acc   0.83 (  0.84)	test_minacc   0.17 (  0.13)	test_majacc   0.98 (  0.96)	Loss_d 0.411 (0.380)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.17 (  0.13)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.341 (0.377)	test_acc   0.85 (  0.84)	test_minacc   0.23 (  0.14)	test_majacc   0.97 (  0.97)	Loss_d 0.341 (0.377)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.23 (  0.14)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 1.580 (1.580)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.580 (1.580)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.580 (1.580)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.580 (1.580)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Overall Timing[  6/  1]	epoch_time 0.0408 (0.0481)	validation_time 0.0003 (0.0013)	train_time 0.0405 (0.0465)
record: (train_acc, test_acc) (0.8397000244855881, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8423000222444534, 0.22300000488758087)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.34it/s] 15%|#5        | 4/26 [00:00<00:01, 18.73it/s] 27%|##6       | 7/26 [00:00<00:00, 23.35it/s] 38%|###8      | 10/26 [00:00<00:00, 25.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.51it/s] 65%|######5   | 17/26 [00:00<00:00, 27.63it/s] 81%|########  | 21/26 [00:00<00:00, 28.84it/s] 96%|#########6| 25/26 [00:00<00:00, 30.19it/s]100%|##########| 26/26 [00:01<00:00, 25.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.566)	train_nll   0.63 (  0.43)	train_penalty   0.00 (  0.03)	weight_norm   0.36 (  0.40)	train_acc   0.69 (  0.81)	train_minacc   0.77 (  0.20)	train_majacc   0.67 (  0.92)	train_corr   0.00 (  0.00)	l1 7.3971 (7.7180)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.91it/s] 27%|##6       | 7/26 [00:00<00:00, 34.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.83it/s] 46%|####6     | 12/26 [00:00<00:00, 40.22it/s] 65%|######5   | 17/26 [00:00<00:00, 38.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.62it/s] 85%|########4 | 22/26 [00:00<00:00, 40.72it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.74 (  0.74)	test_minacc   0.73 (  0.73)	test_majacc   0.75 (  0.75)	Loss_d 0.607 (0.607)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.623 (0.618)	test_acc   0.71 (  0.69)	test_minacc   0.70 (  0.63)	test_majacc   0.71 (  0.70)	Loss_d 0.623 (0.618)	test_acc_d   0.71 (  0.69)	test_minacc_d   0.70 (  0.63)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.43 (  0.36)
Test: [  20/  26]	Loss 0.598 (0.615)	test_acc   0.72 (  0.69)	test_minacc   0.74 (  0.66)	test_majacc   0.71 (  0.70)	Loss_d 0.598 (0.615)	test_acc_d   0.72 (  0.69)	test_minacc_d   0.74 (  0.66)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.35 (  0.36)
Test: [  26/  26]	Loss 0.626 (0.617)	test_acc   0.70 (  0.69)	test_minacc   0.77 (  0.66)	test_majacc   0.69 (  0.69)	Loss_d 0.626 (0.617)	test_acc_d   0.70 (  0.69)	test_minacc_d   0.77 (  0.66)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.27 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.15it/s]
Test: [  0/  1]	Loss 0.660 (0.660)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.660 (0.660)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.660 (0.660)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.660 (0.660)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.23 ( -0.23)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/179/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0416 (0.0473)	validation_time 0.0003 (0.0012)	train_time 0.0413 (0.0459)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 15%|#5        | 4/26 [00:00<00:01, 20.45it/s] 27%|##6       | 7/26 [00:00<00:00, 24.27it/s] 42%|####2     | 11/26 [00:00<00:00, 27.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.74it/s] 88%|########8 | 23/26 [00:00<00:00, 30.24it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.40)	train_acc   0.50 (  0.53)	train_minacc   0.49 (  0.51)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3698 (6.6618)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 19%|#9        | 5/26 [00:00<00:00, 25.80it/s] 38%|###8      | 10/26 [00:00<00:00, 35.48it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.00it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.00it/s] 96%|#########6| 25/26 [00:00<00:00, 41.22it/s]100%|##########| 26/26 [00:00<00:00, 34.90it/s]
Test: [   0/  26]	Loss 0.701 (0.701)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.701 (0.701)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.704 (0.690)	test_acc   0.43 (  0.50)	test_minacc   0.40 (  0.48)	test_majacc   0.44 (  0.51)	Loss_d 0.704 (0.690)	test_acc_d   0.43 (  0.50)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.44 (  0.51)	test_corr_d   0.46 (  0.44)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.40 (  0.43)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.40 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.75it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.703 (0.703)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.23 (  0.23)
Overall Timing[  8/  1]	epoch_time 0.0404 (0.0465)	validation_time 0.0006 (0.0011)	train_time 0.0398 (0.0452)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5000000133216381, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.40it/s] 27%|##6       | 7/26 [00:00<00:00, 25.36it/s] 42%|####2     | 11/26 [00:00<00:00, 27.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.74it/s] 88%|########8 | 23/26 [00:00<00:00, 30.94it/s]100%|##########| 26/26 [00:00<00:00, 27.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.48 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 6.2675 (6.2943)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 23%|##3       | 6/26 [00:00<00:00, 25.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.01it/s] 42%|####2     | 11/26 [00:00<00:00, 33.67it/s] 62%|######1   | 16/26 [00:00<00:00, 38.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.61it/s] 81%|########  | 21/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]100%|##########| 26/26 [00:00<00:00, 32.72it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.698 (0.691)	test_acc   0.43 (  0.50)	test_minacc   0.44 (  0.47)	test_majacc   0.43 (  0.51)	Loss_d 0.698 (0.691)	test_acc_d   0.43 (  0.50)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.43 (  0.51)	test_corr_d   0.16 (  0.21)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.15 (  0.20)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.47 (  0.49)	test_minacc   0.44 (  0.48)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.38it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.697 (0.697)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.14 (  0.14)
Overall Timing[  9/  1]	epoch_time 0.0419 (0.0461)	validation_time 0.0004 (0.0010)	train_time 0.0415 (0.0448)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.49390000927448274, 0.4780000150203705)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.17it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 50%|#####     | 13/26 [00:00<00:00, 28.56it/s] 65%|######5   | 17/26 [00:00<00:00, 29.38it/s] 81%|########  | 21/26 [00:00<00:00, 29.98it/s] 96%|#########6| 25/26 [00:00<00:00, 30.30it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.46 (  0.48)	train_minacc   0.38 (  0.46)	train_majacc   0.47 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2560 (6.2607)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 23%|##3       | 6/26 [00:00<00:00, 29.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.12it/s] 42%|####2     | 11/26 [00:00<00:00, 36.43it/s] 62%|######1   | 16/26 [00:00<00:00, 40.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.50it/s] 81%|########  | 21/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.39 (  0.48)	test_minacc   0.34 (  0.44)	test_majacc   0.40 (  0.49)	Loss_d 0.694 (0.691)	test_acc_d   0.39 (  0.48)	test_minacc_d   0.34 (  0.44)	test_majacc_d   0.40 (  0.49)	test_corr_d   0.09 (  0.15)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.48)	test_minacc   0.45 (  0.46)	test_majacc   0.50 (  0.48)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.09 (  0.14)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.45 (  0.48)	test_minacc   0.38 (  0.45)	test_majacc   0.46 (  0.48)	Loss_d 0.692 (0.691)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.14 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.13it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.09 (  0.09)
Overall Timing[ 10/  1]	epoch_time 0.0427 (0.0458)	validation_time 0.0004 (0.0010)	train_time 0.0423 (0.0446)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.47500000429153444, 0.45900002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 22.10it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 28.94it/s] 65%|######5   | 17/26 [00:00<00:00, 30.32it/s] 81%|########  | 21/26 [00:00<00:00, 31.17it/s] 96%|#########6| 25/26 [00:00<00:00, 31.41it/s]100%|##########| 26/26 [00:00<00:00, 27.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.49 (  0.47)	train_minacc   0.49 (  0.45)	train_majacc   0.49 (  0.47)	train_corr   0.00 (  0.00)	l1 6.2560 (6.2583)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.90it/s] 27%|##6       | 7/26 [00:00<00:00, 34.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.98it/s] 46%|####6     | 12/26 [00:00<00:00, 39.56it/s] 65%|######5   | 17/26 [00:00<00:00, 38.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.69it/s] 85%|########4 | 22/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.44 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.07 (  0.12)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.46 (  0.49)	test_minacc   0.45 (  0.51)	test_majacc   0.46 (  0.49)	Loss_d 0.692 (0.691)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.06 (  0.12)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.11 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Overall Timing[ 11/  1]	epoch_time 0.0421 (0.0455)	validation_time 0.0004 (0.0009)	train_time 0.0417 (0.0444)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.49220001009106634, 0.49900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.37it/s] 19%|#9        | 5/26 [00:00<00:01, 11.16it/s] 35%|###4      | 9/26 [00:00<00:00, 17.25it/s] 50%|#####     | 13/26 [00:00<00:00, 21.75it/s] 65%|######5   | 17/26 [00:00<00:00, 24.85it/s] 81%|########  | 21/26 [00:01<00:00, 27.23it/s] 96%|#########6| 25/26 [00:01<00:00, 28.41it/s]100%|##########| 26/26 [00:01<00:00, 20.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.56 (  0.49)	train_minacc   0.51 (  0.52)	train_majacc   0.57 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2568 (6.2591)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.31it/s] 23%|##3       | 6/26 [00:00<00:00, 22.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 32.22it/s] 62%|######1   | 16/26 [00:00<00:00, 37.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.65it/s] 81%|########  | 21/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 42.71it/s]100%|##########| 26/26 [00:00<00:00, 33.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.60 (  0.60)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.59 (  0.55)	test_minacc   0.66 (  0.55)	test_majacc   0.58 (  0.55)	Loss_d 0.692 (0.691)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.66 (  0.55)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.06 (  0.11)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.55)	test_minacc   0.52 (  0.56)	test_majacc   0.50 (  0.55)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.50 (  0.55)	test_corr_d   0.04 (  0.10)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.51 (  0.55)	test_majacc   0.57 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.09 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Overall Timing[ 12/  1]	epoch_time 0.0437 (0.0453)	validation_time 0.0003 (0.0009)	train_time 0.0434 (0.0443)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5488000090718269, 0.5660000443458557)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 15%|#5        | 4/26 [00:00<00:01, 15.18it/s] 31%|###       | 8/26 [00:00<00:00, 21.75it/s] 46%|####6     | 12/26 [00:00<00:00, 25.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.18it/s] 88%|########8 | 23/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 24.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.55)	train_majacc   0.57 (  0.52)	train_corr   0.00 (  0.00)	l1 6.2569 (6.2593)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 15%|#5        | 4/26 [00:00<00:01, 15.64it/s] 35%|###4      | 9/26 [00:00<00:00, 27.63it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.64it/s] 92%|#########2| 24/26 [00:00<00:00, 37.84it/s]100%|##########| 26/26 [00:00<00:00, 31.41it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.58 (  0.56)	test_minacc   0.66 (  0.54)	test_majacc   0.57 (  0.57)	Loss_d 0.691 (0.691)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.66 (  0.54)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.50 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.50 (  0.57)	test_corr_d   0.03 (  0.09)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.56)	test_minacc   0.54 (  0.55)	test_majacc   0.57 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.07 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.61it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 13/  1]	epoch_time 0.0434 (0.0452)	validation_time 0.0005 (0.0009)	train_time 0.0429 (0.0442)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.560300013244152, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.44it/s] 23%|##3       | 6/26 [00:00<00:00, 23.07it/s] 38%|###8      | 10/26 [00:00<00:00, 26.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.98it/s] 69%|######9   | 18/26 [00:00<00:00, 30.04it/s] 85%|########4 | 22/26 [00:00<00:00, 30.98it/s]100%|##########| 26/26 [00:00<00:00, 31.05it/s]100%|##########| 26/26 [00:00<00:00, 27.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.56 (  0.54)	train_minacc   0.56 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 6.2566 (6.2589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 23%|##3       | 6/26 [00:00<00:00, 21.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.03it/s] 42%|####2     | 11/26 [00:00<00:00, 29.48it/s] 62%|######1   | 16/26 [00:00<00:00, 35.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.99it/s] 81%|########  | 21/26 [00:00<00:00, 35.33it/s]100%|##########| 26/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.59 (  0.59)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.59 (  0.56)	test_minacc   0.66 (  0.54)	test_majacc   0.58 (  0.57)	Loss_d 0.691 (0.692)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.66 (  0.54)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.04 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.50 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.50 (  0.56)	test_corr_d   0.02 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.06 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.96it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 14/  1]	epoch_time 0.0467 (0.0453)	validation_time 0.0004 (0.0008)	train_time 0.0463 (0.0443)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5583000073432922, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 19%|#9        | 5/26 [00:00<00:01, 18.67it/s] 31%|###       | 8/26 [00:00<00:00, 22.25it/s] 42%|####2     | 11/26 [00:00<00:00, 24.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.86it/s] 65%|######5   | 17/26 [00:00<00:00, 26.72it/s] 81%|########  | 21/26 [00:00<00:00, 28.11it/s] 92%|#########2| 24/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 23.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.56 (  0.54)	train_minacc   0.56 (  0.55)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 6.2560 (6.2582)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 23%|##3       | 6/26 [00:00<00:00, 28.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.85it/s] 42%|####2     | 11/26 [00:00<00:00, 35.80it/s] 62%|######1   | 16/26 [00:00<00:00, 40.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.64it/s] 81%|########  | 21/26 [00:00<00:00, 38.54it/s]100%|##########| 26/26 [00:00<00:00, 34.30it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.59 (  0.56)	test_minacc   0.66 (  0.54)	test_majacc   0.58 (  0.57)	Loss_d 0.691 (0.692)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.66 (  0.54)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.03 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.49 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.49 (  0.56)	test_corr_d   0.01 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 15/  1]	epoch_time 0.0429 (0.0451)	validation_time 0.0005 (0.0008)	train_time 0.0425 (0.0442)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.556800009548664, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.43it/s] 15%|#5        | 4/26 [00:00<00:01, 14.22it/s] 27%|##6       | 7/26 [00:00<00:00, 19.66it/s] 42%|####2     | 11/26 [00:00<00:00, 24.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.34it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 23.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.56 (  0.54)	train_minacc   0.59 (  0.56)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 6.2554 (6.2574)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 23%|##3       | 6/26 [00:00<00:00, 27.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.35it/s] 42%|####2     | 11/26 [00:00<00:00, 34.24it/s] 62%|######1   | 16/26 [00:00<00:00, 37.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.53it/s] 81%|########  | 21/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 41.59it/s]100%|##########| 26/26 [00:00<00:00, 33.35it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.56)	test_minacc   0.68 (  0.55)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.68 (  0.55)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.56)	test_minacc   0.55 (  0.56)	test_majacc   0.49 (  0.56)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.56)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.49 (  0.56)	test_corr_d  -0.00 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.55)	test_minacc   0.59 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 16/  1]	epoch_time 0.0418 (0.0450)	validation_time 0.0004 (0.0008)	train_time 0.0414 (0.0440)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5524000122547149, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 28.66it/s] 65%|######5   | 17/26 [00:00<00:00, 29.59it/s] 81%|########  | 21/26 [00:00<00:00, 30.41it/s] 96%|#########6| 25/26 [00:00<00:00, 30.28it/s]100%|##########| 26/26 [00:00<00:00, 26.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.55 (  0.53)	train_minacc   0.59 (  0.56)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 6.2548 (6.2567)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.98it/s] 31%|###       | 8/26 [00:00<00:00, 41.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.07it/s] 50%|#####     | 13/26 [00:00<00:00, 40.43it/s] 69%|######9   | 18/26 [00:00<00:00, 41.99it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.99it/s] 88%|########8 | 23/26 [00:00<00:00, 40.98it/s]100%|##########| 26/26 [00:00<00:00, 36.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.56)	test_minacc   0.68 (  0.55)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.68 (  0.55)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.55)	test_minacc   0.55 (  0.57)	test_majacc   0.49 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.49 (  0.55)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.55)	test_minacc   0.59 (  0.57)	test_majacc   0.54 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 17/  1]	epoch_time 0.0454 (0.0450)	validation_time 0.0003 (0.0008)	train_time 0.0451 (0.0441)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5495000141263008, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 19%|#9        | 5/26 [00:00<00:01, 15.37it/s] 35%|###4      | 9/26 [00:00<00:00, 21.60it/s] 50%|#####     | 13/26 [00:00<00:00, 25.83it/s] 65%|######5   | 17/26 [00:00<00:00, 28.72it/s] 81%|########  | 21/26 [00:00<00:00, 29.85it/s] 96%|#########6| 25/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:01<00:00, 23.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.54 (  0.53)	train_minacc   0.59 (  0.56)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 6.2543 (6.2560)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.29it/s] 27%|##6       | 7/26 [00:00<00:00, 30.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.96it/s] 50%|#####     | 13/26 [00:00<00:00, 40.99it/s] 69%|######9   | 18/26 [00:00<00:00, 43.10it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.10it/s] 88%|########8 | 23/26 [00:00<00:00, 44.14it/s]100%|##########| 26/26 [00:00<00:00, 36.41it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.55)	test_minacc   0.68 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.68 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.02 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.55)	test_minacc   0.55 (  0.57)	test_majacc   0.49 (  0.55)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.49 (  0.55)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.57)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 18/  1]	epoch_time 0.0404 (0.0447)	validation_time 0.0006 (0.0008)	train_time 0.0397 (0.0439)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5449000130295754, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 21.31it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 29.20it/s] 81%|########  | 21/26 [00:00<00:00, 30.15it/s] 96%|#########6| 25/26 [00:00<00:00, 30.85it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.53 (  0.52)	train_minacc   0.59 (  0.57)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.2539 (6.2554)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.70it/s] 42%|####2     | 11/26 [00:00<00:00, 34.06it/s] 62%|######1   | 16/26 [00:00<00:00, 38.97it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.97it/s] 81%|########  | 21/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 43.42it/s]100%|##########| 26/26 [00:00<00:00, 34.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.60 (  0.60)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.55)	test_minacc   0.68 (  0.56)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.68 (  0.56)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.55)	test_minacc   0.55 (  0.57)	test_majacc   0.49 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.49 (  0.54)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.57)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 19/  1]	epoch_time 0.0384 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0380 (0.0436)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5407000165581703, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 35%|###4      | 9/26 [00:00<00:00, 27.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.44)	train_acc   0.52 (  0.52)	train_minacc   0.59 (  0.57)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 6.2535 (6.2549)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 23%|##3       | 6/26 [00:00<00:00, 20.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.37it/s] 42%|####2     | 11/26 [00:00<00:00, 29.90it/s] 62%|######1   | 16/26 [00:00<00:00, 35.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.53it/s] 81%|########  | 21/26 [00:00<00:00, 36.37it/s]100%|##########| 26/26 [00:00<00:00, 30.27it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.60 (  0.60)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.68 (  0.56)	test_majacc   0.56 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.68 (  0.56)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.54)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.59 (  0.57)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.80it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 20/  1]	epoch_time 0.0423 (0.0443)	validation_time 0.0005 (0.0007)	train_time 0.0418 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5354000106453896, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 18.54it/s] 35%|###4      | 9/26 [00:00<00:00, 23.65it/s] 50%|#####     | 13/26 [00:00<00:00, 26.49it/s] 65%|######5   | 17/26 [00:00<00:00, 28.62it/s] 81%|########  | 21/26 [00:00<00:00, 29.63it/s] 96%|#########6| 25/26 [00:00<00:00, 30.53it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.51)	train_minacc   0.59 (  0.57)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 6.2531 (6.2544)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 23%|##3       | 6/26 [00:00<00:00, 22.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.24it/s] 42%|####2     | 11/26 [00:00<00:00, 31.56it/s] 62%|######1   | 16/26 [00:00<00:00, 37.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.36it/s] 81%|########  | 21/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.68 (  0.57)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.68 (  0.57)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.54)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.38it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 21/  1]	epoch_time 0.0462 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0457 (0.0436)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5328000190556049, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 15%|#5        | 4/26 [00:00<00:01, 17.32it/s] 27%|##6       | 7/26 [00:00<00:00, 21.83it/s] 38%|###8      | 10/26 [00:00<00:00, 24.54it/s] 50%|#####     | 13/26 [00:00<00:00, 26.28it/s] 62%|######1   | 16/26 [00:00<00:00, 27.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.49it/s] 92%|#########2| 24/26 [00:00<00:00, 29.62it/s]100%|##########| 26/26 [00:01<00:00, 24.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.51)	train_minacc   0.59 (  0.57)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 6.2528 (6.2540)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 19%|#9        | 5/26 [00:00<00:01, 16.21it/s] 38%|###8      | 10/26 [00:00<00:00, 26.92it/s]                                                38%|###8      | 10/26 [00:00<00:00, 26.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 34.86it/s] 96%|#########6| 25/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.58 (  0.53)	test_minacc   0.66 (  0.57)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.53)	test_minacc_d   0.66 (  0.57)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.54)	test_minacc   0.58 (  0.57)	test_majacc   0.47 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.54)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 22/  1]	epoch_time 0.0470 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0465 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5306000097692013, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.59it/s] 15%|#5        | 4/26 [00:00<00:01, 12.46it/s] 27%|##6       | 7/26 [00:00<00:01, 18.00it/s] 38%|###8      | 10/26 [00:00<00:00, 21.65it/s] 50%|#####     | 13/26 [00:00<00:00, 24.12it/s] 65%|######5   | 17/26 [00:00<00:00, 26.45it/s] 81%|########  | 21/26 [00:00<00:00, 28.18it/s] 96%|#########6| 25/26 [00:01<00:00, 29.16it/s]100%|##########| 26/26 [00:01<00:00, 22.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.252702713012695
set z to 5.94006757736206
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.51)	train_minacc   0.59 (  0.57)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2525 (6.2536)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.43it/s] 27%|##6       | 7/26 [00:00<00:00, 34.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.46it/s] 46%|####6     | 12/26 [00:00<00:00, 39.79it/s] 65%|######5   | 17/26 [00:00<00:00, 38.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.36it/s] 85%|########4 | 22/26 [00:00<00:00, 40.83it/s]100%|##########| 26/26 [00:00<00:00, 36.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.53)	test_minacc   0.66 (  0.57)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.66 (  0.57)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.53)	test_minacc   0.58 (  0.57)	test_majacc   0.47 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 23/  1]	epoch_time 0.0456 (0.0446)	validation_time 0.0003 (0.0007)	train_time 0.0452 (0.0438)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5282000135183335, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 12%|#1        | 3/26 [00:00<00:01, 14.18it/s] 27%|##6       | 7/26 [00:00<00:00, 22.08it/s] 38%|###8      | 10/26 [00:00<00:00, 24.38it/s] 50%|#####     | 13/26 [00:00<00:00, 25.81it/s] 65%|######5   | 17/26 [00:00<00:00, 27.63it/s] 81%|########  | 21/26 [00:00<00:00, 29.12it/s] 96%|#########6| 25/26 [00:00<00:00, 29.97it/s]100%|##########| 26/26 [00:01<00:00, 25.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.50)	train_minacc   0.59 (  0.58)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2523 (6.2533)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.32it/s] 27%|##6       | 7/26 [00:00<00:00, 34.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.85it/s] 46%|####6     | 12/26 [00:00<00:00, 40.28it/s] 65%|######5   | 17/26 [00:00<00:00, 42.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.50it/s] 85%|########4 | 22/26 [00:00<00:00, 39.92it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.53)	test_minacc   0.66 (  0.57)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.53)	test_minacc_d   0.66 (  0.57)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.53)	test_minacc   0.58 (  0.57)	test_majacc   0.46 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 24/  1]	epoch_time 0.0412 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0408 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5235000091493129, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.30it/s] 19%|#9        | 5/26 [00:00<00:00, 23.34it/s] 31%|###       | 8/26 [00:00<00:00, 26.21it/s] 42%|####2     | 11/26 [00:00<00:00, 27.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.73it/s] 69%|######9   | 18/26 [00:00<00:00, 28.90it/s] 85%|########4 | 22/26 [00:00<00:00, 29.62it/s]100%|##########| 26/26 [00:00<00:00, 30.37it/s]100%|##########| 26/26 [00:00<00:00, 26.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.50)	train_minacc   0.62 (  0.57)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2521 (6.2530)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.22it/s]  8%|7         | 2/26 [00:00<00:03,  7.63it/s] 27%|##6       | 7/26 [00:00<00:00, 23.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.58it/s] 46%|####6     | 12/26 [00:00<00:00, 31.18it/s] 65%|######5   | 17/26 [00:00<00:00, 36.29it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.29it/s] 85%|########4 | 22/26 [00:00<00:00, 36.36it/s]100%|##########| 26/26 [00:00<00:00, 29.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.66 (  0.56)	test_majacc   0.55 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.66 (  0.56)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 25/  1]	epoch_time 0.0463 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0459 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5189000103771687, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 15%|#5        | 4/26 [00:00<00:01, 18.43it/s] 27%|##6       | 7/26 [00:00<00:00, 22.70it/s] 42%|####2     | 11/26 [00:00<00:00, 26.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.36it/s] 65%|######5   | 17/26 [00:00<00:00, 27.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.88it/s] 92%|#########2| 24/26 [00:00<00:00, 29.09it/s]100%|##########| 26/26 [00:01<00:00, 25.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.50)	train_minacc   0.62 (  0.57)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2519 (6.2527)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 23%|##3       | 6/26 [00:00<00:00, 25.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.91it/s] 42%|####2     | 11/26 [00:00<00:00, 35.15it/s] 65%|######5   | 17/26 [00:00<00:00, 40.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.73it/s] 88%|########8 | 23/26 [00:00<00:00, 44.41it/s]100%|##########| 26/26 [00:00<00:00, 35.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.64 (  0.56)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0447 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0442 (0.0438)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5158000093996524, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 19%|#9        | 5/26 [00:00<00:01, 18.08it/s] 35%|###4      | 9/26 [00:00<00:00, 23.34it/s] 50%|#####     | 13/26 [00:00<00:00, 26.11it/s] 65%|######5   | 17/26 [00:00<00:00, 27.55it/s] 81%|########  | 21/26 [00:00<00:00, 28.88it/s] 96%|#########6| 25/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:01<00:00, 24.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.52 (  0.50)	train_minacc   0.62 (  0.56)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2517 (6.2524)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.80it/s] 27%|##6       | 7/26 [00:00<00:00, 33.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.49it/s] 46%|####6     | 12/26 [00:00<00:00, 39.79it/s] 65%|######5   | 17/26 [00:00<00:00, 42.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.24it/s] 85%|########4 | 22/26 [00:00<00:00, 37.91it/s]100%|##########| 26/26 [00:00<00:00, 36.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.64 (  0.56)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 27/  1]	epoch_time 0.0449 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0445 (0.0438)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5151000140905381, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.83it/s] 27%|##6       | 7/26 [00:00<00:00, 22.76it/s] 42%|####2     | 11/26 [00:00<00:00, 26.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.77it/s] 88%|########8 | 23/26 [00:00<00:00, 30.34it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.49)	train_minacc   0.62 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2515 (6.2522)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 23%|##3       | 6/26 [00:00<00:00, 30.48it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.48it/s] 42%|####2     | 11/26 [00:00<00:00, 37.85it/s] 65%|######5   | 17/26 [00:00<00:00, 42.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.69it/s] 85%|########4 | 22/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 37.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.64 (  0.56)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0421 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5139000137448311, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 15%|#5        | 4/26 [00:00<00:01, 18.23it/s] 27%|##6       | 7/26 [00:00<00:00, 22.34it/s] 42%|####2     | 11/26 [00:00<00:00, 26.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.90it/s] 88%|########8 | 23/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.49)	train_minacc   0.62 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2514 (6.2520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.41it/s] 38%|###8      | 10/26 [00:00<00:00, 33.44it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.52it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.75it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.75it/s] 96%|#########6| 25/26 [00:00<00:00, 40.59it/s]100%|##########| 26/26 [00:00<00:00, 34.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.56)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 29/  1]	epoch_time 0.0445 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5107000114023685, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.14it/s] 23%|##3       | 6/26 [00:00<00:00, 25.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.38it/s] 50%|#####     | 13/26 [00:00<00:00, 28.40it/s] 65%|######5   | 17/26 [00:00<00:00, 29.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.69it/s] 92%|#########2| 24/26 [00:00<00:00, 30.04it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.51 (  0.49)	train_minacc   0.62 (  0.56)	train_majacc   0.49 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2512 (6.2518)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.73it/s] 27%|##6       | 7/26 [00:00<00:00, 34.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.19it/s] 46%|####6     | 12/26 [00:00<00:00, 39.75it/s] 65%|######5   | 17/26 [00:00<00:00, 38.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.21it/s] 85%|########4 | 22/26 [00:00<00:00, 41.23it/s]100%|##########| 26/26 [00:00<00:00, 35.72it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.62 (  0.57)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.57)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 30/  1]	epoch_time 0.0422 (0.0444)	validation_time 0.0003 (0.0006)	train_time 0.0419 (0.0437)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5098000114560127, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.98it/s] 19%|#9        | 5/26 [00:00<00:00, 25.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.49it/s] 65%|######5   | 17/26 [00:00<00:00, 29.58it/s] 81%|########  | 21/26 [00:00<00:00, 29.77it/s] 92%|#########2| 24/26 [00:00<00:00, 29.51it/s]100%|##########| 26/26 [00:00<00:00, 27.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.49)	train_minacc   0.62 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2511 (6.2517)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 23%|##3       | 6/26 [00:00<00:00, 23.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.50it/s] 42%|####2     | 11/26 [00:00<00:00, 32.17it/s] 65%|######5   | 17/26 [00:00<00:00, 39.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.76it/s] 85%|########4 | 22/26 [00:00<00:00, 40.90it/s]100%|##########| 26/26 [00:00<00:00, 34.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.56)	test_majacc   0.52 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.55 (  0.57)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 31/  1]	epoch_time 0.0422 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0436)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5093000126481056, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 15%|#5        | 4/26 [00:00<00:01, 16.98it/s] 27%|##6       | 7/26 [00:00<00:00, 21.95it/s] 38%|###8      | 10/26 [00:00<00:00, 24.68it/s] 50%|#####     | 13/26 [00:00<00:00, 25.88it/s] 65%|######5   | 17/26 [00:00<00:00, 27.53it/s] 81%|########  | 21/26 [00:00<00:00, 28.92it/s] 96%|#########6| 25/26 [00:00<00:00, 29.74it/s]100%|##########| 26/26 [00:01<00:00, 24.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.49)	train_minacc   0.62 (  0.56)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2510 (6.2515)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.82it/s] 23%|##3       | 6/26 [00:00<00:00, 27.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.99it/s] 46%|####6     | 12/26 [00:00<00:00, 37.51it/s] 65%|######5   | 17/26 [00:00<00:00, 41.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.67it/s] 85%|########4 | 22/26 [00:00<00:00, 43.82it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.58 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.55 (  0.57)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0428 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0436)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.509200005799532, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.36it/s] 15%|#5        | 4/26 [00:00<00:01, 12.96it/s] 31%|###       | 8/26 [00:00<00:00, 20.03it/s] 42%|####2     | 11/26 [00:00<00:00, 22.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.29it/s] 88%|########8 | 23/26 [00:00<00:00, 28.22it/s]100%|##########| 26/26 [00:01<00:00, 22.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.49)	train_minacc   0.59 (  0.56)	train_majacc   0.47 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2508 (6.2513)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 23%|##3       | 6/26 [00:00<00:00, 29.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.70it/s] 42%|####2     | 11/26 [00:00<00:00, 36.82it/s] 62%|######1   | 16/26 [00:00<00:00, 41.19it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.19it/s] 81%|########  | 21/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]100%|##########| 26/26 [00:00<00:00, 35.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.56)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.62 (  0.56)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.62 (  0.56)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0451 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0447 (0.0436)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5072000152170658, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.94it/s] 19%|#9        | 5/26 [00:00<00:01, 12.65it/s] 35%|###4      | 9/26 [00:00<00:00, 18.68it/s] 46%|####6     | 12/26 [00:00<00:00, 21.20it/s] 62%|######1   | 16/26 [00:00<00:00, 24.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 24.47it/s] 88%|########8 | 23/26 [00:01<00:00, 26.10it/s]100%|##########| 26/26 [00:01<00:00, 20.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.49)	train_minacc   0.59 (  0.56)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2507 (6.2512)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 23%|##3       | 6/26 [00:00<00:00, 25.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.52it/s] 42%|####2     | 11/26 [00:00<00:00, 33.15it/s] 62%|######1   | 16/26 [00:00<00:00, 38.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 33.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.56)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.59 (  0.56)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 34/  1]	epoch_time 0.0414 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0410 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5077000113725663, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 15%|#5        | 4/26 [00:00<00:01, 19.57it/s] 31%|###       | 8/26 [00:00<00:00, 25.19it/s] 46%|####6     | 12/26 [00:00<00:00, 28.15it/s] 62%|######1   | 16/26 [00:00<00:00, 29.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.41it/s] 88%|########8 | 23/26 [00:00<00:00, 30.06it/s]100%|##########| 26/26 [00:00<00:00, 26.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.49)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2506 (6.2511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 23%|##3       | 6/26 [00:00<00:00, 30.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.76it/s] 42%|####2     | 11/26 [00:00<00:00, 34.42it/s] 62%|######1   | 16/26 [00:00<00:00, 39.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.00it/s] 81%|########  | 21/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 42.65it/s]100%|##########| 26/26 [00:00<00:00, 35.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.55 (  0.56)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.59 (  0.56)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 35/  1]	epoch_time 0.0421 (0.0441)	validation_time 0.0003 (0.0006)	train_time 0.0417 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5086000111103058, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 22.91it/s] 35%|###4      | 9/26 [00:00<00:00, 26.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.06it/s] 65%|######5   | 17/26 [00:00<00:00, 29.22it/s] 81%|########  | 21/26 [00:00<00:00, 30.14it/s] 96%|#########6| 25/26 [00:00<00:00, 30.73it/s]100%|##########| 26/26 [00:00<00:00, 26.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.49)	train_minacc   0.56 (  0.55)	train_majacc   0.47 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2505 (6.2510)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.13it/s] 27%|##6       | 7/26 [00:00<00:00, 34.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.10it/s] 46%|####6     | 12/26 [00:00<00:00, 39.29it/s] 65%|######5   | 17/26 [00:00<00:00, 37.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.93it/s] 85%|########4 | 22/26 [00:00<00:00, 40.81it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.59 (  0.56)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Overall Timing[ 36/  1]	epoch_time 0.0408 (0.0440)	validation_time 0.0005 (0.0006)	train_time 0.0403 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5079000116884709, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 19%|#9        | 5/26 [00:00<00:01, 18.01it/s] 35%|###4      | 9/26 [00:00<00:00, 23.43it/s] 50%|#####     | 13/26 [00:00<00:00, 25.80it/s] 65%|######5   | 17/26 [00:00<00:00, 27.29it/s] 81%|########  | 21/26 [00:00<00:00, 28.11it/s] 96%|#########6| 25/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:01<00:00, 24.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.48 (  0.49)	train_minacc   0.51 (  0.55)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2505 (6.2508)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 23%|##3       | 6/26 [00:00<00:00, 27.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.85it/s] 42%|####2     | 11/26 [00:00<00:00, 35.51it/s] 62%|######1   | 16/26 [00:00<00:00, 40.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.05it/s] 81%|########  | 21/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.56)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.54 (  0.56)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Overall Timing[ 37/  1]	epoch_time 0.0428 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0425 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5084000108242035, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 15%|#5        | 4/26 [00:00<00:01, 14.41it/s] 27%|##6       | 7/26 [00:00<00:00, 19.68it/s] 42%|####2     | 11/26 [00:00<00:00, 23.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.63it/s] 88%|########8 | 23/26 [00:00<00:00, 28.60it/s]100%|##########| 26/26 [00:01<00:00, 23.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.48 (  0.49)	train_minacc   0.51 (  0.55)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2504 (6.2507)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.99it/s] 19%|#9        | 5/26 [00:00<00:00, 21.13it/s] 38%|###8      | 10/26 [00:00<00:00, 32.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.29it/s] 96%|#########6| 25/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 32.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.58 (  0.55)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.58 (  0.55)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.00 (  0.00)
Overall Timing[ 38/  1]	epoch_time 0.0444 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5069000144004822, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.40it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.62it/s] 50%|#####     | 13/26 [00:00<00:00, 27.00it/s] 65%|######5   | 17/26 [00:00<00:00, 28.18it/s] 81%|########  | 21/26 [00:00<00:00, 28.97it/s] 96%|#########6| 25/26 [00:00<00:00, 29.72it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.43)	train_acc   0.49 (  0.49)	train_minacc   0.51 (  0.55)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2503 (6.2506)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.78it/s] 27%|##6       | 7/26 [00:00<00:00, 34.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.64it/s] 46%|####6     | 12/26 [00:00<00:00, 39.95it/s] 65%|######5   | 17/26 [00:00<00:00, 38.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.72it/s] 85%|########4 | 22/26 [00:00<00:00, 41.20it/s]100%|##########| 26/26 [00:00<00:00, 35.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.55)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.56)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Overall Timing[ 39/  1]	epoch_time 0.0454 (0.0441)	validation_time 0.0007 (0.0006)	train_time 0.0447 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.508500010818243, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 19%|#9        | 5/26 [00:00<00:01, 17.02it/s] 31%|###       | 8/26 [00:00<00:00, 21.35it/s] 42%|####2     | 11/26 [00:00<00:00, 23.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.31it/s] 88%|########8 | 23/26 [00:00<00:00, 28.43it/s]100%|##########| 26/26 [00:01<00:00, 23.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.49 (  0.49)	train_minacc   0.54 (  0.55)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.2502 (6.2506)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 27%|##6       | 7/26 [00:00<00:00, 25.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.90it/s] 46%|####6     | 12/26 [00:00<00:00, 34.10it/s] 65%|######5   | 17/26 [00:00<00:00, 36.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.85it/s] 88%|########8 | 23/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.55)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0471 (0.0441)	validation_time 0.0005 (0.0006)	train_time 0.0466 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5094000117182732, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 15%|#5        | 4/26 [00:00<00:01, 18.11it/s] 27%|##6       | 7/26 [00:00<00:00, 22.63it/s] 38%|###8      | 10/26 [00:00<00:00, 25.15it/s] 50%|#####     | 13/26 [00:00<00:00, 26.80it/s] 65%|######5   | 17/26 [00:00<00:00, 28.16it/s] 81%|########  | 21/26 [00:00<00:00, 29.27it/s] 96%|#########6| 25/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 25.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.54 (  0.55)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2501 (6.2505)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.74it/s] 27%|##6       | 7/26 [00:00<00:00, 30.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.96it/s] 46%|####6     | 12/26 [00:00<00:00, 36.33it/s] 65%|######5   | 17/26 [00:00<00:00, 39.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.67it/s] 85%|########4 | 22/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 35.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.56)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Overall Timing[ 41/  1]	epoch_time 0.0430 (0.0441)	validation_time 0.0003 (0.0006)	train_time 0.0426 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5109000141620637, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 15%|#5        | 4/26 [00:00<00:01, 16.92it/s] 31%|###       | 8/26 [00:00<00:00, 23.39it/s] 42%|####2     | 11/26 [00:00<00:00, 25.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.64it/s] 69%|######9   | 18/26 [00:00<00:00, 27.46it/s] 85%|########4 | 22/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]100%|##########| 26/26 [00:01<00:00, 24.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.56)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2501 (6.2504)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.84it/s] 23%|##3       | 6/26 [00:00<00:00, 22.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.95it/s] 46%|####6     | 12/26 [00:00<00:00, 35.48it/s] 65%|######5   | 17/26 [00:00<00:00, 38.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.80it/s] 88%|########8 | 23/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 33.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.56)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.56)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.56 (  0.55)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Overall Timing[ 42/  1]	epoch_time 0.0418 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5128000070750713, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 15%|#5        | 4/26 [00:00<00:01, 16.23it/s] 27%|##6       | 7/26 [00:00<00:00, 21.25it/s] 38%|###8      | 10/26 [00:00<00:00, 24.28it/s] 50%|#####     | 13/26 [00:00<00:00, 25.86it/s] 62%|######1   | 16/26 [00:00<00:00, 25.63it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.13it/s] 88%|########8 | 23/26 [00:00<00:00, 27.65it/s]100%|##########| 26/26 [00:01<00:00, 23.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2500 (6.2503)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 12%|#1        | 3/26 [00:00<00:01, 12.36it/s] 35%|###4      | 9/26 [00:00<00:00, 30.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.13it/s] 96%|#########6| 25/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 32.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.57 (  0.56)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Overall Timing[ 43/  1]	epoch_time 0.0464 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0459 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5139000172615051, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s]  8%|7         | 2/26 [00:00<00:03,  6.99it/s] 15%|#5        | 4/26 [00:00<00:01, 11.72it/s] 27%|##6       | 7/26 [00:00<00:01, 17.97it/s] 38%|###8      | 10/26 [00:00<00:00, 21.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.18it/s] 69%|######9   | 18/26 [00:00<00:00, 27.35it/s] 85%|########4 | 22/26 [00:00<00:00, 28.66it/s] 96%|#########6| 25/26 [00:01<00:00, 28.45it/s]100%|##########| 26/26 [00:01<00:00, 22.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2500 (6.2503)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.37it/s] 23%|##3       | 6/26 [00:00<00:01, 17.28it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.28it/s] 42%|####2     | 11/26 [00:00<00:00, 26.23it/s] 62%|######1   | 16/26 [00:00<00:00, 32.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 38.48it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.58 (  0.56)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 (  0.01)
Overall Timing[ 44/  1]	epoch_time 0.0447 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5156000127196312, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 12%|#1        | 3/26 [00:00<00:01, 12.89it/s] 23%|##3       | 6/26 [00:00<00:01, 19.73it/s] 35%|###4      | 9/26 [00:00<00:00, 23.07it/s] 46%|####6     | 12/26 [00:00<00:00, 24.94it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.56it/s] 88%|########8 | 23/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 23.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2500 (6.2502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.27it/s] 27%|##6       | 7/26 [00:00<00:00, 33.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.16it/s] 46%|####6     | 12/26 [00:00<00:00, 34.77it/s] 65%|######5   | 17/26 [00:00<00:00, 38.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.86it/s] 85%|########4 | 22/26 [00:00<00:00, 41.94it/s]100%|##########| 26/26 [00:00<00:00, 36.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.59 (  0.56)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 45/  1]	epoch_time 0.0432 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5172000109255314, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 31%|###       | 8/26 [00:00<00:00, 23.96it/s] 42%|####2     | 11/26 [00:00<00:00, 26.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.86it/s] 69%|######9   | 18/26 [00:00<00:00, 28.10it/s] 81%|########  | 21/26 [00:00<00:00, 28.45it/s] 96%|#########6| 25/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 25.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.49 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2499 (6.2502)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.41it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 42%|####2     | 11/26 [00:00<00:00, 33.74it/s] 62%|######1   | 16/26 [00:00<00:00, 37.76it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.76it/s] 81%|########  | 21/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 43.07it/s]100%|##########| 26/26 [00:00<00:00, 35.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.59 (  0.56)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 46/  1]	epoch_time 0.0430 (0.0441)	validation_time 0.0003 (0.0005)	train_time 0.0426 (0.0435)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5189000084996224, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 15%|#5        | 4/26 [00:00<00:01, 18.72it/s] 27%|##6       | 7/26 [00:00<00:00, 22.93it/s] 42%|####2     | 11/26 [00:00<00:00, 26.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.32it/s] 88%|########8 | 23/26 [00:00<00:00, 30.17it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.56 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 6.2499 (6.2501)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.34it/s] 27%|##6       | 7/26 [00:00<00:00, 32.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.14it/s] 65%|######5   | 17/26 [00:00<00:00, 42.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.23it/s] 85%|########4 | 22/26 [00:00<00:00, 40.40it/s]100%|##########| 26/26 [00:00<00:00, 37.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.59 (  0.56)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 47/  1]	epoch_time 0.0429 (0.0441)	validation_time 0.0010 (0.0006)	train_time 0.0420 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5209000120759011, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 25.32it/s] 50%|#####     | 13/26 [00:00<00:00, 27.53it/s] 65%|######5   | 17/26 [00:00<00:00, 28.85it/s] 81%|########  | 21/26 [00:00<00:00, 29.82it/s] 96%|#########6| 25/26 [00:00<00:00, 30.15it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.54 (  0.55)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.2498 (6.2501)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 23%|##3       | 6/26 [00:00<00:00, 30.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.85it/s] 42%|####2     | 11/26 [00:00<00:00, 37.47it/s] 62%|######1   | 16/26 [00:00<00:00, 41.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.62it/s] 81%|########  | 21/26 [00:00<00:00, 38.86it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.55)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.58 (  0.56)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.54 (  0.55)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 48/  1]	epoch_time 0.0436 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0432 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5213000155389309, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 15%|#5        | 4/26 [00:00<00:01, 15.18it/s] 31%|###       | 8/26 [00:00<00:00, 22.32it/s] 42%|####2     | 11/26 [00:00<00:00, 24.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.25it/s] 65%|######5   | 17/26 [00:00<00:00, 26.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.57it/s] 88%|########8 | 23/26 [00:00<00:00, 28.14it/s]100%|##########| 26/26 [00:01<00:00, 23.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.51)	train_minacc   0.54 (  0.55)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 6.2498 (6.2500)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 30.16it/s] 35%|###4      | 9/26 [00:00<00:00, 38.29it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.90it/s] 92%|#########2| 24/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 38.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.55)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.55 (  0.56)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.54 (  0.55)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.03 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.01)
Overall Timing[ 49/  1]	epoch_time 0.0431 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0434)
record: (train_acc, test_acc) (0.6890000297427178, 0.6520000100135803)
last accs (train_acc, test_acc) (0.5220000184476375, 0.5320000052452087)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp1n74v7sl'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213435-r6v0w219
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/r6v0w219
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1168
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5998, 3, 32, 32) (6002, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.50s/it] 19%|#9        | 5/26 [00:01<00:05,  4.05it/s] 35%|###4      | 9/26 [00:01<00:02,  7.75it/s] 50%|#####     | 13/26 [00:01<00:01, 11.45it/s] 65%|######5   | 17/26 [00:01<00:00, 15.28it/s] 81%|########  | 21/26 [00:02<00:00, 18.65it/s] 96%|#########6| 25/26 [00:02<00:00, 21.74it/s]100%|##########| 26/26 [00:02<00:00,  9.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.991 (12.533)	train_nll   0.40 (  0.58)	train_penalty   0.06 (  0.29)	weight_norm   9.59 ( 11.96)	train_acc   0.86 (  0.80)	train_minacc   0.00 (  0.11)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 7.1831 (7.8149)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.69it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 46%|####6     | 12/26 [00:00<00:00, 41.40it/s] 65%|######5   | 17/26 [00:00<00:00, 39.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.45it/s] 85%|########4 | 22/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.443 (0.443)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.443 (0.443)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.427 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.427 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.414 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.414 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.404 (0.416)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.404 (0.416)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]
Test: [  0/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0784 (0.0784)	validation_time 0.0068 (0.0068)	train_time 0.0698 (0.0698)
record: (train_acc, test_acc) (0.8478000254034996, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8478000254034996, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 35%|###4      | 9/26 [00:00<00:00, 25.63it/s] 50%|#####     | 13/26 [00:00<00:00, 27.74it/s] 65%|######5   | 17/26 [00:00<00:00, 29.01it/s] 81%|########  | 21/26 [00:00<00:00, 29.98it/s] 96%|#########6| 25/26 [00:00<00:00, 30.48it/s]100%|##########| 26/26 [00:00<00:00, 26.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.398 (7.358)	train_nll   0.39 (  0.41)	train_penalty   0.05 (  0.06)	weight_norm   5.01 (  6.95)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8835 (7.1136)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 15%|#5        | 4/26 [00:00<00:01, 13.94it/s] 38%|###8      | 10/26 [00:00<00:00, 29.11it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.11it/s] 62%|######1   | 16/26 [00:00<00:00, 35.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.29it/s] 81%|########  | 21/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 30.86it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.431 (0.431)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.409 (0.388)	test_acc   0.85 (  0.86)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.388)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.389 (0.398)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.398)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.382 (0.396)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.382 (0.396)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.67it/s]
Test: [  0/  1]	Loss 1.843 (1.843)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.843 (1.843)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.843 (1.843)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.843 (1.843)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0446 (0.0615)	validation_time 0.0006 (0.0037)	train_time 0.0440 (0.0569)
record: (train_acc, test_acc) (0.8478000254034996, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8499000254869461, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.85it/s] 19%|#9        | 5/26 [00:00<00:01, 12.50it/s] 35%|###4      | 9/26 [00:00<00:00, 18.65it/s] 46%|####6     | 12/26 [00:00<00:00, 20.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.05it/s] 69%|######9   | 18/26 [00:00<00:00, 24.82it/s] 85%|########4 | 22/26 [00:01<00:00, 27.13it/s]100%|##########| 26/26 [00:01<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 20.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.303 (4.228)	train_nll   0.33 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   2.97 (  3.83)	train_acc   0.86 (  0.85)	train_minacc   0.08 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.1361 (6.5438)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.45it/s] 27%|##6       | 7/26 [00:00<00:00, 34.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.27it/s] 46%|####6     | 12/26 [00:00<00:00, 39.63it/s] 65%|######5   | 17/26 [00:00<00:00, 39.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.65it/s] 85%|########4 | 22/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 36.54it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.82 (  0.82)	test_minacc   0.17 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 0.418 (0.418)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.382 (0.376)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.382 (0.376)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.370 (0.388)	test_acc   0.85 (  0.84)	test_minacc   0.09 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.370 (0.388)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.316 (0.380)	test_acc   0.88 (  0.85)	test_minacc   0.19 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.316 (0.380)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 1.793 (1.793)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 1.793 (1.793)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.793 (1.793)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 1.793 (1.793)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0479 (0.0569)	validation_time 0.0005 (0.0026)	train_time 0.0474 (0.0537)
record: (train_acc, test_acc) (0.8473000240325927, 0.18300001323223114)
last accs (train_acc, test_acc) (0.8473000240325927, 0.18300001323223114)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 15%|#5        | 4/26 [00:00<00:01, 16.88it/s] 27%|##6       | 7/26 [00:00<00:00, 21.21it/s] 38%|###8      | 10/26 [00:00<00:00, 24.06it/s] 50%|#####     | 13/26 [00:00<00:00, 25.92it/s] 65%|######5   | 17/26 [00:00<00:00, 27.48it/s] 81%|########  | 21/26 [00:00<00:00, 28.37it/s] 96%|#########6| 25/26 [00:00<00:00, 29.29it/s]100%|##########| 26/26 [00:01<00:00, 24.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.294 (2.773)	train_nll   0.37 (  0.39)	train_penalty   0.05 (  0.05)	weight_norm   1.92 (  2.38)	train_acc   0.86 (  0.84)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3161 (5.7522)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.46it/s] 27%|##6       | 7/26 [00:00<00:00, 27.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.37it/s] 46%|####6     | 12/26 [00:00<00:00, 34.79it/s] 65%|######5   | 17/26 [00:00<00:00, 39.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.33it/s] 85%|########4 | 22/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 34.74it/s]
Test: [   0/  26]	Loss 0.432 (0.432)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.432 (0.432)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.397 (0.387)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.397 (0.387)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.397 (0.399)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.397 (0.399)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.357 (0.396)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.396)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.85it/s]
Test: [  0/  1]	Loss 1.954 (1.954)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.954 (1.954)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.954 (1.954)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.954 (1.954)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  3/  1]	epoch_time 0.0433 (0.0535)	validation_time 0.0004 (0.0020)	train_time 0.0429 (0.0510)
record: (train_acc, test_acc) (0.8473000240325927, 0.18300001323223114)
last accs (train_acc, test_acc) (0.8497000184059144, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.04it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 42%|####2     | 11/26 [00:00<00:00, 26.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.50it/s] 65%|######5   | 17/26 [00:00<00:00, 27.67it/s] 81%|########  | 21/26 [00:00<00:00, 28.76it/s] 96%|#########6| 25/26 [00:00<00:00, 29.50it/s]100%|##########| 26/26 [00:01<00:00, 25.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.609 (1.943)	train_nll   0.35 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.26 (  1.56)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.07)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1792 (5.2072)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.47it/s] 23%|##3       | 6/26 [00:00<00:00, 21.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.02it/s] 42%|####2     | 11/26 [00:00<00:00, 28.95it/s] 62%|######1   | 16/26 [00:00<00:00, 35.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.24it/s] 81%|########  | 21/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 41.26it/s]100%|##########| 26/26 [00:00<00:00, 31.09it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.356 (0.345)	test_acc   0.85 (  0.86)	test_minacc   0.03 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.356 (0.345)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.03 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
Test: [  20/  26]	Loss 0.339 (0.354)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.339 (0.354)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.321 (0.350)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.321 (0.350)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.96it/s]
Test: [  0/  1]	Loss 1.955 (1.955)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.955 (1.955)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.955 (1.955)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.955 (1.955)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Overall Timing[  4/  1]	epoch_time 0.0434 (0.0515)	validation_time 0.0005 (0.0017)	train_time 0.0429 (0.0494)
record: (train_acc, test_acc) (0.8473000240325927, 0.18300001323223114)
last accs (train_acc, test_acc) (0.8515000229477883, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.11it/s] 19%|#9        | 5/26 [00:00<00:01, 15.69it/s] 35%|###4      | 9/26 [00:00<00:00, 21.48it/s] 46%|####6     | 12/26 [00:00<00:00, 23.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.51it/s] 88%|########8 | 23/26 [00:00<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 23.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.156 (1.393)	train_nll   0.31 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.84 (  1.03)	train_acc   0.88 (  0.85)	train_minacc   0.19 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.4178 (5.2783)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 27%|##6       | 7/26 [00:00<00:00, 32.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.89it/s] 46%|####6     | 12/26 [00:00<00:00, 39.05it/s] 65%|######5   | 17/26 [00:00<00:00, 38.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.37it/s] 85%|########4 | 22/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 36.19it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.83 (  0.83)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 0.383 (0.383)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.355 (0.340)	test_acc   0.87 (  0.86)	test_minacc   0.27 (  0.26)	test_majacc   0.98 (  0.96)	Loss_d 0.355 (0.340)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.27 (  0.26)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.313 (0.347)	test_acc   0.87 (  0.85)	test_minacc   0.20 (  0.24)	test_majacc   0.98 (  0.96)	Loss_d 0.313 (0.347)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.20 (  0.24)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.93 (  0.90)
Test: [  26/  26]	Loss 0.288 (0.342)	test_acc   0.88 (  0.85)	test_minacc   0.31 (  0.24)	test_majacc   0.98 (  0.96)	Loss_d 0.288 (0.342)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.31 (  0.24)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 1.732 (1.732)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.732 (1.732)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.732 (1.732)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 1.732 (1.732)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0446 (0.0503)	validation_time 0.0003 (0.0015)	train_time 0.0442 (0.0485)
record: (train_acc, test_acc) (0.8544000228643417, 0.2990000247955322)
last accs (train_acc, test_acc) (0.8544000228643417, 0.2990000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 19%|#9        | 5/26 [00:00<00:00, 22.28it/s] 35%|###4      | 9/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.10it/s] 81%|########  | 21/26 [00:00<00:00, 30.54it/s] 96%|#########6| 25/26 [00:00<00:00, 30.86it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.880 (1.044)	train_nll   0.31 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.57 (  0.70)	train_acc   0.87 (  0.85)	train_minacc   0.14 (  0.17)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.7973 (6.1943)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 27%|##6       | 7/26 [00:00<00:00, 38.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.05it/s] 46%|####6     | 12/26 [00:00<00:00, 42.07it/s] 65%|######5   | 17/26 [00:00<00:00, 44.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.23it/s] 85%|########4 | 22/26 [00:00<00:00, 41.13it/s]100%|##########| 26/26 [00:00<00:00, 38.58it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.84 (  0.84)	test_minacc   0.36 (  0.36)	test_majacc   0.94 (  0.94)	Loss_d 0.342 (0.342)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.333 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.30)	test_majacc   0.96 (  0.95)	Loss_d 0.333 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.30)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.308 (0.331)	test_acc   0.86 (  0.85)	test_minacc   0.20 (  0.28)	test_majacc   0.97 (  0.95)	Loss_d 0.308 (0.331)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.20 (  0.28)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.90 (  0.87)
Test: [  26/  26]	Loss 0.274 (0.326)	test_acc   0.88 (  0.85)	test_minacc   0.33 (  0.28)	test_majacc   0.98 (  0.95)	Loss_d 0.274 (0.326)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.33 (  0.28)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.28it/s]
Test: [  0/  1]	Loss 1.622 (1.622)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.622 (1.622)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.622 (1.622)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.622 (1.622)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0421 (0.0492)	validation_time 0.0004 (0.0013)	train_time 0.0417 (0.0475)
record: (train_acc, test_acc) (0.8527000241279602, 0.33400002121925354)
last accs (train_acc, test_acc) (0.8527000241279602, 0.33400002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.07it/s] 38%|###8      | 10/26 [00:00<00:00, 29.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.10it/s] 65%|######5   | 17/26 [00:00<00:00, 29.40it/s] 81%|########  | 21/26 [00:00<00:00, 29.95it/s] 96%|#########6| 25/26 [00:00<00:00, 30.34it/s]100%|##########| 26/26 [00:00<00:00, 28.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.005 (0.611)	train_nll   0.47 (  0.38)	train_penalty   0.00 (  0.02)	weight_norm   0.44 (  0.49)	train_acc   0.76 (  0.83)	train_minacc   0.64 (  0.25)	train_majacc   0.79 (  0.94)	train_corr   0.00 (  0.00)	l1 7.1821 (7.2648)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.40it/s] 27%|##6       | 7/26 [00:00<00:00, 34.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.11it/s] 46%|####6     | 12/26 [00:00<00:00, 39.85it/s] 65%|######5   | 17/26 [00:00<00:00, 38.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.60it/s] 85%|########4 | 22/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.489 (0.489)	test_acc   0.76 (  0.76)	test_minacc   0.61 (  0.61)	test_majacc   0.79 (  0.79)	Loss_d 0.489 (0.489)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.497 (0.503)	test_acc   0.74 (  0.74)	test_minacc   0.48 (  0.54)	test_majacc   0.78 (  0.77)	Loss_d 0.497 (0.503)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.78 (  0.77)	test_corr_d   0.59 (  0.57)
Test: [  20/  26]	Loss 0.480 (0.494)	test_acc   0.77 (  0.75)	test_minacc   0.55 (  0.57)	test_majacc   0.81 (  0.78)	Loss_d 0.480 (0.494)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.81 (  0.78)	test_corr_d   0.65 (  0.57)
Test: [  26/  26]	Loss 0.485 (0.496)	test_acc   0.75 (  0.74)	test_minacc   0.64 (  0.57)	test_majacc   0.77 (  0.77)	Loss_d 0.485 (0.496)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.64 (  0.57)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.55 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.852 (0.852)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 0.852 (0.852)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.852 (0.852)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.82 (  0.82)	Loss_d 0.852 (0.852)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.11 (  0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0412 (0.0482)	validation_time 0.0004 (0.0012)	train_time 0.0407 (0.0467)
record: (train_acc, test_acc) (0.7444000296592712, 0.5770000219345093)
last accs (train_acc, test_acc) (0.7444000296592712, 0.5770000219345093)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.01it/s] 19%|#9        | 5/26 [00:00<00:01, 15.39it/s] 31%|###       | 8/26 [00:00<00:00, 19.97it/s] 42%|####2     | 11/26 [00:00<00:00, 22.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.51it/s] 69%|######9   | 18/26 [00:00<00:00, 26.52it/s] 81%|########  | 21/26 [00:00<00:00, 27.46it/s] 96%|#########6| 25/26 [00:01<00:00, 28.58it/s]100%|##########| 26/26 [00:01<00:00, 22.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.001 (0.001)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.47)	train_acc   0.66 (  0.65)	train_minacc   0.61 (  0.69)	train_majacc   0.67 (  0.64)	train_corr   0.00 (  0.00)	l1 6.5594 (6.7678)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  6.65it/s] 27%|##6       | 7/26 [00:00<00:00, 19.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.96it/s] 46%|####6     | 12/26 [00:00<00:00, 28.45it/s] 65%|######5   | 17/26 [00:00<00:00, 34.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.05it/s] 85%|########4 | 22/26 [00:00<00:00, 36.09it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
Test: [   0/  26]	Loss 0.621 (0.621)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.67 (  0.67)	Loss_d 0.621 (0.621)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.629 (0.632)	test_acc   0.60 (  0.63)	test_minacc   0.57 (  0.65)	test_majacc   0.60 (  0.63)	Loss_d 0.629 (0.632)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.57 (  0.65)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.34 (  0.29)
Test: [  20/  26]	Loss 0.626 (0.628)	test_acc   0.65 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.64)	Loss_d 0.626 (0.628)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.34 (  0.29)
Test: [  26/  26]	Loss 0.621 (0.629)	test_acc   0.65 (  0.64)	test_minacc   0.61 (  0.68)	test_majacc   0.65 (  0.63)	Loss_d 0.621 (0.629)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.61 (  0.68)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.31 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.691 (0.691)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/181/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0424 (0.0475)	validation_time 0.0004 (0.0011)	train_time 0.0420 (0.0462)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 15%|#5        | 4/26 [00:00<00:01, 18.34it/s] 27%|##6       | 7/26 [00:00<00:00, 21.93it/s] 42%|####2     | 11/26 [00:00<00:00, 25.67it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.00it/s] 65%|######5   | 17/26 [00:00<00:00, 27.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.15it/s] 92%|#########2| 24/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 24.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.59 (  0.60)	train_minacc   0.58 (  0.66)	train_majacc   0.59 (  0.59)	train_corr   0.00 (  0.00)	l1 6.4855 (6.5187)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 15%|#5        | 4/26 [00:00<00:01, 16.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.20it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.20it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.41it/s] 92%|#########2| 24/26 [00:00<00:00, 39.15it/s]100%|##########| 26/26 [00:00<00:00, 31.19it/s]
Test: [   0/  26]	Loss 0.659 (0.659)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.659 (0.659)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.655 (0.661)	test_acc   0.55 (  0.58)	test_minacc   0.53 (  0.63)	test_majacc   0.55 (  0.57)	Loss_d 0.655 (0.661)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.53 (  0.63)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.23 (  0.18)
Test: [  20/  26]	Loss 0.655 (0.660)	test_acc   0.61 (  0.59)	test_minacc   0.73 (  0.65)	test_majacc   0.59 (  0.57)	Loss_d 0.655 (0.660)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.73 (  0.65)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.22 (  0.18)
Test: [  26/  26]	Loss 0.651 (0.660)	test_acc   0.59 (  0.58)	test_minacc   0.58 (  0.65)	test_majacc   0.59 (  0.57)	Loss_d 0.651 (0.660)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.58 (  0.65)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.21 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.58it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.59 (  0.59)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.15 ( -0.15)
Overall Timing[  9/  1]	epoch_time 0.0458 (0.0474)	validation_time 0.0004 (0.0011)	train_time 0.0454 (0.0461)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.5828000137805939, 0.6320000290870667)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.12it/s] 35%|###4      | 9/26 [00:00<00:00, 25.37it/s] 46%|####6     | 12/26 [00:00<00:00, 26.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.31it/s] 69%|######9   | 18/26 [00:00<00:00, 27.77it/s] 81%|########  | 21/26 [00:00<00:00, 28.31it/s] 96%|#########6| 25/26 [00:00<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.46 (  0.51)	train_minacc   0.47 (  0.56)	train_majacc   0.46 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4464 (6.4575)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.52it/s] 23%|##3       | 6/26 [00:00<00:01, 18.80it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.80it/s] 42%|####2     | 11/26 [00:00<00:00, 27.86it/s] 62%|######1   | 16/26 [00:00<00:00, 33.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.66it/s] 81%|########  | 21/26 [00:00<00:00, 34.48it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.42 (  0.42)	test_minacc   0.48 (  0.48)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.671 (0.673)	test_acc   0.41 (  0.45)	test_minacc   0.45 (  0.50)	test_majacc   0.41 (  0.44)	Loss_d 0.671 (0.673)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.41 (  0.44)	test_corr_d   0.18 (  0.16)
Test: [  20/  26]	Loss 0.671 (0.673)	test_acc   0.44 (  0.45)	test_minacc   0.62 (  0.51)	test_majacc   0.41 (  0.44)	Loss_d 0.671 (0.673)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.41 (  0.44)	test_corr_d   0.19 (  0.15)
Test: [  26/  26]	Loss 0.663 (0.672)	test_acc   0.46 (  0.45)	test_minacc   0.47 (  0.51)	test_majacc   0.46 (  0.44)	Loss_d 0.663 (0.672)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.46 (  0.44)	test_corr_d   0.21 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 10/  1]	epoch_time 0.0440 (0.0471)	validation_time 0.0004 (0.0010)	train_time 0.0435 (0.0459)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.45150000652670863, 0.5120000243186951)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 15%|#5        | 4/26 [00:00<00:01, 16.88it/s] 27%|##6       | 7/26 [00:00<00:00, 21.60it/s] 38%|###8      | 10/26 [00:00<00:00, 24.54it/s] 50%|#####     | 13/26 [00:00<00:00, 26.14it/s] 65%|######5   | 17/26 [00:00<00:00, 27.84it/s] 81%|########  | 21/26 [00:00<00:00, 28.89it/s] 96%|#########6| 25/26 [00:00<00:00, 29.84it/s]100%|##########| 26/26 [00:01<00:00, 24.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.44 (  0.47)	train_minacc   0.58 (  0.62)	train_majacc   0.42 (  0.44)	train_corr   0.00 (  0.00)	l1 6.4311 (6.4317)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.17it/s] 27%|##6       | 7/26 [00:00<00:00, 27.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.41it/s] 46%|####6     | 12/26 [00:00<00:00, 34.85it/s] 65%|######5   | 17/26 [00:00<00:00, 38.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.54it/s] 85%|########4 | 22/26 [00:00<00:00, 37.74it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.39 (  0.39)	test_minacc   0.59 (  0.59)	test_majacc   0.35 (  0.35)	Loss_d 0.680 (0.680)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.679 (0.680)	test_acc   0.39 (  0.41)	test_minacc   0.55 (  0.57)	test_majacc   0.36 (  0.39)	Loss_d 0.679 (0.680)	test_acc_d   0.39 (  0.41)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.36 (  0.39)	test_corr_d   0.14 (  0.11)
Test: [  20/  26]	Loss 0.680 (0.680)	test_acc   0.40 (  0.42)	test_minacc   0.62 (  0.57)	test_majacc   0.36 (  0.39)	Loss_d 0.680 (0.680)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.36 (  0.39)	test_corr_d   0.15 (  0.11)
Test: [  26/  26]	Loss 0.671 (0.680)	test_acc   0.44 (  0.42)	test_minacc   0.58 (  0.57)	test_majacc   0.41 (  0.39)	Loss_d 0.671 (0.680)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.58 (  0.57)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.18 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.79it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 11/  1]	epoch_time 0.0485 (0.0472)	validation_time 0.0004 (0.0010)	train_time 0.0481 (0.0460)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4177000052928925, 0.5400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 15%|#5        | 4/26 [00:00<00:01, 19.10it/s] 27%|##6       | 7/26 [00:00<00:00, 23.67it/s] 42%|####2     | 11/26 [00:00<00:00, 26.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.72it/s] 65%|######5   | 17/26 [00:00<00:00, 28.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.42it/s] 88%|########8 | 23/26 [00:00<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 25.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.45 (  0.45)	train_minacc   0.56 (  0.59)	train_majacc   0.43 (  0.43)	train_corr   0.00 (  0.00)	l1 6.4165 (6.4173)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 15%|#5        | 4/26 [00:00<00:01, 13.05it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.02it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.02it/s] 92%|#########2| 24/26 [00:00<00:00, 36.19it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.38 (  0.38)	test_minacc   0.48 (  0.48)	test_majacc   0.36 (  0.36)	Loss_d 0.684 (0.684)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.685 (0.684)	test_acc   0.40 (  0.42)	test_minacc   0.48 (  0.52)	test_majacc   0.38 (  0.40)	Loss_d 0.685 (0.684)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.38 (  0.40)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.685 (0.685)	test_acc   0.42 (  0.42)	test_minacc   0.60 (  0.51)	test_majacc   0.39 (  0.41)	Loss_d 0.685 (0.685)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.39 (  0.41)	test_corr_d   0.12 (  0.10)
Test: [  26/  26]	Loss 0.676 (0.684)	test_acc   0.44 (  0.42)	test_minacc   0.53 (  0.50)	test_majacc   0.43 (  0.41)	Loss_d 0.676 (0.684)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.17 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 12/  1]	epoch_time 0.0462 (0.0471)	validation_time 0.0004 (0.0009)	train_time 0.0458 (0.0460)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.42070000553131104, 0.49800002574920654)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 15%|#5        | 4/26 [00:00<00:01, 19.91it/s] 27%|##6       | 7/26 [00:00<00:00, 23.35it/s] 38%|###8      | 10/26 [00:00<00:00, 25.46it/s] 50%|#####     | 13/26 [00:00<00:00, 26.88it/s] 65%|######5   | 17/26 [00:00<00:00, 28.16it/s] 81%|########  | 21/26 [00:00<00:00, 28.87it/s] 96%|#########6| 25/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:01<00:00, 25.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.43 (  0.44)	train_minacc   0.47 (  0.56)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 6.4058 (6.4073)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.99it/s] 27%|##6       | 7/26 [00:00<00:00, 34.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.20it/s] 46%|####6     | 12/26 [00:00<00:00, 40.38it/s] 65%|######5   | 17/26 [00:00<00:00, 41.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.25it/s] 85%|########4 | 22/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 36.90it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.40 (  0.40)	test_minacc   0.53 (  0.53)	test_majacc   0.37 (  0.37)	Loss_d 0.684 (0.684)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.40 (  0.42)	test_minacc   0.47 (  0.54)	test_majacc   0.39 (  0.40)	Loss_d 0.686 (0.685)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.686 (0.686)	test_acc   0.43 (  0.42)	test_minacc   0.62 (  0.51)	test_majacc   0.40 (  0.41)	Loss_d 0.686 (0.686)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.11 (  0.09)
Test: [  26/  26]	Loss 0.678 (0.685)	test_acc   0.44 (  0.42)	test_minacc   0.47 (  0.50)	test_majacc   0.43 (  0.41)	Loss_d 0.678 (0.685)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.16 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.94it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.00 (  0.00)
Overall Timing[ 13/  1]	epoch_time 0.0434 (0.0468)	validation_time 0.0005 (0.0009)	train_time 0.0430 (0.0458)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.42490000507235526, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.36it/s] 15%|#5        | 4/26 [00:00<00:01, 14.12it/s] 27%|##6       | 7/26 [00:00<00:00, 19.62it/s] 42%|####2     | 11/26 [00:00<00:00, 23.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.18it/s] 69%|######9   | 18/26 [00:00<00:00, 27.02it/s] 85%|########4 | 22/26 [00:00<00:00, 28.33it/s] 96%|#########6| 25/26 [00:01<00:00, 28.73it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.45 (  0.43)	train_minacc   0.42 (  0.54)	train_majacc   0.45 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3987 (6.4009)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.94it/s] 27%|##6       | 7/26 [00:00<00:00, 29.62it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.62it/s] 46%|####6     | 12/26 [00:00<00:00, 36.19it/s] 65%|######5   | 17/26 [00:00<00:00, 39.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.65it/s] 85%|########4 | 22/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 35.56it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.42 (  0.42)	test_minacc   0.56 (  0.56)	test_majacc   0.39 (  0.39)	Loss_d 0.684 (0.684)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.41 (  0.44)	test_minacc   0.43 (  0.54)	test_majacc   0.40 (  0.42)	Loss_d 0.686 (0.685)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.43 (  0.54)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.687 (0.686)	test_acc   0.45 (  0.44)	test_minacc   0.62 (  0.51)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.686)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.62 (  0.51)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.680 (0.686)	test_acc   0.45 (  0.44)	test_minacc   0.44 (  0.50)	test_majacc   0.45 (  0.42)	Loss_d 0.680 (0.686)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.15 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 14/  1]	epoch_time 0.0459 (0.0468)	validation_time 0.0004 (0.0009)	train_time 0.0455 (0.0458)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4355000041127205, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 15%|#5        | 4/26 [00:00<00:01, 18.26it/s] 27%|##6       | 7/26 [00:00<00:00, 22.70it/s] 38%|###8      | 10/26 [00:00<00:00, 25.33it/s] 50%|#####     | 13/26 [00:00<00:00, 26.47it/s] 62%|######1   | 16/26 [00:00<00:00, 27.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.05it/s] 85%|########4 | 22/26 [00:00<00:00, 27.72it/s]100%|##########| 26/26 [00:00<00:00, 29.59it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.48 (  0.43)	train_minacc   0.44 (  0.54)	train_majacc   0.48 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3943 (6.3966)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 25.42it/s] 35%|###4      | 9/26 [00:00<00:00, 31.40it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.11it/s] 92%|#########2| 24/26 [00:00<00:00, 39.14it/s]100%|##########| 26/26 [00:00<00:00, 33.42it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.41 (  0.41)	test_minacc   0.53 (  0.53)	test_majacc   0.39 (  0.39)	Loss_d 0.684 (0.684)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.41 (  0.44)	test_minacc   0.45 (  0.54)	test_majacc   0.41 (  0.43)	Loss_d 0.686 (0.685)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.45 (  0.54)	test_majacc_d   0.41 (  0.43)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.687 (0.686)	test_acc   0.44 (  0.44)	test_minacc   0.60 (  0.52)	test_majacc   0.42 (  0.43)	Loss_d 0.687 (0.686)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.42 (  0.43)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.681 (0.686)	test_acc   0.48 (  0.44)	test_minacc   0.50 (  0.51)	test_majacc   0.47 (  0.43)	Loss_d 0.681 (0.686)	test_acc_d   0.48 (  0.44)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.47 (  0.43)	test_corr_d   0.15 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.04 (  0.04)
Overall Timing[ 15/  1]	epoch_time 0.0444 (0.0466)	validation_time 0.0004 (0.0008)	train_time 0.0440 (0.0457)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.44100000375509263, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 28.01it/s] 62%|######1   | 16/26 [00:00<00:00, 26.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.82it/s] 88%|########8 | 23/26 [00:00<00:00, 28.12it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.47 (  0.42)	train_minacc   0.47 (  0.54)	train_majacc   0.47 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3916 (6.3938)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 27%|##6       | 7/26 [00:00<00:00, 34.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.97it/s] 46%|####6     | 12/26 [00:00<00:00, 39.73it/s] 65%|######5   | 17/26 [00:00<00:00, 38.67it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.67it/s] 85%|########4 | 22/26 [00:00<00:00, 41.41it/s]100%|##########| 26/26 [00:00<00:00, 36.19it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.40 (  0.40)	test_minacc   0.55 (  0.55)	test_majacc   0.37 (  0.37)	Loss_d 0.684 (0.684)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.41 (  0.44)	test_minacc   0.43 (  0.55)	test_majacc   0.40 (  0.42)	Loss_d 0.686 (0.686)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.43 (  0.55)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.687 (0.687)	test_acc   0.44 (  0.44)	test_minacc   0.62 (  0.53)	test_majacc   0.41 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.62 (  0.53)	test_majacc_d   0.41 (  0.43)	test_corr_d   0.11 (  0.10)
Test: [  26/  26]	Loss 0.682 (0.686)	test_acc   0.46 (  0.44)	test_minacc   0.47 (  0.52)	test_majacc   0.46 (  0.43)	Loss_d 0.682 (0.686)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.14 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.03)
Overall Timing[ 16/  1]	epoch_time 0.0422 (0.0464)	validation_time 0.0006 (0.0008)	train_time 0.0416 (0.0454)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4405000039041042, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.53it/s] 19%|#9        | 5/26 [00:00<00:01, 16.43it/s] 35%|###4      | 9/26 [00:00<00:00, 22.20it/s] 50%|#####     | 13/26 [00:00<00:00, 25.25it/s] 65%|######5   | 17/26 [00:00<00:00, 27.05it/s] 81%|########  | 21/26 [00:00<00:00, 28.10it/s] 96%|#########6| 25/26 [00:01<00:00, 28.63it/s]100%|##########| 26/26 [00:01<00:00, 23.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.47 (  0.41)	train_minacc   0.50 (  0.55)	train_majacc   0.47 (  0.39)	train_corr   0.00 (  0.00)	l1 6.3897 (6.3919)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 23%|##3       | 6/26 [00:00<00:00, 23.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.38it/s] 42%|####2     | 11/26 [00:00<00:00, 32.52it/s] 62%|######1   | 16/26 [00:00<00:00, 37.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.94it/s] 81%|########  | 21/26 [00:00<00:00, 37.48it/s]100%|##########| 26/26 [00:00<00:00, 32.24it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.37 (  0.37)	Loss_d 0.684 (0.684)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.39 (  0.43)	test_minacc   0.45 (  0.55)	test_majacc   0.38 (  0.41)	Loss_d 0.686 (0.686)	test_acc_d   0.39 (  0.43)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.38 (  0.41)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.687 (0.687)	test_acc   0.44 (  0.44)	test_minacc   0.64 (  0.53)	test_majacc   0.41 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.11 (  0.09)
Test: [  26/  26]	Loss 0.683 (0.687)	test_acc   0.46 (  0.44)	test_minacc   0.50 (  0.52)	test_majacc   0.45 (  0.42)	Loss_d 0.683 (0.687)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.13 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.91it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Overall Timing[ 17/  1]	epoch_time 0.0443 (0.0463)	validation_time 0.0004 (0.0008)	train_time 0.0438 (0.0453)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4352000040113926, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.19it/s] 12%|#1        | 3/26 [00:00<00:01, 13.89it/s] 23%|##3       | 6/26 [00:00<00:00, 20.25it/s] 35%|###4      | 9/26 [00:00<00:00, 23.30it/s] 50%|#####     | 13/26 [00:00<00:00, 26.05it/s] 65%|######5   | 17/26 [00:00<00:00, 27.42it/s] 81%|########  | 21/26 [00:00<00:00, 28.23it/s] 92%|#########2| 24/26 [00:00<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 24.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.47 (  0.40)	train_minacc   0.56 (  0.55)	train_majacc   0.45 (  0.38)	train_corr   0.00 (  0.00)	l1 6.3882 (6.3903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 29.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.69it/s] 42%|####2     | 11/26 [00:00<00:00, 36.29it/s] 62%|######1   | 16/26 [00:00<00:00, 40.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.42it/s] 81%|########  | 21/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 41.25it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.38 (  0.38)	test_minacc   0.56 (  0.56)	test_majacc   0.35 (  0.35)	Loss_d 0.685 (0.685)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.686 (0.687)	test_acc   0.38 (  0.42)	test_minacc   0.48 (  0.58)	test_majacc   0.36 (  0.40)	Loss_d 0.686 (0.687)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.48 (  0.58)	test_majacc_d   0.36 (  0.40)	test_corr_d   0.11 (  0.10)
Test: [  20/  26]	Loss 0.688 (0.687)	test_acc   0.41 (  0.43)	test_minacc   0.64 (  0.56)	test_majacc   0.38 (  0.41)	Loss_d 0.688 (0.687)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.38 (  0.41)	test_corr_d   0.10 (  0.09)
Test: [  26/  26]	Loss 0.684 (0.687)	test_acc   0.47 (  0.43)	test_minacc   0.56 (  0.55)	test_majacc   0.45 (  0.41)	Loss_d 0.684 (0.687)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.56 (  0.55)	test_majacc_d   0.45 (  0.41)	test_corr_d   0.12 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.85it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.03)
Overall Timing[ 18/  1]	epoch_time 0.0456 (0.0462)	validation_time 0.0003 (0.0008)	train_time 0.0453 (0.0453)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4278000048696995, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 15%|#5        | 4/26 [00:00<00:01, 15.73it/s] 27%|##6       | 7/26 [00:00<00:00, 20.83it/s] 38%|###8      | 10/26 [00:00<00:00, 23.92it/s] 50%|#####     | 13/26 [00:00<00:00, 25.81it/s] 62%|######1   | 16/26 [00:00<00:00, 26.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.60it/s] 88%|########8 | 23/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 23.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.44 (  0.39)	train_minacc   0.61 (  0.56)	train_majacc   0.41 (  0.36)	train_corr   0.00 (  0.00)	l1 6.3872 (6.3890)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 23%|##3       | 6/26 [00:00<00:00, 24.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.13it/s] 42%|####2     | 11/26 [00:00<00:00, 31.64it/s] 62%|######1   | 16/26 [00:00<00:00, 37.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.45it/s] 81%|########  | 21/26 [00:00<00:00, 37.50it/s]100%|##########| 26/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 32.29it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.38 (  0.38)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.686 (0.686)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.687 (0.687)	test_acc   0.37 (  0.42)	test_minacc   0.50 (  0.59)	test_majacc   0.35 (  0.39)	Loss_d 0.687 (0.687)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.35 (  0.39)	test_corr_d   0.10 (  0.09)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.41 (  0.42)	test_minacc   0.71 (  0.57)	test_majacc   0.36 (  0.40)	Loss_d 0.688 (0.688)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.71 (  0.57)	test_majacc_d   0.36 (  0.40)	test_corr_d   0.10 (  0.09)
Test: [  26/  26]	Loss 0.686 (0.688)	test_acc   0.44 (  0.42)	test_minacc   0.64 (  0.56)	test_majacc   0.41 (  0.39)	Loss_d 0.686 (0.688)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.12 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.35it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Overall Timing[ 19/  1]	epoch_time 0.0424 (0.0460)	validation_time 0.0004 (0.0007)	train_time 0.0419 (0.0452)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.41960000538825987, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 15%|#5        | 4/26 [00:00<00:01, 20.47it/s] 27%|##6       | 7/26 [00:00<00:00, 23.92it/s] 38%|###8      | 10/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 27.05it/s] 65%|######5   | 17/26 [00:00<00:00, 28.17it/s] 81%|########  | 21/26 [00:00<00:00, 29.27it/s] 96%|#########6| 25/26 [00:00<00:00, 29.74it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.40 (  0.38)	train_minacc   0.61 (  0.55)	train_majacc   0.36 (  0.36)	train_corr   0.00 (  0.00)	l1 6.3862 (6.3879)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 38%|###8      | 10/26 [00:00<00:00, 28.40it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.79it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.79it/s] 96%|#########6| 25/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 31.53it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.38 (  0.38)	test_minacc   0.61 (  0.61)	test_majacc   0.34 (  0.34)	Loss_d 0.686 (0.686)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.687 (0.688)	test_acc   0.35 (  0.41)	test_minacc   0.52 (  0.59)	test_majacc   0.32 (  0.38)	Loss_d 0.687 (0.688)	test_acc_d   0.35 (  0.41)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.32 (  0.38)	test_corr_d   0.10 (  0.08)
Test: [  20/  26]	Loss 0.689 (0.688)	test_acc   0.40 (  0.41)	test_minacc   0.75 (  0.58)	test_majacc   0.34 (  0.38)	Loss_d 0.689 (0.688)	test_acc_d   0.40 (  0.41)	test_minacc_d   0.75 (  0.58)	test_majacc_d   0.34 (  0.38)	test_corr_d   0.09 (  0.08)
Test: [  26/  26]	Loss 0.687 (0.688)	test_acc   0.40 (  0.41)	test_minacc   0.61 (  0.57)	test_majacc   0.37 (  0.38)	Loss_d 0.687 (0.688)	test_acc_d   0.40 (  0.41)	test_minacc_d   0.61 (  0.57)	test_majacc_d   0.37 (  0.38)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Overall Timing[ 20/  1]	epoch_time 0.0423 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0419 (0.0450)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.40790000569820406, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 15%|#5        | 4/26 [00:00<00:01, 17.00it/s] 31%|###       | 8/26 [00:00<00:00, 23.41it/s] 46%|####6     | 12/26 [00:00<00:00, 26.94it/s] 62%|######1   | 16/26 [00:00<00:00, 29.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.40it/s] 88%|########8 | 23/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:01<00:00, 25.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.38 (  0.38)	train_minacc   0.50 (  0.55)	train_majacc   0.36 (  0.35)	train_corr   0.00 (  0.00)	l1 6.3855 (6.3870)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.09it/s] 27%|##6       | 7/26 [00:00<00:00, 34.26it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.26it/s] 46%|####6     | 12/26 [00:00<00:00, 39.75it/s] 65%|######5   | 17/26 [00:00<00:00, 42.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.55it/s] 85%|########4 | 22/26 [00:00<00:00, 42.91it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.38 (  0.38)	test_minacc   0.64 (  0.64)	test_majacc   0.33 (  0.33)	Loss_d 0.687 (0.687)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.33 (  0.33)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.688 (0.689)	test_acc   0.37 (  0.41)	test_minacc   0.53 (  0.60)	test_majacc   0.34 (  0.37)	Loss_d 0.688 (0.689)	test_acc_d   0.37 (  0.41)	test_minacc_d   0.53 (  0.60)	test_majacc_d   0.34 (  0.37)	test_corr_d   0.09 (  0.08)
Test: [  20/  26]	Loss 0.690 (0.689)	test_acc   0.37 (  0.41)	test_minacc   0.69 (  0.58)	test_majacc   0.32 (  0.37)	Loss_d 0.690 (0.689)	test_acc_d   0.37 (  0.41)	test_minacc_d   0.69 (  0.58)	test_majacc_d   0.32 (  0.37)	test_corr_d   0.08 (  0.07)
Test: [  26/  26]	Loss 0.688 (0.689)	test_acc   0.38 (  0.40)	test_minacc   0.50 (  0.57)	test_majacc   0.36 (  0.37)	Loss_d 0.688 (0.689)	test_acc_d   0.38 (  0.40)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.36 (  0.37)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.02 (  0.02)
Overall Timing[ 21/  1]	epoch_time 0.0468 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0463 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.40060000616312025, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 15%|#5        | 4/26 [00:00<00:01, 18.66it/s] 27%|##6       | 7/26 [00:00<00:00, 22.06it/s] 38%|###8      | 10/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 26.26it/s] 65%|######5   | 17/26 [00:00<00:00, 27.77it/s] 81%|########  | 21/26 [00:00<00:00, 29.06it/s] 96%|#########6| 25/26 [00:00<00:00, 29.81it/s]100%|##########| 26/26 [00:01<00:00, 25.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.38 (  0.38)	train_minacc   0.50 (  0.56)	train_majacc   0.36 (  0.35)	train_corr   0.00 (  0.00)	l1 6.3849 (6.3861)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 23%|##3       | 6/26 [00:00<00:00, 26.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.03it/s] 42%|####2     | 11/26 [00:00<00:00, 34.01it/s] 62%|######1   | 16/26 [00:00<00:00, 38.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.36it/s] 81%|########  | 21/26 [00:00<00:00, 38.31it/s]100%|##########| 26/26 [00:00<00:00, 33.93it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.37 (  0.37)	test_minacc   0.62 (  0.62)	test_majacc   0.31 (  0.31)	Loss_d 0.688 (0.688)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.31 (  0.31)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.38 (  0.41)	test_minacc   0.53 (  0.60)	test_majacc   0.35 (  0.38)	Loss_d 0.689 (0.690)	test_acc_d   0.38 (  0.41)	test_minacc_d   0.53 (  0.60)	test_majacc_d   0.35 (  0.38)	test_corr_d   0.09 (  0.07)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.39 (  0.42)	test_minacc   0.71 (  0.59)	test_majacc   0.34 (  0.39)	Loss_d 0.691 (0.690)	test_acc_d   0.39 (  0.42)	test_minacc_d   0.71 (  0.59)	test_majacc_d   0.34 (  0.39)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.37 (  0.41)	test_minacc   0.50 (  0.58)	test_majacc   0.35 (  0.38)	Loss_d 0.689 (0.690)	test_acc_d   0.37 (  0.41)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.35 (  0.38)	test_corr_d   0.08 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.71it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Overall Timing[ 22/  1]	epoch_time 0.0450 (0.0459)	validation_time 0.0007 (0.0007)	train_time 0.0443 (0.0450)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.41190000528097154, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.15it/s] 15%|#5        | 4/26 [00:00<00:01, 13.54it/s] 27%|##6       | 7/26 [00:00<00:01, 18.85it/s] 42%|####2     | 11/26 [00:00<00:00, 23.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.12it/s] 69%|######9   | 18/26 [00:00<00:00, 27.08it/s] 85%|########4 | 22/26 [00:00<00:00, 28.48it/s]100%|##########| 26/26 [00:01<00:00, 29.42it/s]100%|##########| 26/26 [00:01<00:00, 23.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.385223388671875
set z to 6.065962219238281
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.38 (  0.39)	train_minacc   0.56 (  0.56)	train_majacc   0.35 (  0.37)	train_corr   0.00 (  0.00)	l1 6.3846 (6.3855)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 23%|##3       | 6/26 [00:00<00:00, 24.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.86it/s] 42%|####2     | 11/26 [00:00<00:00, 33.13it/s] 62%|######1   | 16/26 [00:00<00:00, 36.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.20it/s] 81%|########  | 21/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 41.53it/s]100%|##########| 26/26 [00:00<00:00, 32.62it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.36 (  0.36)	test_minacc   0.62 (  0.62)	test_majacc   0.31 (  0.31)	Loss_d 0.690 (0.690)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.31 (  0.31)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.38 (  0.42)	test_minacc   0.48 (  0.60)	test_majacc   0.36 (  0.39)	Loss_d 0.690 (0.690)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.48 (  0.60)	test_majacc_d   0.36 (  0.39)	test_corr_d   0.07 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.41 (  0.43)	test_minacc   0.67 (  0.58)	test_majacc   0.36 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.36 (  0.40)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.37 (  0.42)	test_minacc   0.50 (  0.57)	test_majacc   0.35 (  0.39)	Loss_d 0.691 (0.691)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.35 (  0.39)	test_corr_d   0.07 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 (  0.02)
Overall Timing[ 23/  1]	epoch_time 0.0496 (0.0460)	validation_time 0.0004 (0.0007)	train_time 0.0492 (0.0452)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.41990000596642496, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.90it/s] 19%|#9        | 5/26 [00:00<00:01, 15.04it/s] 35%|###4      | 9/26 [00:00<00:00, 20.95it/s] 50%|#####     | 13/26 [00:00<00:00, 24.22it/s] 65%|######5   | 17/26 [00:00<00:00, 26.13it/s] 81%|########  | 21/26 [00:00<00:00, 27.37it/s] 92%|#########2| 24/26 [00:01<00:00, 28.05it/s]100%|##########| 26/26 [00:01<00:00, 22.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.38 (  0.41)	train_minacc   0.50 (  0.56)	train_majacc   0.36 (  0.39)	train_corr   0.00 (  0.00)	l1 6.3847 (6.3853)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 23%|##3       | 6/26 [00:00<00:00, 22.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.72it/s] 42%|####2     | 11/26 [00:00<00:00, 31.57it/s] 62%|######1   | 16/26 [00:00<00:00, 37.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.68it/s] 81%|########  | 21/26 [00:00<00:00, 38.32it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 31.67it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.37 (  0.37)	test_minacc   0.59 (  0.59)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.32 (  0.32)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.41 (  0.44)	test_minacc   0.50 (  0.57)	test_majacc   0.39 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.39 (  0.41)	test_corr_d   0.06 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.65 (  0.57)	test_majacc   0.41 (  0.43)	Loss_d 0.692 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.41 (  0.43)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.38 (  0.44)	test_minacc   0.50 (  0.56)	test_majacc   0.36 (  0.42)	Loss_d 0.692 (0.691)	test_acc_d   0.38 (  0.44)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.36 (  0.42)	test_corr_d   0.05 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.21it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.03)
Overall Timing[ 24/  1]	epoch_time 0.0453 (0.0460)	validation_time 0.0004 (0.0007)	train_time 0.0449 (0.0452)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.44160000455379483, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.08it/s] 19%|#9        | 5/26 [00:00<00:01, 15.40it/s] 35%|###4      | 9/26 [00:00<00:00, 21.04it/s] 50%|#####     | 13/26 [00:00<00:00, 24.61it/s] 65%|######5   | 17/26 [00:00<00:00, 26.34it/s] 81%|########  | 21/26 [00:00<00:00, 27.85it/s] 96%|#########6| 25/26 [00:01<00:00, 29.36it/s]100%|##########| 26/26 [00:01<00:00, 23.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.38 (  0.43)	train_minacc   0.47 (  0.56)	train_majacc   0.36 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3849 (6.3853)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.05it/s] 12%|#1        | 3/26 [00:00<00:02,  9.85it/s] 31%|###       | 8/26 [00:00<00:00, 23.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.34it/s] 50%|#####     | 13/26 [00:00<00:00, 30.99it/s] 69%|######9   | 18/26 [00:00<00:00, 36.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.17it/s] 88%|########8 | 23/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.37 (  0.37)	test_minacc   0.55 (  0.55)	test_majacc   0.34 (  0.34)	Loss_d 0.692 (0.692)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.46)	test_minacc   0.50 (  0.54)	test_majacc   0.43 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.43 (  0.44)	test_corr_d   0.05 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.45 (  0.47)	test_minacc   0.58 (  0.54)	test_majacc   0.42 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.42 (  0.45)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.38 (  0.46)	test_minacc   0.44 (  0.53)	test_majacc   0.36 (  0.45)	Loss_d 0.693 (0.692)	test_acc_d   0.38 (  0.46)	test_minacc_d   0.44 (  0.53)	test_majacc_d   0.36 (  0.45)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[ 25/  1]	epoch_time 0.0463 (0.0460)	validation_time 0.0003 (0.0007)	train_time 0.0460 (0.0452)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4598000096082687, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s]  8%|7         | 2/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:01, 16.25it/s] 31%|###       | 8/26 [00:00<00:00, 21.13it/s] 42%|####2     | 11/26 [00:00<00:00, 23.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.86it/s] 65%|######5   | 17/26 [00:00<00:00, 25.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.24it/s] 88%|########8 | 23/26 [00:01<00:00, 27.07it/s]100%|##########| 26/26 [00:01<00:00, 22.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.40 (  0.45)	train_minacc   0.42 (  0.55)	train_majacc   0.40 (  0.44)	train_corr   0.00 (  0.00)	l1 6.3849 (6.3853)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.96it/s] 23%|##3       | 6/26 [00:00<00:00, 32.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.95it/s] 42%|####2     | 11/26 [00:00<00:00, 39.71it/s] 62%|######1   | 16/26 [00:00<00:00, 41.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.62it/s] 81%|########  | 21/26 [00:00<00:00, 42.61it/s]100%|##########| 26/26 [00:00<00:00, 44.86it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.38 (  0.38)	test_minacc   0.52 (  0.52)	test_majacc   0.35 (  0.35)	Loss_d 0.692 (0.692)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.47)	test_minacc   0.50 (  0.53)	test_majacc   0.45 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.48)	test_minacc   0.53 (  0.52)	test_majacc   0.43 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.43 (  0.47)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.41 (  0.48)	test_minacc   0.42 (  0.51)	test_majacc   0.41 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.41 (  0.48)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.41 (  0.47)	test_corr_d   0.02 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Overall Timing[ 26/  1]	epoch_time 0.0426 (0.0459)	validation_time 0.0005 (0.0007)	train_time 0.0421 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.47650000646710394, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 15%|#5        | 4/26 [00:00<00:01, 16.94it/s] 27%|##6       | 7/26 [00:00<00:00, 21.57it/s] 38%|###8      | 10/26 [00:00<00:00, 22.31it/s] 50%|#####     | 13/26 [00:00<00:00, 24.62it/s] 65%|######5   | 17/26 [00:00<00:00, 26.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.79it/s] 92%|#########2| 24/26 [00:00<00:00, 28.00it/s]100%|##########| 26/26 [00:01<00:00, 23.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.40 (  0.47)	train_minacc   0.47 (  0.54)	train_majacc   0.39 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3845 (6.3850)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 23%|##3       | 6/26 [00:00<00:00, 25.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.89it/s] 42%|####2     | 11/26 [00:00<00:00, 34.07it/s] 62%|######1   | 16/26 [00:00<00:00, 39.41it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.41it/s] 81%|########  | 21/26 [00:00<00:00, 39.66it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.36 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.48)	test_minacc   0.48 (  0.52)	test_majacc   0.45 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.56 (  0.53)	test_majacc   0.45 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.45 (  0.49)	test_corr_d   0.02 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.49)	test_minacc   0.44 (  0.52)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.49)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.01 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Overall Timing[ 27/  1]	epoch_time 0.0455 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0451 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.48910000824928285, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 15%|#5        | 4/26 [00:00<00:01, 17.47it/s] 27%|##6       | 7/26 [00:00<00:00, 22.16it/s] 38%|###8      | 10/26 [00:00<00:00, 24.53it/s] 50%|#####     | 13/26 [00:00<00:00, 25.61it/s] 62%|######1   | 16/26 [00:00<00:00, 26.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.24it/s] 88%|########8 | 23/26 [00:00<00:00, 27.98it/s]100%|##########| 26/26 [00:01<00:00, 24.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.43 (  0.48)	train_minacc   0.53 (  0.51)	train_majacc   0.41 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3840 (6.3845)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 27%|##6       | 7/26 [00:00<00:00, 25.23it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.23it/s] 46%|####6     | 12/26 [00:00<00:00, 32.96it/s] 65%|######5   | 17/26 [00:00<00:00, 34.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.92it/s] 88%|########8 | 23/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.39)	test_minacc   0.53 (  0.53)	test_majacc   0.36 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.48 (  0.53)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.03 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.49)	test_minacc   0.50 (  0.53)	test_majacc   0.41 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.49)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.00 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.68it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.08)
Overall Timing[ 28/  1]	epoch_time 0.0444 (0.0458)	validation_time 0.0004 (0.0007)	train_time 0.0439 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4907000091969967, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.10it/s] 15%|#5        | 4/26 [00:00<00:01, 11.25it/s] 27%|##6       | 7/26 [00:00<00:01, 16.87it/s] 38%|###8      | 10/26 [00:00<00:00, 20.48it/s] 50%|#####     | 13/26 [00:00<00:00, 22.88it/s] 65%|######5   | 17/26 [00:00<00:00, 25.64it/s] 81%|########  | 21/26 [00:01<00:00, 27.15it/s] 96%|#########6| 25/26 [00:01<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 21.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.50)	train_acc   0.43 (  0.48)	train_minacc   0.53 (  0.51)	train_majacc   0.41 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3835 (6.3840)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.05it/s] 27%|##6       | 7/26 [00:00<00:00, 33.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.44it/s] 46%|####6     | 12/26 [00:00<00:00, 39.06it/s] 65%|######5   | 17/26 [00:00<00:00, 40.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.50it/s] 85%|########4 | 22/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 36.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.48 (  0.53)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Overall Timing[ 29/  1]	epoch_time 0.0458 (0.0458)	validation_time 0.0003 (0.0006)	train_time 0.0455 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.49300001031160356, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 15%|#5        | 4/26 [00:00<00:01, 13.08it/s] 23%|##3       | 6/26 [00:00<00:01, 14.79it/s] 38%|###8      | 10/26 [00:00<00:00, 20.90it/s] 50%|#####     | 13/26 [00:00<00:00, 23.55it/s] 65%|######5   | 17/26 [00:00<00:00, 26.33it/s] 81%|########  | 21/26 [00:00<00:00, 29.44it/s] 96%|#########6| 25/26 [00:01<00:00, 30.47it/s]100%|##########| 26/26 [00:01<00:00, 23.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.43 (  0.48)	train_minacc   0.53 (  0.51)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3831 (6.3835)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 23%|##3       | 6/26 [00:00<00:00, 26.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.40it/s] 42%|####2     | 11/26 [00:00<00:00, 32.61it/s] 65%|######5   | 17/26 [00:00<00:00, 37.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.17it/s] 85%|########4 | 22/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 33.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.48 (  0.54)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.51 (  0.54)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.50 (  0.53)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.42 (  0.49)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 30/  1]	epoch_time 0.0475 (0.0459)	validation_time 0.0004 (0.0006)	train_time 0.0471 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4945000091791153, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:01, 20.06it/s] 35%|###4      | 9/26 [00:00<00:00, 24.72it/s] 50%|#####     | 13/26 [00:00<00:00, 27.12it/s] 65%|######5   | 17/26 [00:00<00:00, 28.76it/s] 81%|########  | 21/26 [00:00<00:00, 29.73it/s] 96%|#########6| 25/26 [00:00<00:00, 30.36it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.49)	train_minacc   0.50 (  0.51)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3827 (6.3831)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.43it/s] 31%|###       | 8/26 [00:00<00:00, 41.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.34it/s] 50%|#####     | 13/26 [00:00<00:00, 43.71it/s] 69%|######9   | 18/26 [00:00<00:00, 40.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.14it/s] 88%|########8 | 23/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.45 (  0.53)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.45 (  0.53)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.50)	test_minacc   0.50 (  0.53)	test_majacc   0.41 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.50)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.41 (  0.49)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.84it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Overall Timing[ 31/  1]	epoch_time 0.0426 (0.0458)	validation_time 0.0003 (0.0006)	train_time 0.0422 (0.0451)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.49520001125335694, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.16it/s] 19%|#9        | 5/26 [00:00<00:01, 15.50it/s] 35%|###4      | 9/26 [00:00<00:00, 22.39it/s] 50%|#####     | 13/26 [00:00<00:00, 26.96it/s] 65%|######5   | 17/26 [00:00<00:00, 29.31it/s] 81%|########  | 21/26 [00:00<00:00, 30.58it/s] 96%|#########6| 25/26 [00:00<00:00, 31.05it/s]100%|##########| 26/26 [00:01<00:00, 24.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.49)	train_minacc   0.50 (  0.50)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3824 (6.3827)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 15%|#5        | 4/26 [00:00<00:01, 16.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.92it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.92it/s] 96%|#########6| 25/26 [00:00<00:00, 41.86it/s]100%|##########| 26/26 [00:00<00:00, 32.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.53 (  0.53)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.42 (  0.52)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.44 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.50 (  0.52)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Overall Timing[ 32/  1]	epoch_time 0.0414 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0449)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4947000065147877, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 12%|#1        | 3/26 [00:00<00:02,  9.60it/s] 27%|##6       | 7/26 [00:00<00:01, 17.87it/s] 42%|####2     | 11/26 [00:00<00:00, 22.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.24it/s] 69%|######9   | 18/26 [00:00<00:00, 26.06it/s] 85%|########4 | 22/26 [00:00<00:00, 27.67it/s]100%|##########| 26/26 [00:01<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 22.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.50 (  0.50)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3821 (6.3824)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.04it/s] 27%|##6       | 7/26 [00:00<00:00, 28.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.59it/s] 46%|####6     | 12/26 [00:00<00:00, 35.92it/s] 65%|######5   | 17/26 [00:00<00:00, 39.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.37it/s] 85%|########4 | 22/26 [00:00<00:00, 38.97it/s]100%|##########| 26/26 [00:00<00:00, 35.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.53 (  0.53)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.42 (  0.52)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.40 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.50 (  0.52)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Overall Timing[ 33/  1]	epoch_time 0.0423 (0.0455)	validation_time 0.0003 (0.0006)	train_time 0.0419 (0.0448)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4969000102877617, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 12%|#1        | 3/26 [00:00<00:01, 11.55it/s] 27%|##6       | 7/26 [00:00<00:00, 19.86it/s] 42%|####2     | 11/26 [00:00<00:00, 23.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.58it/s] 85%|########4 | 22/26 [00:00<00:00, 28.20it/s] 96%|#########6| 25/26 [00:01<00:00, 28.64it/s]100%|##########| 26/26 [00:01<00:00, 23.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.47 (  0.49)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3819 (6.3821)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 23%|##3       | 6/26 [00:00<00:00, 32.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.05it/s] 42%|####2     | 11/26 [00:00<00:00, 38.61it/s] 62%|######1   | 16/26 [00:00<00:00, 42.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.05it/s] 81%|########  | 21/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 43.08it/s]100%|##########| 26/26 [00:00<00:00, 36.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.42 (  0.51)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.40 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.59 (  0.59)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.03 (  0.03)
Overall Timing[ 34/  1]	epoch_time 0.0456 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0452 (0.0449)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.49630000546574593, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 19%|#9        | 5/26 [00:00<00:01, 16.26it/s] 35%|###4      | 9/26 [00:00<00:00, 21.41it/s] 46%|####6     | 12/26 [00:00<00:00, 23.68it/s] 62%|######1   | 16/26 [00:00<00:00, 26.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.15it/s] 88%|########8 | 23/26 [00:00<00:00, 28.42it/s]100%|##########| 26/26 [00:01<00:00, 23.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.47 (  0.49)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3817 (6.3818)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.62it/s] 31%|###       | 8/26 [00:00<00:00, 37.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.48it/s] 50%|#####     | 13/26 [00:00<00:00, 39.82it/s] 69%|######9   | 18/26 [00:00<00:00, 40.28it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.28it/s] 88%|########8 | 23/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.53 (  0.53)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.38 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.04 (  0.04)
Overall Timing[ 35/  1]	epoch_time 0.0468 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0464 (0.0449)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.496200007379055, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.28it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 46%|####6     | 12/26 [00:00<00:00, 27.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.06it/s] 69%|######9   | 18/26 [00:00<00:00, 28.63it/s] 81%|########  | 21/26 [00:00<00:00, 28.77it/s] 96%|#########6| 25/26 [00:00<00:00, 29.54it/s]100%|##########| 26/26 [00:00<00:00, 26.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.44 (  0.49)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3815 (6.3816)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.42it/s] 46%|####6     | 12/26 [00:00<00:00, 39.14it/s] 65%|######5   | 17/26 [00:00<00:00, 40.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.94it/s] 85%|########4 | 22/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 36.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.38 (  0.50)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.38 (  0.50)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.03 (  0.03)
Overall Timing[ 36/  1]	epoch_time 0.0445 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0449)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4935000079572201, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 15%|#5        | 4/26 [00:00<00:01, 18.58it/s] 27%|##6       | 7/26 [00:00<00:00, 22.58it/s] 42%|####2     | 11/26 [00:00<00:00, 26.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.74it/s] 88%|########8 | 23/26 [00:00<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.50)	train_minacc   0.44 (  0.49)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3813 (6.3814)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 27%|##6       | 7/26 [00:00<00:00, 29.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.49it/s] 50%|#####     | 13/26 [00:00<00:00, 37.66it/s] 69%|######9   | 18/26 [00:00<00:00, 39.37it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.37it/s] 88%|########8 | 23/26 [00:00<00:00, 41.53it/s]100%|##########| 26/26 [00:00<00:00, 34.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.39)	test_minacc   0.52 (  0.52)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.48 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.38 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.38 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.45 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Overall Timing[ 37/  1]	epoch_time 0.0454 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0449)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4951000065803528, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.84it/s] 23%|##3       | 6/26 [00:00<00:00, 24.83it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.28it/s] 65%|######5   | 17/26 [00:00<00:00, 29.52it/s] 81%|########  | 21/26 [00:00<00:00, 29.64it/s] 96%|#########6| 25/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.45 (  0.50)	train_minacc   0.53 (  0.48)	train_majacc   0.43 (  0.50)	train_corr   0.00 (  0.00)	l1 6.3810 (6.3812)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.46it/s] 42%|####2     | 11/26 [00:00<00:00, 35.56it/s] 62%|######1   | 16/26 [00:00<00:00, 39.88it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.88it/s] 81%|########  | 21/26 [00:00<00:00, 38.73it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.38 (  0.38)	test_minacc   0.53 (  0.53)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.52 (  0.54)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.40 (  0.54)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.00 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.50 (  0.54)	test_majacc   0.43 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 38/  1]	epoch_time 0.0426 (0.0455)	validation_time 0.0003 (0.0006)	train_time 0.0423 (0.0448)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.48740000852942467, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 27.87it/s] 65%|######5   | 17/26 [00:00<00:00, 29.00it/s] 81%|########  | 21/26 [00:00<00:00, 29.64it/s] 96%|#########6| 25/26 [00:00<00:00, 29.71it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.53 (  0.49)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3808 (6.3809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 27%|##6       | 7/26 [00:00<00:00, 30.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.51it/s] 46%|####6     | 12/26 [00:00<00:00, 37.06it/s] 65%|######5   | 17/26 [00:00<00:00, 39.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.59it/s] 85%|########4 | 22/26 [00:00<00:00, 38.39it/s]100%|##########| 26/26 [00:00<00:00, 34.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.37 (  0.37)	test_minacc   0.55 (  0.55)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.53 (  0.56)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.47 (  0.57)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.47 (  0.57)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.02 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.53 (  0.56)	test_majacc   0.42 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.42 (  0.46)	test_corr_d  -0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 39/  1]	epoch_time 0.0440 (0.0454)	validation_time 0.0004 (0.0006)	train_time 0.0435 (0.0448)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.47920000743865965, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 15%|#5        | 4/26 [00:00<00:01, 18.52it/s] 27%|##6       | 7/26 [00:00<00:00, 22.90it/s] 42%|####2     | 11/26 [00:00<00:00, 25.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.29it/s] 88%|########8 | 23/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:01<00:00, 25.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.56 (  0.50)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3805 (6.3806)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.41it/s] 27%|##6       | 7/26 [00:00<00:00, 33.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.71it/s] 65%|######5   | 17/26 [00:00<00:00, 41.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.77it/s] 85%|########4 | 22/26 [00:00<00:00, 41.06it/s]100%|##########| 26/26 [00:00<00:00, 37.42it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.36)	test_minacc   0.55 (  0.55)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.52 (  0.57)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.53 (  0.57)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.04 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.50 (  0.56)	test_majacc   0.43 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.50 (  0.56)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.05 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 40/  1]	epoch_time 0.0423 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0447)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4708000081479549, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.39it/s] 15%|#5        | 4/26 [00:00<00:01, 14.15it/s] 27%|##6       | 7/26 [00:00<00:00, 19.16it/s] 38%|###8      | 10/26 [00:00<00:00, 22.67it/s] 50%|#####     | 13/26 [00:00<00:00, 23.87it/s] 62%|######1   | 16/26 [00:00<00:00, 25.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.71it/s] 85%|########4 | 22/26 [00:00<00:00, 27.54it/s]100%|##########| 26/26 [00:01<00:00, 29.04it/s]100%|##########| 26/26 [00:01<00:00, 22.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.43 (  0.49)	train_minacc   0.56 (  0.51)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3802 (6.3803)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 23%|##3       | 6/26 [00:00<00:01, 18.87it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.87it/s] 42%|####2     | 11/26 [00:00<00:00, 27.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.77it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.77it/s] 85%|########4 | 22/26 [00:00<00:00, 37.30it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.36 (  0.36)	test_minacc   0.58 (  0.58)	test_majacc   0.31 (  0.31)	Loss_d 0.693 (0.693)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.57 (  0.59)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.04 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.49 (  0.59)	test_majacc   0.44 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.49 (  0.59)	test_majacc_d   0.44 (  0.45)	test_corr_d  -0.05 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.53 (  0.59)	test_majacc   0.40 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.40 (  0.45)	test_corr_d  -0.07 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 41/  1]	epoch_time 0.0441 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0436 (0.0447)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4716000031530857, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 15%|#5        | 4/26 [00:00<00:01, 13.89it/s] 27%|##6       | 7/26 [00:00<00:00, 19.42it/s] 38%|###8      | 10/26 [00:00<00:00, 22.89it/s] 50%|#####     | 13/26 [00:00<00:00, 25.13it/s] 65%|######5   | 17/26 [00:00<00:00, 26.82it/s] 81%|########  | 21/26 [00:00<00:00, 28.20it/s] 92%|#########2| 24/26 [00:00<00:00, 28.34it/s]100%|##########| 26/26 [00:01<00:00, 23.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.49)	train_minacc   0.56 (  0.50)	train_majacc   0.40 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3799 (6.3801)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s]  8%|7         | 2/26 [00:00<00:04,  5.35it/s] 27%|##6       | 7/26 [00:00<00:01, 18.58it/s]                                               27%|##6       | 7/26 [00:00<00:01, 18.58it/s] 46%|####6     | 12/26 [00:00<00:00, 27.39it/s] 65%|######5   | 17/26 [00:00<00:00, 33.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.47it/s] 85%|########4 | 22/26 [00:00<00:00, 34.78it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.58 (  0.58)	test_majacc   0.31 (  0.31)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.60 (  0.60)	test_majacc   0.45 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.45 (  0.44)	test_corr_d  -0.05 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.51 (  0.61)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.51 (  0.61)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.56 (  0.60)	test_majacc   0.41 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.41 (  0.45)	test_corr_d  -0.08 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 42/  1]	epoch_time 0.0448 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0447)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4718000082075596, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.25it/s] 15%|#5        | 4/26 [00:00<00:01, 15.28it/s] 31%|###       | 8/26 [00:00<00:00, 22.44it/s] 46%|####6     | 12/26 [00:00<00:00, 25.66it/s] 62%|######1   | 16/26 [00:00<00:00, 27.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.66it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.40 (  0.49)	train_minacc   0.58 (  0.50)	train_majacc   0.37 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3796 (6.3798)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.81it/s] 27%|##6       | 7/26 [00:00<00:00, 34.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.10it/s] 46%|####6     | 12/26 [00:00<00:00, 37.44it/s] 65%|######5   | 17/26 [00:00<00:00, 40.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.43it/s]100%|##########| 26/26 [00:00<00:00, 35.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.62 (  0.62)	test_majacc   0.30 (  0.30)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.62 (  0.63)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.06 ( -0.10)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.53 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.53 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.06 ( -0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.47)	test_minacc   0.58 (  0.61)	test_majacc   0.37 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.47)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.37 (  0.44)	test_corr_d  -0.09 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.39it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 43/  1]	epoch_time 0.0424 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.46770000794529915, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.37it/s] 15%|#5        | 4/26 [00:00<00:01, 11.23it/s] 27%|##6       | 7/26 [00:00<00:01, 16.82it/s] 42%|####2     | 11/26 [00:00<00:00, 21.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.03it/s] 85%|########4 | 22/26 [00:01<00:00, 27.53it/s] 96%|#########6| 25/26 [00:01<00:00, 28.17it/s]100%|##########| 26/26 [00:01<00:00, 21.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.42 (  0.48)	train_minacc   0.61 (  0.51)	train_majacc   0.39 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3793 (6.3794)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.69it/s] 27%|##6       | 7/26 [00:00<00:00, 35.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.27it/s] 46%|####6     | 12/26 [00:00<00:00, 40.57it/s] 65%|######5   | 17/26 [00:00<00:00, 43.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.31it/s] 85%|########4 | 22/26 [00:00<00:00, 42.06it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.59 (  0.59)	test_majacc   0.31 (  0.31)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.62 (  0.62)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.06 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.56 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.06 ( -0.10)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.61 (  0.61)	test_majacc   0.38 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.38 (  0.44)	test_corr_d  -0.09 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.17it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 44/  1]	epoch_time 0.0439 (0.0452)	validation_time 0.0006 (0.0006)	train_time 0.0432 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4672000101804733, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 15%|#5        | 4/26 [00:00<00:01, 18.80it/s] 27%|##6       | 7/26 [00:00<00:00, 23.05it/s] 42%|####2     | 11/26 [00:00<00:00, 26.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.29it/s] 65%|######5   | 17/26 [00:00<00:00, 27.34it/s] 81%|########  | 21/26 [00:00<00:00, 28.53it/s] 96%|#########6| 25/26 [00:00<00:00, 29.34it/s]100%|##########| 26/26 [00:01<00:00, 25.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.42 (  0.48)	train_minacc   0.64 (  0.52)	train_majacc   0.38 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3790 (6.3791)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 23%|##3       | 6/26 [00:00<00:00, 26.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.21it/s] 42%|####2     | 11/26 [00:00<00:00, 34.55it/s] 62%|######1   | 16/26 [00:00<00:00, 39.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.84it/s] 81%|########  | 21/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 33.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.61 (  0.61)	test_majacc   0.30 (  0.30)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.62 (  0.63)	test_majacc   0.42 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.06 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.58 (  0.62)	test_majacc   0.43 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.07 ( -0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.67 (  0.62)	test_majacc   0.38 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.67 (  0.62)	test_majacc_d   0.38 (  0.44)	test_corr_d  -0.09 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 45/  1]	epoch_time 0.0440 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0436 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.4653000070154667, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.40it/s] 35%|###4      | 9/26 [00:00<00:00, 24.91it/s] 46%|####6     | 12/26 [00:00<00:00, 26.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.21it/s] 69%|######9   | 18/26 [00:00<00:00, 26.95it/s] 81%|########  | 21/26 [00:00<00:00, 27.82it/s] 96%|#########6| 25/26 [00:00<00:00, 28.92it/s]100%|##########| 26/26 [00:01<00:00, 24.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.42 (  0.48)	train_minacc   0.67 (  0.52)	train_majacc   0.38 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3787 (6.3788)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.85it/s] 23%|##3       | 6/26 [00:00<00:00, 23.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.14it/s] 42%|####2     | 11/26 [00:00<00:00, 31.52it/s] 62%|######1   | 16/26 [00:00<00:00, 37.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.60it/s] 81%|########  | 21/26 [00:00<00:00, 37.88it/s]100%|##########| 26/26 [00:00<00:00, 40.77it/s]100%|##########| 26/26 [00:00<00:00, 31.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.58 (  0.58)	test_majacc   0.30 (  0.30)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.45)	test_minacc   0.62 (  0.61)	test_majacc   0.41 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.62 (  0.61)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.06 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.56 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.07 ( -0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.46)	test_minacc   0.67 (  0.61)	test_majacc   0.38 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.67 (  0.61)	test_majacc_d   0.38 (  0.43)	test_corr_d  -0.09 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 46/  1]	epoch_time 0.0454 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0450 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.46230000856518744, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.40it/s] 15%|#5        | 4/26 [00:00<00:01, 14.14it/s] 27%|##6       | 7/26 [00:00<00:00, 19.54it/s] 42%|####2     | 11/26 [00:00<00:00, 23.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.22it/s] 88%|########8 | 23/26 [00:00<00:00, 28.44it/s]100%|##########| 26/26 [00:01<00:00, 22.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.41 (  0.48)	train_minacc   0.64 (  0.52)	train_majacc   0.37 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3785 (6.3785)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 23%|##3       | 6/26 [00:00<00:00, 22.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.78it/s] 42%|####2     | 11/26 [00:00<00:00, 30.87it/s] 62%|######1   | 16/26 [00:00<00:00, 35.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.80it/s]100%|##########| 26/26 [00:00<00:00, 41.47it/s]100%|##########| 26/26 [00:00<00:00, 32.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.61 (  0.61)	test_majacc   0.30 (  0.30)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.63 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.63 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.10)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.46)	test_minacc   0.56 (  0.62)	test_majacc   0.43 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.56 (  0.62)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.07 ( -0.11)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.46)	test_minacc   0.64 (  0.62)	test_majacc   0.36 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.46)	test_minacc_d   0.64 (  0.62)	test_majacc_d   0.36 (  0.44)	test_corr_d  -0.10 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.76it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 47/  1]	epoch_time 0.0470 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0466 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.46280000591278075, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 15%|#5        | 4/26 [00:00<00:01, 16.77it/s] 27%|##6       | 7/26 [00:00<00:00, 21.11it/s] 38%|###8      | 10/26 [00:00<00:00, 23.94it/s] 50%|#####     | 13/26 [00:00<00:00, 25.48it/s] 62%|######1   | 16/26 [00:00<00:00, 26.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.30it/s] 88%|########8 | 23/26 [00:00<00:00, 28.55it/s]100%|##########| 26/26 [00:01<00:00, 24.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.43 (  0.48)	train_minacc   0.67 (  0.53)	train_majacc   0.39 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3782 (6.3783)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 27%|##6       | 7/26 [00:00<00:00, 27.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.70it/s] 46%|####6     | 12/26 [00:00<00:00, 35.42it/s] 65%|######5   | 17/26 [00:00<00:00, 36.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.12it/s] 85%|########4 | 22/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.35 (  0.35)	test_minacc   0.58 (  0.58)	test_majacc   0.31 (  0.31)	Loss_d 0.693 (0.693)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.31 (  0.31)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.62 (  0.60)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.62 (  0.60)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.06 ( -0.09)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.58 (  0.61)	test_majacc   0.43 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.06 ( -0.09)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.46)	test_minacc   0.67 (  0.61)	test_majacc   0.39 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.67 (  0.61)	test_majacc_d   0.39 (  0.44)	test_corr_d  -0.08 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 48/  1]	epoch_time 0.0429 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0426 (0.0446)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.46280000641942026, 0.6060000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s]  8%|7         | 2/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 14.50it/s] 31%|###       | 8/26 [00:00<00:00, 19.40it/s] 42%|####2     | 11/26 [00:00<00:00, 22.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.16it/s] 88%|########8 | 23/26 [00:01<00:00, 28.22it/s]100%|##########| 26/26 [00:01<00:00, 22.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.44 (  0.47)	train_minacc   0.64 (  0.52)	train_majacc   0.41 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3780 (6.3781)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 23%|##3       | 6/26 [00:00<00:00, 27.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.06it/s] 42%|####2     | 11/26 [00:00<00:00, 35.28it/s] 62%|######1   | 16/26 [00:00<00:00, 39.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.77it/s] 81%|########  | 21/26 [00:00<00:00, 38.70it/s]100%|##########| 26/26 [00:00<00:00, 41.76it/s]100%|##########| 26/26 [00:00<00:00, 34.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.37 (  0.37)	test_minacc   0.56 (  0.56)	test_majacc   0.33 (  0.33)	Loss_d 0.693 (0.693)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.33 (  0.33)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.62 (  0.59)	test_majacc   0.42 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.42 (  0.43)	test_corr_d  -0.05 ( -0.08)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.55 (  0.59)	test_majacc   0.42 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.05 ( -0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.67 (  0.59)	test_majacc   0.40 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.40 (  0.44)	test_corr_d  -0.08 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 49/  1]	epoch_time 0.0396 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0391 (0.0445)
record: (train_acc, test_acc) (0.6382000164389611, 0.6510000228881836)
last accs (train_acc, test_acc) (0.46400000739097597, 0.6020000576972961)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp85uxh8dy'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_213721-8d296w9k
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8d296w9k
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1193
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5989, 3, 32, 32) (6011, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:33,  1.36s/it] 19%|#9        | 5/26 [00:01<00:04,  4.39it/s] 35%|###4      | 9/26 [00:01<00:02,  8.42it/s] 50%|#####     | 13/26 [00:01<00:01, 12.46it/s] 65%|######5   | 17/26 [00:01<00:00, 16.20it/s] 81%|########  | 21/26 [00:01<00:00, 19.42it/s] 96%|#########6| 25/26 [00:02<00:00, 21.92it/s]100%|##########| 26/26 [00:02<00:00, 10.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.519 (12.958)	train_nll   0.42 (  0.65)	train_penalty   0.05 (  0.50)	weight_norm  10.10 ( 12.31)	train_acc   0.84 (  0.78)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.90)	train_corr   0.00 (  0.00)	l1 6.6344 (7.5439)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.91it/s] 31%|###       | 8/26 [00:00<00:00, 38.60it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.60it/s] 50%|#####     | 13/26 [00:00<00:00, 37.24it/s] 69%|######9   | 18/26 [00:00<00:00, 40.77it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.77it/s] 88%|########8 | 23/26 [00:00<00:00, 42.97it/s]100%|##########| 26/26 [00:00<00:00, 36.51it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.87 (  0.87)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.396)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.433 (0.420)	test_acc   0.85 (  0.84)	test_minacc   0.00 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.433 (0.420)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.00 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.365 (0.415)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.365 (0.415)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.415 (0.418)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.415 (0.418)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.681 (1.681)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.681 (1.681)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.681 (1.681)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.681 (1.681)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0721 (0.0721)	validation_time 0.0068 (0.0068)	train_time 0.0634 (0.0634)
record: (train_acc, test_acc) (0.8439000240564346, 0.11900000274181366)
last accs (train_acc, test_acc) (0.8439000240564346, 0.11900000274181366)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.10it/s] 46%|####6     | 12/26 [00:00<00:00, 27.33it/s] 62%|######1   | 16/26 [00:00<00:00, 28.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.76it/s] 92%|#########2| 24/26 [00:00<00:00, 30.57it/s]100%|##########| 26/26 [00:01<00:00, 13.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.574 (7.690)	train_nll   0.41 (  0.41)	train_penalty   0.02 (  0.06)	weight_norm   5.16 (  7.28)	train_acc   0.85 (  0.85)	train_minacc   0.05 (  0.01)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6472 (6.6777)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.41it/s] 15%|#5        | 4/26 [00:00<00:01, 12.01it/s] 35%|###4      | 9/26 [00:00<00:00, 23.53it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.22it/s] 92%|#########2| 24/26 [00:00<00:00, 35.54it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.87 (  0.87)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.391 (0.391)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.426 (0.410)	test_acc   0.84 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.426 (0.410)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.361 (0.406)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.361 (0.406)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.394 (0.407)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.394 (0.407)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 1.575 (1.575)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.575 (1.575)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.575 (1.575)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.575 (1.575)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0591 (0.0656)	validation_time 0.0004 (0.0036)	train_time 0.0587 (0.0610)
record: (train_acc, test_acc) (0.8478000236153602, 0.1340000033378601)
last accs (train_acc, test_acc) (0.8478000236153602, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.39it/s] 50%|#####     | 13/26 [00:00<00:00, 27.80it/s] 65%|######5   | 17/26 [00:00<00:00, 28.70it/s] 81%|########  | 21/26 [00:00<00:00, 29.58it/s] 96%|#########6| 25/26 [00:00<00:00, 30.20it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.340 (4.276)	train_nll   0.40 (  0.40)	train_penalty   0.02 (  0.05)	weight_norm   2.94 (  3.88)	train_acc   0.84 (  0.85)	train_minacc   0.16 (  0.05)	train_majacc   0.96 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9056 (6.2631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 27%|##6       | 7/26 [00:00<00:00, 33.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.50it/s] 46%|####6     | 12/26 [00:00<00:00, 38.96it/s] 65%|######5   | 17/26 [00:00<00:00, 37.81it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.81it/s] 85%|########4 | 22/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 34.72it/s]
Test: [   0/  26]	Loss 0.398 (0.398)	test_acc   0.85 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.398 (0.398)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.444 (0.411)	test_acc   0.81 (  0.84)	test_minacc   0.15 (  0.15)	test_majacc   0.92 (  0.96)	Loss_d 0.444 (0.411)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.92 (  0.96)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.364 (0.408)	test_acc   0.87 (  0.84)	test_minacc   0.13 (  0.15)	test_majacc   0.97 (  0.96)	Loss_d 0.364 (0.408)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.376 (0.406)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.96)	Loss_d 0.376 (0.406)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.25it/s]
Test: [  0/  1]	Loss 1.561 (1.561)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.561 (1.561)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.561 (1.561)	test_acc   0.19 (  0.19)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.97)	Loss_d 1.561 (1.561)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0439 (0.0584)	validation_time 0.0005 (0.0025)	train_time 0.0435 (0.0552)
record: (train_acc, test_acc) (0.842600020647049, 0.1940000057220459)
last accs (train_acc, test_acc) (0.842600020647049, 0.1940000057220459)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 15%|#5        | 4/26 [00:00<00:01, 16.26it/s] 27%|##6       | 7/26 [00:00<00:00, 20.66it/s] 42%|####2     | 11/26 [00:00<00:00, 24.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.97it/s] 88%|########8 | 23/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 24.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.230 (2.714)	train_nll   0.38 (  0.38)	train_penalty   0.02 (  0.05)	weight_norm   1.85 (  2.33)	train_acc   0.84 (  0.85)	train_minacc   0.08 (  0.07)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2339 (5.4627)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 29.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.44it/s] 92%|#########2| 24/26 [00:00<00:00, 40.34it/s]100%|##########| 26/26 [00:00<00:00, 33.09it/s]
Test: [   0/  26]	Loss 0.382 (0.382)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.13)	test_majacc   0.95 (  0.95)	Loss_d 0.382 (0.382)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.421 (0.394)	test_acc   0.83 (  0.84)	test_minacc   0.22 (  0.21)	test_majacc   0.93 (  0.95)	Loss_d 0.421 (0.394)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.343 (0.392)	test_acc   0.86 (  0.84)	test_minacc   0.23 (  0.21)	test_majacc   0.94 (  0.95)	Loss_d 0.343 (0.392)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.23 (  0.21)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.349 (0.389)	test_acc   0.86 (  0.84)	test_minacc   0.24 (  0.22)	test_majacc   0.97 (  0.95)	Loss_d 0.349 (0.389)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.24 (  0.22)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 1.478 (1.478)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.478 (1.478)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.478 (1.478)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 1.478 (1.478)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0434 (0.0546)	validation_time 0.0004 (0.0020)	train_time 0.0431 (0.0521)
record: (train_acc, test_acc) (0.8400000225901604, 0.23500001430511475)
last accs (train_acc, test_acc) (0.8400000225901604, 0.23500001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 15%|#5        | 4/26 [00:00<00:01, 16.20it/s] 27%|##6       | 7/26 [00:00<00:00, 21.24it/s] 42%|####2     | 11/26 [00:00<00:00, 25.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.14it/s] 88%|########8 | 23/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 24.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.553 (1.864)	train_nll   0.35 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   1.21 (  1.50)	train_acc   0.86 (  0.85)	train_minacc   0.37 (  0.15)	train_majacc   0.95 (  0.97)	train_corr   0.00 (  0.00)	l1 5.3062 (5.1456)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 23%|##3       | 6/26 [00:00<00:00, 28.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.35it/s] 42%|####2     | 11/26 [00:00<00:00, 35.48it/s] 62%|######1   | 16/26 [00:00<00:00, 40.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.18it/s] 81%|########  | 21/26 [00:00<00:00, 37.75it/s]100%|##########| 26/26 [00:00<00:00, 41.12it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.87 (  0.87)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.358 (0.358)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.385 (0.374)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.14)	test_majacc   0.96 (  0.97)	Loss_d 0.385 (0.374)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.14)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.316 (0.372)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.316 (0.372)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.329 (0.371)	test_acc   0.84 (  0.85)	test_minacc   0.03 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.329 (0.371)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.03 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 14.13it/s]
Test: [  0/  1]	Loss 1.692 (1.692)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.692 (1.692)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.692 (1.692)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.692 (1.692)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.84 (  0.84)
Overall Timing[  4/  1]	epoch_time 0.0437 (0.0525)	validation_time 0.0013 (0.0019)	train_time 0.0424 (0.0502)
record: (train_acc, test_acc) (0.8400000225901604, 0.23500001430511475)
last accs (train_acc, test_acc) (0.8503000316023827, 0.2070000171661377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.27it/s] 23%|##3       | 6/26 [00:00<00:00, 24.30it/s] 38%|###8      | 10/26 [00:00<00:00, 27.29it/s] 50%|#####     | 13/26 [00:00<00:00, 27.82it/s] 62%|######1   | 16/26 [00:00<00:00, 28.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.47it/s] 88%|########8 | 23/26 [00:00<00:00, 29.32it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.133 (1.349)	train_nll   0.33 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.81 (  0.99)	train_acc   0.87 (  0.85)	train_minacc   0.32 (  0.15)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 5.7753 (5.3476)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.88it/s] 23%|##3       | 6/26 [00:00<00:01, 19.71it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.71it/s] 42%|####2     | 11/26 [00:00<00:00, 29.29it/s] 62%|######1   | 16/26 [00:00<00:00, 35.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.70it/s] 81%|########  | 21/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 30.92it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.357 (0.357)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.376 (0.373)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.376 (0.373)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.310 (0.367)	test_acc   0.88 (  0.86)	test_minacc   0.11 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.310 (0.367)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.11 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.318 (0.366)	test_acc   0.86 (  0.85)	test_minacc   0.24 (  0.14)	test_majacc   0.97 (  0.98)	Loss_d 0.318 (0.366)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.24 (  0.14)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.95it/s]
Test: [  0/  1]	Loss 1.769 (1.769)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 1.769 (1.769)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.769 (1.769)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 1.769 (1.769)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0395 (0.0503)	validation_time 0.0003 (0.0016)	train_time 0.0391 (0.0483)
record: (train_acc, test_acc) (0.8540000310540199, 0.24500000476837158)
last accs (train_acc, test_acc) (0.8540000310540199, 0.24500000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 19%|#9        | 5/26 [00:00<00:01, 17.52it/s] 35%|###4      | 9/26 [00:00<00:00, 22.72it/s] 46%|####6     | 12/26 [00:00<00:00, 24.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.09it/s] 88%|########8 | 23/26 [00:00<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 24.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.845 (1.019)	train_nll   0.30 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.55 (  0.66)	train_acc   0.88 (  0.85)	train_minacc   0.29 (  0.10)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.7660 (5.9515)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.85it/s] 31%|###       | 8/26 [00:00<00:00, 33.98it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.98it/s] 50%|#####     | 13/26 [00:00<00:00, 39.48it/s] 69%|######9   | 18/26 [00:00<00:00, 42.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.84it/s] 88%|########8 | 23/26 [00:00<00:00, 42.53it/s]100%|##########| 26/26 [00:00<00:00, 38.06it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.84 (  0.84)	test_minacc   0.31 (  0.31)	test_majacc   0.92 (  0.92)	Loss_d 0.367 (0.367)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.371 (0.363)	test_acc   0.83 (  0.84)	test_minacc   0.25 (  0.35)	test_majacc   0.93 (  0.93)	Loss_d 0.371 (0.363)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.25 (  0.35)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.89 (  0.87)
Test: [  20/  26]	Loss 0.298 (0.353)	test_acc   0.88 (  0.85)	test_minacc   0.30 (  0.37)	test_majacc   0.96 (  0.93)	Loss_d 0.298 (0.353)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.30 (  0.37)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.271 (0.347)	test_acc   0.91 (  0.85)	test_minacc   0.55 (  0.39)	test_majacc   0.97 (  0.94)	Loss_d 0.271 (0.347)	test_acc_d   0.91 (  0.85)	test_minacc_d   0.55 (  0.39)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.86 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.32it/s]
Test: [  0/  1]	Loss 1.670 (1.670)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 1.670 (1.670)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.670 (1.670)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 1.670 (1.670)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.59 (  0.59)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0432 (0.0493)	validation_time 0.0004 (0.0014)	train_time 0.0428 (0.0476)
record: (train_acc, test_acc) (0.853500026166439, 0.39100003242492676)
last accs (train_acc, test_acc) (0.853500026166439, 0.39100003242492676)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 12%|#1        | 3/26 [00:00<00:01, 11.51it/s] 19%|#9        | 5/26 [00:00<00:01, 13.85it/s] 35%|###4      | 9/26 [00:00<00:00, 20.63it/s] 50%|#####     | 13/26 [00:00<00:00, 24.39it/s] 65%|######5   | 17/26 [00:00<00:00, 26.61it/s] 81%|########  | 21/26 [00:00<00:00, 28.26it/s] 96%|#########6| 25/26 [00:01<00:00, 29.54it/s]100%|##########| 26/26 [00:01<00:00, 23.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.003 (0.593)	train_nll   0.57 (  0.39)	train_penalty   0.00 (  0.02)	weight_norm   0.45 (  0.46)	train_acc   0.72 (  0.83)	train_minacc   0.71 (  0.30)	train_majacc   0.72 (  0.92)	train_corr   0.00 (  0.00)	l1 7.0812 (7.2429)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 27%|##6       | 7/26 [00:00<00:00, 31.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.95it/s] 46%|####6     | 12/26 [00:00<00:00, 37.66it/s] 65%|######5   | 17/26 [00:00<00:00, 37.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.87it/s] 85%|########4 | 22/26 [00:00<00:00, 40.62it/s]100%|##########| 26/26 [00:00<00:00, 34.39it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.64 (  0.64)	test_minacc   0.58 (  0.58)	test_majacc   0.65 (  0.65)	Loss_d 0.677 (0.677)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.584 (0.630)	test_acc   0.66 (  0.66)	test_minacc   0.51 (  0.62)	test_majacc   0.69 (  0.66)	Loss_d 0.584 (0.630)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.51 (  0.62)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.45 (  0.37)
Test: [  20/  26]	Loss 0.584 (0.621)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.62)	test_majacc   0.66 (  0.66)	Loss_d 0.584 (0.621)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.613 (0.624)	test_acc   0.69 (  0.66)	test_minacc   0.74 (  0.63)	test_majacc   0.68 (  0.66)	Loss_d 0.613 (0.624)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.74 (  0.63)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.38 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.16it/s]
Test: [  0/  1]	Loss 0.757 (0.757)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.66 (  0.66)	Loss_d 0.757 (0.757)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.757 (0.757)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.66 (  0.66)	Loss_d 0.757 (0.757)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.10 ( -0.10)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/183/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0458 (0.0489)	validation_time 0.0003 (0.0013)	train_time 0.0455 (0.0473)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:01, 19.79it/s] 35%|###4      | 9/26 [00:00<00:00, 24.50it/s] 50%|#####     | 13/26 [00:00<00:00, 26.60it/s] 62%|######1   | 16/26 [00:00<00:00, 27.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.77it/s] 88%|########8 | 23/26 [00:00<00:00, 28.77it/s]100%|##########| 26/26 [00:01<00:00, 24.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.61)	train_acc   0.44 (  0.57)	train_minacc   0.42 (  0.60)	train_majacc   0.45 (  0.56)	train_corr   0.00 (  0.00)	l1 6.0513 (6.3827)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 14.09it/s] 31%|###       | 8/26 [00:00<00:00, 27.87it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.64it/s] 92%|#########2| 24/26 [00:00<00:00, 41.09it/s]100%|##########| 26/26 [00:00<00:00, 33.96it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.668 (0.668)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.641 (0.662)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.641 (0.662)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.34 (  0.25)
Test: [  20/  26]	Loss 0.650 (0.659)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.650 (0.659)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.30 (  0.27)
Test: [  26/  26]	Loss 0.666 (0.661)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.666 (0.661)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.24 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.10 ( -0.10)
Overall Timing[  8/  1]	epoch_time 0.0441 (0.0483)	validation_time 0.0004 (0.0012)	train_time 0.0437 (0.0469)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 19%|#9        | 5/26 [00:00<00:01, 17.59it/s] 35%|###4      | 9/26 [00:00<00:00, 23.34it/s] 50%|#####     | 13/26 [00:00<00:00, 26.56it/s] 65%|######5   | 17/26 [00:00<00:00, 28.12it/s] 81%|########  | 21/26 [00:00<00:00, 29.18it/s] 96%|#########6| 25/26 [00:00<00:00, 29.95it/s]100%|##########| 26/26 [00:01<00:00, 24.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 6.0122 (6.0049)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 23%|##3       | 6/26 [00:00<00:00, 27.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.20it/s] 42%|####2     | 11/26 [00:00<00:00, 34.91it/s] 62%|######1   | 16/26 [00:00<00:00, 39.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.42it/s] 81%|########  | 21/26 [00:00<00:00, 38.16it/s]100%|##########| 26/26 [00:00<00:00, 40.94it/s]100%|##########| 26/26 [00:00<00:00, 33.93it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.671 (0.686)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.671 (0.686)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.16 (  0.09)
Test: [  20/  26]	Loss 0.680 (0.684)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.684)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.14 (  0.11)
Test: [  26/  26]	Loss 0.691 (0.685)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.691 (0.685)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.09 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.680 (0.680)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.680 (0.680)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[  9/  1]	epoch_time 0.0423 (0.0477)	validation_time 0.0004 (0.0011)	train_time 0.0419 (0.0464)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.20it/s] 19%|#9        | 5/26 [00:00<00:01, 15.69it/s] 35%|###4      | 9/26 [00:00<00:00, 21.32it/s] 50%|#####     | 13/26 [00:00<00:00, 24.99it/s] 65%|######5   | 17/26 [00:00<00:00, 26.89it/s] 81%|########  | 21/26 [00:00<00:00, 28.12it/s] 96%|#########6| 25/26 [00:01<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 23.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.73 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9886 (5.9940)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.93it/s] 23%|##3       | 6/26 [00:00<00:00, 27.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.74it/s] 42%|####2     | 11/26 [00:00<00:00, 35.84it/s] 62%|######1   | 16/26 [00:00<00:00, 40.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.50it/s] 81%|########  | 21/26 [00:00<00:00, 41.43it/s]100%|##########| 26/26 [00:00<00:00, 43.62it/s]100%|##########| 26/26 [00:00<00:00, 35.56it/s]
Test: [   0/  26]	Loss 0.697 (0.697)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.697 (0.697)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.686 (0.694)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.686 (0.694)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d  -0.00 ( -0.05)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.04)
Test: [  26/  26]	Loss 0.697 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.697 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.03 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.55it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 10/  1]	epoch_time 0.0415 (0.0472)	validation_time 0.0003 (0.0010)	train_time 0.0411 (0.0459)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.35it/s] 15%|#5        | 4/26 [00:00<00:01, 11.86it/s] 27%|##6       | 7/26 [00:00<00:01, 17.27it/s] 42%|####2     | 11/26 [00:00<00:00, 22.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.79it/s] 88%|########8 | 23/26 [00:01<00:00, 28.04it/s]100%|##########| 26/26 [00:01<00:00, 21.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.73)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9597 (5.9672)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.20it/s] 27%|##6       | 7/26 [00:00<00:00, 35.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.60it/s] 46%|####6     | 12/26 [00:00<00:00, 41.23it/s] 65%|######5   | 17/26 [00:00<00:00, 38.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.48it/s] 85%|########4 | 22/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 36.60it/s]
Test: [   0/  26]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  10/  26]	Loss 0.688 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.688 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d  -0.03 ( -0.07)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.06)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.696 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.03 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.93it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 11/  1]	epoch_time 0.0452 (0.0470)	validation_time 0.0005 (0.0010)	train_time 0.0448 (0.0458)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.16it/s] 15%|#5        | 4/26 [00:00<00:01, 15.17it/s] 27%|##6       | 7/26 [00:00<00:00, 20.13it/s] 38%|###8      | 10/26 [00:00<00:00, 23.35it/s] 50%|#####     | 13/26 [00:00<00:00, 24.77it/s] 65%|######5   | 17/26 [00:00<00:00, 26.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.10it/s] 92%|#########2| 24/26 [00:00<00:00, 28.38it/s]100%|##########| 26/26 [00:01<00:00, 23.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9419 (5.9469)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 27%|##6       | 7/26 [00:00<00:00, 36.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.63it/s] 50%|#####     | 13/26 [00:00<00:00, 41.84it/s] 69%|######9   | 18/26 [00:00<00:00, 41.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.06it/s] 88%|########8 | 23/26 [00:00<00:00, 42.56it/s]100%|##########| 26/26 [00:00<00:00, 38.05it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  10/  26]	Loss 0.689 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.689 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d  -0.02 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.05)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.695 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 12/  1]	epoch_time 0.0418 (0.0466)	validation_time 0.0004 (0.0009)	train_time 0.0415 (0.0455)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.23it/s] 19%|#9        | 5/26 [00:00<00:01, 15.97it/s] 31%|###       | 8/26 [00:00<00:00, 20.53it/s] 46%|####6     | 12/26 [00:00<00:00, 24.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.63it/s] 88%|########8 | 23/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 23.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9296 (5.9334)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.02it/s] 27%|##6       | 7/26 [00:00<00:00, 35.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.55it/s] 46%|####6     | 12/26 [00:00<00:00, 40.17it/s] 65%|######5   | 17/26 [00:00<00:00, 38.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.93it/s] 85%|########4 | 22/26 [00:00<00:00, 41.74it/s]100%|##########| 26/26 [00:00<00:00, 36.59it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.19 ( -0.19)
Test: [  10/  26]	Loss 0.689 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.689 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.00 ( -0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.01 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 13/  1]	epoch_time 0.0476 (0.0467)	validation_time 0.0004 (0.0009)	train_time 0.0472 (0.0456)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.49it/s] 23%|##3       | 6/26 [00:00<00:00, 26.34it/s] 35%|###4      | 9/26 [00:00<00:00, 27.88it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 30.42it/s] 81%|########  | 21/26 [00:00<00:00, 30.73it/s] 96%|#########6| 25/26 [00:00<00:00, 31.02it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9207 (5.9240)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 23%|##3       | 6/26 [00:00<00:00, 31.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.52it/s] 42%|####2     | 11/26 [00:00<00:00, 38.05it/s] 65%|######5   | 17/26 [00:00<00:00, 41.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.37it/s] 85%|########4 | 22/26 [00:00<00:00, 42.62it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.689 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 14/  1]	epoch_time 0.0401 (0.0462)	validation_time 0.0004 (0.0009)	train_time 0.0398 (0.0452)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 12%|#1        | 3/26 [00:00<00:01, 15.52it/s] 23%|##3       | 6/26 [00:00<00:00, 22.02it/s] 38%|###8      | 10/26 [00:00<00:00, 26.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.21it/s] 65%|######5   | 17/26 [00:00<00:00, 28.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.39it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9140 (5.9170)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.43it/s] 23%|##3       | 6/26 [00:00<00:00, 24.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.89it/s] 42%|####2     | 11/26 [00:00<00:00, 32.95it/s] 62%|######1   | 16/26 [00:00<00:00, 37.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.68it/s] 81%|########  | 21/26 [00:00<00:00, 39.92it/s]100%|##########| 26/26 [00:00<00:00, 33.79it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.52it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 15/  1]	epoch_time 0.0424 (0.0460)	validation_time 0.0004 (0.0008)	train_time 0.0420 (0.0450)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.37it/s] 23%|##3       | 6/26 [00:00<00:00, 24.55it/s] 38%|###8      | 10/26 [00:00<00:00, 27.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.29it/s] 69%|######9   | 18/26 [00:00<00:00, 30.21it/s] 85%|########4 | 22/26 [00:00<00:00, 30.96it/s]100%|##########| 26/26 [00:00<00:00, 31.04it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9090 (5.9118)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.43it/s] 27%|##6       | 7/26 [00:00<00:00, 32.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.31it/s] 46%|####6     | 12/26 [00:00<00:00, 38.45it/s] 65%|######5   | 17/26 [00:00<00:00, 41.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.03it/s] 85%|########4 | 22/26 [00:00<00:00, 39.96it/s]100%|##########| 26/26 [00:00<00:00, 35.84it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.08 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 16/  1]	epoch_time 0.0437 (0.0459)	validation_time 0.0004 (0.0008)	train_time 0.0432 (0.0449)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 15%|#5        | 4/26 [00:00<00:01, 14.92it/s] 31%|###       | 8/26 [00:00<00:00, 21.66it/s] 46%|####6     | 12/26 [00:00<00:00, 25.22it/s] 62%|######1   | 16/26 [00:00<00:00, 27.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.36it/s] 92%|#########2| 24/26 [00:00<00:00, 29.44it/s]100%|##########| 26/26 [00:01<00:00, 24.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9052 (5.9079)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 15%|#5        | 4/26 [00:00<00:01, 17.14it/s] 38%|###8      | 10/26 [00:00<00:00, 33.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.31it/s] 62%|######1   | 16/26 [00:00<00:00, 39.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.64it/s] 85%|########4 | 22/26 [00:00<00:00, 44.38it/s]100%|##########| 26/26 [00:00<00:00, 34.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.09 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.13it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 17/  1]	epoch_time 0.0493 (0.0461)	validation_time 0.0003 (0.0008)	train_time 0.0489 (0.0451)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.5000000112652778, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.40it/s] 15%|#5        | 4/26 [00:00<00:01, 13.92it/s] 27%|##6       | 7/26 [00:00<00:00, 19.29it/s] 42%|####2     | 11/26 [00:00<00:00, 23.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.70it/s] 88%|########8 | 23/26 [00:00<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 23.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9024 (5.9049)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.99it/s] 19%|#9        | 5/26 [00:00<00:00, 27.21it/s] 38%|###8      | 10/26 [00:00<00:00, 36.70it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.85it/s] 96%|#########6| 25/26 [00:00<00:00, 41.14it/s]100%|##########| 26/26 [00:00<00:00, 35.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.10 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.52it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 18/  1]	epoch_time 0.0450 (0.0460)	validation_time 0.0004 (0.0008)	train_time 0.0446 (0.0451)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49990001010894775, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 15%|#5        | 4/26 [00:00<00:01, 19.40it/s] 27%|##6       | 7/26 [00:00<00:00, 23.42it/s] 38%|###8      | 10/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 27.10it/s] 65%|######5   | 17/26 [00:00<00:00, 28.32it/s] 81%|########  | 21/26 [00:00<00:00, 29.28it/s] 96%|#########6| 25/26 [00:00<00:00, 29.88it/s]100%|##########| 26/26 [00:01<00:00, 25.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.51)	train_majacc   0.45 (  0.50)	train_corr   0.00 (  0.00)	l1 5.9002 (5.9026)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 23%|##3       | 6/26 [00:00<00:00, 25.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.43it/s] 42%|####2     | 11/26 [00:00<00:00, 33.91it/s] 62%|######1   | 16/26 [00:00<00:00, 38.79it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.79it/s] 81%|########  | 21/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 32.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.690 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.50)	test_majacc   0.45 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 19/  1]	epoch_time 0.0414 (0.0458)	validation_time 0.0003 (0.0007)	train_time 0.0410 (0.0449)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4998000112771988, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.72it/s] 15%|#5        | 4/26 [00:00<00:01, 12.05it/s] 31%|###       | 8/26 [00:00<00:00, 19.58it/s] 46%|####6     | 12/26 [00:00<00:00, 23.80it/s] 62%|######1   | 16/26 [00:00<00:00, 26.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.86it/s] 92%|#########2| 24/26 [00:01<00:00, 29.67it/s]100%|##########| 26/26 [00:01<00:00, 23.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.51)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 5.8985 (5.9007)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.56it/s] 27%|##6       | 7/26 [00:00<00:00, 34.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.27it/s] 46%|####6     | 12/26 [00:00<00:00, 40.26it/s] 65%|######5   | 17/26 [00:00<00:00, 42.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.51it/s] 85%|########4 | 22/26 [00:00<00:00, 40.23it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 20/  1]	epoch_time 0.0415 (0.0456)	validation_time 0.0003 (0.0007)	train_time 0.0412 (0.0447)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4994000110924244, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 19%|#9        | 5/26 [00:00<00:01, 16.99it/s] 35%|###4      | 9/26 [00:00<00:00, 22.37it/s] 50%|#####     | 13/26 [00:00<00:00, 25.32it/s] 65%|######5   | 17/26 [00:00<00:00, 27.12it/s] 81%|########  | 21/26 [00:00<00:00, 28.38it/s] 96%|#########6| 25/26 [00:00<00:00, 29.41it/s]100%|##########| 26/26 [00:01<00:00, 24.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.51)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 5.8971 (5.8991)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 23%|##3       | 6/26 [00:00<00:00, 23.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.05it/s] 42%|####2     | 11/26 [00:00<00:00, 32.24it/s] 62%|######1   | 16/26 [00:00<00:00, 37.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.44it/s] 81%|########  | 21/26 [00:00<00:00, 37.18it/s]100%|##########| 26/26 [00:00<00:00, 40.53it/s]100%|##########| 26/26 [00:00<00:00, 31.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.10 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.52it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 21/  1]	epoch_time 0.0438 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0434 (0.0447)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49860001346468924, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 15%|#5        | 4/26 [00:00<00:01, 21.42it/s] 31%|###       | 8/26 [00:00<00:00, 26.04it/s] 46%|####6     | 12/26 [00:00<00:00, 28.11it/s] 62%|######1   | 16/26 [00:00<00:00, 29.00it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.64it/s] 92%|#########2| 24/26 [00:00<00:00, 30.18it/s]100%|##########| 26/26 [00:00<00:00, 26.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.72 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 5.8960 (5.8978)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 23%|##3       | 6/26 [00:00<00:00, 31.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.19it/s] 42%|####2     | 11/26 [00:00<00:00, 38.28it/s] 62%|######1   | 16/26 [00:00<00:00, 42.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.32it/s] 81%|########  | 21/26 [00:00<00:00, 39.09it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]100%|##########| 26/26 [00:00<00:00, 35.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 22/  1]	epoch_time 0.0436 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0432 (0.0446)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49820000979304313, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 19%|#9        | 5/26 [00:00<00:01, 19.20it/s] 35%|###4      | 9/26 [00:00<00:00, 24.45it/s] 50%|#####     | 13/26 [00:00<00:00, 26.89it/s] 65%|######5   | 17/26 [00:00<00:00, 28.42it/s] 81%|########  | 21/26 [00:00<00:00, 29.04it/s] 96%|#########6| 25/26 [00:00<00:00, 29.49it/s]100%|##########| 26/26 [00:01<00:00, 25.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 5.89546537399292
set z to 5.600692105293274
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.72)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.50)	train_corr   0.00 (  0.00)	l1 5.8950 (5.8967)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.16it/s] 23%|##3       | 6/26 [00:00<00:00, 21.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.13it/s] 42%|####2     | 11/26 [00:00<00:00, 30.10it/s] 62%|######1   | 16/26 [00:00<00:00, 36.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.09it/s] 81%|########  | 21/26 [00:00<00:00, 36.33it/s]100%|##########| 26/26 [00:00<00:00, 39.88it/s]100%|##########| 26/26 [00:00<00:00, 30.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 23/  1]	epoch_time 0.0435 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0445)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49800001445412634, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:01, 19.71it/s] 35%|###4      | 9/26 [00:00<00:00, 24.43it/s] 46%|####6     | 12/26 [00:00<00:00, 25.81it/s] 62%|######1   | 16/26 [00:00<00:00, 27.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.98it/s]100%|##########| 26/26 [00:01<00:00, 25.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8944 (5.8957)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.98it/s] 23%|##3       | 6/26 [00:00<00:00, 20.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.32it/s] 42%|####2     | 11/26 [00:00<00:00, 27.10it/s] 62%|######1   | 16/26 [00:00<00:00, 33.43it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.43it/s] 81%|########  | 21/26 [00:00<00:00, 36.88it/s]100%|##########| 26/26 [00:00<00:00, 40.16it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.50)	Loss_d 0.691 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.50)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.66it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 24/  1]	epoch_time 0.0440 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0435 (0.0445)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49680000987648965, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.71it/s] 19%|#9        | 5/26 [00:00<00:01, 18.48it/s] 31%|###       | 8/26 [00:00<00:00, 22.64it/s] 42%|####2     | 11/26 [00:00<00:00, 24.80it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.88it/s] 69%|######9   | 18/26 [00:00<00:00, 27.69it/s] 81%|########  | 21/26 [00:00<00:00, 27.99it/s] 96%|#########6| 25/26 [00:00<00:00, 29.21it/s]100%|##########| 26/26 [00:01<00:00, 24.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8936 (5.8949)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.59it/s] 31%|###       | 8/26 [00:00<00:00, 36.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.57it/s] 50%|#####     | 13/26 [00:00<00:00, 40.38it/s] 69%|######9   | 18/26 [00:00<00:00, 40.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.61it/s] 88%|########8 | 23/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.52)	test_majacc   0.56 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.30it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 25/  1]	epoch_time 0.0414 (0.0451)	validation_time 0.0003 (0.0007)	train_time 0.0411 (0.0444)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4965000122189522, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.98it/s] 19%|#9        | 5/26 [00:00<00:01, 13.12it/s] 35%|###4      | 9/26 [00:00<00:00, 19.66it/s] 50%|#####     | 13/26 [00:00<00:00, 23.90it/s] 65%|######5   | 17/26 [00:00<00:00, 26.30it/s] 81%|########  | 21/26 [00:00<00:00, 27.57it/s] 96%|#########6| 25/26 [00:01<00:00, 28.24it/s]100%|##########| 26/26 [00:01<00:00, 21.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8930 (5.8941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 23%|##3       | 6/26 [00:00<00:00, 27.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.53it/s] 42%|####2     | 11/26 [00:00<00:00, 31.82it/s] 62%|######1   | 16/26 [00:00<00:00, 37.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.27it/s] 81%|########  | 21/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 42.98it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 26/  1]	epoch_time 0.0461 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0457 (0.0444)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.495000009983778, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.64it/s] 15%|#5        | 4/26 [00:00<00:01, 13.16it/s] 27%|##6       | 7/26 [00:00<00:01, 18.40it/s] 42%|####2     | 11/26 [00:00<00:00, 23.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.07it/s] 88%|########8 | 23/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:01<00:00, 23.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8926 (5.8936)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.00it/s] 23%|##3       | 6/26 [00:00<00:01, 16.93it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.93it/s] 42%|####2     | 11/26 [00:00<00:00, 25.76it/s] 62%|######1   | 16/26 [00:00<00:00, 32.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.75it/s] 81%|########  | 21/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 26.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.04 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 27/  1]	epoch_time 0.0445 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0444)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49520001229643823, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 15%|#5        | 4/26 [00:00<00:01, 16.35it/s] 27%|##6       | 7/26 [00:00<00:00, 21.43it/s] 42%|####2     | 11/26 [00:00<00:00, 25.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.11it/s] 65%|######5   | 17/26 [00:00<00:00, 27.27it/s] 81%|########  | 21/26 [00:00<00:00, 28.72it/s] 92%|#########2| 24/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 23.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8921 (5.8930)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.74it/s] 35%|###4      | 9/26 [00:00<00:00, 31.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.18it/s] 92%|#########2| 24/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.49)	test_minacc   0.58 (  0.51)	test_majacc   0.56 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.49)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.56 (  0.49)	test_corr_d   0.03 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.52)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.33it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 28/  1]	epoch_time 0.0431 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0443)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49380001121759415, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 19%|#9        | 5/26 [00:00<00:01, 15.30it/s] 35%|###4      | 9/26 [00:00<00:00, 21.06it/s] 50%|#####     | 13/26 [00:00<00:00, 24.19it/s] 65%|######5   | 17/26 [00:00<00:00, 26.25it/s] 81%|########  | 21/26 [00:00<00:00, 28.11it/s] 96%|#########6| 25/26 [00:01<00:00, 29.30it/s]100%|##########| 26/26 [00:01<00:00, 22.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8918 (5.8926)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 12%|#1        | 3/26 [00:00<00:02, 10.99it/s] 31%|###       | 8/26 [00:00<00:00, 24.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 31.92it/s] 69%|######9   | 18/26 [00:00<00:00, 37.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.61it/s] 88%|########8 | 23/26 [00:00<00:00, 36.93it/s]100%|##########| 26/26 [00:00<00:00, 30.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.49)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.49)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.51)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.51)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 29/  1]	epoch_time 0.0441 (0.0450)	validation_time 0.0003 (0.0006)	train_time 0.0438 (0.0443)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49230001014471053, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 15%|#5        | 4/26 [00:00<00:01, 18.31it/s] 27%|##6       | 7/26 [00:00<00:00, 22.96it/s] 38%|###8      | 10/26 [00:00<00:00, 25.03it/s] 50%|#####     | 13/26 [00:00<00:00, 26.44it/s] 65%|######5   | 17/26 [00:00<00:00, 28.28it/s] 81%|########  | 21/26 [00:00<00:00, 29.19it/s] 96%|#########6| 25/26 [00:00<00:00, 30.18it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8914 (5.8921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 19.97it/s] 38%|###8      | 10/26 [00:00<00:00, 30.32it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.16it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.86it/s] 96%|#########6| 25/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 32.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.49)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.49)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.50)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.02it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 30/  1]	epoch_time 0.0438 (0.0450)	validation_time 0.0005 (0.0006)	train_time 0.0434 (0.0443)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49170001155138016, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 15%|#5        | 4/26 [00:00<00:01, 19.89it/s] 27%|##6       | 7/26 [00:00<00:00, 23.24it/s] 38%|###8      | 10/26 [00:00<00:00, 25.74it/s] 50%|#####     | 13/26 [00:00<00:00, 26.59it/s] 62%|######1   | 16/26 [00:00<00:00, 27.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.33it/s] 88%|########8 | 23/26 [00:00<00:00, 29.26it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.71 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.50)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8912 (5.8917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 38%|###8      | 10/26 [00:00<00:00, 31.58it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.27it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.27it/s] 96%|#########6| 25/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.49)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.49)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.49)	test_corr_d  -0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.50)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.11it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 31/  1]	epoch_time 0.0426 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4904000104665756, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 19%|#9        | 5/26 [00:00<00:01, 18.26it/s] 35%|###4      | 9/26 [00:00<00:00, 23.74it/s] 50%|#####     | 13/26 [00:00<00:00, 27.00it/s] 65%|######5   | 17/26 [00:00<00:00, 28.26it/s] 81%|########  | 21/26 [00:00<00:00, 29.05it/s] 96%|#########6| 25/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.71)	train_acc   0.44 (  0.49)	train_minacc   0.42 (  0.49)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8908 (5.8914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 27%|##6       | 7/26 [00:00<00:00, 32.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.39it/s] 46%|####6     | 12/26 [00:00<00:00, 39.53it/s] 65%|######5   | 17/26 [00:00<00:00, 40.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.08it/s] 85%|########4 | 22/26 [00:00<00:00, 41.19it/s]100%|##########| 26/26 [00:00<00:00, 35.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.49)	test_minacc   0.56 (  0.50)	test_majacc   0.56 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.49)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.56 (  0.49)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.55 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.50)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 32/  1]	epoch_time 0.0451 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0447 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.49050001162290574, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.42it/s] 27%|##6       | 7/26 [00:00<00:00, 23.56it/s] 42%|####2     | 11/26 [00:00<00:00, 26.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.09it/s] 88%|########8 | 23/26 [00:00<00:00, 29.56it/s]100%|##########| 26/26 [00:01<00:00, 25.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.44 (  0.48)	train_minacc   0.42 (  0.49)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8908 (5.8912)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 19%|#9        | 5/26 [00:00<00:01, 20.03it/s] 38%|###8      | 10/26 [00:00<00:00, 29.12it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.76it/s] 96%|#########6| 25/26 [00:00<00:00, 40.43it/s]100%|##########| 26/26 [00:00<00:00, 31.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.48)	test_minacc   0.55 (  0.51)	test_majacc   0.54 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.48)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.54 (  0.48)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.55 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.50)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.31it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 33/  1]	epoch_time 0.0422 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4863000107109547, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 19%|#9        | 5/26 [00:00<00:01, 18.41it/s] 35%|###4      | 9/26 [00:00<00:00, 24.04it/s] 50%|#####     | 13/26 [00:00<00:00, 26.70it/s] 65%|######5   | 17/26 [00:00<00:00, 28.66it/s] 81%|########  | 21/26 [00:00<00:00, 29.57it/s] 96%|#########6| 25/26 [00:00<00:00, 29.93it/s]100%|##########| 26/26 [00:01<00:00, 24.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.44 (  0.48)	train_minacc   0.42 (  0.49)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8905 (5.8909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.97it/s] 15%|#5        | 4/26 [00:00<00:01, 18.57it/s] 35%|###4      | 9/26 [00:00<00:00, 30.77it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.68it/s] 92%|#########2| 24/26 [00:00<00:00, 40.20it/s]100%|##########| 26/26 [00:00<00:00, 33.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.48)	test_minacc   0.55 (  0.51)	test_majacc   0.56 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.48)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.56 (  0.48)	test_corr_d  -0.03 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.42 (  0.50)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 34/  1]	epoch_time 0.0424 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4884000094234943, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.84it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 50%|#####     | 13/26 [00:00<00:00, 28.67it/s] 65%|######5   | 17/26 [00:00<00:00, 29.02it/s] 81%|########  | 21/26 [00:00<00:00, 29.85it/s] 96%|#########6| 25/26 [00:00<00:00, 29.78it/s]100%|##########| 26/26 [00:00<00:00, 26.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.45 (  0.48)	train_minacc   0.45 (  0.49)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8904 (5.8907)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.69it/s] 31%|###       | 8/26 [00:00<00:00, 35.71it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 39.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.01it/s] 92%|#########2| 24/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 36.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.50 (  0.50)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.48)	test_corr_d  -0.03 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.52)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.45 (  0.51)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.83it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 35/  1]	epoch_time 0.0433 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0429 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48680001172423365, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.80it/s] 27%|##6       | 7/26 [00:00<00:00, 27.38it/s] 42%|####2     | 11/26 [00:00<00:00, 29.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.31it/s] 88%|########8 | 23/26 [00:00<00:00, 30.58it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.46 (  0.48)	train_minacc   0.50 (  0.50)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8903 (5.8906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:00, 21.51it/s] 38%|###8      | 10/26 [00:00<00:00, 32.10it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.34it/s] 96%|#########6| 25/26 [00:00<00:00, 40.08it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.50 (  0.50)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.55 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.55 (  0.48)	test_corr_d  -0.03 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.51)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.00 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 36/  1]	epoch_time 0.0443 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0439 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48510001319646834, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:01, 20.18it/s] 31%|###       | 8/26 [00:00<00:00, 23.63it/s] 46%|####6     | 12/26 [00:00<00:00, 26.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.59it/s] 88%|########8 | 23/26 [00:00<00:00, 29.67it/s]100%|##########| 26/26 [00:01<00:00, 25.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.45 (  0.48)	train_minacc   0.47 (  0.50)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8903 (5.8905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.31it/s] 31%|###       | 8/26 [00:00<00:00, 37.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.76it/s] 50%|#####     | 13/26 [00:00<00:00, 40.22it/s] 69%|######9   | 18/26 [00:00<00:00, 43.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.39it/s] 88%|########8 | 23/26 [00:00<00:00, 40.81it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.50 (  0.50)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.50)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.04 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.57 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.18it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 37/  1]	epoch_time 0.0417 (0.0446)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0440)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.481000007212162, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 15%|#5        | 4/26 [00:00<00:01, 18.26it/s] 27%|##6       | 7/26 [00:00<00:00, 22.86it/s] 42%|####2     | 11/26 [00:00<00:00, 25.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.60it/s] 88%|########8 | 23/26 [00:00<00:00, 28.98it/s]100%|##########| 26/26 [00:01<00:00, 25.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.46 (  0.48)	train_minacc   0.53 (  0.50)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8901 (5.8904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s]  8%|7         | 2/26 [00:00<00:03,  7.56it/s] 27%|##6       | 7/26 [00:00<00:00, 23.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.37it/s] 46%|####6     | 12/26 [00:00<00:00, 31.68it/s] 65%|######5   | 17/26 [00:00<00:00, 37.41it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.41it/s] 85%|########4 | 22/26 [00:00<00:00, 37.10it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.50 (  0.50)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.05 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.55 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.55 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 38/  1]	epoch_time 0.0475 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0471 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4801000071465969, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.71it/s] 19%|#9        | 5/26 [00:00<00:01, 14.59it/s] 35%|###4      | 9/26 [00:00<00:00, 20.57it/s] 46%|####6     | 12/26 [00:00<00:00, 23.18it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.40it/s] 69%|######9   | 18/26 [00:00<00:00, 25.59it/s] 85%|########4 | 22/26 [00:00<00:00, 27.62it/s]100%|##########| 26/26 [00:01<00:00, 28.99it/s]100%|##########| 26/26 [00:01<00:00, 22.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.70 (  0.70)	train_acc   0.46 (  0.48)	train_minacc   0.55 (  0.49)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8899 (5.8902)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.45it/s] 27%|##6       | 7/26 [00:00<00:00, 28.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.90it/s] 46%|####6     | 12/26 [00:00<00:00, 36.28it/s] 65%|######5   | 17/26 [00:00<00:00, 39.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.80it/s] 85%|########4 | 22/26 [00:00<00:00, 38.76it/s]100%|##########| 26/26 [00:00<00:00, 34.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.46 (  0.46)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.05 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.58 (  0.50)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 39/  1]	epoch_time 0.0458 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0455 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4820000097751617, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.99it/s] 19%|#9        | 5/26 [00:00<00:01, 15.55it/s] 35%|###4      | 9/26 [00:00<00:00, 21.60it/s] 50%|#####     | 13/26 [00:00<00:00, 25.04it/s] 62%|######1   | 16/26 [00:00<00:00, 26.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.75it/s] 85%|########4 | 22/26 [00:00<00:00, 27.50it/s]100%|##########| 26/26 [00:01<00:00, 28.92it/s]100%|##########| 26/26 [00:01<00:00, 23.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.70)	train_acc   0.48 (  0.47)	train_minacc   0.58 (  0.49)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8900 (5.8902)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.60it/s] 42%|####2     | 11/26 [00:00<00:00, 34.13it/s] 62%|######1   | 16/26 [00:00<00:00, 39.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.07it/s] 81%|########  | 21/26 [00:00<00:00, 37.68it/s]100%|##########| 26/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 33.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.46 (  0.46)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.55 (  0.49)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.06 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.49)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 40/  1]	epoch_time 0.0455 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0452 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.47930000379681587, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.30it/s] 19%|#9        | 5/26 [00:00<00:01, 17.56it/s] 31%|###       | 8/26 [00:00<00:00, 19.75it/s] 42%|####2     | 11/26 [00:00<00:00, 21.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.63it/s] 65%|######5   | 17/26 [00:00<00:00, 24.73it/s] 81%|########  | 21/26 [00:00<00:00, 26.65it/s] 96%|#########6| 25/26 [00:01<00:00, 28.27it/s]100%|##########| 26/26 [00:01<00:00, 22.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.47 (  0.47)	train_minacc   0.58 (  0.49)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8898 (5.8900)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 23%|##3       | 6/26 [00:00<00:00, 27.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.34it/s] 42%|####2     | 11/26 [00:00<00:00, 34.47it/s] 62%|######1   | 16/26 [00:00<00:00, 39.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.65it/s] 81%|########  | 21/26 [00:00<00:00, 37.94it/s]100%|##########| 26/26 [00:00<00:00, 33.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.46 (  0.46)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.55 (  0.50)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.06 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.58 (  0.49)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 41/  1]	epoch_time 0.0461 (0.0448)	validation_time 0.0004 (0.0005)	train_time 0.0458 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48160000747442244, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.88it/s] 15%|#5        | 4/26 [00:00<00:02, 10.63it/s] 27%|##6       | 7/26 [00:00<00:01, 15.80it/s] 38%|###8      | 10/26 [00:00<00:00, 19.28it/s] 50%|#####     | 13/26 [00:00<00:00, 21.62it/s] 62%|######1   | 16/26 [00:00<00:00, 23.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.21it/s] 88%|########8 | 23/26 [00:01<00:00, 26.90it/s]100%|##########| 26/26 [00:01<00:00, 20.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.48 (  0.47)	train_minacc   0.58 (  0.48)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8898 (5.8900)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.20it/s] 12%|#1        | 3/26 [00:00<00:02, 10.38it/s] 31%|###       | 8/26 [00:00<00:00, 23.79it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.79it/s] 50%|#####     | 13/26 [00:00<00:00, 31.63it/s] 69%|######9   | 18/26 [00:00<00:00, 36.62it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.62it/s] 88%|########8 | 23/26 [00:00<00:00, 36.56it/s]100%|##########| 26/26 [00:00<00:00, 30.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.44 (  0.44)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.53 (  0.49)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.06 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.47 (  0.49)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.48)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.48)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 42/  1]	epoch_time 0.0449 (0.0448)	validation_time 0.0004 (0.0005)	train_time 0.0445 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4790000107884407, 0.531000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.38it/s] 19%|#9        | 5/26 [00:00<00:01, 18.41it/s] 31%|###       | 8/26 [00:00<00:00, 22.64it/s] 42%|####2     | 11/26 [00:00<00:00, 24.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.40it/s] 65%|######5   | 17/26 [00:00<00:00, 26.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.59it/s] 88%|########8 | 23/26 [00:00<00:00, 27.72it/s]100%|##########| 26/26 [00:01<00:00, 24.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.46 (  0.48)	train_minacc   0.58 (  0.48)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8897 (5.8899)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 19%|#9        | 5/26 [00:00<00:00, 25.37it/s] 38%|###8      | 10/26 [00:00<00:00, 31.98it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.98it/s] 62%|######1   | 16/26 [00:00<00:00, 39.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.08it/s] 81%|########  | 21/26 [00:00<00:00, 41.66it/s]100%|##########| 26/26 [00:00<00:00, 43.69it/s]100%|##########| 26/26 [00:00<00:00, 34.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.58 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.45 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.58 (  0.49)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.08 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 43/  1]	epoch_time 0.0435 (0.0448)	validation_time 0.0003 (0.0005)	train_time 0.0432 (0.0442)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4797000085413456, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.42it/s] 35%|###4      | 9/26 [00:00<00:00, 24.66it/s] 50%|#####     | 13/26 [00:00<00:00, 27.40it/s] 65%|######5   | 17/26 [00:00<00:00, 28.94it/s] 81%|########  | 21/26 [00:00<00:00, 29.56it/s] 92%|#########2| 24/26 [00:00<00:00, 29.52it/s]100%|##########| 26/26 [00:01<00:00, 25.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.46 (  0.48)	train_minacc   0.58 (  0.49)	train_majacc   0.44 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8897 (5.8898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.87it/s] 27%|##6       | 7/26 [00:00<00:00, 34.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.51it/s] 46%|####6     | 12/26 [00:00<00:00, 40.20it/s] 65%|######5   | 17/26 [00:00<00:00, 42.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.61it/s] 85%|########4 | 22/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 37.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.56 (  0.49)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.06 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.48)	test_minacc   0.45 (  0.48)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.48)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.58 (  0.48)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.58 (  0.48)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.86it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 44/  1]	epoch_time 0.0417 (0.0447)	validation_time 0.0005 (0.0005)	train_time 0.0412 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4792000083625317, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 15%|#5        | 4/26 [00:00<00:01, 16.65it/s] 27%|##6       | 7/26 [00:00<00:00, 20.22it/s] 42%|####2     | 11/26 [00:00<00:00, 24.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.35it/s] 69%|######9   | 18/26 [00:00<00:00, 26.54it/s] 85%|########4 | 22/26 [00:00<00:00, 27.76it/s] 96%|#########6| 25/26 [00:01<00:00, 28.27it/s]100%|##########| 26/26 [00:01<00:00, 23.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.47 (  0.48)	train_minacc   0.61 (  0.48)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8896 (5.8898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 15%|#5        | 4/26 [00:00<00:01, 20.19it/s] 35%|###4      | 9/26 [00:00<00:00, 32.27it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.93it/s] 92%|#########2| 24/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 34.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.47 (  0.48)	test_majacc   0.45 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.61 (  0.49)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.61 (  0.49)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 45/  1]	epoch_time 0.0449 (0.0447)	validation_time 0.0003 (0.0005)	train_time 0.0446 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4828000120520592, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 24.64it/s] 46%|####6     | 12/26 [00:00<00:00, 26.29it/s] 62%|######1   | 16/26 [00:00<00:00, 27.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.01it/s] 92%|#########2| 24/26 [00:00<00:00, 29.95it/s]100%|##########| 26/26 [00:01<00:00, 25.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.69 (  0.69)	train_acc   0.47 (  0.47)	train_minacc   0.55 (  0.50)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 5.8897 (5.8898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.68it/s] 19%|#9        | 5/26 [00:00<00:01, 12.46it/s] 38%|###8      | 10/26 [00:00<00:00, 22.67it/s]                                                38%|###8      | 10/26 [00:00<00:00, 22.67it/s] 62%|######1   | 16/26 [00:00<00:00, 31.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 35.48it/s]100%|##########| 26/26 [00:00<00:00, 39.11it/s]100%|##########| 26/26 [00:00<00:00, 26.43it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.56 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.06 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.55 (  0.49)	test_majacc   0.45 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 46/  1]	epoch_time 0.0438 (0.0447)	validation_time 0.0003 (0.0005)	train_time 0.0434 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.4755000101625919, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.73it/s] 19%|#9        | 5/26 [00:00<00:00, 21.18it/s] 35%|###4      | 9/26 [00:00<00:00, 25.52it/s] 50%|#####     | 13/26 [00:00<00:00, 27.96it/s] 62%|######1   | 16/26 [00:00<00:00, 26.47it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.46it/s] 92%|#########2| 24/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.69)	train_acc   0.46 (  0.48)	train_minacc   0.63 (  0.49)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8896 (5.8897)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.62it/s] 15%|#5        | 4/26 [00:00<00:01, 12.33it/s] 35%|###4      | 9/26 [00:00<00:00, 23.82it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.06it/s] 92%|#########2| 24/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.07 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.43 (  0.49)	test_majacc   0.43 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.63 (  0.49)	test_majacc   0.43 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.63 (  0.49)	test_majacc_d   0.43 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 47/  1]	epoch_time 0.0435 (0.0447)	validation_time 0.0003 (0.0005)	train_time 0.0432 (0.0441)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48140000727772714, 0.5300000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.78it/s] 19%|#9        | 5/26 [00:00<00:00, 22.21it/s] 31%|###       | 8/26 [00:00<00:00, 25.20it/s] 42%|####2     | 11/26 [00:00<00:00, 26.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.60it/s] 65%|######5   | 17/26 [00:00<00:00, 27.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.43it/s] 88%|########8 | 23/26 [00:00<00:00, 28.66it/s]100%|##########| 26/26 [00:01<00:00, 25.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.68)	train_acc   0.46 (  0.48)	train_minacc   0.63 (  0.49)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8896 (5.8896)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 27%|##6       | 7/26 [00:00<00:00, 29.84it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.84it/s] 46%|####6     | 12/26 [00:00<00:00, 35.96it/s] 65%|######5   | 17/26 [00:00<00:00, 37.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.05it/s] 85%|########4 | 22/26 [00:00<00:00, 40.50it/s]100%|##########| 26/26 [00:00<00:00, 33.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.07 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.43 (  0.49)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.44 (  0.49)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.63 (  0.49)	test_majacc   0.44 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.63 (  0.49)	test_majacc_d   0.44 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 48/  1]	epoch_time 0.0424 (0.0446)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0440)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48420000752806663, 0.534000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 19%|#9        | 5/26 [00:00<00:01, 18.72it/s] 35%|###4      | 9/26 [00:00<00:00, 23.95it/s] 50%|#####     | 13/26 [00:00<00:00, 26.92it/s] 65%|######5   | 17/26 [00:00<00:00, 28.25it/s] 81%|########  | 21/26 [00:00<00:00, 29.08it/s] 96%|#########6| 25/26 [00:00<00:00, 29.91it/s]100%|##########| 26/26 [00:01<00:00, 24.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.68 (  0.68)	train_acc   0.48 (  0.48)	train_minacc   0.63 (  0.49)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 5.8895 (5.8896)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 23%|##3       | 6/26 [00:00<00:00, 32.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.23it/s] 42%|####2     | 11/26 [00:00<00:00, 38.29it/s] 62%|######1   | 16/26 [00:00<00:00, 41.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.68it/s] 81%|########  | 21/26 [00:00<00:00, 40.03it/s]100%|##########| 26/26 [00:00<00:00, 43.04it/s]100%|##########| 26/26 [00:00<00:00, 35.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.42 (  0.42)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.47 (  0.49)	test_corr_d  -0.07 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.43 (  0.48)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.44 (  0.49)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.63 (  0.48)	test_majacc   0.44 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.63 (  0.48)	test_majacc_d   0.44 (  0.49)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 49/  1]	epoch_time 0.0430 (0.0446)	validation_time 0.0003 (0.0005)	train_time 0.0426 (0.0440)
record: (train_acc, test_acc) (0.658000026524067, 0.656000018119812)
last accs (train_acc, test_acc) (0.48650001087784767, 0.5290000438690186)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpjwza_og0'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214015-pk19w2m5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/pk19w2m5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1166
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6008, 3, 32, 32) (5992, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:33,  1.35s/it] 19%|#9        | 5/26 [00:01<00:04,  4.38it/s] 35%|###4      | 9/26 [00:01<00:02,  8.45it/s] 50%|#####     | 13/26 [00:01<00:01, 12.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 81%|########  | 21/26 [00:01<00:00, 20.42it/s] 96%|#########6| 25/26 [00:02<00:00, 23.59it/s]100%|##########| 26/26 [00:02<00:00, 10.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.254 (12.740)	train_nll   0.41 (  0.60)	train_penalty   0.06 (  0.37)	weight_norm   9.85 ( 12.14)	train_acc   0.86 (  0.79)	train_minacc   0.03 (  0.11)	train_majacc   0.99 (  0.91)	train_corr   0.00 (  0.00)	l1 7.5975 (8.1101)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 23%|##3       | 6/26 [00:00<00:00, 25.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.18it/s] 42%|####2     | 11/26 [00:00<00:00, 34.01it/s] 62%|######1   | 16/26 [00:00<00:00, 39.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.11it/s] 81%|########  | 21/26 [00:00<00:00, 38.18it/s]100%|##########| 26/26 [00:00<00:00, 33.07it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.88 (  0.88)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.345 (0.345)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.460 (0.403)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.460 (0.403)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.463 (0.416)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.463 (0.416)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.404 (0.414)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.404 (0.414)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.907 (1.907)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.907 (1.907)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.907 (1.907)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.907 (1.907)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/185/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0749 (0.0749)	validation_time 0.0068 (0.0068)	train_time 0.0665 (0.0665)
record: (train_acc, test_acc) (0.8467000278830529, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8467000278830529, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.01it/s] 50%|#####     | 13/26 [00:00<00:00, 28.39it/s] 65%|######5   | 17/26 [00:00<00:00, 29.79it/s] 81%|########  | 21/26 [00:00<00:00, 30.48it/s] 96%|#########6| 25/26 [00:00<00:00, 30.79it/s]100%|##########| 26/26 [00:00<00:00, 26.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.418 (7.491)	train_nll   0.40 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   5.02 (  7.08)	train_acc   0.87 (  0.85)	train_minacc   0.06 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4452 (7.6375)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s] 23%|##3       | 6/26 [00:00<00:00, 28.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.51it/s] 42%|####2     | 11/26 [00:00<00:00, 36.14it/s] 62%|######1   | 16/26 [00:00<00:00, 40.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.00it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.88 (  0.88)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.342)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.451 (0.392)	test_acc   0.83 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.451 (0.392)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.444 (0.402)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.444 (0.402)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.388 (0.399)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.388 (0.399)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 1.919 (1.919)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.919 (1.919)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/185/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0414 (0.0582)	validation_time 0.0004 (0.0036)	train_time 0.0410 (0.0537)
record: (train_acc, test_acc) (0.8477000166177749, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8477000166177749, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.95it/s] 12%|#1        | 3/26 [00:00<00:02,  9.42it/s] 27%|##6       | 7/26 [00:00<00:01, 17.56it/s] 42%|####2     | 11/26 [00:00<00:00, 22.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.91it/s] 88%|########8 | 23/26 [00:00<00:00, 28.44it/s]100%|##########| 26/26 [00:01<00:00, 22.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.262 (4.178)	train_nll   0.38 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm   2.88 (  3.78)	train_acc   0.85 (  0.85)	train_minacc   0.03 (  0.03)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6196 (7.0311)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.98it/s] 27%|##6       | 7/26 [00:00<00:00, 24.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.02it/s] 46%|####6     | 12/26 [00:00<00:00, 32.04it/s] 65%|######5   | 17/26 [00:00<00:00, 37.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.07it/s] 85%|########4 | 22/26 [00:00<00:00, 37.78it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
Test: [   0/  26]	Loss 0.323 (0.323)	test_acc   0.88 (  0.88)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.323 (0.323)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.446 (0.388)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.446 (0.388)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.463 (0.397)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.463 (0.397)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.364 (0.392)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.364 (0.392)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 1.896 (1.896)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.896 (1.896)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.896 (1.896)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.896 (1.896)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/185/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0410 (0.0524)	validation_time 0.0003 (0.0025)	train_time 0.0406 (0.0494)
record: (train_acc, test_acc) (0.8487000249028206, 0.15000000596046448)
last accs (train_acc, test_acc) (0.8487000249028206, 0.15000000596046448)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 15%|#5        | 4/26 [00:00<00:01, 18.07it/s] 31%|###       | 8/26 [00:00<00:00, 24.79it/s] 46%|####6     | 12/26 [00:00<00:00, 27.39it/s] 62%|######1   | 16/26 [00:00<00:00, 28.86it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.73it/s] 92%|#########2| 24/26 [00:00<00:00, 30.31it/s]100%|##########| 26/26 [00:01<00:00, 25.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.155 (2.664)	train_nll   0.36 (  0.39)	train_penalty   0.05 (  0.05)	weight_norm   1.80 (  2.27)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.05)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.9476 (6.2094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.58it/s] 12%|#1        | 3/26 [00:00<00:02,  8.05it/s] 31%|###       | 8/26 [00:00<00:00, 20.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 20.42it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 69%|######9   | 18/26 [00:00<00:00, 34.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.71it/s] 88%|########8 | 23/26 [00:00<00:00, 37.27it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.88 (  0.88)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.321)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.426 (0.370)	test_acc   0.83 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.426 (0.370)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.419 (0.379)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.419 (0.379)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.316 (0.373)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.316 (0.373)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 1.933 (1.933)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 1.933 (1.933)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.933 (1.933)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.97 (  0.97)	Loss_d 1.933 (1.933)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/185/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0462 (0.0509)	validation_time 0.0004 (0.0020)	train_time 0.0458 (0.0485)
record: (train_acc, test_acc) (0.8487000241875648, 0.1600000113248825)
last accs (train_acc, test_acc) (0.8487000241875648, 0.1600000113248825)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.60it/s] 31%|###       | 8/26 [00:00<00:00, 23.85it/s] 46%|####6     | 12/26 [00:00<00:00, 26.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.15it/s] 88%|########8 | 23/26 [00:00<00:00, 29.93it/s]100%|##########| 26/26 [00:01<00:00, 25.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.487 (1.825)	train_nll   0.32 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   1.16 (  1.45)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.10)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.7300 (5.7180)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 27%|##6       | 7/26 [00:00<00:00, 35.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.45it/s] 46%|####6     | 12/26 [00:00<00:00, 40.72it/s] 65%|######5   | 17/26 [00:00<00:00, 39.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.14it/s] 85%|########4 | 22/26 [00:00<00:00, 41.32it/s]100%|##########| 26/26 [00:00<00:00, 36.51it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.89 (  0.89)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 0.307 (0.307)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.410 (0.354)	test_acc   0.83 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.410 (0.354)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.413 (0.367)	test_acc   0.81 (  0.85)	test_minacc   0.08 (  0.15)	test_majacc   0.96 (  0.97)	Loss_d 0.413 (0.367)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.08 (  0.15)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.294 (0.361)	test_acc   0.88 (  0.85)	test_minacc   0.29 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.294 (0.361)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.29 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 1.920 (1.920)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.95 (  0.95)	Loss_d 1.920 (1.920)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.920 (1.920)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.95 (  0.95)	Loss_d 1.920 (1.920)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/185/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0418 (0.0491)	validation_time 0.0004 (0.0017)	train_time 0.0413 (0.0470)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 15%|#5        | 4/26 [00:00<00:01, 19.39it/s] 27%|##6       | 7/26 [00:00<00:00, 22.50it/s] 42%|####2     | 11/26 [00:00<00:00, 25.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.46it/s] 65%|######5   | 17/26 [00:00<00:00, 27.07it/s] 81%|########  | 21/26 [00:00<00:00, 29.02it/s] 96%|#########6| 25/26 [00:00<00:00, 30.35it/s]100%|##########| 26/26 [00:01<00:00, 25.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.096 (1.317)	train_nll   0.33 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.77 (  0.95)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0098 (5.8761)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 23%|##3       | 6/26 [00:00<00:00, 24.36it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.36it/s] 42%|####2     | 11/26 [00:00<00:00, 33.11it/s] 62%|######1   | 16/26 [00:00<00:00, 38.34it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.34it/s] 81%|########  | 21/26 [00:00<00:00, 38.13it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
Test: [   0/  26]	Loss 0.303 (0.303)	test_acc   0.88 (  0.88)	test_minacc   0.15 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.303 (0.303)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.418 (0.351)	test_acc   0.83 (  0.85)	test_minacc   0.16 (  0.14)	test_majacc   0.97 (  0.98)	Loss_d 0.418 (0.351)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.16 (  0.14)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.398 (0.362)	test_acc   0.82 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.398 (0.362)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.305 (0.358)	test_acc   0.88 (  0.85)	test_minacc   0.26 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.305 (0.358)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.26 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 1.906 (1.906)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.906 (1.906)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.906 (1.906)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.906 (1.906)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Overall Timing[  5/  1]	epoch_time 0.0415 (0.0478)	validation_time 0.0004 (0.0015)	train_time 0.0410 (0.0460)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.8489000276327133, 0.18800000846385956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 15%|#5        | 4/26 [00:00<00:01, 15.70it/s] 27%|##6       | 7/26 [00:00<00:00, 20.73it/s] 38%|###8      | 10/26 [00:00<00:00, 23.51it/s] 50%|#####     | 13/26 [00:00<00:00, 25.35it/s] 62%|######1   | 16/26 [00:00<00:00, 26.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.40it/s] 88%|########8 | 23/26 [00:00<00:00, 28.47it/s]100%|##########| 26/26 [00:01<00:00, 23.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.837 (0.980)	train_nll   0.33 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.50 (  0.62)	train_acc   0.87 (  0.85)	train_minacc   0.12 (  0.14)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0499 (6.6330)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 23%|##3       | 6/26 [00:00<00:00, 31.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.01it/s] 46%|####6     | 12/26 [00:00<00:00, 42.59it/s] 65%|######5   | 17/26 [00:00<00:00, 42.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.86it/s] 88%|########8 | 23/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 39.62it/s]
Test: [   0/  26]	Loss 0.285 (0.285)	test_acc   0.89 (  0.89)	test_minacc   0.19 (  0.19)	test_majacc   0.99 (  0.99)	Loss_d 0.285 (0.285)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.395 (0.329)	test_acc   0.83 (  0.86)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.99)	Loss_d 0.395 (0.329)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.378 (0.340)	test_acc   0.83 (  0.85)	test_minacc   0.14 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.378 (0.340)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.14 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.305 (0.336)	test_acc   0.88 (  0.85)	test_minacc   0.21 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.305 (0.336)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.21 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.29it/s]
Test: [  0/  1]	Loss 1.812 (1.812)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.812 (1.812)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.812 (1.812)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 1.812 (1.812)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.81 (  0.81)
Overall Timing[  6/  1]	epoch_time 0.0440 (0.0473)	validation_time 0.0003 (0.0013)	train_time 0.0437 (0.0457)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.8549000282287598, 0.21400001645088196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 19%|#9        | 5/26 [00:00<00:00, 24.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.89it/s] 50%|#####     | 13/26 [00:00<00:00, 29.42it/s] 65%|######5   | 17/26 [00:00<00:00, 30.33it/s] 81%|########  | 21/26 [00:00<00:00, 30.98it/s] 96%|#########6| 25/26 [00:00<00:00, 31.14it/s]100%|##########| 26/26 [00:00<00:00, 28.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.000 (0.566)	train_nll   0.67 (  0.41)	train_penalty   0.00 (  0.03)	weight_norm   0.39 (  0.43)	train_acc   0.61 (  0.81)	train_minacc   0.62 (  0.25)	train_majacc   0.61 (  0.91)	train_corr   0.00 (  0.00)	l1 7.1732 (7.5691)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 15%|#5        | 4/26 [00:00<00:01, 17.06it/s] 35%|###4      | 9/26 [00:00<00:00, 29.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.30it/s] 92%|#########2| 24/26 [00:00<00:00, 42.25it/s]100%|##########| 26/26 [00:00<00:00, 33.81it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.54 (  0.55)	test_majacc   0.50 (  0.53)	Loss_d 0.696 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.03 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.52 (  0.53)	test_minacc   0.45 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.694)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.06)
Test: [  26/  26]	Loss 0.691 (0.694)	test_acc   0.54 (  0.53)	test_minacc   0.65 (  0.51)	test_majacc   0.52 (  0.53)	Loss_d 0.691 (0.694)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.65 (  0.51)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.00 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.700 (0.700)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[  7/  1]	epoch_time 0.0428 (0.0467)	validation_time 0.0004 (0.0012)	train_time 0.0424 (0.0453)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5275000161826611, 0.5060000419616699)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.12it/s] 46%|####6     | 12/26 [00:00<00:00, 27.35it/s] 62%|######1   | 16/26 [00:00<00:00, 28.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.64it/s] 92%|#########2| 24/26 [00:00<00:00, 30.51it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.45)	train_acc   0.50 (  0.52)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 6.5113 (6.6954)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.39it/s] 27%|##6       | 7/26 [00:00<00:00, 34.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.57it/s] 46%|####6     | 12/26 [00:00<00:00, 40.45it/s] 65%|######5   | 17/26 [00:00<00:00, 39.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.33it/s] 85%|########4 | 22/26 [00:00<00:00, 42.13it/s]100%|##########| 26/26 [00:00<00:00, 36.42it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.47 (  0.51)	test_minacc   0.52 (  0.54)	test_majacc   0.46 (  0.50)	Loss_d 0.694 (0.691)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.14 (  0.12)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.23 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.11it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[  8/  1]	epoch_time 0.0408 (0.0460)	validation_time 0.0003 (0.0011)	train_time 0.0405 (0.0448)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5000000106692314, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 15%|#5        | 4/26 [00:00<00:01, 18.27it/s] 31%|###       | 8/26 [00:00<00:00, 25.51it/s] 46%|####6     | 12/26 [00:00<00:00, 28.11it/s] 62%|######1   | 16/26 [00:00<00:00, 29.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.36it/s] 88%|########8 | 23/26 [00:00<00:00, 30.38it/s]100%|##########| 26/26 [00:00<00:00, 26.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4666 (6.4796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.70it/s] 31%|###       | 8/26 [00:00<00:00, 32.67it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.67it/s] 50%|#####     | 13/26 [00:00<00:00, 37.83it/s] 69%|######9   | 18/26 [00:00<00:00, 41.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.46it/s] 88%|########8 | 23/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 36.27it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.52 (  0.54)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.15 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.47 (  0.50)	test_minacc   0.45 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.21 (  0.12)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[  9/  1]	epoch_time 0.0419 (0.0456)	validation_time 0.0004 (0.0010)	train_time 0.0414 (0.0444)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.501200009226799, 0.5)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.96it/s] 23%|##3       | 6/26 [00:00<00:00, 23.99it/s] 38%|###8      | 10/26 [00:00<00:00, 27.41it/s] 50%|#####     | 13/26 [00:00<00:00, 27.83it/s] 62%|######1   | 16/26 [00:00<00:00, 27.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.14it/s] 88%|########8 | 23/26 [00:00<00:00, 28.99it/s]100%|##########| 26/26 [00:00<00:00, 26.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.51 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4650 (6.4664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 27%|##6       | 7/26 [00:00<00:00, 33.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.92it/s] 46%|####6     | 12/26 [00:00<00:00, 39.35it/s] 65%|######5   | 17/26 [00:00<00:00, 42.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.60it/s] 85%|########4 | 22/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 36.98it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.49 (  0.51)	test_minacc   0.52 (  0.54)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.691)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.13 (  0.10)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.48 (  0.51)	test_minacc   0.46 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.691)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.18 (  0.10)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.75it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 10/  1]	epoch_time 0.0438 (0.0455)	validation_time 0.0004 (0.0010)	train_time 0.0434 (0.0443)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5073000092804432, 0.503000020980835)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.53it/s] 15%|#5        | 4/26 [00:00<00:01, 13.75it/s] 31%|###       | 8/26 [00:00<00:00, 20.62it/s] 46%|####6     | 12/26 [00:00<00:00, 24.53it/s] 62%|######1   | 16/26 [00:00<00:00, 26.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.28it/s] 92%|#########2| 24/26 [00:00<00:00, 29.00it/s]100%|##########| 26/26 [00:01<00:00, 23.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4668 (6.4671)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.87it/s] 27%|##6       | 7/26 [00:00<00:00, 34.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.39it/s] 46%|####6     | 12/26 [00:00<00:00, 40.65it/s] 69%|######9   | 18/26 [00:00<00:00, 41.22it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.22it/s] 88%|########8 | 23/26 [00:00<00:00, 43.05it/s]100%|##########| 26/26 [00:00<00:00, 38.03it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.52 (  0.55)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.11 (  0.08)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.46 (  0.53)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.46 (  0.53)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.16 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.47 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 11/  1]	epoch_time 0.0469 (0.0456)	validation_time 0.0004 (0.0009)	train_time 0.0465 (0.0445)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5228000102639199, 0.5080000162124634)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.98it/s] 15%|#5        | 4/26 [00:00<00:02, 10.66it/s] 31%|###       | 8/26 [00:00<00:01, 17.60it/s] 46%|####6     | 12/26 [00:00<00:00, 21.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.23it/s] 88%|########8 | 23/26 [00:01<00:00, 27.58it/s]100%|##########| 26/26 [00:01<00:00, 21.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4689 (6.4689)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 23%|##3       | 6/26 [00:00<00:00, 23.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.54it/s] 42%|####2     | 11/26 [00:00<00:00, 32.69it/s] 62%|######1   | 16/26 [00:00<00:00, 37.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.55it/s] 81%|########  | 21/26 [00:00<00:00, 40.73it/s]100%|##########| 26/26 [00:00<00:00, 43.37it/s]100%|##########| 26/26 [00:00<00:00, 33.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.54)	test_minacc   0.55 (  0.56)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.09 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.54)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.14 (  0.06)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.47 (  0.53)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.04 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 12/  1]	epoch_time 0.0500 (0.0459)	validation_time 0.0004 (0.0009)	train_time 0.0496 (0.0449)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5323000108599663, 0.51500004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 12%|#1        | 3/26 [00:00<00:01, 13.30it/s] 23%|##3       | 6/26 [00:00<00:01, 19.91it/s] 38%|###8      | 10/26 [00:00<00:00, 24.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.88it/s] 65%|######5   | 17/26 [00:00<00:00, 27.61it/s] 81%|########  | 21/26 [00:00<00:00, 28.83it/s] 96%|#########6| 25/26 [00:00<00:00, 30.16it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4708 (6.4707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 23%|##3       | 6/26 [00:00<00:00, 22.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.19it/s] 42%|####2     | 11/26 [00:00<00:00, 31.15it/s] 62%|######1   | 16/26 [00:00<00:00, 36.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.74it/s] 81%|########  | 21/26 [00:00<00:00, 36.92it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]100%|##########| 26/26 [00:00<00:00, 31.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.54 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.07 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.55)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.11 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.54)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 13/  1]	epoch_time 0.0460 (0.0459)	validation_time 0.0004 (0.0009)	train_time 0.0455 (0.0449)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5172000122070313, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.82it/s] 19%|#9        | 5/26 [00:00<00:01, 14.84it/s] 35%|###4      | 9/26 [00:00<00:00, 20.36it/s] 50%|#####     | 13/26 [00:00<00:00, 24.06it/s] 62%|######1   | 16/26 [00:00<00:00, 25.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.27it/s] 88%|########8 | 23/26 [00:00<00:00, 27.86it/s]100%|##########| 26/26 [00:01<00:00, 22.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.41 (  0.53)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 6.4723 (6.4721)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.06it/s] 27%|##6       | 7/26 [00:00<00:00, 35.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.11it/s] 46%|####6     | 12/26 [00:00<00:00, 39.70it/s] 65%|######5   | 17/26 [00:00<00:00, 43.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.26it/s] 85%|########4 | 22/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 38.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.54 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.51 (  0.54)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.09 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.41 (  0.53)	test_majacc   0.44 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.41 (  0.53)	test_majacc_d   0.44 (  0.50)	test_corr_d   0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 14/  1]	epoch_time 0.0406 (0.0456)	validation_time 0.0004 (0.0008)	train_time 0.0402 (0.0446)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5037000131607056, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 15%|#5        | 4/26 [00:00<00:01, 14.91it/s] 27%|##6       | 7/26 [00:00<00:00, 19.93it/s] 42%|####2     | 11/26 [00:00<00:00, 24.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.64it/s] 69%|######9   | 18/26 [00:00<00:00, 27.59it/s] 85%|########4 | 22/26 [00:00<00:00, 28.55it/s] 96%|#########6| 25/26 [00:01<00:00, 28.56it/s]100%|##########| 26/26 [00:01<00:00, 23.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.44 (  0.49)	train_minacc   0.35 (  0.52)	train_majacc   0.45 (  0.49)	train_corr   0.00 (  0.00)	l1 6.4733 (6.4732)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 23%|##3       | 6/26 [00:00<00:01, 18.73it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.73it/s] 42%|####2     | 11/26 [00:00<00:00, 27.99it/s] 62%|######1   | 16/26 [00:00<00:00, 34.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.03it/s] 81%|########  | 21/26 [00:00<00:00, 35.44it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 28.76it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.55)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.51 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.51)	test_minacc   0.35 (  0.53)	test_majacc   0.44 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.51)	test_minacc_d   0.35 (  0.53)	test_majacc_d   0.44 (  0.50)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.34 (  0.34)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.47 (  0.47)	test_majacc   0.34 (  0.34)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 15/  1]	epoch_time 0.0451 (0.0456)	validation_time 0.0003 (0.0008)	train_time 0.0448 (0.0446)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5068000137209893, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 15%|#5        | 4/26 [00:00<00:01, 14.73it/s] 27%|##6       | 7/26 [00:00<00:00, 19.79it/s] 38%|###8      | 10/26 [00:00<00:00, 23.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.27it/s] 69%|######9   | 18/26 [00:00<00:00, 28.62it/s] 85%|########4 | 22/26 [00:00<00:00, 29.84it/s]100%|##########| 26/26 [00:01<00:00, 31.25it/s]100%|##########| 26/26 [00:01<00:00, 24.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.45 (  0.50)	train_minacc   0.35 (  0.52)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4740 (6.4739)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 23%|##3       | 6/26 [00:00<00:00, 27.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.03it/s] 42%|####2     | 11/26 [00:00<00:00, 35.13it/s] 62%|######1   | 16/26 [00:00<00:00, 39.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.58it/s] 81%|########  | 21/26 [00:00<00:00, 38.82it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 33.65it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.47 (  0.47)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.08 (  0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.35 (  0.52)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.35 (  0.52)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.63it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.01 (  0.01)
Overall Timing[ 16/  1]	epoch_time 0.0432 (0.0454)	validation_time 0.0006 (0.0008)	train_time 0.0426 (0.0445)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5111000160872936, 0.43700000643730164)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 12%|#1        | 3/26 [00:00<00:01, 12.88it/s] 23%|##3       | 6/26 [00:00<00:01, 19.58it/s] 35%|###4      | 9/26 [00:00<00:00, 22.81it/s] 46%|####6     | 12/26 [00:00<00:00, 24.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.16it/s] 88%|########8 | 23/26 [00:00<00:00, 29.05it/s]100%|##########| 26/26 [00:01<00:00, 24.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.46 (  0.51)	train_minacc   0.38 (  0.50)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4744 (6.4744)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.09it/s] 23%|##3       | 6/26 [00:00<00:00, 20.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.65it/s] 42%|####2     | 11/26 [00:00<00:00, 29.38it/s] 62%|######1   | 16/26 [00:00<00:00, 35.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.62it/s] 81%|########  | 21/26 [00:00<00:00, 35.48it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.47 (  0.47)	test_majacc   0.41 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.46 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.32 (  0.51)	test_majacc   0.49 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.32 (  0.51)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.02 (  0.02)
Overall Timing[ 17/  1]	epoch_time 0.0429 (0.0453)	validation_time 0.0003 (0.0008)	train_time 0.0425 (0.0444)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5183000167012215, 0.4350000321865082)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 35%|###4      | 9/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 27.61it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 81%|########  | 21/26 [00:00<00:00, 29.08it/s] 96%|#########6| 25/26 [00:00<00:00, 29.60it/s]100%|##########| 26/26 [00:01<00:00, 25.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.46 (  0.51)	train_minacc   0.26 (  0.48)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 23%|##3       | 6/26 [00:00<00:00, 30.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.64it/s] 42%|####2     | 11/26 [00:00<00:00, 37.45it/s] 62%|######1   | 16/26 [00:00<00:00, 41.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.93it/s] 81%|########  | 21/26 [00:00<00:00, 40.20it/s]100%|##########| 26/26 [00:00<00:00, 43.12it/s]100%|##########| 26/26 [00:00<00:00, 35.52it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.38 (  0.38)	test_majacc   0.41 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.06 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.26 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.26 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.96it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.04 (  0.04)
Overall Timing[ 18/  1]	epoch_time 0.0418 (0.0451)	validation_time 0.0005 (0.0007)	train_time 0.0413 (0.0442)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.519800009638071, 0.42500001192092896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 15%|#5        | 4/26 [00:00<00:01, 17.02it/s] 31%|###       | 8/26 [00:00<00:00, 23.54it/s] 46%|####6     | 12/26 [00:00<00:00, 27.07it/s] 62%|######1   | 16/26 [00:00<00:00, 28.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.82it/s] 92%|#########2| 24/26 [00:00<00:00, 29.92it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.51)	train_minacc   0.26 (  0.47)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.14it/s] 27%|##6       | 7/26 [00:00<00:00, 28.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.68it/s] 46%|####6     | 12/26 [00:00<00:00, 35.43it/s] 65%|######5   | 17/26 [00:00<00:00, 39.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.92it/s] 85%|########4 | 22/26 [00:00<00:00, 38.56it/s]100%|##########| 26/26 [00:00<00:00, 34.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.36 (  0.36)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.48)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.07 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.52)	test_minacc   0.21 (  0.48)	test_majacc   0.49 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.21 (  0.48)	test_majacc_d   0.49 (  0.53)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.05 (  0.05)
Overall Timing[ 19/  1]	epoch_time 0.0413 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0408 (0.0441)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.521000014334917, 0.4140000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 15%|#5        | 4/26 [00:00<00:01, 18.84it/s] 31%|###       | 8/26 [00:00<00:00, 25.00it/s] 46%|####6     | 12/26 [00:00<00:00, 27.86it/s] 62%|######1   | 16/26 [00:00<00:00, 29.32it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.19it/s] 92%|#########2| 24/26 [00:00<00:00, 30.70it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.51)	train_minacc   0.26 (  0.46)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.44it/s] 15%|#5        | 4/26 [00:00<00:01, 16.74it/s] 35%|###4      | 9/26 [00:00<00:00, 28.45it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.24it/s] 92%|#########2| 24/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 31.99it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.34 (  0.34)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.52 (  0.47)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.48 (  0.46)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.48 (  0.46)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.24 (  0.47)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.24 (  0.47)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.37 (  0.37)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.37 (  0.37)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.06 (  0.06)
Overall Timing[ 20/  1]	epoch_time 0.0404 (0.0447)	validation_time 0.0003 (0.0007)	train_time 0.0400 (0.0439)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5202000142633915, 0.41100001335144043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.28it/s] 19%|#9        | 5/26 [00:00<00:00, 21.71it/s] 31%|###       | 8/26 [00:00<00:00, 25.01it/s] 46%|####6     | 12/26 [00:00<00:00, 27.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.98it/s] 88%|########8 | 23/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:00<00:00, 26.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.51)	train_minacc   0.26 (  0.46)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.60it/s] 27%|##6       | 7/26 [00:00<00:00, 30.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.74it/s] 46%|####6     | 12/26 [00:00<00:00, 37.71it/s] 65%|######5   | 17/26 [00:00<00:00, 41.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.33it/s] 85%|########4 | 22/26 [00:00<00:00, 43.74it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.32 (  0.32)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.51 (  0.46)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.51 (  0.46)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.51)	test_minacc   0.43 (  0.45)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.06 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.52)	test_minacc   0.24 (  0.46)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.52)	test_minacc_d   0.24 (  0.46)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.71it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.07 (  0.07)
Overall Timing[ 21/  1]	epoch_time 0.0446 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0442 (0.0439)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.515600013166666, 0.406000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 50%|#####     | 13/26 [00:00<00:00, 28.18it/s] 62%|######1   | 16/26 [00:00<00:00, 28.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.78it/s] 92%|#########2| 24/26 [00:00<00:00, 30.19it/s]100%|##########| 26/26 [00:00<00:00, 26.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.51)	train_minacc   0.24 (  0.45)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 23%|##3       | 6/26 [00:00<00:00, 25.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.12it/s] 42%|####2     | 11/26 [00:00<00:00, 34.26it/s] 62%|######1   | 16/26 [00:00<00:00, 39.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.03it/s] 81%|########  | 21/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 33.84it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.54 (  0.46)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.40 (  0.45)	test_majacc   0.56 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.06 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.24 (  0.45)	test_majacc   0.49 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.24 (  0.45)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.60it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.08 (  0.08)
Overall Timing[ 22/  1]	epoch_time 0.0437 (0.0446)	validation_time 0.0006 (0.0007)	train_time 0.0430 (0.0439)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5138000147640706, 0.40700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 15%|#5        | 4/26 [00:00<00:01, 18.28it/s] 31%|###       | 8/26 [00:00<00:00, 24.14it/s] 46%|####6     | 12/26 [00:00<00:00, 26.84it/s] 62%|######1   | 16/26 [00:00<00:00, 28.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.17it/s] 92%|#########2| 24/26 [00:00<00:00, 29.99it/s]100%|##########| 26/26 [00:01<00:00, 25.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.475024223327637
set z to 6.151273012161255
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.48 (  0.51)	train_minacc   0.26 (  0.45)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.53it/s] 27%|##6       | 7/26 [00:00<00:00, 29.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.21it/s] 46%|####6     | 12/26 [00:00<00:00, 36.65it/s] 65%|######5   | 17/26 [00:00<00:00, 40.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.92it/s] 85%|########4 | 22/26 [00:00<00:00, 38.75it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.36 (  0.36)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.54 (  0.46)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.38 (  0.45)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.26 (  0.45)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.26 (  0.45)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.09 (  0.09)
Overall Timing[ 23/  1]	epoch_time 0.0415 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0411 (0.0437)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5103000102043151, 0.4100000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.07it/s] 23%|##3       | 6/26 [00:00<00:00, 24.94it/s] 38%|###8      | 10/26 [00:00<00:00, 27.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.74it/s] 69%|######9   | 18/26 [00:00<00:00, 29.32it/s] 85%|########4 | 22/26 [00:00<00:00, 30.34it/s]100%|##########| 26/26 [00:00<00:00, 30.99it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.49 (  0.51)	train_minacc   0.26 (  0.46)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 23%|##3       | 6/26 [00:00<00:00, 28.80it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.80it/s] 42%|####2     | 11/26 [00:00<00:00, 36.45it/s] 62%|######1   | 16/26 [00:00<00:00, 41.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.18it/s] 81%|########  | 21/26 [00:00<00:00, 39.43it/s]100%|##########| 26/26 [00:00<00:00, 35.42it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.34 (  0.34)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.52 (  0.46)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.52 (  0.46)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.45)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.45)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.26 (  0.46)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.26 (  0.46)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.40 (  0.40)	test_minacc   0.41 (  0.41)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.40 (  0.40)	test_minacc   0.41 (  0.41)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.10 (  0.10)
Overall Timing[ 24/  1]	epoch_time 0.0417 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0413 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5080000101327896, 0.40400001406669617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.83it/s] 19%|#9        | 5/26 [00:00<00:01, 20.82it/s] 31%|###       | 8/26 [00:00<00:00, 23.99it/s] 46%|####6     | 12/26 [00:00<00:00, 26.61it/s] 62%|######1   | 16/26 [00:00<00:00, 28.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.65it/s] 85%|########4 | 22/26 [00:00<00:00, 29.02it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.49 (  0.50)	train_minacc   0.26 (  0.45)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 23%|##3       | 6/26 [00:00<00:00, 22.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.61it/s] 42%|####2     | 11/26 [00:00<00:00, 30.89it/s] 62%|######1   | 16/26 [00:00<00:00, 36.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.66it/s] 81%|########  | 21/26 [00:00<00:00, 39.49it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]100%|##########| 26/26 [00:00<00:00, 32.27it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.32 (  0.32)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.47)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.07 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.38 (  0.45)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.26 (  0.46)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.26 (  0.46)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.10 (  0.10)
Overall Timing[ 25/  1]	epoch_time 0.0398 (0.0442)	validation_time 0.0003 (0.0007)	train_time 0.0395 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5052000070214272, 0.40800002217292786)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 18.88it/s] 35%|###4      | 9/26 [00:00<00:00, 23.83it/s] 50%|#####     | 13/26 [00:00<00:00, 26.19it/s] 65%|######5   | 17/26 [00:00<00:00, 27.81it/s] 81%|########  | 21/26 [00:00<00:00, 28.83it/s] 96%|#########6| 25/26 [00:00<00:00, 29.49it/s]100%|##########| 26/26 [00:01<00:00, 25.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.49 (  0.50)	train_minacc   0.29 (  0.45)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.83it/s] 23%|##3       | 6/26 [00:00<00:00, 32.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.49it/s] 42%|####2     | 11/26 [00:00<00:00, 38.09it/s] 62%|######1   | 16/26 [00:00<00:00, 41.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.25it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]100%|##########| 26/26 [00:00<00:00, 35.58it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.34 (  0.34)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.50)	test_minacc   0.51 (  0.46)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.50)	test_minacc_d   0.51 (  0.46)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.38 (  0.45)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.29 (  0.46)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.29 (  0.46)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.77it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Overall Timing[ 26/  1]	epoch_time 0.0451 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0447 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5045000093579293, 0.4090000092983246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.66it/s] 19%|#9        | 5/26 [00:00<00:00, 23.02it/s] 31%|###       | 8/26 [00:00<00:00, 25.04it/s] 42%|####2     | 11/26 [00:00<00:00, 26.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.79it/s] 88%|########8 | 23/26 [00:00<00:00, 29.37it/s]100%|##########| 26/26 [00:01<00:00, 25.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.49 (  0.50)	train_minacc   0.29 (  0.45)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 31%|###       | 8/26 [00:00<00:00, 38.14it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.14it/s] 50%|#####     | 13/26 [00:00<00:00, 41.41it/s] 69%|######9   | 18/26 [00:00<00:00, 43.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.02it/s] 88%|########8 | 23/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 37.55it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.34 (  0.34)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.38 (  0.46)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.38 (  0.46)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.29 (  0.46)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.29 (  0.46)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Overall Timing[ 27/  1]	epoch_time 0.0442 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.5024000083208084, 0.4050000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.77it/s] 19%|#9        | 5/26 [00:00<00:00, 22.51it/s] 35%|###4      | 9/26 [00:00<00:00, 26.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.39it/s] 65%|######5   | 17/26 [00:00<00:00, 29.14it/s] 81%|########  | 21/26 [00:00<00:00, 29.46it/s] 96%|#########6| 25/26 [00:00<00:00, 29.78it/s]100%|##########| 26/26 [00:00<00:00, 26.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.29 (  0.45)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4748 (6.4748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 15%|#5        | 4/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 31.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 40.42it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.29it/s] 96%|#########6| 25/26 [00:00<00:00, 42.99it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.34 (  0.34)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.52 (  0.47)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.42 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.29 (  0.46)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.29 (  0.46)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.39it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.41 (  0.41)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Overall Timing[ 28/  1]	epoch_time 0.0416 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0412 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.499100013166666, 0.406000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 15%|#5        | 4/26 [00:00<00:01, 18.27it/s] 27%|##6       | 7/26 [00:00<00:00, 22.61it/s] 38%|###8      | 10/26 [00:00<00:00, 25.26it/s] 50%|#####     | 13/26 [00:00<00:00, 26.66it/s] 65%|######5   | 17/26 [00:00<00:00, 27.98it/s] 81%|########  | 21/26 [00:00<00:00, 28.91it/s] 96%|#########6| 25/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 25.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.29 (  0.45)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 23%|##3       | 6/26 [00:00<00:00, 29.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.92it/s] 42%|####2     | 11/26 [00:00<00:00, 36.36it/s] 62%|######1   | 16/26 [00:00<00:00, 41.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.20it/s] 81%|########  | 21/26 [00:00<00:00, 38.24it/s]100%|##########| 26/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.36 (  0.36)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.55 (  0.47)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.55 (  0.47)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.42 (  0.46)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.29 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.29 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.55it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.12 (  0.12)
Overall Timing[ 29/  1]	epoch_time 0.0448 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0445 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.49830001121759415, 0.4150000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 12%|#1        | 3/26 [00:00<00:02, 10.31it/s] 23%|##3       | 6/26 [00:00<00:01, 17.16it/s] 35%|###4      | 9/26 [00:00<00:00, 21.28it/s] 46%|####6     | 12/26 [00:00<00:00, 23.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.51it/s] 69%|######9   | 18/26 [00:00<00:00, 26.31it/s] 81%|########  | 21/26 [00:00<00:00, 27.34it/s] 96%|#########6| 25/26 [00:01<00:00, 28.33it/s]100%|##########| 26/26 [00:01<00:00, 22.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.29 (  0.46)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  7.77it/s] 27%|##6       | 7/26 [00:00<00:00, 22.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.08it/s] 46%|####6     | 12/26 [00:00<00:00, 30.46it/s] 65%|######5   | 17/26 [00:00<00:00, 35.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.94it/s] 85%|########4 | 22/26 [00:00<00:00, 36.04it/s]100%|##########| 26/26 [00:00<00:00, 30.73it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.32 (  0.32)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.54 (  0.46)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.45)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.32 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.32 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.35 (  0.35)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.41 (  0.41)	test_minacc   0.42 (  0.42)	test_majacc   0.35 (  0.35)	Loss_d 0.694 (0.694)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.11 (  0.11)
Overall Timing[ 30/  1]	epoch_time 0.0450 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.4919000106453896, 0.4090000092983246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s] 15%|#5        | 4/26 [00:00<00:01, 15.58it/s] 31%|###       | 8/26 [00:00<00:00, 22.22it/s] 46%|####6     | 12/26 [00:00<00:00, 25.37it/s] 62%|######1   | 16/26 [00:00<00:00, 27.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.52it/s] 88%|########8 | 23/26 [00:00<00:00, 28.46it/s]100%|##########| 26/26 [00:01<00:00, 23.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.49 (  0.50)	train_minacc   0.29 (  0.45)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 23%|##3       | 6/26 [00:00<00:00, 23.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.81it/s] 42%|####2     | 11/26 [00:00<00:00, 32.82it/s] 62%|######1   | 16/26 [00:00<00:00, 38.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.02it/s] 81%|########  | 21/26 [00:00<00:00, 41.06it/s]100%|##########| 26/26 [00:00<00:00, 43.53it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.34 (  0.34)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.49)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.06 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.42 (  0.47)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.29 (  0.47)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.29 (  0.47)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.11 (  0.11)
Overall Timing[ 31/  1]	epoch_time 0.0441 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.4981000047624111, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 19%|#9        | 5/26 [00:00<00:01, 18.87it/s] 31%|###       | 8/26 [00:00<00:00, 22.12it/s] 42%|####2     | 11/26 [00:00<00:00, 24.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.51it/s] 69%|######9   | 18/26 [00:00<00:00, 27.31it/s] 81%|########  | 21/26 [00:00<00:00, 28.05it/s] 92%|#########2| 24/26 [00:00<00:00, 28.44it/s]100%|##########| 26/26 [00:01<00:00, 24.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.19it/s] 27%|##6       | 7/26 [00:00<00:00, 34.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.07it/s] 46%|####6     | 12/26 [00:00<00:00, 39.64it/s] 65%|######5   | 17/26 [00:00<00:00, 42.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.19it/s] 85%|########4 | 22/26 [00:00<00:00, 40.20it/s]100%|##########| 26/26 [00:00<00:00, 37.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.34 (  0.34)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.54 (  0.48)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.29 (  0.46)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.29 (  0.46)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.03it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.37 (  0.37)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.37 (  0.37)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.11 (  0.11)
Overall Timing[ 32/  1]	epoch_time 0.0460 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0455 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.49490001013875007, 0.42000001668930054)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 15%|#5        | 4/26 [00:00<00:01, 19.48it/s] 27%|##6       | 7/26 [00:00<00:00, 23.95it/s] 38%|###8      | 10/26 [00:00<00:00, 26.20it/s] 50%|#####     | 13/26 [00:00<00:00, 27.51it/s] 65%|######5   | 17/26 [00:00<00:00, 29.04it/s] 81%|########  | 21/26 [00:00<00:00, 29.59it/s] 96%|#########6| 25/26 [00:00<00:00, 30.18it/s]100%|##########| 26/26 [00:01<00:00, 25.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 23%|##3       | 6/26 [00:00<00:00, 23.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.50it/s] 42%|####2     | 11/26 [00:00<00:00, 32.08it/s] 62%|######1   | 16/26 [00:00<00:00, 37.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.38it/s] 81%|########  | 21/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 42.98it/s]100%|##########| 26/26 [00:00<00:00, 32.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.36 (  0.36)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.42 (  0.46)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.55it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Overall Timing[ 33/  1]	epoch_time 0.0433 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0429 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.4919000109434128, 0.42500001192092896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 15%|#5        | 4/26 [00:00<00:01, 19.88it/s] 31%|###       | 8/26 [00:00<00:00, 25.59it/s] 46%|####6     | 12/26 [00:00<00:00, 27.94it/s] 62%|######1   | 16/26 [00:00<00:00, 29.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.89it/s] 92%|#########2| 24/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4747 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 23%|##3       | 6/26 [00:00<00:00, 29.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.89it/s] 42%|####2     | 11/26 [00:00<00:00, 37.63it/s] 62%|######1   | 16/26 [00:00<00:00, 41.88it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.88it/s] 81%|########  | 21/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 42.73it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.36 (  0.36)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.54 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.42 (  0.46)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 34/  1]	epoch_time 0.0422 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.4926000100672245, 0.42500001192092896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.84it/s] 15%|#5        | 4/26 [00:00<00:01, 13.05it/s] 27%|##6       | 7/26 [00:00<00:01, 18.29it/s] 38%|###8      | 10/26 [00:00<00:00, 22.01it/s] 50%|#####     | 13/26 [00:00<00:00, 24.02it/s] 62%|######1   | 16/26 [00:00<00:00, 25.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.71it/s] 88%|########8 | 23/26 [00:01<00:00, 27.89it/s]100%|##########| 26/26 [00:01<00:00, 21.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.50 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.01it/s] 27%|##6       | 7/26 [00:00<00:00, 19.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.48it/s] 46%|####6     | 12/26 [00:00<00:00, 27.97it/s] 65%|######5   | 17/26 [00:00<00:00, 32.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.00it/s] 85%|########4 | 22/26 [00:00<00:00, 37.00it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.36 (  0.36)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.46 (  0.50)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.04it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 35/  1]	epoch_time 0.0432 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.49130000719428063, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.06it/s] 15%|#5        | 4/26 [00:00<00:01, 11.18it/s] 27%|##6       | 7/26 [00:00<00:01, 16.57it/s] 42%|####2     | 11/26 [00:00<00:00, 21.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.66it/s] 65%|######5   | 17/26 [00:00<00:00, 25.19it/s] 81%|########  | 21/26 [00:01<00:00, 26.83it/s] 96%|#########6| 25/26 [00:01<00:00, 28.22it/s]100%|##########| 26/26 [00:01<00:00, 21.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.51 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.54 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 12%|#1        | 3/26 [00:00<00:01, 13.29it/s] 31%|###       | 8/26 [00:00<00:00, 27.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.41it/s] 50%|#####     | 13/26 [00:00<00:00, 34.56it/s] 69%|######9   | 18/26 [00:00<00:00, 36.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.04it/s] 92%|#########2| 24/26 [00:00<00:00, 42.29it/s]100%|##########| 26/26 [00:00<00:00, 32.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.36 (  0.36)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.45)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 36/  1]	epoch_time 0.0467 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0464 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.49010000556707384, 0.4230000078678131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 19%|#9        | 5/26 [00:00<00:01, 20.53it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 50%|#####     | 13/26 [00:00<00:00, 27.26it/s] 65%|######5   | 17/26 [00:00<00:00, 28.94it/s] 81%|########  | 21/26 [00:00<00:00, 29.82it/s] 96%|#########6| 25/26 [00:00<00:00, 30.32it/s]100%|##########| 26/26 [00:01<00:00, 25.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.51 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.54 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 23%|##3       | 6/26 [00:00<00:00, 28.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.37it/s] 42%|####2     | 11/26 [00:00<00:00, 35.80it/s] 62%|######1   | 16/26 [00:00<00:00, 39.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.69it/s] 81%|########  | 21/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 43.04it/s]100%|##########| 26/26 [00:00<00:00, 35.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.36 (  0.36)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.43 (  0.45)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.75it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 37/  1]	epoch_time 0.0439 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0435 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.489700010240078, 0.42500001192092896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 15%|#5        | 4/26 [00:00<00:01, 17.92it/s] 23%|##3       | 6/26 [00:00<00:01, 18.00it/s] 35%|###4      | 9/26 [00:00<00:00, 20.83it/s] 50%|#####     | 13/26 [00:00<00:00, 24.80it/s] 65%|######5   | 17/26 [00:00<00:00, 26.61it/s] 81%|########  | 21/26 [00:00<00:00, 28.06it/s] 96%|#########6| 25/26 [00:01<00:00, 28.97it/s]100%|##########| 26/26 [00:01<00:00, 23.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.51 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.54 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 23%|##3       | 6/26 [00:00<00:00, 29.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.02it/s] 42%|####2     | 11/26 [00:00<00:00, 36.59it/s] 62%|######1   | 16/26 [00:00<00:00, 38.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.67it/s] 81%|########  | 21/26 [00:00<00:00, 39.66it/s]100%|##########| 26/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.38 (  0.38)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.42 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 38/  1]	epoch_time 0.0448 (0.0442)	validation_time 0.0006 (0.0006)	train_time 0.0441 (0.0436)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48840001052618026, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 15%|#5        | 4/26 [00:00<00:01, 18.52it/s] 31%|###       | 8/26 [00:00<00:00, 24.69it/s] 46%|####6     | 12/26 [00:00<00:00, 27.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.10it/s] 85%|########4 | 22/26 [00:00<00:00, 29.26it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]100%|##########| 26/26 [00:01<00:00, 25.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.50)	train_minacc   0.32 (  0.47)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.83it/s] 27%|##6       | 7/26 [00:00<00:00, 23.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.19it/s] 46%|####6     | 12/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 34.71it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.71it/s] 85%|########4 | 22/26 [00:00<00:00, 37.14it/s]100%|##########| 26/26 [00:00<00:00, 30.82it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.40 (  0.40)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.42 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.42 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 39/  1]	epoch_time 0.0411 (0.0441)	validation_time 0.0003 (0.0006)	train_time 0.0408 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48820000821352005, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.17it/s] 19%|#9        | 5/26 [00:00<00:01, 17.56it/s] 35%|###4      | 9/26 [00:00<00:00, 22.89it/s] 50%|#####     | 13/26 [00:00<00:00, 25.91it/s] 65%|######5   | 17/26 [00:00<00:00, 27.56it/s] 81%|########  | 21/26 [00:00<00:00, 28.45it/s] 96%|#########6| 25/26 [00:00<00:00, 28.95it/s]100%|##########| 26/26 [00:01<00:00, 24.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 15%|#5        | 4/26 [00:00<00:01, 14.13it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.23it/s] 92%|#########2| 24/26 [00:00<00:00, 37.62it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.40 (  0.40)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.42 (  0.45)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 40/  1]	epoch_time 0.0424 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0435)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.4871000094413757, 0.4220000207424164)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.21it/s] 19%|#9        | 5/26 [00:00<00:01, 15.63it/s] 35%|###4      | 9/26 [00:00<00:00, 21.35it/s] 50%|#####     | 13/26 [00:00<00:00, 24.17it/s] 65%|######5   | 17/26 [00:00<00:00, 26.21it/s] 81%|########  | 21/26 [00:00<00:00, 28.28it/s] 96%|#########6| 25/26 [00:01<00:00, 29.95it/s]100%|##########| 26/26 [00:01<00:00, 23.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.53it/s] 23%|##3       | 6/26 [00:00<00:00, 22.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 30.97it/s] 62%|######1   | 16/26 [00:00<00:00, 36.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.72it/s] 81%|########  | 21/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 40.31it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.42 (  0.45)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 41/  1]	epoch_time 0.0416 (0.0440)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0434)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48650000694394113, 0.42100003361701965)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 15%|#5        | 4/26 [00:00<00:01, 18.86it/s] 31%|###       | 8/26 [00:00<00:00, 24.96it/s] 42%|####2     | 11/26 [00:00<00:00, 26.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.33it/s] 69%|######9   | 18/26 [00:00<00:00, 28.83it/s] 85%|########4 | 22/26 [00:00<00:00, 29.54it/s]100%|##########| 26/26 [00:00<00:00, 30.17it/s]100%|##########| 26/26 [00:01<00:00, 25.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s]  8%|7         | 2/26 [00:00<00:03,  6.44it/s] 27%|##6       | 7/26 [00:00<00:00, 20.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 20.68it/s] 46%|####6     | 12/26 [00:00<00:00, 29.56it/s] 65%|######5   | 17/26 [00:00<00:00, 35.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.18it/s] 85%|########4 | 22/26 [00:00<00:00, 37.95it/s]100%|##########| 26/26 [00:00<00:00, 29.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.42 (  0.45)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.45)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.45)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 42/  1]	epoch_time 0.0417 (0.0440)	validation_time 0.0006 (0.0006)	train_time 0.0411 (0.0434)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48630000483989716, 0.42000001668930054)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.73it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 26.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.39it/s] 65%|######5   | 17/26 [00:00<00:00, 29.56it/s] 81%|########  | 21/26 [00:00<00:00, 30.33it/s] 96%|#########6| 25/26 [00:00<00:00, 30.90it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4746 (6.4746)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 23%|##3       | 6/26 [00:00<00:00, 26.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.56it/s] 42%|####2     | 11/26 [00:00<00:00, 34.06it/s] 62%|######1   | 16/26 [00:00<00:00, 39.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.66it/s] 81%|########  | 21/26 [00:00<00:00, 37.83it/s]100%|##########| 26/26 [00:00<00:00, 40.90it/s]100%|##########| 26/26 [00:00<00:00, 32.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.30it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 43/  1]	epoch_time 0.0421 (0.0439)	validation_time 0.0005 (0.0006)	train_time 0.0416 (0.0433)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48620000314712525, 0.41700002551078796)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.80it/s] 23%|##3       | 6/26 [00:00<00:00, 26.71it/s] 35%|###4      | 9/26 [00:00<00:00, 27.75it/s] 46%|####6     | 12/26 [00:00<00:00, 28.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.31it/s] 69%|######9   | 18/26 [00:00<00:00, 28.58it/s] 81%|########  | 21/26 [00:00<00:00, 28.47it/s] 96%|#########6| 25/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4745 (6.4745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 23%|##3       | 6/26 [00:00<00:00, 31.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.30it/s] 42%|####2     | 11/26 [00:00<00:00, 37.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.37it/s] 81%|########  | 21/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.38 (  0.38)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.12 (  0.12)
Overall Timing[ 44/  1]	epoch_time 0.0423 (0.0439)	validation_time 0.0005 (0.0006)	train_time 0.0418 (0.0433)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48700000658631326, 0.42000001668930054)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.35it/s] 23%|##3       | 6/26 [00:00<00:00, 24.51it/s] 38%|###8      | 10/26 [00:00<00:00, 27.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.75it/s] 65%|######5   | 17/26 [00:00<00:00, 29.07it/s] 81%|########  | 21/26 [00:00<00:00, 29.69it/s] 96%|#########6| 25/26 [00:00<00:00, 30.28it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4745 (6.4745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 19%|#9        | 5/26 [00:00<00:00, 22.41it/s] 38%|###8      | 10/26 [00:00<00:00, 33.01it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.78it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.78it/s] 96%|#########6| 25/26 [00:00<00:00, 40.27it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.45)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.45 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Overall Timing[ 45/  1]	epoch_time 0.0446 (0.0439)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0433)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48580000549554825, 0.42100003361701965)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 15%|#5        | 4/26 [00:00<00:01, 19.31it/s] 27%|##6       | 7/26 [00:00<00:00, 21.17it/s] 38%|###8      | 10/26 [00:00<00:00, 23.45it/s] 50%|#####     | 13/26 [00:00<00:00, 25.29it/s] 65%|######5   | 17/26 [00:00<00:00, 26.90it/s] 81%|########  | 21/26 [00:00<00:00, 28.08it/s] 96%|#########6| 25/26 [00:00<00:00, 28.95it/s]100%|##########| 26/26 [00:01<00:00, 24.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4745 (6.4745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:01, 19.85it/s] 35%|###4      | 9/26 [00:00<00:00, 31.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.62it/s] 92%|#########2| 24/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.06 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.27it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.42 (  0.42)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.12)
Overall Timing[ 46/  1]	epoch_time 0.0448 (0.0439)	validation_time 0.0004 (0.0005)	train_time 0.0444 (0.0433)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.486400005787611, 0.42100003361701965)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.75it/s] 12%|#1        | 3/26 [00:00<00:02,  8.43it/s] 23%|##3       | 6/26 [00:00<00:01, 14.82it/s] 35%|###4      | 9/26 [00:00<00:00, 18.32it/s] 46%|####6     | 12/26 [00:00<00:00, 21.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.40it/s] 69%|######9   | 18/26 [00:00<00:00, 25.20it/s] 85%|########4 | 22/26 [00:01<00:00, 27.24it/s]100%|##########| 26/26 [00:01<00:00, 28.43it/s]100%|##########| 26/26 [00:01<00:00, 20.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4745 (6.4745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.62it/s] 46%|####6     | 12/26 [00:00<00:00, 36.97it/s] 65%|######5   | 17/26 [00:00<00:00, 41.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.12it/s] 85%|########4 | 22/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 35.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.45 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.12)
Overall Timing[ 47/  1]	epoch_time 0.0410 (0.0439)	validation_time 0.0004 (0.0005)	train_time 0.0406 (0.0433)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48660000947117804, 0.42600002884864807)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.47it/s] 46%|####6     | 12/26 [00:00<00:00, 28.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.35it/s] 88%|########8 | 23/26 [00:00<00:00, 29.79it/s]100%|##########| 26/26 [00:01<00:00, 25.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.47)	train_acc   0.50 (  0.49)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4744 (6.4745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.82it/s] 27%|##6       | 7/26 [00:00<00:00, 34.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.51it/s] 46%|####6     | 12/26 [00:00<00:00, 38.69it/s] 65%|######5   | 17/26 [00:00<00:00, 38.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.27it/s] 85%|########4 | 22/26 [00:00<00:00, 41.23it/s]100%|##########| 26/26 [00:00<00:00, 35.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.49)	test_minacc   0.43 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.43 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.06 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.35it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.43 (  0.43)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Overall Timing[ 48/  1]	epoch_time 0.0403 (0.0438)	validation_time 0.0004 (0.0005)	train_time 0.0398 (0.0432)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48680000713467597, 0.4240000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 18.44it/s] 35%|###4      | 9/26 [00:00<00:00, 24.45it/s] 50%|#####     | 13/26 [00:00<00:00, 26.75it/s] 65%|######5   | 17/26 [00:00<00:00, 28.03it/s] 81%|########  | 21/26 [00:00<00:00, 28.90it/s] 96%|#########6| 25/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 24.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.50)	train_minacc   0.35 (  0.47)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 6.4744 (6.4744)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 23%|##3       | 6/26 [00:00<00:00, 29.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.06it/s] 42%|####2     | 11/26 [00:00<00:00, 36.40it/s] 62%|######1   | 16/26 [00:00<00:00, 41.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.07it/s] 81%|########  | 21/26 [00:00<00:00, 39.19it/s]100%|##########| 26/26 [00:00<00:00, 42.29it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.45)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.49 (  0.48)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.45 (  0.46)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.35 (  0.46)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.43 (  0.43)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.12 (  0.12)
Overall Timing[ 49/  1]	epoch_time 0.0412 (0.0438)	validation_time 0.0006 (0.0005)	train_time 0.0406 (0.0432)
record: (train_acc, test_acc) (0.8471000254154205, 0.2200000137090683)
last accs (train_acc, test_acc) (0.48700000712275504, 0.42500001192092896)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.163 MB of 0.163 MB uploadedwandb: \ 0.163 MB of 0.163 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp2iiv0iih'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214309-rhdbozkv
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/rhdbozkv
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1221
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5971, 3, 32, 32) (6029, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:47,  1.88s/it] 19%|#9        | 5/26 [00:01<00:06,  3.28it/s] 35%|###4      | 9/26 [00:02<00:02,  6.42it/s] 50%|#####     | 13/26 [00:02<00:01,  9.88it/s] 65%|######5   | 17/26 [00:02<00:00, 13.49it/s] 81%|########  | 21/26 [00:02<00:00, 17.07it/s] 96%|#########6| 25/26 [00:02<00:00, 20.33it/s]100%|##########| 26/26 [00:03<00:00,  8.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.419 (12.201)	train_nll   0.38 (  0.55)	train_penalty   0.04 (  0.28)	weight_norm   9.04 ( 11.65)	train_acc   0.87 (  0.81)	train_minacc   0.00 (  0.06)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 6.5272 (7.7694)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.10it/s] 27%|##6       | 7/26 [00:00<00:00, 23.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.42it/s] 50%|#####     | 13/26 [00:00<00:00, 32.33it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.57it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.57it/s] 92%|#########2| 24/26 [00:00<00:00, 40.72it/s]100%|##########| 26/26 [00:00<00:00, 32.03it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.422 (0.420)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.422 (0.420)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.363 (0.413)	test_acc   0.88 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.363 (0.413)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.378 (0.415)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.378 (0.415)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.779 (1.779)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.779 (1.779)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.779 (1.779)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.779 (1.779)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0851 (0.0851)	validation_time 0.0068 (0.0068)	train_time 0.0750 (0.0750)
record: (train_acc, test_acc) (0.8478000237941742, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8478000237941742, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.00it/s] 50%|#####     | 13/26 [00:00<00:00, 28.74it/s] 65%|######5   | 17/26 [00:00<00:00, 29.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.67it/s] 88%|########8 | 23/26 [00:00<00:00, 28.74it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.915 (6.828)	train_nll   0.37 (  0.41)	train_penalty   0.04 (  0.06)	weight_norm   4.54 (  6.41)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 5.9743 (6.2859)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 19%|#9        | 5/26 [00:00<00:00, 24.28it/s] 38%|###8      | 10/26 [00:00<00:00, 34.67it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.76it/s] 96%|#########6| 25/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.402 (0.402)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.401 (0.408)	test_acc   0.85 (  0.84)	test_minacc   0.07 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.401 (0.408)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.07 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.359 (0.398)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.359 (0.398)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.347 (0.398)	test_acc   0.87 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.347 (0.398)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0459 (0.0655)	validation_time 0.0007 (0.0037)	train_time 0.0452 (0.0601)
record: (train_acc, test_acc) (0.8474000214934349, 0.1120000034570694)
last accs (train_acc, test_acc) (0.8474000214934349, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.37it/s] 23%|##3       | 6/26 [00:00<00:00, 21.59it/s] 38%|###8      | 10/26 [00:00<00:00, 25.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.32it/s] 69%|######9   | 18/26 [00:00<00:00, 28.56it/s] 85%|########4 | 22/26 [00:00<00:00, 29.53it/s] 96%|#########6| 25/26 [00:00<00:00, 29.37it/s]100%|##########| 26/26 [00:01<00:00, 25.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.980 (3.849)	train_nll   0.33 (  0.40)	train_penalty   0.02 (  0.06)	weight_norm   2.65 (  3.45)	train_acc   0.87 (  0.85)	train_minacc   0.09 (  0.03)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.0522 (5.4863)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 32.50it/s] 35%|###4      | 9/26 [00:00<00:00, 39.69it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.69it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.72it/s] 92%|#########2| 24/26 [00:00<00:00, 41.36it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]
Test: [   0/  26]	Loss 0.366 (0.366)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.366 (0.366)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.395 (0.390)	test_acc   0.83 (  0.84)	test_minacc   0.16 (  0.11)	test_majacc   0.96 (  0.97)	Loss_d 0.395 (0.390)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.16 (  0.11)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  20/  26]	Loss 0.331 (0.381)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.12)	test_majacc   0.98 (  0.97)	Loss_d 0.331 (0.381)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.12)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.288 (0.379)	test_acc   0.88 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.97)	Loss_d 0.288 (0.379)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.12it/s]
Test: [  0/  1]	Loss 1.653 (1.653)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.653 (1.653)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.653 (1.653)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.653 (1.653)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0432 (0.0581)	validation_time 0.0005 (0.0026)	train_time 0.0428 (0.0543)
record: (train_acc, test_acc) (0.845500025510788, 0.18200001120567322)
last accs (train_acc, test_acc) (0.845500025510788, 0.18200001120567322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 26.40it/s] 50%|#####     | 13/26 [00:00<00:00, 28.12it/s] 65%|######5   | 17/26 [00:00<00:00, 29.17it/s] 81%|########  | 21/26 [00:00<00:00, 29.59it/s] 96%|#########6| 25/26 [00:00<00:00, 30.08it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.979 (2.489)	train_nll   0.31 (  0.39)	train_penalty   0.02 (  0.05)	weight_norm   1.66 (  2.10)	train_acc   0.87 (  0.85)	train_minacc   0.12 (  0.06)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7367 (4.8932)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 34.53it/s] 35%|###4      | 9/26 [00:00<00:00, 41.49it/s]                                               35%|###4      | 9/26 [00:00<00:00, 41.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.70it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.70it/s] 92%|#########2| 24/26 [00:00<00:00, 41.99it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.394 (0.394)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 0.394 (0.394)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.407 (0.399)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.11)	test_majacc   0.96 (  0.97)	Loss_d 0.407 (0.399)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.11)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.85 (  0.89)
Test: [  20/  26]	Loss 0.328 (0.389)	test_acc   0.87 (  0.84)	test_minacc   0.16 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.328 (0.389)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.16 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.285 (0.386)	test_acc   0.88 (  0.84)	test_minacc   0.19 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.285 (0.386)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.19 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.29it/s]
Test: [  0/  1]	Loss 1.675 (1.675)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.92 (  0.92)	Loss_d 1.675 (1.675)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.675 (1.675)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.92 (  0.92)	Loss_d 1.675 (1.675)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.78)
Overall Timing[  3/  1]	epoch_time 0.0428 (0.0543)	validation_time 0.0005 (0.0021)	train_time 0.0423 (0.0513)
record: (train_acc, test_acc) (0.845500025510788, 0.18200001120567322)
last accs (train_acc, test_acc) (0.8403000267744064, 0.1810000091791153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 15%|#5        | 4/26 [00:00<00:01, 16.21it/s] 31%|###       | 8/26 [00:00<00:00, 22.99it/s] 42%|####2     | 11/26 [00:00<00:00, 24.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.91it/s] 88%|########8 | 23/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 24.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.411 (1.708)	train_nll   0.34 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   1.08 (  1.34)	train_acc   0.86 (  0.85)	train_minacc   0.38 (  0.11)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 5.2424 (4.9618)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.99it/s] 23%|##3       | 6/26 [00:00<00:00, 20.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.45it/s] 42%|####2     | 11/26 [00:00<00:00, 29.31it/s] 62%|######1   | 16/26 [00:00<00:00, 35.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.18it/s] 81%|########  | 21/26 [00:00<00:00, 36.29it/s]100%|##########| 26/26 [00:00<00:00, 30.23it/s]
Test: [   0/  26]	Loss 0.335 (0.335)	test_acc   0.84 (  0.84)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.335 (0.335)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.357 (0.355)	test_acc   0.84 (  0.84)	test_minacc   0.15 (  0.10)	test_majacc   0.97 (  0.98)	Loss_d 0.357 (0.355)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.15 (  0.10)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.286 (0.342)	test_acc   0.88 (  0.85)	test_minacc   0.12 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.286 (0.342)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.12 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.245 (0.340)	test_acc   0.88 (  0.85)	test_minacc   0.12 (  0.11)	test_majacc   1.00 (  0.98)	Loss_d 0.245 (0.340)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.12 (  0.11)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.06it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0510 (0.0536)	validation_time 0.0005 (0.0018)	train_time 0.0505 (0.0511)
record: (train_acc, test_acc) (0.8505000219345092, 0.21900001168251038)
last accs (train_acc, test_acc) (0.8505000219345092, 0.21900001168251038)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.85it/s] 23%|##3       | 6/26 [00:00<00:00, 24.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.17it/s] 46%|####6     | 12/26 [00:00<00:00, 27.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.06it/s] 69%|######9   | 18/26 [00:00<00:00, 26.67it/s] 81%|########  | 21/26 [00:00<00:00, 27.53it/s] 96%|#########6| 25/26 [00:00<00:00, 28.47it/s]100%|##########| 26/26 [00:01<00:00, 25.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.992 (1.230)	train_nll   0.28 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.71 (  0.88)	train_acc   0.88 (  0.85)	train_minacc   0.22 (  0.11)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8907 (5.5094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.40it/s] 19%|#9        | 5/26 [00:00<00:01, 17.68it/s] 38%|###8      | 10/26 [00:00<00:00, 28.93it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.65it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.65it/s] 96%|#########6| 25/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 30.01it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.84 (  0.84)	test_minacc   0.29 (  0.29)	test_majacc   0.94 (  0.94)	Loss_d 0.351 (0.351)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.350 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.43 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 0.350 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.43 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.81 (  0.83)
Test: [  20/  26]	Loss 0.305 (0.348)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.34)	test_majacc   0.95 (  0.95)	Loss_d 0.305 (0.348)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.34)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.82)
Test: [  26/  26]	Loss 0.242 (0.345)	test_acc   0.91 (  0.86)	test_minacc   0.44 (  0.35)	test_majacc   0.98 (  0.95)	Loss_d 0.242 (0.345)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.44 (  0.35)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.85 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.94it/s]
Test: [  0/  1]	Loss 1.402 (1.402)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.93 (  0.93)	Loss_d 1.402 (1.402)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.402 (1.402)	test_acc   0.38 (  0.38)	test_minacc   0.32 (  0.32)	test_majacc   0.93 (  0.93)	Loss_d 1.402 (1.402)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.47 (  0.47)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0450 (0.0522)	validation_time 0.0004 (0.0015)	train_time 0.0445 (0.0500)
record: (train_acc, test_acc) (0.8580000214576721, 0.3840000033378601)
last accs (train_acc, test_acc) (0.8580000214576721, 0.3840000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 15%|#5        | 4/26 [00:00<00:01, 13.75it/s] 27%|##6       | 7/26 [00:00<00:00, 19.35it/s] 42%|####2     | 11/26 [00:00<00:00, 23.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.15it/s] 65%|######5   | 17/26 [00:00<00:00, 25.87it/s] 81%|########  | 21/26 [00:00<00:00, 27.42it/s] 92%|#########2| 24/26 [00:01<00:00, 28.10it/s]100%|##########| 26/26 [00:01<00:00, 22.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.760 (0.930)	train_nll   0.29 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm   0.47 (  0.58)	train_acc   0.85 (  0.85)	train_minacc   0.41 (  0.16)	train_majacc   0.91 (  0.97)	train_corr   0.00 (  0.00)	l1 7.0437 (6.3214)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 27%|##6       | 7/26 [00:00<00:00, 29.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.01it/s] 46%|####6     | 12/26 [00:00<00:00, 36.84it/s] 65%|######5   | 17/26 [00:00<00:00, 40.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.28it/s] 85%|########4 | 22/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.83 (  0.83)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 0.360 (0.360)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.385 (0.378)	test_acc   0.83 (  0.83)	test_minacc   0.13 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 0.385 (0.378)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.13 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.296 (0.365)	test_acc   0.88 (  0.84)	test_minacc   0.18 (  0.14)	test_majacc   0.98 (  0.97)	Loss_d 0.296 (0.365)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.18 (  0.14)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.300 (0.365)	test_acc   0.88 (  0.84)	test_minacc   0.16 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.300 (0.365)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.16 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.94 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.78it/s]
Test: [  0/  1]	Loss 1.837 (1.837)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.837 (1.837)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.837 (1.837)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.837 (1.837)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.83 (  0.83)
Overall Timing[  6/  1]	epoch_time 0.0408 (0.0505)	validation_time 0.0004 (0.0014)	train_time 0.0404 (0.0487)
record: (train_acc, test_acc) (0.8580000214576721, 0.3840000033378601)
last accs (train_acc, test_acc) (0.8430000277757644, 0.19200000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 15%|#5        | 4/26 [00:00<00:01, 16.34it/s] 31%|###       | 8/26 [00:00<00:00, 23.83it/s] 46%|####6     | 12/26 [00:00<00:00, 27.38it/s] 62%|######1   | 16/26 [00:00<00:00, 29.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.98it/s] 88%|########8 | 23/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:01<00:00, 25.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.005 (0.542)	train_nll   0.50 (  0.38)	train_penalty   0.01 (  0.02)	weight_norm   0.37 (  0.41)	train_acc   0.79 (  0.83)	train_minacc   0.75 (  0.30)	train_majacc   0.80 (  0.93)	train_corr   0.00 (  0.00)	l1 8.0872 (7.6208)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 23%|##3       | 6/26 [00:00<00:00, 24.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.99it/s] 42%|####2     | 11/26 [00:00<00:00, 31.49it/s] 62%|######1   | 16/26 [00:00<00:00, 36.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]100%|##########| 26/26 [00:00<00:00, 33.32it/s]
Test: [   0/  26]	Loss 0.568 (0.568)	test_acc   0.71 (  0.71)	test_minacc   0.83 (  0.83)	test_majacc   0.69 (  0.69)	Loss_d 0.568 (0.568)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.564 (0.567)	test_acc   0.72 (  0.72)	test_minacc   0.75 (  0.77)	test_majacc   0.71 (  0.71)	Loss_d 0.564 (0.567)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.29 (  0.30)
Test: [  20/  26]	Loss 0.579 (0.564)	test_acc   0.67 (  0.72)	test_minacc   0.71 (  0.78)	test_majacc   0.67 (  0.71)	Loss_d 0.579 (0.564)	test_acc_d   0.67 (  0.72)	test_minacc_d   0.71 (  0.78)	test_majacc_d   0.67 (  0.71)	test_corr_d   0.31 (  0.30)
Test: [  26/  26]	Loss 0.550 (0.567)	test_acc   0.77 (  0.72)	test_minacc   0.75 (  0.78)	test_majacc   0.78 (  0.71)	Loss_d 0.550 (0.567)	test_acc_d   0.77 (  0.72)	test_minacc_d   0.75 (  0.78)	test_majacc_d   0.78 (  0.71)	test_corr_d   0.38 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.05it/s]
Test: [  0/  1]	Loss 0.549 (0.549)	test_acc   0.73 (  0.73)	test_minacc   0.73 (  0.73)	test_majacc   0.68 (  0.68)	Loss_d 0.549 (0.549)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.549 (0.549)	test_acc   0.73 (  0.73)	test_minacc   0.73 (  0.73)	test_majacc   0.68 (  0.68)	Loss_d 0.549 (0.549)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.43 ( -0.43)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/186/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0409 (0.0493)	validation_time 0.0003 (0.0012)	train_time 0.0406 (0.0476)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 12%|#1        | 3/26 [00:00<00:02, 10.50it/s] 27%|##6       | 7/26 [00:00<00:00, 19.44it/s] 38%|###8      | 10/26 [00:00<00:00, 22.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.65it/s] 65%|######5   | 17/26 [00:00<00:00, 26.51it/s] 81%|########  | 21/26 [00:00<00:00, 27.46it/s] 92%|#########2| 24/26 [00:01<00:00, 28.01it/s]100%|##########| 26/26 [00:01<00:00, 22.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.68 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.41)	train_acc   0.60 (  0.66)	train_minacc   0.56 (  0.69)	train_majacc   0.60 (  0.65)	train_corr   0.00 (  0.00)	l1 8.0021 (8.0536)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.14it/s] 35%|###4      | 9/26 [00:00<00:00, 29.27it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.24it/s] 92%|#########2| 24/26 [00:00<00:00, 40.43it/s]100%|##########| 26/26 [00:00<00:00, 32.41it/s]
Test: [   0/  26]	Loss 0.658 (0.658)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.62 (  0.62)	Loss_d 0.658 (0.658)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.656 (0.660)	test_acc   0.62 (  0.62)	test_minacc   0.72 (  0.64)	test_majacc   0.60 (  0.61)	Loss_d 0.656 (0.660)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.72 (  0.64)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.15 (  0.17)
Test: [  20/  26]	Loss 0.657 (0.659)	test_acc   0.60 (  0.62)	test_minacc   0.57 (  0.64)	test_majacc   0.60 (  0.61)	Loss_d 0.657 (0.659)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.57 (  0.64)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.20 (  0.16)
Test: [  26/  26]	Loss 0.679 (0.661)	test_acc   0.59 (  0.62)	test_minacc   0.59 (  0.65)	test_majacc   0.59 (  0.61)	Loss_d 0.679 (0.661)	test_acc_d   0.59 (  0.62)	test_minacc_d   0.59 (  0.65)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.11 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.75it/s]
Test: [  0/  1]	Loss 0.654 (0.654)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.654 (0.654)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.654 (0.654)	test_acc   0.62 (  0.62)	test_minacc   0.62 (  0.62)	test_majacc   0.60 (  0.60)	Loss_d 0.654 (0.654)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.26 ( -0.26)
Overall Timing[  8/  1]	epoch_time 0.0418 (0.0485)	validation_time 0.0004 (0.0012)	train_time 0.0413 (0.0469)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.6150000085830688, 0.6150000095367432)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.33it/s] 19%|#9        | 5/26 [00:00<00:00, 21.82it/s] 35%|###4      | 9/26 [00:00<00:00, 26.27it/s] 50%|#####     | 13/26 [00:00<00:00, 28.26it/s] 65%|######5   | 17/26 [00:00<00:00, 29.78it/s] 81%|########  | 21/26 [00:00<00:00, 30.67it/s] 96%|#########6| 25/26 [00:00<00:00, 30.95it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.43)	train_acc   0.51 (  0.54)	train_minacc   0.50 (  0.59)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 7.9590 (7.9758)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 19%|#9        | 5/26 [00:00<00:00, 24.86it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.86it/s] 42%|####2     | 11/26 [00:00<00:00, 38.34it/s] 65%|######5   | 17/26 [00:00<00:00, 41.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.65it/s] 85%|########4 | 22/26 [00:00<00:00, 42.78it/s]100%|##########| 26/26 [00:00<00:00, 36.12it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.686 (0.685)	test_acc   0.51 (  0.53)	test_minacc   0.62 (  0.58)	test_majacc   0.49 (  0.52)	Loss_d 0.686 (0.685)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.62 (  0.58)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  20/  26]	Loss 0.688 (0.685)	test_acc   0.52 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.688 (0.685)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.09 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.686)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.57)	test_majacc   0.49 (  0.52)	Loss_d 0.692 (0.686)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.57)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.02 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.679 (0.679)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.679 (0.679)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.20 ( -0.20)
Overall Timing[  9/  1]	epoch_time 0.0401 (0.0477)	validation_time 0.0004 (0.0011)	train_time 0.0397 (0.0462)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5249000104665756, 0.5430000424385071)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 31%|###       | 8/26 [00:00<00:00, 23.43it/s] 42%|####2     | 11/26 [00:00<00:00, 25.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 27.74it/s] 81%|########  | 21/26 [00:00<00:00, 28.83it/s] 96%|#########6| 25/26 [00:00<00:00, 29.57it/s]100%|##########| 26/26 [00:01<00:00, 24.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.56)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 7.9444 (7.9518)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.41it/s] 27%|##6       | 7/26 [00:00<00:00, 34.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.46it/s] 46%|####6     | 12/26 [00:00<00:00, 40.05it/s] 65%|######5   | 17/26 [00:00<00:00, 38.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.42it/s] 85%|########4 | 22/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 36.07it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.683 (0.683)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.682 (0.681)	test_acc   0.53 (  0.55)	test_minacc   0.64 (  0.58)	test_majacc   0.51 (  0.55)	Loss_d 0.682 (0.681)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.64 (  0.58)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.09 (  0.09)
Test: [  20/  26]	Loss 0.683 (0.681)	test_acc   0.54 (  0.55)	test_minacc   0.59 (  0.57)	test_majacc   0.53 (  0.55)	Loss_d 0.683 (0.681)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.13 (  0.09)
Test: [  26/  26]	Loss 0.688 (0.682)	test_acc   0.52 (  0.54)	test_minacc   0.50 (  0.58)	test_majacc   0.52 (  0.54)	Loss_d 0.688 (0.682)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.50 (  0.58)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.06 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.676 (0.676)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.47 (  0.47)	Loss_d 0.676 (0.676)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 10/  1]	epoch_time 0.0418 (0.0471)	validation_time 0.0004 (0.0010)	train_time 0.0414 (0.0458)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5438000144958496, 0.5580000281333923)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 15%|#5        | 4/26 [00:00<00:01, 20.11it/s] 27%|##6       | 7/26 [00:00<00:00, 24.33it/s] 42%|####2     | 11/26 [00:00<00:00, 27.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.16it/s] 88%|########8 | 23/26 [00:00<00:00, 29.57it/s]100%|##########| 26/26 [00:01<00:00, 25.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.53 (  0.51)	train_minacc   0.53 (  0.55)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 7.9329 (7.9406)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 15%|#5        | 4/26 [00:00<00:01, 19.15it/s] 35%|###4      | 9/26 [00:00<00:00, 31.08it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.15it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.15it/s] 92%|#########2| 24/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 33.34it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.680)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.678 (0.678)	test_acc   0.57 (  0.56)	test_minacc   0.69 (  0.59)	test_majacc   0.55 (  0.56)	Loss_d 0.678 (0.678)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.69 (  0.59)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.11 (  0.11)
Test: [  20/  26]	Loss 0.679 (0.678)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.679 (0.678)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.14 (  0.11)
Test: [  26/  26]	Loss 0.686 (0.679)	test_acc   0.54 (  0.56)	test_minacc   0.53 (  0.59)	test_majacc   0.54 (  0.55)	Loss_d 0.686 (0.679)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.08 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]wandb: 429 encountered (Filestream rate limit exceeded, retrying in 2.1 seconds.), retrying request
                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.673 (0.673)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.673 (0.673)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 11/  1]	epoch_time 0.0430 (0.0468)	validation_time 0.0003 (0.0010)	train_time 0.0427 (0.0455)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5568000121116639, 0.5730000138282776)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.51it/s] 23%|##3       | 6/26 [00:00<00:00, 26.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.00it/s] 81%|########  | 21/26 [00:00<00:00, 30.56it/s] 96%|#########6| 25/26 [00:00<00:00, 30.66it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.54 (  0.52)	train_minacc   0.53 (  0.55)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 7.9183 (7.9294)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 19%|#9        | 5/26 [00:00<00:00, 22.73it/s] 38%|###8      | 10/26 [00:00<00:00, 30.83it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.02it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.02it/s] 96%|#########6| 25/26 [00:00<00:00, 41.47it/s]100%|##########| 26/26 [00:00<00:00, 32.84it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.676 (0.676)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.673 (0.674)	test_acc   0.59 (  0.58)	test_minacc   0.72 (  0.61)	test_majacc   0.56 (  0.58)	Loss_d 0.673 (0.674)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.72 (  0.61)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.13 (  0.13)
Test: [  20/  26]	Loss 0.673 (0.674)	test_acc   0.59 (  0.58)	test_minacc   0.55 (  0.61)	test_majacc   0.59 (  0.58)	Loss_d 0.673 (0.674)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.16 (  0.13)
Test: [  26/  26]	Loss 0.683 (0.674)	test_acc   0.54 (  0.58)	test_minacc   0.50 (  0.61)	test_majacc   0.55 (  0.57)	Loss_d 0.683 (0.674)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.50 (  0.61)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.10 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 0.668 (0.668)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.668 (0.668)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.668 (0.668)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.668 (0.668)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 12/  1]	epoch_time 0.0434 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0430 (0.0453)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5772000113129616, 0.5860000252723694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:01, 20.54it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 27.81it/s] 65%|######5   | 17/26 [00:00<00:00, 28.94it/s] 81%|########  | 21/26 [00:00<00:00, 29.29it/s] 92%|#########2| 24/26 [00:00<00:00, 29.28it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.52 (  0.54)	train_minacc   0.56 (  0.56)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 7.9050 (7.9110)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 23%|##3       | 6/26 [00:00<00:00, 27.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.43it/s] 42%|####2     | 11/26 [00:00<00:00, 34.50it/s] 65%|######5   | 17/26 [00:00<00:00, 38.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.62it/s] 85%|########4 | 22/26 [00:00<00:00, 41.22it/s]100%|##########| 26/26 [00:00<00:00, 34.36it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.50 (  0.51)	test_minacc   0.59 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.689 (0.690)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.59 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.03 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.695 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.695 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.681 (0.681)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.681 (0.681)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 13/  1]	epoch_time 0.0425 (0.0462)	validation_time 0.0004 (0.0009)	train_time 0.0420 (0.0451)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5076000176072121, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 22.59it/s] 35%|###4      | 9/26 [00:00<00:00, 26.05it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 62%|######1   | 16/26 [00:00<00:00, 28.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.16it/s] 88%|########8 | 23/26 [00:00<00:00, 29.32it/s]100%|##########| 26/26 [00:01<00:00, 25.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.52 (  0.53)	train_minacc   0.53 (  0.54)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8940 (7.8966)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 12%|#1        | 3/26 [00:00<00:02,  7.70it/s] 31%|###       | 8/26 [00:00<00:00, 19.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 19.54it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 69%|######9   | 18/26 [00:00<00:00, 33.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 33.69it/s] 88%|########8 | 23/26 [00:00<00:00, 35.43it/s]100%|##########| 26/26 [00:00<00:00, 26.55it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.55)	test_majacc   0.52 (  0.53)	Loss_d 0.689 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.05 (  0.04)
Test: [  20/  26]	Loss 0.691 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.690)	test_acc   0.52 (  0.53)	test_minacc   0.53 (  0.54)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.690)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.48it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 14/  1]	epoch_time 0.0471 (0.0463)	validation_time 0.0003 (0.0008)	train_time 0.0467 (0.0452)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5272000168561936, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 19%|#9        | 5/26 [00:00<00:00, 22.05it/s] 35%|###4      | 9/26 [00:00<00:00, 26.07it/s] 50%|#####     | 13/26 [00:00<00:00, 28.05it/s] 65%|######5   | 17/26 [00:00<00:00, 29.02it/s] 81%|########  | 21/26 [00:00<00:00, 29.60it/s] 96%|#########6| 25/26 [00:00<00:00, 30.19it/s]100%|##########| 26/26 [00:00<00:00, 26.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.51 (  0.52)	train_minacc   0.47 (  0.53)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8887 (7.8902)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.51it/s] 12%|#1        | 3/26 [00:00<00:03,  6.98it/s] 31%|###       | 8/26 [00:00<00:00, 18.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 18.25it/s] 50%|#####     | 13/26 [00:00<00:00, 26.24it/s] 69%|######9   | 18/26 [00:00<00:00, 30.23it/s]                                                69%|######9   | 18/26 [00:00<00:00, 30.23it/s] 88%|########8 | 23/26 [00:00<00:00, 34.56it/s]100%|##########| 26/26 [00:01<00:00, 24.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.49 (  0.52)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.687 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.687 (0.687)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 15/  1]	epoch_time 0.0484 (0.0464)	validation_time 0.0004 (0.0008)	train_time 0.0480 (0.0454)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5136000149250031, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s] 15%|#5        | 4/26 [00:00<00:01, 19.09it/s] 27%|##6       | 7/26 [00:00<00:00, 23.46it/s] 42%|####2     | 11/26 [00:00<00:00, 26.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.79it/s] 69%|######9   | 18/26 [00:00<00:00, 27.81it/s] 81%|########  | 21/26 [00:00<00:00, 28.44it/s] 96%|#########6| 25/26 [00:00<00:00, 29.32it/s]100%|##########| 26/26 [00:01<00:00, 25.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.51 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8851 (7.8861)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 27%|##6       | 7/26 [00:00<00:00, 30.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.78it/s] 46%|####6     | 12/26 [00:00<00:00, 37.42it/s] 65%|######5   | 17/26 [00:00<00:00, 37.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.18it/s] 85%|########4 | 22/26 [00:00<00:00, 40.32it/s]100%|##########| 26/26 [00:00<00:00, 33.78it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.42 (  0.42)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.52 (  0.51)	test_corr_d  -0.00 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.05it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 16/  1]	epoch_time 0.0458 (0.0464)	validation_time 0.0004 (0.0008)	train_time 0.0454 (0.0454)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.510700013935566, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.79it/s] 15%|#5        | 4/26 [00:00<00:01, 17.57it/s] 27%|##6       | 7/26 [00:00<00:00, 21.88it/s] 42%|####2     | 11/26 [00:00<00:00, 25.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.00it/s] 69%|######9   | 18/26 [00:00<00:00, 27.85it/s] 81%|########  | 21/26 [00:00<00:00, 28.23it/s] 96%|#########6| 25/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 24.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8826 (7.8834)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 23%|##3       | 6/26 [00:00<00:00, 27.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.41it/s] 42%|####2     | 11/26 [00:00<00:00, 34.61it/s] 62%|######1   | 16/26 [00:00<00:00, 39.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.96it/s] 81%|########  | 21/26 [00:00<00:00, 38.14it/s]100%|##########| 26/26 [00:00<00:00, 41.37it/s]100%|##########| 26/26 [00:00<00:00, 33.32it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.41 (  0.41)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.688 (0.688)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 17/  1]	epoch_time 0.0476 (0.0465)	validation_time 0.0003 (0.0008)	train_time 0.0472 (0.0455)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5053000124692917, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:01, 20.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 50%|#####     | 13/26 [00:00<00:00, 26.51it/s] 65%|######5   | 17/26 [00:00<00:00, 27.91it/s] 81%|########  | 21/26 [00:00<00:00, 28.85it/s] 96%|#########6| 25/26 [00:00<00:00, 29.48it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.51)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8809 (7.8815)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.97it/s] 23%|##3       | 6/26 [00:00<00:00, 21.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.55it/s] 42%|####2     | 11/26 [00:00<00:00, 29.81it/s] 62%|######1   | 16/26 [00:00<00:00, 36.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.04it/s] 81%|########  | 21/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.41 (  0.41)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.05 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 18/  1]	epoch_time 0.0414 (0.0462)	validation_time 0.0003 (0.0007)	train_time 0.0410 (0.0452)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.5002000129818917, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.26it/s] 35%|###4      | 9/26 [00:00<00:00, 26.74it/s] 50%|#####     | 13/26 [00:00<00:00, 28.84it/s] 65%|######5   | 17/26 [00:00<00:00, 29.81it/s] 81%|########  | 21/26 [00:00<00:00, 29.63it/s] 96%|#########6| 25/26 [00:00<00:00, 30.53it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8796 (7.8801)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 19%|#9        | 5/26 [00:00<00:00, 26.94it/s] 38%|###8      | 10/26 [00:00<00:00, 34.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.98it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.98it/s] 96%|#########6| 25/26 [00:00<00:00, 41.78it/s]100%|##########| 26/26 [00:00<00:00, 34.68it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.42 (  0.42)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.05 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.50)	test_minacc   0.49 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 19/  1]	epoch_time 0.0411 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0406 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4979000142812729, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 15%|#5        | 4/26 [00:00<00:01, 15.57it/s] 27%|##6       | 7/26 [00:00<00:00, 20.31it/s] 38%|###8      | 10/26 [00:00<00:00, 23.41it/s] 50%|#####     | 13/26 [00:00<00:00, 25.17it/s] 62%|######1   | 16/26 [00:00<00:00, 26.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.08it/s] 88%|########8 | 23/26 [00:00<00:00, 28.18it/s]100%|##########| 26/26 [00:01<00:00, 23.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8786 (7.8790)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 23%|##3       | 6/26 [00:00<00:00, 31.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.51it/s] 42%|####2     | 11/26 [00:00<00:00, 37.65it/s] 62%|######1   | 16/26 [00:00<00:00, 39.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.73it/s] 81%|########  | 21/26 [00:00<00:00, 39.52it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 35.36it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.44 (  0.44)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.690 (0.690)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 20/  1]	epoch_time 0.0454 (0.0459)	validation_time 0.0004 (0.0007)	train_time 0.0449 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.49670001086592674, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.70it/s] 19%|#9        | 5/26 [00:00<00:01, 11.93it/s] 31%|###       | 8/26 [00:00<00:01, 16.72it/s] 46%|####6     | 12/26 [00:00<00:00, 21.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.59it/s] 69%|######9   | 18/26 [00:00<00:00, 25.08it/s] 81%|########  | 21/26 [00:01<00:00, 26.37it/s] 96%|#########6| 25/26 [00:01<00:00, 27.79it/s]100%|##########| 26/26 [00:01<00:00, 20.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8779 (7.8781)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.23it/s] 23%|##3       | 6/26 [00:00<00:01, 18.86it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.86it/s] 42%|####2     | 11/26 [00:00<00:00, 27.76it/s] 62%|######1   | 16/26 [00:00<00:00, 34.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.38it/s] 81%|########  | 21/26 [00:00<00:00, 38.07it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 30.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.49 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.00 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 21/  1]	epoch_time 0.0425 (0.0457)	validation_time 0.0003 (0.0007)	train_time 0.0421 (0.0449)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.49740001410245893, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.61it/s] 15%|#5        | 4/26 [00:00<00:01, 16.06it/s] 27%|##6       | 7/26 [00:00<00:00, 20.93it/s] 42%|####2     | 11/26 [00:00<00:00, 25.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.50it/s] 88%|########8 | 23/26 [00:00<00:00, 29.14it/s]100%|##########| 26/26 [00:01<00:00, 24.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8774 (7.8775)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.76it/s] 15%|#5        | 4/26 [00:00<00:01, 16.04it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.86it/s] 96%|#########6| 25/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 32.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.56 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.79it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 22/  1]	epoch_time 0.0489 (0.0459)	validation_time 0.0005 (0.0007)	train_time 0.0484 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4976000123023987, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 15%|#5        | 4/26 [00:00<00:01, 17.11it/s] 27%|##6       | 7/26 [00:00<00:00, 22.03it/s] 38%|###8      | 10/26 [00:00<00:00, 24.75it/s] 50%|#####     | 13/26 [00:00<00:00, 26.28it/s] 65%|######5   | 17/26 [00:00<00:00, 27.64it/s] 81%|########  | 21/26 [00:00<00:00, 28.31it/s] 96%|#########6| 25/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 24.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.8774733543396
set z to 7.483599686622619
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8769 (7.8770)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 23%|##3       | 6/26 [00:00<00:00, 26.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.38it/s] 42%|####2     | 11/26 [00:00<00:00, 33.86it/s] 65%|######5   | 17/26 [00:00<00:00, 39.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.43it/s] 85%|########4 | 22/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.99it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 23/  1]	epoch_time 0.0435 (0.0458)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.49780001312494276, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 19.23it/s] 35%|###4      | 9/26 [00:00<00:00, 25.17it/s] 50%|#####     | 13/26 [00:00<00:00, 28.46it/s] 65%|######5   | 17/26 [00:00<00:00, 28.97it/s] 81%|########  | 21/26 [00:00<00:00, 29.88it/s] 96%|#########6| 25/26 [00:00<00:00, 30.42it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.51 (  0.50)	train_minacc   0.53 (  0.52)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8766 (7.8766)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 23%|##3       | 6/26 [00:00<00:00, 27.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.34it/s] 42%|####2     | 11/26 [00:00<00:00, 35.09it/s] 62%|######1   | 16/26 [00:00<00:00, 39.85it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.85it/s] 81%|########  | 21/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.59 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.19it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 24/  1]	epoch_time 0.0429 (0.0457)	validation_time 0.0005 (0.0007)	train_time 0.0424 (0.0449)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4984000137150288, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 15.14it/s] 23%|##3       | 6/26 [00:00<00:00, 21.31it/s] 38%|###8      | 10/26 [00:00<00:00, 26.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.02it/s] 69%|######9   | 18/26 [00:00<00:00, 29.26it/s] 85%|########4 | 22/26 [00:00<00:00, 30.01it/s]100%|##########| 26/26 [00:00<00:00, 30.31it/s]100%|##########| 26/26 [00:00<00:00, 26.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.51 (  0.50)	train_minacc   0.53 (  0.52)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8763 (7.8763)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 12%|#1        | 3/26 [00:00<00:01, 13.50it/s] 31%|###       | 8/26 [00:00<00:00, 28.30it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 34.96it/s] 69%|######9   | 18/26 [00:00<00:00, 39.40it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.40it/s] 88%|########8 | 23/26 [00:00<00:00, 38.05it/s]100%|##########| 26/26 [00:00<00:00, 32.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.50)	test_minacc   0.53 (  0.51)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.80it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 25/  1]	epoch_time 0.0423 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0419 (0.0447)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4991000192761421, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s]  8%|7         | 2/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:01, 16.14it/s] 35%|###4      | 9/26 [00:00<00:00, 22.74it/s] 50%|#####     | 13/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 28.43it/s] 81%|########  | 21/26 [00:00<00:00, 29.19it/s] 96%|#########6| 25/26 [00:00<00:00, 30.43it/s]100%|##########| 26/26 [00:01<00:00, 24.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8761 (7.8760)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 15%|#5        | 4/26 [00:00<00:01, 12.63it/s] 35%|###4      | 9/26 [00:00<00:00, 24.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.34it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.34it/s]100%|##########| 26/26 [00:00<00:00, 42.87it/s]100%|##########| 26/26 [00:00<00:00, 31.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 26/  1]	epoch_time 0.0444 (0.0455)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0447)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4980000167191029, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s]  8%|7         | 2/26 [00:00<00:03,  6.14it/s] 19%|#9        | 5/26 [00:00<00:01, 14.00it/s] 35%|###4      | 9/26 [00:00<00:00, 20.45it/s] 46%|####6     | 12/26 [00:00<00:00, 23.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.90it/s] 88%|########8 | 23/26 [00:01<00:00, 28.37it/s]100%|##########| 26/26 [00:01<00:00, 22.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8759 (7.8758)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.91it/s] 27%|##6       | 7/26 [00:00<00:00, 30.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.09it/s] 46%|####6     | 12/26 [00:00<00:00, 37.19it/s] 62%|######1   | 16/26 [00:00<00:00, 37.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.96it/s] 81%|########  | 21/26 [00:00<00:00, 40.35it/s]100%|##########| 26/26 [00:00<00:00, 43.21it/s]100%|##########| 26/26 [00:00<00:00, 35.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 27/  1]	epoch_time 0.0436 (0.0454)	validation_time 0.0004 (0.0006)	train_time 0.0432 (0.0447)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4978000167310238, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 19%|#9        | 5/26 [00:00<00:01, 16.45it/s] 35%|###4      | 9/26 [00:00<00:00, 22.48it/s] 50%|#####     | 13/26 [00:00<00:00, 25.41it/s] 65%|######5   | 17/26 [00:00<00:00, 27.08it/s] 81%|########  | 21/26 [00:00<00:00, 28.36it/s] 96%|#########6| 25/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 23.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8758 (7.8756)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s]  8%|7         | 2/26 [00:00<00:03,  7.63it/s] 27%|##6       | 7/26 [00:00<00:00, 23.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.63it/s] 46%|####6     | 12/26 [00:00<00:00, 32.40it/s] 65%|######5   | 17/26 [00:00<00:00, 36.62it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.62it/s] 85%|########4 | 22/26 [00:00<00:00, 37.44it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.59 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 28/  1]	epoch_time 0.0424 (0.0453)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0446)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4968000141382217, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 15%|#5        | 4/26 [00:00<00:01, 18.84it/s] 27%|##6       | 7/26 [00:00<00:00, 22.27it/s] 42%|####2     | 11/26 [00:00<00:00, 25.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.39it/s] 69%|######9   | 18/26 [00:00<00:00, 27.86it/s] 85%|########4 | 22/26 [00:00<00:00, 28.90it/s] 96%|#########6| 25/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 24.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8756 (7.8754)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.01it/s] 12%|#1        | 3/26 [00:00<00:02,  8.03it/s] 31%|###       | 8/26 [00:00<00:00, 20.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 20.15it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 69%|######9   | 18/26 [00:00<00:00, 31.53it/s]                                                69%|######9   | 18/26 [00:00<00:00, 31.53it/s] 88%|########8 | 23/26 [00:00<00:00, 35.35it/s]100%|##########| 26/26 [00:01<00:00, 25.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 29/  1]	epoch_time 0.0449 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0445 (0.0446)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4949000096023083, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.94it/s] 19%|#9        | 5/26 [00:00<00:00, 21.83it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.23it/s] 65%|######5   | 17/26 [00:00<00:00, 29.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.26it/s] 92%|#########2| 24/26 [00:00<00:00, 29.87it/s]100%|##########| 26/26 [00:00<00:00, 26.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8755 (7.8752)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.06it/s] 27%|##6       | 7/26 [00:00<00:00, 32.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.74it/s] 46%|####6     | 12/26 [00:00<00:00, 38.70it/s] 65%|######5   | 17/26 [00:00<00:00, 41.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.39it/s] 85%|########4 | 22/26 [00:00<00:00, 39.31it/s]100%|##########| 26/26 [00:00<00:00, 35.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.01 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.37it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 30/  1]	epoch_time 0.0417 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0445)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4942000142931938, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 15%|#5        | 4/26 [00:00<00:01, 19.27it/s] 27%|##6       | 7/26 [00:00<00:00, 22.98it/s] 38%|###8      | 10/26 [00:00<00:00, 25.11it/s] 50%|#####     | 13/26 [00:00<00:00, 25.82it/s] 62%|######1   | 16/26 [00:00<00:00, 26.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.31it/s] 88%|########8 | 23/26 [00:00<00:00, 28.32it/s]100%|##########| 26/26 [00:01<00:00, 24.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8753 (7.8750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.07it/s] 15%|#5        | 4/26 [00:00<00:01, 14.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.27it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.04it/s] 92%|#########2| 24/26 [00:00<00:00, 38.84it/s]100%|##########| 26/26 [00:00<00:00, 31.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.04 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 31/  1]	epoch_time 0.0508 (0.0454)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0446)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.49330001360177994, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:01, 19.86it/s] 35%|###4      | 9/26 [00:00<00:00, 24.71it/s] 46%|####6     | 12/26 [00:00<00:00, 26.31it/s] 62%|######1   | 16/26 [00:00<00:00, 28.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.13it/s] 92%|#########2| 24/26 [00:00<00:00, 29.82it/s]100%|##########| 26/26 [00:01<00:00, 25.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8752 (7.8748)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 15%|#5        | 4/26 [00:00<00:01, 17.79it/s] 35%|###4      | 9/26 [00:00<00:00, 29.36it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.68it/s] 92%|#########2| 24/26 [00:00<00:00, 39.22it/s]100%|##########| 26/26 [00:00<00:00, 31.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.59 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d   0.00 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.38it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 32/  1]	epoch_time 0.0563 (0.0457)	validation_time 0.0004 (0.0006)	train_time 0.0559 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4917000114917755, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.97it/s] 19%|#9        | 5/26 [00:00<00:01, 18.73it/s] 35%|###4      | 9/26 [00:00<00:00, 23.52it/s] 50%|#####     | 13/26 [00:00<00:00, 26.09it/s] 65%|######5   | 17/26 [00:00<00:00, 27.53it/s] 81%|########  | 21/26 [00:00<00:00, 28.50it/s] 96%|#########6| 25/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 24.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8750 (7.8747)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 38%|###8      | 10/26 [00:00<00:00, 34.78it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.07it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.07it/s] 96%|#########6| 25/26 [00:00<00:00, 41.95it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.00 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 33/  1]	epoch_time 0.0456 (0.0457)	validation_time 0.0004 (0.0006)	train_time 0.0451 (0.0450)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4908000127077103, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 15%|#5        | 4/26 [00:00<00:01, 16.55it/s] 27%|##6       | 7/26 [00:00<00:00, 21.08it/s] 38%|###8      | 10/26 [00:00<00:00, 24.02it/s] 50%|#####     | 13/26 [00:00<00:00, 25.40it/s] 62%|######1   | 16/26 [00:00<00:00, 26.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.33it/s] 92%|#########2| 24/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:01<00:00, 24.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8749 (7.8745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 23%|##3       | 6/26 [00:00<00:00, 23.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.88it/s] 42%|####2     | 11/26 [00:00<00:00, 32.37it/s] 62%|######1   | 16/26 [00:00<00:00, 37.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.82it/s] 81%|########  | 21/26 [00:00<00:00, 37.19it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 31.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 34/  1]	epoch_time 0.0438 (0.0456)	validation_time 0.0004 (0.0006)	train_time 0.0434 (0.0449)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.48770001405477525, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 12%|#1        | 3/26 [00:00<00:01, 14.47it/s] 27%|##6       | 7/26 [00:00<00:00, 22.47it/s] 42%|####2     | 11/26 [00:00<00:00, 25.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.99it/s] 65%|######5   | 17/26 [00:00<00:00, 27.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.89it/s] 88%|########8 | 23/26 [00:00<00:00, 28.50it/s]100%|##########| 26/26 [00:01<00:00, 24.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8747 (7.8743)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 23%|##3       | 6/26 [00:00<00:00, 26.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.83it/s] 42%|####2     | 11/26 [00:00<00:00, 35.33it/s] 62%|######1   | 16/26 [00:00<00:00, 40.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.22it/s] 81%|########  | 21/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 34.59it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.46)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.09 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 35/  1]	epoch_time 0.0425 (0.0456)	validation_time 0.0003 (0.0006)	train_time 0.0422 (0.0449)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.48820001581311223, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.67it/s] 19%|#9        | 5/26 [00:00<00:01, 11.90it/s] 35%|###4      | 9/26 [00:00<00:00, 17.86it/s] 46%|####6     | 12/26 [00:00<00:00, 21.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.11it/s] 69%|######9   | 18/26 [00:00<00:00, 24.84it/s] 81%|########  | 21/26 [00:01<00:00, 26.09it/s] 96%|#########6| 25/26 [00:01<00:00, 27.27it/s]100%|##########| 26/26 [00:01<00:00, 20.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8745 (7.8741)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 23%|##3       | 6/26 [00:00<00:00, 28.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.32it/s] 42%|####2     | 11/26 [00:00<00:00, 36.07it/s] 62%|######1   | 16/26 [00:00<00:00, 36.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.23it/s] 81%|########  | 21/26 [00:00<00:00, 38.93it/s]100%|##########| 26/26 [00:00<00:00, 42.24it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.05 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.39it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 36/  1]	epoch_time 0.0423 (0.0455)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0448)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.487100010484457, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 15%|#5        | 4/26 [00:00<00:01, 17.36it/s] 27%|##6       | 7/26 [00:00<00:00, 22.23it/s] 38%|###8      | 10/26 [00:00<00:00, 24.76it/s] 50%|#####     | 13/26 [00:00<00:00, 26.35it/s] 62%|######1   | 16/26 [00:00<00:00, 27.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.71it/s] 88%|########8 | 23/26 [00:00<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 24.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8743 (7.8739)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 23%|##3       | 6/26 [00:00<00:00, 28.55it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.55it/s] 42%|####2     | 11/26 [00:00<00:00, 36.50it/s] 62%|######1   | 16/26 [00:00<00:00, 40.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.49it/s] 81%|########  | 21/26 [00:00<00:00, 39.98it/s]100%|##########| 26/26 [00:00<00:00, 42.81it/s]100%|##########| 26/26 [00:00<00:00, 34.60it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.10 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.05 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 37/  1]	epoch_time 0.0427 (0.0454)	validation_time 0.0003 (0.0006)	train_time 0.0424 (0.0447)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.48580000939965245, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.96it/s] 19%|#9        | 5/26 [00:00<00:01, 15.32it/s] 35%|###4      | 9/26 [00:00<00:00, 21.08it/s] 50%|#####     | 13/26 [00:00<00:00, 24.57it/s] 65%|######5   | 17/26 [00:00<00:00, 26.43it/s] 81%|########  | 21/26 [00:00<00:00, 27.86it/s] 96%|#########6| 25/26 [00:01<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 23.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8741 (7.8736)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 23%|##3       | 6/26 [00:00<00:00, 24.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.70it/s] 42%|####2     | 11/26 [00:00<00:00, 34.09it/s] 62%|######1   | 16/26 [00:00<00:00, 39.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.12it/s] 81%|########  | 21/26 [00:00<00:00, 41.64it/s]100%|##########| 26/26 [00:00<00:00, 43.28it/s]100%|##########| 26/26 [00:00<00:00, 34.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.56 (  0.52)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.56 (  0.52)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.11 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.05 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 38/  1]	epoch_time 0.0407 (0.0453)	validation_time 0.0003 (0.0006)	train_time 0.0403 (0.0446)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.48320000839233396, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.83it/s] 15%|#5        | 4/26 [00:00<00:01, 20.47it/s] 31%|###       | 8/26 [00:00<00:00, 25.89it/s] 42%|####2     | 11/26 [00:00<00:00, 26.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.27it/s] 65%|######5   | 17/26 [00:00<00:00, 27.65it/s] 81%|########  | 21/26 [00:00<00:00, 28.52it/s] 96%|#########6| 25/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:01<00:00, 25.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8738 (7.8734)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.38it/s] 27%|##6       | 7/26 [00:00<00:00, 34.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.72it/s] 50%|#####     | 13/26 [00:00<00:00, 40.54it/s] 69%|######9   | 18/26 [00:00<00:00, 39.78it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.78it/s] 88%|########8 | 23/26 [00:00<00:00, 41.97it/s]100%|##########| 26/26 [00:00<00:00, 37.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.02 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.49 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.11 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.53 (  0.50)	test_majacc   0.50 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 39/  1]	epoch_time 0.0478 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0473 (0.0447)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4827000084221363, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.08it/s] 23%|##3       | 6/26 [00:00<00:00, 21.81it/s] 38%|###8      | 10/26 [00:00<00:00, 25.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.08it/s] 69%|######9   | 18/26 [00:00<00:00, 29.47it/s] 85%|########4 | 22/26 [00:00<00:00, 30.12it/s]100%|##########| 26/26 [00:00<00:00, 30.36it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.53)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8736 (7.8731)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 31%|###       | 8/26 [00:00<00:00, 33.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.34it/s] 50%|#####     | 13/26 [00:00<00:00, 37.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.71it/s] 92%|#########2| 24/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 35.92it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.12 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.48)	test_minacc   0.53 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.05 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 40/  1]	epoch_time 0.0405 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0402 (0.0446)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.48050000751018523, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 15%|#5        | 4/26 [00:00<00:01, 21.23it/s] 27%|##6       | 7/26 [00:00<00:00, 24.45it/s] 42%|####2     | 11/26 [00:00<00:00, 27.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.71it/s] 69%|######9   | 18/26 [00:00<00:00, 29.66it/s] 81%|########  | 21/26 [00:00<00:00, 29.72it/s] 92%|#########2| 24/26 [00:00<00:00, 29.77it/s]100%|##########| 26/26 [00:00<00:00, 26.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.54)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8732 (7.8727)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 23%|##3       | 6/26 [00:00<00:00, 30.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.44it/s] 42%|####2     | 11/26 [00:00<00:00, 36.82it/s] 62%|######1   | 16/26 [00:00<00:00, 41.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.10it/s] 81%|########  | 21/26 [00:00<00:00, 39.51it/s]100%|##########| 26/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.49)	test_minacc   0.57 (  0.52)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.45 (  0.50)	test_majacc   0.46 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.46 (  0.48)	test_corr_d  -0.12 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.48)	test_minacc   0.53 (  0.50)	test_majacc   0.50 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.95it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 41/  1]	epoch_time 0.0426 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0445)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4803000060319901, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.55it/s] 27%|##6       | 7/26 [00:00<00:00, 27.43it/s] 38%|###8      | 10/26 [00:00<00:00, 28.23it/s] 50%|#####     | 13/26 [00:00<00:00, 28.35it/s] 65%|######5   | 17/26 [00:00<00:00, 28.95it/s] 81%|########  | 21/26 [00:00<00:00, 29.98it/s] 96%|#########6| 25/26 [00:00<00:00, 30.55it/s]100%|##########| 26/26 [00:00<00:00, 27.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.53 (  0.54)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8730 (7.8724)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.46it/s] 23%|##3       | 6/26 [00:00<00:00, 21.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.85it/s] 42%|####2     | 11/26 [00:00<00:00, 30.22it/s] 62%|######1   | 16/26 [00:00<00:00, 35.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.10it/s] 81%|########  | 21/26 [00:00<00:00, 36.42it/s]100%|##########| 26/26 [00:00<00:00, 40.03it/s]100%|##########| 26/26 [00:00<00:00, 30.66it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.49)	test_minacc   0.57 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.03 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.45 (  0.48)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.45 (  0.48)	test_corr_d  -0.13 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.48)	test_minacc   0.53 (  0.49)	test_majacc   0.50 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 42/  1]	epoch_time 0.0443 (0.0451)	validation_time 0.0004 (0.0005)	train_time 0.0438 (0.0445)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4783000049889088, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 15%|#5        | 4/26 [00:00<00:01, 18.11it/s] 31%|###       | 8/26 [00:00<00:00, 24.06it/s] 46%|####6     | 12/26 [00:00<00:00, 27.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.03it/s] 88%|########8 | 23/26 [00:00<00:00, 28.96it/s]100%|##########| 26/26 [00:01<00:00, 25.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.56 (  0.54)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8725 (7.8720)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 23%|##3       | 6/26 [00:00<00:00, 30.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.17it/s] 42%|####2     | 11/26 [00:00<00:00, 35.55it/s] 62%|######1   | 16/26 [00:00<00:00, 39.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.91it/s] 81%|########  | 21/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 41.67it/s]100%|##########| 26/26 [00:00<00:00, 34.64it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.49)	test_minacc   0.57 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.04 ( -0.07)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.45 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.13 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.56 (  0.49)	test_majacc   0.50 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.05 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0434 (0.0451)	validation_time 0.0004 (0.0005)	train_time 0.0430 (0.0445)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4776000031232834, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.57it/s] 19%|#9        | 5/26 [00:00<00:01, 14.45it/s] 31%|###       | 8/26 [00:00<00:00, 19.13it/s] 46%|####6     | 12/26 [00:00<00:00, 23.30it/s] 62%|######1   | 16/26 [00:00<00:00, 25.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.55it/s] 92%|#########2| 24/26 [00:01<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 22.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.52 (  0.50)	train_minacc   0.62 (  0.54)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8721 (7.8716)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.88it/s] 15%|#5        | 4/26 [00:00<00:01, 12.60it/s] 35%|###4      | 9/26 [00:00<00:00, 24.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.74it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 33.74it/s] 81%|########  | 21/26 [00:00<00:00, 38.92it/s]100%|##########| 26/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 29.35it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.57 (  0.51)	test_majacc   0.44 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.44 (  0.48)	test_corr_d  -0.04 ( -0.07)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.47)	test_minacc   0.45 (  0.49)	test_majacc   0.45 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.14 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.52 (  0.48)	test_minacc   0.59 (  0.49)	test_majacc   0.50 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.05 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0422 (0.0450)	validation_time 0.0004 (0.0005)	train_time 0.0417 (0.0444)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.47560000577569006, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 29.25it/s] 81%|########  | 21/26 [00:00<00:00, 30.07it/s] 96%|#########6| 25/26 [00:00<00:00, 30.46it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.51 (  0.50)	train_minacc   0.62 (  0.54)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8717 (7.8712)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 42%|####2     | 11/26 [00:00<00:00, 37.92it/s] 62%|######1   | 16/26 [00:00<00:00, 41.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 35.22it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.48)	test_minacc   0.57 (  0.51)	test_majacc   0.43 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.43 (  0.48)	test_corr_d  -0.04 ( -0.07)
Test: [  20/  26]	Loss 0.696 (0.694)	test_acc   0.45 (  0.47)	test_minacc   0.47 (  0.49)	test_majacc   0.45 (  0.47)	Loss_d 0.696 (0.694)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.14 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.47)	test_minacc   0.59 (  0.49)	test_majacc   0.50 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0448 (0.0450)	validation_time 0.0004 (0.0005)	train_time 0.0443 (0.0444)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4736000031530857, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 19%|#9        | 5/26 [00:00<00:01, 19.09it/s] 35%|###4      | 9/26 [00:00<00:00, 24.16it/s] 50%|#####     | 13/26 [00:00<00:00, 26.75it/s] 65%|######5   | 17/26 [00:00<00:00, 28.37it/s] 81%|########  | 21/26 [00:00<00:00, 29.41it/s] 96%|#########6| 25/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:01<00:00, 25.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.51 (  0.50)	train_minacc   0.62 (  0.54)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8712 (7.8706)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.21it/s] 27%|##6       | 7/26 [00:00<00:00, 32.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.40it/s] 46%|####6     | 12/26 [00:00<00:00, 38.48it/s] 69%|######9   | 18/26 [00:00<00:00, 42.07it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.07it/s] 92%|#########2| 24/26 [00:00<00:00, 45.00it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.46 (  0.47)	test_minacc   0.57 (  0.51)	test_majacc   0.43 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.05 ( -0.08)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.45 (  0.47)	test_minacc   0.47 (  0.49)	test_majacc   0.44 (  0.46)	Loss_d 0.696 (0.695)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.15 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.52 (  0.47)	test_minacc   0.62 (  0.49)	test_majacc   0.50 (  0.47)	Loss_d 0.694 (0.695)	test_acc_d   0.52 (  0.47)	test_minacc_d   0.62 (  0.49)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 46/  1]	epoch_time 0.0423 (0.0450)	validation_time 0.0003 (0.0005)	train_time 0.0420 (0.0443)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.46990000262856485, 0.46400001645088196)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 15%|#5        | 4/26 [00:00<00:01, 16.49it/s] 27%|##6       | 7/26 [00:00<00:00, 21.29it/s] 38%|###8      | 10/26 [00:00<00:00, 24.31it/s] 50%|#####     | 13/26 [00:00<00:00, 25.86it/s] 65%|######5   | 17/26 [00:00<00:00, 27.33it/s] 81%|########  | 21/26 [00:00<00:00, 28.56it/s] 96%|#########6| 25/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:01<00:00, 24.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.66 (  0.55)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8706 (7.8701)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.83it/s] 27%|##6       | 7/26 [00:00<00:00, 35.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.91it/s] 46%|####6     | 12/26 [00:00<00:00, 40.65it/s] 65%|######5   | 17/26 [00:00<00:00, 42.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.06it/s] 85%|########4 | 22/26 [00:00<00:00, 44.31it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.47)	test_minacc   0.57 (  0.51)	test_majacc   0.43 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.05 ( -0.08)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.45 (  0.47)	test_minacc   0.47 (  0.50)	test_majacc   0.44 (  0.46)	Loss_d 0.696 (0.695)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.15 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.47)	test_minacc   0.66 (  0.50)	test_majacc   0.49 (  0.46)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.66 (  0.50)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.05 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.95it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 47/  1]	epoch_time 0.0481 (0.0450)	validation_time 0.0004 (0.0005)	train_time 0.0477 (0.0444)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.4686000036597252, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.99it/s] 27%|##6       | 7/26 [00:00<00:00, 27.04it/s] 42%|####2     | 11/26 [00:00<00:00, 29.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.80it/s] 88%|########8 | 23/26 [00:00<00:00, 30.62it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.66 (  0.55)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8700 (7.8694)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 19%|#9        | 5/26 [00:00<00:00, 25.34it/s] 38%|###8      | 10/26 [00:00<00:00, 31.48it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.79it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.65it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.65it/s] 96%|#########6| 25/26 [00:00<00:00, 42.05it/s]100%|##########| 26/26 [00:00<00:00, 34.52it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.54 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.47)	test_minacc   0.56 (  0.51)	test_majacc   0.43 (  0.47)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.05 ( -0.08)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.44 (  0.47)	test_minacc   0.45 (  0.49)	test_majacc   0.44 (  0.46)	Loss_d 0.696 (0.695)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.16 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.47)	test_minacc   0.62 (  0.49)	test_majacc   0.49 (  0.46)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.62 (  0.49)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.05 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 48/  1]	epoch_time 0.0399 (0.0449)	validation_time 0.0003 (0.0005)	train_time 0.0396 (0.0443)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.46710000237822535, 0.46700000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 15%|#5        | 4/26 [00:00<00:01, 15.43it/s] 31%|###       | 8/26 [00:00<00:00, 22.39it/s] 46%|####6     | 12/26 [00:00<00:00, 25.73it/s] 62%|######1   | 16/26 [00:00<00:00, 27.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 24.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.42)	train_acc   0.50 (  0.50)	train_minacc   0.66 (  0.56)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8693 (7.8687)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 23%|##3       | 6/26 [00:00<00:00, 28.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.14it/s] 42%|####2     | 11/26 [00:00<00:00, 35.29it/s] 62%|######1   | 16/26 [00:00<00:00, 39.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.50it/s] 81%|########  | 21/26 [00:00<00:00, 37.96it/s]100%|##########| 26/26 [00:00<00:00, 41.00it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.45 (  0.47)	test_minacc   0.56 (  0.50)	test_majacc   0.43 (  0.47)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.43 (  0.47)	test_corr_d  -0.06 ( -0.09)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.44 (  0.47)	test_minacc   0.45 (  0.49)	test_majacc   0.44 (  0.46)	Loss_d 0.696 (0.695)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.17 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.47)	test_minacc   0.66 (  0.49)	test_majacc   0.49 (  0.46)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.66 (  0.49)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.06 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 49/  1]	epoch_time 0.0432 (0.0449)	validation_time 0.0003 (0.0005)	train_time 0.0429 (0.0443)
record: (train_acc, test_acc) (0.719200031876564, 0.7260000109672546)
last accs (train_acc, test_acc) (0.46710000374913213, 0.46400001645088196)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpz_rhzxza'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: | Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214557-jm0wujps
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/jm0wujps
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1185
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5953, 3, 32, 32) (6047, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.56s/it] 19%|#9        | 5/26 [00:01<00:05,  3.87it/s] 31%|###       | 8/26 [00:01<00:02,  6.56it/s] 42%|####2     | 11/26 [00:01<00:01,  9.39it/s] 58%|#####7    | 15/26 [00:02<00:00, 13.49it/s] 69%|######9   | 18/26 [00:02<00:00, 16.33it/s] 85%|########4 | 22/26 [00:02<00:00, 20.01it/s]100%|##########| 26/26 [00:02<00:00, 13.88it/s]100%|##########| 26/26 [00:02<00:00,  9.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.698 (12.955)	train_nll   0.45 (  0.59)	train_penalty   0.09 (  0.31)	weight_norm  10.25 ( 12.36)	train_acc   0.83 (  0.77)	train_minacc   0.00 (  0.12)	train_majacc   0.99 (  0.88)	train_corr   0.00 (  0.00)	l1 8.9572 (8.1664)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.56it/s] 23%|##3       | 6/26 [00:00<00:01, 18.43it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.43it/s] 42%|####2     | 11/26 [00:00<00:00, 26.53it/s] 62%|######1   | 16/26 [00:00<00:00, 33.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.00it/s] 81%|########  | 21/26 [00:00<00:00, 36.03it/s]100%|##########| 26/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
Test: [   0/  26]	Loss 0.357 (0.357)	test_acc   0.88 (  0.88)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.357 (0.357)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.387 (0.408)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.408)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.386 (0.414)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.386 (0.414)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.436 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.436 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.652 (1.652)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.652 (1.652)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.652 (1.652)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.652 (1.652)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0792 (0.0792)	validation_time 0.0069 (0.0069)	train_time 0.0703 (0.0703)
record: (train_acc, test_acc) (0.8459000292420388, 0.11700000613927841)
last accs (train_acc, test_acc) (0.8459000292420388, 0.11700000613927841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 19%|#9        | 5/26 [00:00<00:00, 21.37it/s] 35%|###4      | 9/26 [00:00<00:00, 25.46it/s] 50%|#####     | 13/26 [00:00<00:00, 27.67it/s] 62%|######1   | 16/26 [00:00<00:00, 28.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.73it/s] 92%|#########2| 24/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.776 (7.865)	train_nll   0.43 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm   5.34 (  7.46)	train_acc   0.83 (  0.85)	train_minacc   0.10 (  0.02)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 9.4965 (9.4065)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s]  8%|7         | 2/26 [00:00<00:04,  5.62it/s] 27%|##6       | 7/26 [00:00<00:00, 19.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.60it/s] 46%|####6     | 12/26 [00:00<00:00, 28.62it/s] 65%|######5   | 17/26 [00:00<00:00, 34.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.61it/s] 85%|########4 | 22/26 [00:00<00:00, 34.47it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
Test: [   0/  26]	Loss 0.361 (0.361)	test_acc   0.88 (  0.88)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.361 (0.361)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.387 (0.401)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.401)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.384 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.11 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.384 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.11 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.91 (  0.93)
Test: [  26/  26]	Loss 0.401 (0.399)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.401 (0.399)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.60it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.699 (1.699)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 1.699 (1.699)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0425 (0.0608)	validation_time 0.0004 (0.0036)	train_time 0.0420 (0.0562)
record: (train_acc, test_acc) (0.8467000221014023, 0.12600000202655792)
last accs (train_acc, test_acc) (0.8467000221014023, 0.12600000202655792)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.60it/s] 19%|#9        | 5/26 [00:00<00:01, 11.72it/s] 35%|###4      | 9/26 [00:00<00:00, 17.61it/s] 50%|#####     | 13/26 [00:00<00:00, 21.75it/s] 65%|######5   | 17/26 [00:00<00:00, 24.68it/s] 81%|########  | 21/26 [00:01<00:00, 27.31it/s] 96%|#########6| 25/26 [00:01<00:00, 28.76it/s]100%|##########| 26/26 [00:01<00:00, 21.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.502 (4.438)	train_nll   0.41 (  0.39)	train_penalty   0.03 (  0.05)	weight_norm   3.09 (  4.04)	train_acc   0.84 (  0.85)	train_minacc   0.25 (  0.04)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 8.7990 (9.0967)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.27it/s] 23%|##3       | 6/26 [00:00<00:00, 30.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.26it/s] 42%|####2     | 11/26 [00:00<00:00, 37.87it/s] 62%|######1   | 16/26 [00:00<00:00, 41.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.27it/s] 81%|########  | 21/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 42.30it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.338 (0.338)	test_acc   0.88 (  0.88)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.338 (0.338)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.392 (0.392)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.21)	test_majacc   0.98 (  0.96)	Loss_d 0.392 (0.392)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.21)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.92 (  0.90)
Test: [  20/  26]	Loss 0.341 (0.386)	test_acc   0.85 (  0.84)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.341 (0.386)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.362 (0.376)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.362 (0.376)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.18it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 1.735 (1.735)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 1.735 (1.735)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.74 (  0.74)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0445 (0.0554)	validation_time 0.0004 (0.0026)	train_time 0.0441 (0.0521)
record: (train_acc, test_acc) (0.8451000267267227, 0.28700000047683716)
last accs (train_acc, test_acc) (0.8451000267267227, 0.28700000047683716)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 15%|#5        | 4/26 [00:00<00:01, 20.63it/s] 27%|##6       | 7/26 [00:00<00:00, 24.11it/s] 42%|####2     | 11/26 [00:00<00:00, 27.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.58it/s] 69%|######9   | 18/26 [00:00<00:00, 29.64it/s] 85%|########4 | 22/26 [00:00<00:00, 30.71it/s]100%|##########| 26/26 [00:00<00:00, 32.46it/s]100%|##########| 26/26 [00:00<00:00, 27.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.310 (2.836)	train_nll   0.37 (  0.39)	train_penalty   0.03 (  0.04)	weight_norm   1.94 (  2.45)	train_acc   0.84 (  0.85)	train_minacc   0.20 (  0.07)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 7.7971 (8.1516)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.41it/s] 23%|##3       | 6/26 [00:00<00:00, 27.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.03it/s] 42%|####2     | 11/26 [00:00<00:00, 34.73it/s] 62%|######1   | 16/26 [00:00<00:00, 39.54it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.54it/s] 81%|########  | 21/26 [00:00<00:00, 38.22it/s]100%|##########| 26/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 32.39it/s]
Test: [   0/  26]	Loss 0.337 (0.337)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 0.337 (0.337)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.408 (0.395)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 0.408 (0.395)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.380 (0.397)	test_acc   0.83 (  0.83)	test_minacc   0.29 (  0.28)	test_majacc   0.92 (  0.93)	Loss_d 0.380 (0.397)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.29 (  0.28)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.349 (0.389)	test_acc   0.87 (  0.84)	test_minacc   0.50 (  0.28)	test_majacc   0.94 (  0.93)	Loss_d 0.349 (0.389)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.50 (  0.28)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 1.570 (1.570)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.570 (1.570)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.570 (1.570)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.93 (  0.93)	Loss_d 1.570 (1.570)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0455 (0.0529)	validation_time 0.0004 (0.0020)	train_time 0.0450 (0.0504)
record: (train_acc, test_acc) (0.836300023317337, 0.32600000500679016)
last accs (train_acc, test_acc) (0.836300023317337, 0.32600000500679016)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 15%|#5        | 4/26 [00:00<00:01, 17.91it/s] 27%|##6       | 7/26 [00:00<00:00, 22.76it/s] 42%|####2     | 11/26 [00:00<00:00, 26.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.06it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 25.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.636 (1.939)	train_nll   0.38 (  0.38)	train_penalty   0.05 (  0.04)	weight_norm   1.26 (  1.56)	train_acc   0.84 (  0.85)	train_minacc   0.17 (  0.08)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 7.5493 (7.5430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 15%|#5        | 4/26 [00:00<00:01, 15.93it/s] 35%|###4      | 9/26 [00:00<00:00, 28.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.20it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.20it/s] 88%|########8 | 23/26 [00:00<00:00, 38.75it/s]100%|##########| 26/26 [00:00<00:00, 30.97it/s]
Test: [   0/  26]	Loss 0.300 (0.300)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.95 (  0.95)	Loss_d 0.300 (0.300)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.375 (0.371)	test_acc   0.86 (  0.85)	test_minacc   0.26 (  0.22)	test_majacc   0.97 (  0.96)	Loss_d 0.375 (0.371)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.26 (  0.22)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.350 (0.372)	test_acc   0.85 (  0.84)	test_minacc   0.29 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 0.350 (0.372)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.29 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.83 (  0.86)
Test: [  26/  26]	Loss 0.353 (0.363)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.23)	test_majacc   0.97 (  0.96)	Loss_d 0.353 (0.363)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.23)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.93it/s]
Test: [  0/  1]	Loss 1.504 (1.504)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.504 (1.504)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.60 (  0.60)
Test: [  1/  1]	Loss 1.504 (1.504)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.95)	Loss_d 1.504 (1.504)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.60 (  0.60)
Overall Timing[  4/  1]	epoch_time 0.0436 (0.0510)	validation_time 0.0004 (0.0017)	train_time 0.0433 (0.0489)
record: (train_acc, test_acc) (0.836300023317337, 0.32600000500679016)
last accs (train_acc, test_acc) (0.8462000264525413, 0.2990000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.26it/s] 19%|#9        | 5/26 [00:00<00:01, 19.65it/s] 35%|###4      | 9/26 [00:00<00:00, 25.72it/s] 50%|#####     | 13/26 [00:00<00:00, 27.63it/s] 65%|######5   | 17/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 29.41it/s] 96%|#########6| 25/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:01<00:00, 25.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.193 (1.383)	train_nll   0.37 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.83 (  1.02)	train_acc   0.84 (  0.85)	train_minacc   0.17 (  0.13)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.6498 (7.4604)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 27%|##6       | 7/26 [00:00<00:00, 34.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.91it/s] 50%|#####     | 13/26 [00:00<00:00, 39.84it/s] 69%|######9   | 18/26 [00:00<00:00, 40.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.58it/s] 88%|########8 | 23/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.306 (0.306)	test_acc   0.87 (  0.87)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 0.306 (0.306)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.359 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.33 (  0.30)	test_majacc   0.95 (  0.94)	Loss_d 0.359 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.33 (  0.30)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.87 (  0.86)
Test: [  20/  26]	Loss 0.345 (0.362)	test_acc   0.85 (  0.84)	test_minacc   0.30 (  0.30)	test_majacc   0.94 (  0.94)	Loss_d 0.345 (0.362)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.329 (0.353)	test_acc   0.87 (  0.85)	test_minacc   0.45 (  0.32)	test_majacc   0.95 (  0.94)	Loss_d 0.329 (0.353)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.45 (  0.32)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.51it/s]
Test: [  0/  1]	Loss 1.404 (1.404)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.404 (1.404)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.404 (1.404)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.404 (1.404)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0432 (0.0497)	validation_time 0.0004 (0.0015)	train_time 0.0428 (0.0479)
record: (train_acc, test_acc) (0.8491000258326531, 0.36100003123283386)
last accs (train_acc, test_acc) (0.8491000258326531, 0.36100003123283386)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.41it/s] 15%|#5        | 4/26 [00:00<00:01, 15.31it/s] 27%|##6       | 7/26 [00:00<00:00, 20.00it/s] 38%|###8      | 10/26 [00:00<00:00, 23.29it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.08it/s] 65%|######5   | 17/26 [00:00<00:00, 27.24it/s] 81%|########  | 21/26 [00:00<00:00, 28.43it/s] 92%|#########2| 24/26 [00:00<00:00, 28.85it/s]100%|##########| 26/26 [00:01<00:00, 23.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.903 (1.032)	train_nll   0.35 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.55 (  0.68)	train_acc   0.84 (  0.85)	train_minacc   0.17 (  0.17)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 8.3702 (7.8784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 23%|##3       | 6/26 [00:00<00:00, 28.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.14it/s] 42%|####2     | 11/26 [00:00<00:00, 35.54it/s] 62%|######1   | 16/26 [00:00<00:00, 39.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.90it/s] 81%|########  | 21/26 [00:00<00:00, 40.75it/s]100%|##########| 26/26 [00:00<00:00, 35.33it/s]
Test: [   0/  26]	Loss 0.305 (0.305)	test_acc   0.86 (  0.86)	test_minacc   0.36 (  0.36)	test_majacc   0.93 (  0.93)	Loss_d 0.305 (0.305)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.352 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.33 (  0.38)	test_majacc   0.95 (  0.93)	Loss_d 0.352 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.33 (  0.38)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.87 (  0.84)
Test: [  20/  26]	Loss 0.333 (0.362)	test_acc   0.84 (  0.84)	test_minacc   0.48 (  0.37)	test_majacc   0.90 (  0.93)	Loss_d 0.333 (0.362)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.48 (  0.37)	test_majacc_d   0.90 (  0.93)	test_corr_d   0.80 (  0.84)
Test: [  26/  26]	Loss 0.333 (0.352)	test_acc   0.88 (  0.85)	test_minacc   0.47 (  0.38)	test_majacc   0.95 (  0.93)	Loss_d 0.333 (0.352)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.47 (  0.38)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.84 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.96it/s]
Test: [  0/  1]	Loss 1.468 (1.468)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.89 (  0.89)	Loss_d 1.468 (1.468)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.468 (1.468)	test_acc   0.39 (  0.39)	test_minacc   0.33 (  0.33)	test_majacc   0.89 (  0.89)	Loss_d 1.468 (1.468)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.52 (  0.52)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0422 (0.0487)	validation_time 0.0004 (0.0013)	train_time 0.0418 (0.0470)
record: (train_acc, test_acc) (0.8475000309944153, 0.38600000739097595)
last accs (train_acc, test_acc) (0.8475000309944153, 0.38600000739097595)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 19%|#9        | 5/26 [00:00<00:00, 21.87it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 50%|#####     | 13/26 [00:00<00:00, 27.82it/s] 65%|######5   | 17/26 [00:00<00:00, 29.48it/s] 81%|########  | 21/26 [00:00<00:00, 29.85it/s] 92%|#########2| 24/26 [00:00<00:00, 29.86it/s]100%|##########| 26/26 [00:01<00:00, 25.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.003 (0.591)	train_nll   0.56 (  0.40)	train_penalty   0.00 (  0.03)	weight_norm   0.41 (  0.46)	train_acc   0.75 (  0.82)	train_minacc   0.68 (  0.27)	train_majacc   0.76 (  0.92)	train_corr   0.00 (  0.00)	l1 8.7278 (8.8094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.27it/s] 38%|###8      | 10/26 [00:00<00:00, 42.66it/s]                                                38%|###8      | 10/26 [00:00<00:00, 42.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.05it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.05it/s] 81%|########  | 21/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 41.01it/s]
Test: [   0/  26]	Loss 0.602 (0.602)	test_acc   0.64 (  0.64)	test_minacc   0.67 (  0.67)	test_majacc   0.64 (  0.64)	Loss_d 0.602 (0.602)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.601 (0.603)	test_acc   0.64 (  0.66)	test_minacc   0.61 (  0.68)	test_majacc   0.65 (  0.66)	Loss_d 0.601 (0.603)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.61 (  0.68)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.42 (  0.41)
Test: [  20/  26]	Loss 0.570 (0.601)	test_acc   0.66 (  0.66)	test_minacc   0.82 (  0.68)	test_majacc   0.64 (  0.65)	Loss_d 0.570 (0.601)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.82 (  0.68)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.37 (  0.40)
Test: [  26/  26]	Loss 0.603 (0.596)	test_acc   0.72 (  0.66)	test_minacc   0.75 (  0.69)	test_majacc   0.71 (  0.66)	Loss_d 0.603 (0.596)	test_acc_d   0.72 (  0.66)	test_minacc_d   0.75 (  0.69)	test_majacc_d   0.71 (  0.66)	test_corr_d   0.45 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.50it/s]
Test: [  0/  1]	Loss 0.710 (0.710)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.55 (  0.55)	Loss_d 0.710 (0.710)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.710 (0.710)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.55 (  0.55)	Loss_d 0.710 (0.710)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.15 ( -0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/188/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0462 (0.0484)	validation_time 0.0004 (0.0012)	train_time 0.0458 (0.0469)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 19%|#9        | 5/26 [00:00<00:01, 17.99it/s] 35%|###4      | 9/26 [00:00<00:00, 23.07it/s] 50%|#####     | 13/26 [00:00<00:00, 25.66it/s] 65%|######5   | 17/26 [00:00<00:00, 26.96it/s] 81%|########  | 21/26 [00:00<00:00, 28.34it/s] 96%|#########6| 25/26 [00:00<00:00, 28.88it/s]100%|##########| 26/26 [00:01<00:00, 24.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.44)	train_acc   0.45 (  0.54)	train_minacc   0.55 (  0.54)	train_majacc   0.43 (  0.54)	train_corr   0.00 (  0.00)	l1 8.0572 (8.3310)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.29it/s] 27%|##6       | 7/26 [00:00<00:00, 23.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.69it/s] 46%|####6     | 12/26 [00:00<00:00, 29.49it/s] 65%|######5   | 17/26 [00:00<00:00, 34.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.51it/s] 85%|########4 | 22/26 [00:00<00:00, 37.83it/s]100%|##########| 26/26 [00:00<00:00, 30.50it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.677 (0.677)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.679 (0.683)	test_acc   0.47 (  0.47)	test_minacc   0.53 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.679 (0.683)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.19 (  0.17)
Test: [  20/  26]	Loss 0.671 (0.681)	test_acc   0.51 (  0.47)	test_minacc   0.61 (  0.53)	test_majacc   0.49 (  0.46)	Loss_d 0.671 (0.681)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.14 (  0.17)
Test: [  26/  26]	Loss 0.693 (0.680)	test_acc   0.45 (  0.47)	test_minacc   0.53 (  0.54)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.680)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.13 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.683 (0.683)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.683 (0.683)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.15 ( -0.15)
Overall Timing[  8/  1]	epoch_time 0.0447 (0.0479)	validation_time 0.0003 (0.0011)	train_time 0.0443 (0.0466)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.4732000078856945, 0.550000011920929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 15%|#5        | 4/26 [00:00<00:01, 18.37it/s] 31%|###       | 8/26 [00:00<00:00, 24.65it/s] 46%|####6     | 12/26 [00:00<00:00, 26.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.30it/s] 69%|######9   | 18/26 [00:00<00:00, 28.06it/s] 81%|########  | 21/26 [00:00<00:00, 28.41it/s] 92%|#########2| 24/26 [00:00<00:00, 28.82it/s]100%|##########| 26/26 [00:01<00:00, 24.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.46)	train_acc   0.45 (  0.49)	train_minacc   0.57 (  0.54)	train_majacc   0.42 (  0.48)	train_corr   0.00 (  0.00)	l1 7.9530 (7.9811)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 27%|##6       | 7/26 [00:00<00:00, 34.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.95it/s] 46%|####6     | 12/26 [00:00<00:00, 40.01it/s] 65%|######5   | 17/26 [00:00<00:00, 41.99it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.99it/s] 85%|########4 | 22/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 37.20it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.689 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.51 (  0.52)	test_majacc   0.46 (  0.47)	Loss_d 0.689 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.685 (0.691)	test_acc   0.55 (  0.49)	test_minacc   0.64 (  0.53)	test_majacc   0.54 (  0.48)	Loss_d 0.685 (0.691)	test_acc_d   0.55 (  0.49)	test_minacc_d   0.64 (  0.53)	test_majacc_d   0.54 (  0.48)	test_corr_d   0.04 (  0.05)
Test: [  26/  26]	Loss 0.700 (0.691)	test_acc   0.45 (  0.49)	test_minacc   0.60 (  0.54)	test_majacc   0.42 (  0.48)	Loss_d 0.700 (0.691)	test_acc_d   0.45 (  0.49)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.42 (  0.48)	test_corr_d  -0.01 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.12 ( -0.12)
Overall Timing[  9/  1]	epoch_time 0.0420 (0.0474)	validation_time 0.0005 (0.0010)	train_time 0.0415 (0.0461)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.485400005787611, 0.5470000505447388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 19%|#9        | 5/26 [00:00<00:01, 16.18it/s] 35%|###4      | 9/26 [00:00<00:00, 22.22it/s] 50%|#####     | 13/26 [00:00<00:00, 25.96it/s] 65%|######5   | 17/26 [00:00<00:00, 27.77it/s] 81%|########  | 21/26 [00:00<00:00, 28.53it/s] 96%|#########6| 25/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:01<00:00, 23.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.42 (  0.49)	train_minacc   0.55 (  0.55)	train_majacc   0.40 (  0.48)	train_corr   0.00 (  0.00)	l1 7.9182 (7.9247)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.14it/s] 27%|##6       | 7/26 [00:00<00:00, 24.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.16it/s] 50%|#####     | 13/26 [00:00<00:00, 33.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.81it/s] 96%|#########6| 25/26 [00:00<00:00, 43.60it/s]100%|##########| 26/26 [00:00<00:00, 33.13it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.691 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.689 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.59 (  0.55)	test_majacc   0.50 (  0.48)	Loss_d 0.689 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.699 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.55 (  0.55)	test_majacc   0.41 (  0.48)	Loss_d 0.699 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.41 (  0.48)	test_corr_d  -0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 10/  1]	epoch_time 0.0409 (0.0468)	validation_time 0.0004 (0.0010)	train_time 0.0405 (0.0456)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.49040000772476194, 0.550000011920929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 15%|#5        | 4/26 [00:00<00:01, 21.21it/s] 27%|##6       | 7/26 [00:00<00:00, 23.99it/s] 38%|###8      | 10/26 [00:00<00:00, 26.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.82it/s] 69%|######9   | 18/26 [00:00<00:00, 28.86it/s] 85%|########4 | 22/26 [00:00<00:00, 29.79it/s]100%|##########| 26/26 [00:00<00:00, 31.38it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.44 (  0.50)	train_minacc   0.55 (  0.57)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8977 (7.9014)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.67it/s] 31%|###       | 8/26 [00:00<00:00, 40.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.01it/s] 50%|#####     | 13/26 [00:00<00:00, 42.64it/s] 69%|######9   | 18/26 [00:00<00:00, 44.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.39it/s] 88%|########8 | 23/26 [00:00<00:00, 43.11it/s]100%|##########| 26/26 [00:00<00:00, 38.54it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.61 (  0.55)	test_majacc   0.50 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.697 (0.693)	test_acc   0.44 (  0.49)	test_minacc   0.57 (  0.56)	test_majacc   0.41 (  0.48)	Loss_d 0.697 (0.693)	test_acc_d   0.44 (  0.49)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.41 (  0.48)	test_corr_d  -0.07 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 11/  1]	epoch_time 0.0427 (0.0464)	validation_time 0.0003 (0.0009)	train_time 0.0424 (0.0453)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.49490000650286675, 0.5570000410079956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 21.67it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 50%|#####     | 13/26 [00:00<00:00, 28.37it/s] 65%|######5   | 17/26 [00:00<00:00, 29.57it/s] 81%|########  | 21/26 [00:00<00:00, 30.36it/s] 96%|#########6| 25/26 [00:00<00:00, 31.12it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.46 (  0.50)	train_minacc   0.57 (  0.57)	train_majacc   0.43 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8852 (7.8878)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 23%|##3       | 6/26 [00:00<00:00, 32.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.35it/s] 42%|####2     | 11/26 [00:00<00:00, 36.89it/s] 65%|######5   | 17/26 [00:00<00:00, 40.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.17it/s] 85%|########4 | 22/26 [00:00<00:00, 42.65it/s]100%|##########| 26/26 [00:00<00:00, 36.03it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.62 (  0.62)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.61 (  0.58)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.61 (  0.58)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.55 (  0.56)	test_majacc   0.48 (  0.49)	Loss_d 0.691 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.696 (0.692)	test_acc   0.47 (  0.50)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.49)	Loss_d 0.696 (0.692)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.49)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.12it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.53 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 12/  1]	epoch_time 0.0423 (0.0461)	validation_time 0.0004 (0.0009)	train_time 0.0419 (0.0450)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5028000099062919, 0.5640000104904175)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.91it/s] 19%|#9        | 5/26 [00:00<00:00, 23.53it/s] 31%|###       | 8/26 [00:00<00:00, 26.31it/s] 42%|####2     | 11/26 [00:00<00:00, 27.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.29it/s] 65%|######5   | 17/26 [00:00<00:00, 28.79it/s] 81%|########  | 21/26 [00:00<00:00, 29.60it/s] 96%|#########6| 25/26 [00:00<00:00, 30.46it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.51)	train_minacc   0.57 (  0.57)	train_majacc   0.46 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8766 (7.8788)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.09it/s] 27%|##6       | 7/26 [00:00<00:00, 34.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.66it/s] 46%|####6     | 12/26 [00:00<00:00, 40.56it/s] 65%|######5   | 17/26 [00:00<00:00, 42.12it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.12it/s] 85%|########4 | 22/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 37.41it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.57)	test_majacc   0.48 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.60 (  0.57)	test_majacc   0.46 (  0.50)	Loss_d 0.695 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.03it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 13/  1]	epoch_time 0.0450 (0.0460)	validation_time 0.0004 (0.0008)	train_time 0.0447 (0.0450)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5123000138700008, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 15%|#5        | 4/26 [00:00<00:01, 18.29it/s] 27%|##6       | 7/26 [00:00<00:00, 22.43it/s] 42%|####2     | 11/26 [00:00<00:00, 25.89it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.38it/s] 65%|######5   | 17/26 [00:00<00:00, 26.92it/s] 81%|########  | 21/26 [00:00<00:00, 28.03it/s] 96%|#########6| 25/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:01<00:00, 24.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.51)	train_minacc   0.60 (  0.57)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8703 (7.8722)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 20.56it/s] 38%|###8      | 10/26 [00:00<00:00, 28.55it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.31it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.31it/s] 96%|#########6| 25/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 31.70it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.60 (  0.58)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.55 (  0.57)	test_majacc   0.48 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.60 (  0.57)	test_majacc   0.48 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.06 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 14/  1]	epoch_time 0.0417 (0.0457)	validation_time 0.0004 (0.0008)	train_time 0.0413 (0.0448)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5170000140964985, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.44it/s] 19%|#9        | 5/26 [00:00<00:00, 21.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 46%|####6     | 12/26 [00:00<00:00, 26.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.59it/s] 88%|########8 | 23/26 [00:00<00:00, 28.49it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.52 (  0.52)	train_minacc   0.60 (  0.57)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8654 (7.8671)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.85it/s] 23%|##3       | 6/26 [00:00<00:00, 30.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.60it/s] 42%|####2     | 11/26 [00:00<00:00, 37.74it/s] 62%|######1   | 16/26 [00:00<00:00, 40.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.86it/s] 81%|########  | 21/26 [00:00<00:00, 39.78it/s]100%|##########| 26/26 [00:00<00:00, 42.58it/s]100%|##########| 26/26 [00:00<00:00, 35.57it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.55 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.60 (  0.57)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.06 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 15/  1]	epoch_time 0.0447 (0.0457)	validation_time 0.0003 (0.0008)	train_time 0.0444 (0.0447)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5219000142216682, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.00it/s] 15%|#5        | 4/26 [00:00<00:01, 14.99it/s] 27%|##6       | 7/26 [00:00<00:00, 20.34it/s] 42%|####2     | 11/26 [00:00<00:00, 24.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.56it/s] 85%|########4 | 22/26 [00:00<00:00, 28.93it/s] 96%|#########6| 25/26 [00:01<00:00, 28.37it/s]100%|##########| 26/26 [00:01<00:00, 23.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.51 (  0.52)	train_minacc   0.57 (  0.57)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8614 (7.8629)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 27%|##6       | 7/26 [00:00<00:00, 28.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.99it/s] 46%|####6     | 12/26 [00:00<00:00, 36.58it/s] 65%|######5   | 17/26 [00:00<00:00, 36.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.48it/s] 85%|########4 | 22/26 [00:00<00:00, 39.66it/s]100%|##########| 26/26 [00:00<00:00, 33.27it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.60 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.55 (  0.57)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.06 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.690 (0.690)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 16/  1]	epoch_time 0.0474 (0.0458)	validation_time 0.0004 (0.0008)	train_time 0.0470 (0.0449)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5247000133097172, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 19%|#9        | 5/26 [00:00<00:01, 19.81it/s] 35%|###4      | 9/26 [00:00<00:00, 24.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.94it/s] 65%|######5   | 17/26 [00:00<00:00, 30.12it/s] 81%|########  | 21/26 [00:00<00:00, 31.50it/s] 96%|#########6| 25/26 [00:00<00:00, 31.37it/s]100%|##########| 26/26 [00:00<00:00, 26.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.52 (  0.53)	train_minacc   0.57 (  0.57)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8581 (7.8594)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 23%|##3       | 6/26 [00:00<00:00, 31.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.10it/s] 42%|####2     | 11/26 [00:00<00:00, 38.24it/s] 62%|######1   | 16/26 [00:00<00:00, 42.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.12it/s] 81%|########  | 21/26 [00:00<00:00, 40.00it/s]100%|##########| 26/26 [00:00<00:00, 36.26it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.57 (  0.58)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.57 (  0.58)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.05 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 17/  1]	epoch_time 0.0436 (0.0457)	validation_time 0.0004 (0.0007)	train_time 0.0432 (0.0448)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5278000108003617, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 15%|#5        | 4/26 [00:00<00:01, 18.10it/s] 31%|###       | 8/26 [00:00<00:00, 24.42it/s] 46%|####6     | 12/26 [00:00<00:00, 27.97it/s] 62%|######1   | 16/26 [00:00<00:00, 29.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.73it/s] 92%|#########2| 24/26 [00:00<00:00, 31.35it/s]100%|##########| 26/26 [00:00<00:00, 26.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.53)	train_minacc   0.55 (  0.57)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8553 (7.8565)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.03it/s] 27%|##6       | 7/26 [00:00<00:00, 32.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.81it/s] 46%|####6     | 12/26 [00:00<00:00, 35.51it/s] 65%|######5   | 17/26 [00:00<00:00, 39.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.52it/s] 85%|########4 | 22/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 35.90it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.55 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.05 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 18/  1]	epoch_time 0.0415 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0411 (0.0446)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5293000167310238, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 15%|#5        | 4/26 [00:00<00:01, 20.86it/s] 27%|##6       | 7/26 [00:00<00:00, 22.91it/s] 38%|###8      | 10/26 [00:00<00:00, 25.00it/s] 50%|#####     | 13/26 [00:00<00:00, 26.30it/s] 65%|######5   | 17/26 [00:00<00:00, 27.65it/s] 81%|########  | 21/26 [00:00<00:00, 28.85it/s] 96%|#########6| 25/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:01<00:00, 25.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.53)	train_minacc   0.55 (  0.57)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8531 (7.8541)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 23%|##3       | 6/26 [00:00<00:00, 30.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.63it/s] 42%|####2     | 11/26 [00:00<00:00, 37.24it/s] 62%|######1   | 16/26 [00:00<00:00, 41.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.76it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.55 (  0.57)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.05 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 19/  1]	epoch_time 0.0413 (0.0452)	validation_time 0.0003 (0.0007)	train_time 0.0409 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5287000070512294, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 15%|#5        | 4/26 [00:00<00:01, 19.73it/s] 31%|###       | 8/26 [00:00<00:00, 25.18it/s] 42%|####2     | 11/26 [00:00<00:00, 26.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.72it/s] 65%|######5   | 17/26 [00:00<00:00, 28.35it/s] 81%|########  | 21/26 [00:00<00:00, 29.20it/s] 96%|#########6| 25/26 [00:00<00:00, 29.57it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.53)	train_minacc   0.55 (  0.57)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8513 (7.8521)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.39it/s] 38%|###8      | 10/26 [00:00<00:00, 29.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 29.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.55it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.55it/s] 96%|#########6| 25/26 [00:00<00:00, 41.05it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.59 (  0.57)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.55 (  0.57)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 20/  1]	epoch_time 0.0400 (0.0450)	validation_time 0.0004 (0.0007)	train_time 0.0396 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5286000140309334, 0.5740000009536743)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 15%|#5        | 4/26 [00:00<00:01, 18.13it/s] 27%|##6       | 7/26 [00:00<00:00, 22.72it/s] 42%|####2     | 11/26 [00:00<00:00, 26.84it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.59it/s] 88%|########8 | 23/26 [00:00<00:00, 30.49it/s]100%|##########| 26/26 [00:01<00:00, 25.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.53)	train_minacc   0.53 (  0.57)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8498 (7.8504)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 23%|##3       | 6/26 [00:00<00:00, 28.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.26it/s] 42%|####2     | 11/26 [00:00<00:00, 36.10it/s] 62%|######1   | 16/26 [00:00<00:00, 40.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.48it/s] 81%|########  | 21/26 [00:00<00:00, 39.12it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.64)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.04 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.53 (  0.57)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.77it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 21/  1]	epoch_time 0.0438 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0434 (0.0441)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5276000152528286, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 15%|#5        | 4/26 [00:00<00:01, 17.55it/s] 31%|###       | 8/26 [00:00<00:00, 23.65it/s] 46%|####6     | 12/26 [00:00<00:00, 26.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.32it/s] 69%|######9   | 18/26 [00:00<00:00, 27.31it/s] 81%|########  | 21/26 [00:00<00:00, 27.85it/s] 96%|#########6| 25/26 [00:00<00:00, 30.05it/s]100%|##########| 26/26 [00:01<00:00, 24.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.53)	train_minacc   0.55 (  0.55)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8486 (7.8491)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 23%|##3       | 6/26 [00:00<00:00, 26.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.33it/s] 42%|####2     | 11/26 [00:00<00:00, 34.49it/s] 62%|######1   | 16/26 [00:00<00:00, 39.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.57it/s] 81%|########  | 21/26 [00:00<00:00, 38.07it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.64 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.55)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.57 (  0.55)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.05 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.55 (  0.55)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.35it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 22/  1]	epoch_time 0.0428 (0.0448)	validation_time 0.0004 (0.0007)	train_time 0.0423 (0.0441)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5295000130236149, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.20it/s] 50%|#####     | 13/26 [00:00<00:00, 29.29it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 30.67it/s] 96%|#########6| 25/26 [00:00<00:00, 30.60it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.848426818847656
set z to 7.456005477905273
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.54 (  0.53)	train_minacc   0.47 (  0.52)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8477 (7.8481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 23%|##3       | 6/26 [00:00<00:00, 20.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.15it/s] 42%|####2     | 11/26 [00:00<00:00, 28.95it/s] 62%|######1   | 16/26 [00:00<00:00, 35.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.09it/s] 81%|########  | 21/26 [00:00<00:00, 35.58it/s]100%|##########| 26/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 29.72it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.67 (  0.67)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.49 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.49 (  0.53)	test_corr_d  -0.05 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.47 (  0.52)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.56 (  0.54)	test_corr_d  -0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.39it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 23/  1]	epoch_time 0.0488 (0.0450)	validation_time 0.0004 (0.0007)	train_time 0.0485 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5332000127732753, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.68it/s] 19%|#9        | 5/26 [00:00<00:00, 21.01it/s] 35%|###4      | 9/26 [00:00<00:00, 25.18it/s] 50%|#####     | 13/26 [00:00<00:00, 27.65it/s] 62%|######1   | 16/26 [00:00<00:00, 28.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.89it/s] 88%|########8 | 23/26 [00:00<00:00, 29.09it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.56 (  0.53)	train_minacc   0.45 (  0.49)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.8470 (7.8473)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 19%|#9        | 5/26 [00:00<00:00, 23.67it/s] 38%|###8      | 10/26 [00:00<00:00, 33.48it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.82it/s] 96%|#########6| 25/26 [00:00<00:00, 40.62it/s]100%|##########| 26/26 [00:00<00:00, 33.60it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.47 (  0.48)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.54)	test_corr_d  -0.05 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.45 (  0.48)	test_majacc   0.58 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.58 (  0.55)	test_corr_d  -0.02 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 24/  1]	epoch_time 0.0438 (0.0450)	validation_time 0.0003 (0.0006)	train_time 0.0434 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5348000108599663, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 15%|#5        | 4/26 [00:00<00:01, 16.34it/s] 31%|###       | 8/26 [00:00<00:00, 24.10it/s] 46%|####6     | 12/26 [00:00<00:00, 28.01it/s] 62%|######1   | 16/26 [00:00<00:00, 29.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.59it/s] 92%|#########2| 24/26 [00:00<00:00, 31.50it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.57 (  0.54)	train_minacc   0.45 (  0.47)	train_majacc   0.60 (  0.55)	train_corr   0.00 (  0.00)	l1 7.8464 (7.8466)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 38%|###8      | 10/26 [00:00<00:00, 33.11it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.21it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.21it/s] 96%|#########6| 25/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.46 (  0.47)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.01 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.53)	test_minacc   0.46 (  0.47)	test_majacc   0.50 (  0.55)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.50 (  0.55)	test_corr_d  -0.06 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.45 (  0.47)	test_majacc   0.60 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.60 (  0.55)	test_corr_d  -0.01 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 25/  1]	epoch_time 0.0437 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.535400014936924, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.94it/s] 23%|##3       | 6/26 [00:00<00:00, 24.65it/s] 35%|###4      | 9/26 [00:00<00:00, 26.79it/s] 46%|####6     | 12/26 [00:00<00:00, 26.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.29it/s] 85%|########4 | 22/26 [00:00<00:00, 28.74it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:00<00:00, 26.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.55 (  0.53)	train_minacc   0.43 (  0.47)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 7.8459 (7.8462)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.84it/s] 12%|#1        | 3/26 [00:00<00:02,  8.59it/s] 31%|###       | 8/26 [00:00<00:00, 21.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 21.06it/s] 50%|#####     | 13/26 [00:00<00:00, 29.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.71it/s] 96%|#########6| 25/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 27.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.60 (  0.60)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.46 (  0.47)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.46 (  0.47)	test_majacc_d   0.53 (  0.54)	test_corr_d  -0.01 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.53)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.54)	test_corr_d  -0.06 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.43 (  0.47)	test_majacc   0.57 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.57 (  0.55)	test_corr_d  -0.00 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 26/  1]	epoch_time 0.0472 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0468 (0.0443)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5333000118136406, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 12%|#1        | 3/26 [00:00<00:01, 14.31it/s] 27%|##6       | 7/26 [00:00<00:00, 24.03it/s] 42%|####2     | 11/26 [00:00<00:00, 27.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.30it/s] 65%|######5   | 17/26 [00:00<00:00, 28.56it/s] 81%|########  | 21/26 [00:00<00:00, 29.32it/s] 96%|#########6| 25/26 [00:00<00:00, 30.34it/s]100%|##########| 26/26 [00:01<00:00, 25.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.55 (  0.53)	train_minacc   0.40 (  0.47)	train_majacc   0.58 (  0.54)	train_corr   0.00 (  0.00)	l1 7.8455 (7.8457)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.23it/s] 27%|##6       | 7/26 [00:00<00:00, 35.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.99it/s] 46%|####6     | 12/26 [00:00<00:00, 39.94it/s] 65%|######5   | 17/26 [00:00<00:00, 42.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.94it/s] 85%|########4 | 22/26 [00:00<00:00, 40.16it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.47 (  0.46)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.47 (  0.46)	test_majacc_d   0.51 (  0.54)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.53)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.53)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.54)	test_corr_d  -0.06 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.40 (  0.47)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.40 (  0.47)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.01 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.43it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 27/  1]	epoch_time 0.0416 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5303000191748142, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 62%|######1   | 16/26 [00:00<00:00, 26.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.58it/s] 85%|########4 | 22/26 [00:00<00:00, 27.90it/s] 96%|#########6| 25/26 [00:00<00:00, 28.21it/s]100%|##########| 26/26 [00:01<00:00, 25.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.55 (  0.52)	train_minacc   0.38 (  0.47)	train_majacc   0.58 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8452 (7.8454)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.88it/s] 31%|###       | 8/26 [00:00<00:00, 34.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.14it/s] 92%|#########2| 24/26 [00:00<00:00, 41.87it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.51 (  0.47)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.51 (  0.54)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.52)	test_minacc   0.48 (  0.47)	test_majacc   0.47 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.48 (  0.47)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.06 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.53)	test_minacc   0.38 (  0.47)	test_majacc   0.58 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.38 (  0.47)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 28/  1]	epoch_time 0.0416 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0412 (0.0441)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5252000122964382, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 21.81it/s] 35%|###4      | 9/26 [00:00<00:00, 25.65it/s] 46%|####6     | 12/26 [00:00<00:00, 27.08it/s] 62%|######1   | 16/26 [00:00<00:00, 28.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.65it/s] 88%|########8 | 23/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:00<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 25.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.54 (  0.52)	train_minacc   0.38 (  0.47)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8449 (7.8451)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.95it/s] 31%|###       | 8/26 [00:00<00:00, 39.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.56it/s] 50%|#####     | 13/26 [00:00<00:00, 42.17it/s] 69%|######9   | 18/26 [00:00<00:00, 40.88it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.88it/s] 88%|########8 | 23/26 [00:00<00:00, 42.27it/s]100%|##########| 26/26 [00:00<00:00, 39.00it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.58 (  0.58)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.54 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.52 (  0.47)	test_majacc   0.47 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.06 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.38 (  0.48)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.85it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0471 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0467 (0.0442)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5234000143110752, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 27.78it/s] 62%|######1   | 16/26 [00:00<00:00, 28.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.90it/s] 92%|#########2| 24/26 [00:00<00:00, 30.08it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.54 (  0.51)	train_minacc   0.38 (  0.49)	train_majacc   0.57 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8447 (7.8449)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.69it/s] 23%|##3       | 6/26 [00:00<00:01, 19.52it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.52it/s] 42%|####2     | 11/26 [00:00<00:00, 28.61it/s] 62%|######1   | 16/26 [00:00<00:00, 34.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.61it/s] 81%|########  | 21/26 [00:00<00:00, 35.30it/s]100%|##########| 26/26 [00:00<00:00, 39.19it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.56 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.00 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.46 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.38 (  0.49)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 30/  1]	epoch_time 0.0507 (0.0450)	validation_time 0.0003 (0.0006)	train_time 0.0504 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5206000107824802, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 15%|#5        | 4/26 [00:00<00:01, 17.77it/s] 27%|##6       | 7/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 25.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.40it/s] 88%|########8 | 23/26 [00:00<00:00, 29.20it/s]100%|##########| 26/26 [00:01<00:00, 25.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.54 (  0.51)	train_minacc   0.38 (  0.49)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8445 (7.8447)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.62it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.62it/s] 42%|####2     | 11/26 [00:00<00:00, 35.25it/s] 62%|######1   | 16/26 [00:00<00:00, 39.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.75it/s] 81%|########  | 21/26 [00:00<00:00, 39.71it/s]100%|##########| 26/26 [00:00<00:00, 33.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.54 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.00 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.52 (  0.49)	test_majacc   0.46 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.38 (  0.49)	test_majacc   0.57 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.57 (  0.52)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 31/  1]	epoch_time 0.0430 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0443)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5155000112950802, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.37it/s] 15%|#5        | 4/26 [00:00<00:01, 16.04it/s] 27%|##6       | 7/26 [00:00<00:00, 21.15it/s] 38%|###8      | 10/26 [00:00<00:00, 24.22it/s] 50%|#####     | 13/26 [00:00<00:00, 25.21it/s] 65%|######5   | 17/26 [00:00<00:00, 26.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.97it/s] 88%|########8 | 23/26 [00:00<00:00, 27.61it/s]100%|##########| 26/26 [00:01<00:00, 23.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.53 (  0.50)	train_minacc   0.40 (  0.50)	train_majacc   0.56 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8442 (7.8444)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 23%|##3       | 6/26 [00:00<00:00, 23.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.58it/s] 42%|####2     | 11/26 [00:00<00:00, 32.28it/s] 62%|######1   | 16/26 [00:00<00:00, 37.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.71it/s] 81%|########  | 21/26 [00:00<00:00, 37.11it/s]100%|##########| 26/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 31.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.60)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.52 (  0.50)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.38 (  0.50)	test_majacc   0.56 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.38 (  0.50)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.57it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 32/  1]	epoch_time 0.0447 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0443)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5112000097632408, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 19%|#9        | 5/26 [00:00<00:01, 19.87it/s] 35%|###4      | 9/26 [00:00<00:00, 24.55it/s] 46%|####6     | 12/26 [00:00<00:00, 26.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.53it/s] 88%|########8 | 23/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:01<00:00, 25.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.49)	train_minacc   0.38 (  0.51)	train_majacc   0.55 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8441 (7.8442)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 23%|##3       | 6/26 [00:00<00:00, 22.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.09it/s] 42%|####2     | 11/26 [00:00<00:00, 28.57it/s] 62%|######1   | 16/26 [00:00<00:00, 34.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.81it/s] 81%|########  | 21/26 [00:00<00:00, 38.05it/s]100%|##########| 26/26 [00:00<00:00, 41.36it/s]100%|##########| 26/26 [00:00<00:00, 30.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.54 (  0.50)	test_majacc   0.46 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.38 (  0.51)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 33/  1]	epoch_time 0.0434 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0443)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5098000157773495, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.31it/s] 15%|#5        | 4/26 [00:00<00:01, 11.68it/s] 27%|##6       | 7/26 [00:00<00:01, 16.99it/s] 38%|###8      | 10/26 [00:00<00:00, 20.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.25it/s] 65%|######5   | 17/26 [00:00<00:00, 25.64it/s] 81%|########  | 21/26 [00:00<00:00, 27.65it/s] 96%|#########6| 25/26 [00:01<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 21.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.54 (  0.49)	train_minacc   0.40 (  0.52)	train_majacc   0.56 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8439 (7.8441)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 23%|##3       | 6/26 [00:00<00:00, 26.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.88it/s] 42%|####2     | 11/26 [00:00<00:00, 34.57it/s] 65%|######5   | 17/26 [00:00<00:00, 37.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.88it/s] 85%|########4 | 22/26 [00:00<00:00, 41.31it/s]100%|##########| 26/26 [00:00<00:00, 33.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.45 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.45 (  0.51)	test_corr_d  -0.06 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.40 (  0.52)	test_majacc   0.56 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 34/  1]	epoch_time 0.0472 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0468 (0.0443)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5087000173032283, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:01, 20.38it/s] 35%|###4      | 9/26 [00:00<00:00, 24.79it/s] 46%|####6     | 12/26 [00:00<00:00, 26.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.89it/s] 69%|######9   | 18/26 [00:00<00:00, 27.21it/s] 81%|########  | 21/26 [00:00<00:00, 27.89it/s] 96%|#########6| 25/26 [00:00<00:00, 28.67it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.49)	train_minacc   0.40 (  0.53)	train_majacc   0.55 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8437 (7.8439)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.35it/s] 23%|##3       | 6/26 [00:00<00:01, 14.05it/s]                                               23%|##3       | 6/26 [00:00<00:01, 14.05it/s] 42%|####2     | 11/26 [00:00<00:00, 22.83it/s] 62%|######1   | 16/26 [00:00<00:00, 29.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.69it/s] 81%|########  | 21/26 [00:00<00:00, 31.57it/s]100%|##########| 26/26 [00:00<00:00, 36.27it/s]100%|##########| 26/26 [00:01<00:00, 24.70it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.06 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.06 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.56it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 35/  1]	epoch_time 0.0476 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0472 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5082000112235546, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 19%|#9        | 5/26 [00:00<00:01, 17.59it/s] 31%|###       | 8/26 [00:00<00:00, 20.78it/s] 46%|####6     | 12/26 [00:00<00:00, 24.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.81it/s] 69%|######9   | 18/26 [00:00<00:00, 26.23it/s] 85%|########4 | 22/26 [00:00<00:00, 27.90it/s]100%|##########| 26/26 [00:01<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 23.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.53 (  0.49)	train_minacc   0.40 (  0.53)	train_majacc   0.55 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8435 (7.8437)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 23%|##3       | 6/26 [00:00<00:00, 29.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.12it/s] 42%|####2     | 11/26 [00:00<00:00, 33.94it/s] 62%|######1   | 16/26 [00:00<00:00, 38.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.83it/s] 81%|########  | 21/26 [00:00<00:00, 41.37it/s]100%|##########| 26/26 [00:00<00:00, 43.29it/s]100%|##########| 26/26 [00:00<00:00, 34.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.55 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.55 (  0.50)	test_corr_d   0.06 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 36/  1]	epoch_time 0.0473 (0.0451)	validation_time 0.0005 (0.0006)	train_time 0.0467 (0.0445)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.507700011253357, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 19%|#9        | 5/26 [00:00<00:00, 23.78it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 28.34it/s] 62%|######1   | 16/26 [00:00<00:00, 28.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.54it/s] 88%|########8 | 23/26 [00:00<00:00, 29.55it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.49)	train_minacc   0.40 (  0.53)	train_majacc   0.54 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8433 (7.8436)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.07it/s] 23%|##3       | 6/26 [00:00<00:00, 23.48it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.48it/s] 42%|####2     | 11/26 [00:00<00:00, 31.60it/s] 62%|######1   | 16/26 [00:00<00:00, 36.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.45it/s] 81%|########  | 21/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 31.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.47 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.00 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.40it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 37/  1]	epoch_time 0.0447 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0445)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5078000122010707, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.77it/s] 19%|#9        | 5/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:00, 20.37it/s] 50%|#####     | 13/26 [00:00<00:00, 23.65it/s] 65%|######5   | 17/26 [00:00<00:00, 25.73it/s] 81%|########  | 21/26 [00:00<00:00, 26.83it/s] 92%|#########2| 24/26 [00:01<00:00, 27.50it/s]100%|##########| 26/26 [00:01<00:00, 22.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.49)	train_minacc   0.43 (  0.54)	train_majacc   0.54 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8432 (7.8434)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.59it/s] 15%|#5        | 4/26 [00:00<00:01, 16.51it/s] 35%|###4      | 9/26 [00:00<00:00, 28.35it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.07it/s] 92%|#########2| 24/26 [00:00<00:00, 42.26it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.00 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.59 (  0.52)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 38/  1]	epoch_time 0.0479 (0.0452)	validation_time 0.0004 (0.0005)	train_time 0.0475 (0.0445)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5072000157237053, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 15%|#5        | 4/26 [00:00<00:01, 18.15it/s] 27%|##6       | 7/26 [00:00<00:00, 22.89it/s] 42%|####2     | 11/26 [00:00<00:00, 26.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.77it/s] 69%|######9   | 18/26 [00:00<00:00, 29.08it/s] 85%|########4 | 22/26 [00:00<00:00, 30.21it/s]100%|##########| 26/26 [00:00<00:00, 31.17it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.49)	train_minacc   0.43 (  0.54)	train_majacc   0.54 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8430 (7.8433)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 26.64it/s] 35%|###4      | 9/26 [00:00<00:00, 35.72it/s]                                               35%|###4      | 9/26 [00:00<00:00, 35.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.47it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.14it/s] 92%|#########2| 24/26 [00:00<00:00, 39.12it/s]100%|##########| 26/26 [00:00<00:00, 35.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 39/  1]	epoch_time 0.0481 (0.0452)	validation_time 0.0003 (0.0005)	train_time 0.0477 (0.0446)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.507200011074543, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 15%|#5        | 4/26 [00:00<00:01, 20.51it/s] 27%|##6       | 7/26 [00:00<00:00, 24.58it/s] 42%|####2     | 11/26 [00:00<00:00, 27.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.59it/s] 69%|######9   | 18/26 [00:00<00:00, 28.64it/s] 81%|########  | 21/26 [00:00<00:00, 28.85it/s] 92%|#########2| 24/26 [00:00<00:00, 28.96it/s]100%|##########| 26/26 [00:01<00:00, 25.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.52 (  0.48)	train_minacc   0.43 (  0.54)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8429 (7.8431)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 27%|##6       | 7/26 [00:00<00:00, 31.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.77it/s] 46%|####6     | 12/26 [00:00<00:00, 37.42it/s] 65%|######5   | 17/26 [00:00<00:00, 39.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 35.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 40/  1]	epoch_time 0.0415 (0.0451)	validation_time 0.0004 (0.0005)	train_time 0.0411 (0.0445)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5075000141263009, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 15%|#5        | 4/26 [00:00<00:01, 16.43it/s] 27%|##6       | 7/26 [00:00<00:00, 21.62it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.59it/s] 69%|######9   | 18/26 [00:00<00:00, 27.83it/s] 81%|########  | 21/26 [00:00<00:00, 28.29it/s] 96%|#########6| 25/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 24.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.43 (  0.53)	train_majacc   0.53 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8427 (7.8430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.14it/s] 31%|###       | 8/26 [00:00<00:00, 32.68it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.68it/s] 50%|#####     | 13/26 [00:00<00:00, 37.48it/s] 69%|######9   | 18/26 [00:00<00:00, 40.99it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.99it/s] 88%|########8 | 23/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 36.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.52)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 41/  1]	epoch_time 0.0516 (0.0453)	validation_time 0.0004 (0.0005)	train_time 0.0512 (0.0447)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.509000017940998, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 15%|#5        | 4/26 [00:00<00:01, 20.21it/s] 27%|##6       | 7/26 [00:00<00:00, 24.27it/s] 42%|####2     | 11/26 [00:00<00:00, 27.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.02it/s] 65%|######5   | 17/26 [00:00<00:00, 28.29it/s] 81%|########  | 21/26 [00:00<00:00, 29.10it/s] 96%|#########6| 25/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.43 (  0.53)	train_majacc   0.53 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8426 (7.8428)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.61it/s] 31%|###       | 8/26 [00:00<00:00, 36.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.58it/s] 50%|#####     | 13/26 [00:00<00:00, 40.67it/s] 69%|######9   | 18/26 [00:00<00:00, 43.13it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.13it/s] 88%|########8 | 23/26 [00:00<00:00, 40.65it/s]100%|##########| 26/26 [00:00<00:00, 37.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 42/  1]	epoch_time 0.0468 (0.0453)	validation_time 0.0004 (0.0005)	train_time 0.0464 (0.0447)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5072000133991241, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.57it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 25.58it/s] 50%|#####     | 13/26 [00:00<00:00, 28.08it/s] 65%|######5   | 17/26 [00:00<00:00, 28.60it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.85it/s] 92%|#########2| 24/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:01<00:00, 25.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.53)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8424 (7.8427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.36it/s] 23%|##3       | 6/26 [00:00<00:00, 29.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.19it/s] 42%|####2     | 11/26 [00:00<00:00, 36.99it/s] 65%|######5   | 17/26 [00:00<00:00, 39.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.02it/s] 85%|########4 | 22/26 [00:00<00:00, 41.85it/s]100%|##########| 26/26 [00:00<00:00, 35.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.57 (  0.53)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 43/  1]	epoch_time 0.0425 (0.0453)	validation_time 0.0004 (0.0005)	train_time 0.0421 (0.0447)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5088000119328498, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.52it/s] 23%|##3       | 6/26 [00:00<00:00, 20.63it/s] 38%|###8      | 10/26 [00:00<00:00, 24.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.24it/s] 69%|######9   | 18/26 [00:00<00:00, 28.85it/s] 85%|########4 | 22/26 [00:00<00:00, 30.52it/s]100%|##########| 26/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:01<00:00, 25.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.53)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8423 (7.8425)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 19%|#9        | 5/26 [00:00<00:01, 20.65it/s] 38%|###8      | 10/26 [00:00<00:00, 31.14it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.61it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.61it/s] 96%|#########6| 25/26 [00:00<00:00, 40.47it/s]100%|##########| 26/26 [00:00<00:00, 32.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.57 (  0.53)	test_majacc   0.46 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.54)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.54)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 44/  1]	epoch_time 0.0437 (0.0452)	validation_time 0.0003 (0.0005)	train_time 0.0434 (0.0446)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5075000089406967, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.19it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 31%|###       | 8/26 [00:00<00:00, 25.69it/s] 42%|####2     | 11/26 [00:00<00:00, 26.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.65it/s] 65%|######5   | 17/26 [00:00<00:00, 28.28it/s] 81%|########  | 21/26 [00:00<00:00, 29.85it/s] 96%|#########6| 25/26 [00:00<00:00, 31.13it/s]100%|##########| 26/26 [00:00<00:00, 27.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.54)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8421 (7.8424)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.72it/s] 19%|#9        | 5/26 [00:00<00:00, 26.49it/s] 38%|###8      | 10/26 [00:00<00:00, 36.04it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.07it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.07it/s] 96%|#########6| 25/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 35.34it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.59 (  0.53)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.40 (  0.54)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.40 (  0.54)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 45/  1]	epoch_time 0.0416 (0.0452)	validation_time 0.0004 (0.0005)	train_time 0.0412 (0.0446)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5079000133574009, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 15%|#5        | 4/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 22.20it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.45it/s] 88%|########8 | 23/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 24.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.53)	train_majacc   0.54 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8420 (7.8423)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 23%|##3       | 6/26 [00:00<00:00, 21.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.46it/s] 42%|####2     | 11/26 [00:00<00:00, 30.37it/s] 62%|######1   | 16/26 [00:00<00:00, 35.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.83it/s] 81%|########  | 21/26 [00:00<00:00, 35.94it/s]100%|##########| 26/26 [00:00<00:00, 39.19it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.61 (  0.54)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.43 (  0.54)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.43 (  0.54)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 46/  1]	epoch_time 0.0424 (0.0451)	validation_time 0.0004 (0.0005)	train_time 0.0420 (0.0445)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5079000135660171, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.63it/s] 27%|##6       | 7/26 [00:00<00:00, 27.16it/s] 42%|####2     | 11/26 [00:00<00:00, 28.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.60it/s] 88%|########8 | 23/26 [00:00<00:00, 29.99it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.54)	train_majacc   0.55 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8418 (7.8421)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 23%|##3       | 6/26 [00:00<00:00, 24.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.52it/s] 42%|####2     | 11/26 [00:00<00:00, 32.01it/s] 65%|######5   | 17/26 [00:00<00:00, 36.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.01it/s] 85%|########4 | 22/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.54)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.61 (  0.54)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.45 (  0.54)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.45 (  0.54)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 47/  1]	epoch_time 0.0402 (0.0450)	validation_time 0.0005 (0.0005)	train_time 0.0396 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5075000157952309, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.15it/s] 23%|##3       | 6/26 [00:00<00:00, 21.14it/s] 38%|###8      | 10/26 [00:00<00:00, 25.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.49it/s] 69%|######9   | 18/26 [00:00<00:00, 28.59it/s] 81%|########  | 21/26 [00:00<00:00, 28.83it/s] 96%|#########6| 25/26 [00:00<00:00, 29.25it/s]100%|##########| 26/26 [00:01<00:00, 25.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.52 (  0.48)	train_minacc   0.40 (  0.54)	train_majacc   0.55 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8417 (7.8420)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 15%|#5        | 4/26 [00:00<00:01, 12.58it/s] 35%|###4      | 9/26 [00:00<00:00, 24.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.70it/s] 96%|#########6| 25/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 30.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.58 (  0.54)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.59 (  0.54)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.45 (  0.54)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.45 (  0.54)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.85it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 48/  1]	epoch_time 0.0426 (0.0449)	validation_time 0.0004 (0.0005)	train_time 0.0422 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.5077000159025192, 0.5560000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.24it/s] 19%|#9        | 5/26 [00:00<00:00, 23.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 29.63it/s] 81%|########  | 21/26 [00:00<00:00, 29.80it/s] 92%|#########2| 24/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:00<00:00, 26.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.53 (  0.48)	train_minacc   0.43 (  0.54)	train_majacc   0.55 (  0.47)	train_corr   0.00 (  0.00)	l1 7.8416 (7.8419)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 23%|##3       | 6/26 [00:00<00:00, 32.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.81it/s] 42%|####2     | 11/26 [00:00<00:00, 38.97it/s] 62%|######1   | 16/26 [00:00<00:00, 42.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.61it/s] 81%|########  | 21/26 [00:00<00:00, 39.54it/s]100%|##########| 26/26 [00:00<00:00, 42.54it/s]100%|##########| 26/26 [00:00<00:00, 36.36it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.58 (  0.54)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.59 (  0.54)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.45 (  0.50)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.45 (  0.55)	test_majacc   0.53 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.45 (  0.55)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 49/  1]	epoch_time 0.0478 (0.0450)	validation_time 0.0004 (0.0005)	train_time 0.0474 (0.0444)
record: (train_acc, test_acc) (0.6616000214219093, 0.6610000133514404)
last accs (train_acc, test_acc) (0.506500014603138, 0.5550000071525574)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.157 MB of 0.157 MB uploadedwandb: \ 0.157 MB of 0.157 MB uploadedwandb: | 0.157 MB of 0.157 MB uploadedwandb: / 0.157 MB of 0.157 MB uploadedwandb: - 0.157 MB of 0.157 MB uploadedwandb: \ 0.157 MB of 0.157 MB uploadedwandb: | 0.157 MB of 0.157 MB uploadedwandb: / 0.157 MB of 0.157 MB uploadedwandb: - 0.157 MB of 0.157 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmptmuq35v3'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_214855-ii3fjgt7
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/ii3fjgt7
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1141
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5979, 3, 32, 32) (6021, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.74s/it] 19%|#9        | 5/26 [00:01<00:05,  3.53it/s] 35%|###4      | 9/26 [00:01<00:02,  6.88it/s] 50%|#####     | 13/26 [00:02<00:01, 10.53it/s] 65%|######5   | 17/26 [00:02<00:00, 14.23it/s] 81%|########  | 21/26 [00:02<00:00, 18.06it/s] 96%|#########6| 25/26 [00:02<00:00, 21.07it/s]100%|##########| 26/26 [00:02<00:00,  9.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.262 (12.104)	train_nll   0.46 (  0.50)	train_penalty   0.10 (  0.17)	weight_norm   8.80 ( 11.61)	train_acc   0.84 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.1978 (8.1442)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 23%|##3       | 6/26 [00:00<00:00, 23.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.03it/s] 42%|####2     | 11/26 [00:00<00:00, 31.76it/s] 62%|######1   | 16/26 [00:00<00:00, 37.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.28it/s] 81%|########  | 21/26 [00:00<00:00, 36.81it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]100%|##########| 26/26 [00:00<00:00, 31.24it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.88 (  0.88)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.379)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.430 (0.434)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.430 (0.434)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  20/  26]	Loss 0.458 (0.426)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.458 (0.426)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.462 (0.426)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.462 (0.426)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.690 (1.690)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.690 (1.690)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.690 (1.690)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.690 (1.690)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/190/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0818 (0.0818)	validation_time 0.0068 (0.0068)	train_time 0.0729 (0.0729)
record: (train_acc, test_acc) (0.8478000268936158, 0.10100000351667404)
last accs (train_acc, test_acc) (0.8478000268936158, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 15%|#5        | 4/26 [00:00<00:01, 20.40it/s] 27%|##6       | 7/26 [00:00<00:00, 24.55it/s] 42%|####2     | 11/26 [00:00<00:00, 27.08it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.73it/s] 69%|######9   | 18/26 [00:00<00:00, 29.27it/s] 85%|########4 | 22/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:00<00:00, 30.33it/s]100%|##########| 26/26 [00:00<00:00, 26.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.569 (6.480)	train_nll   0.39 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   4.18 (  6.08)	train_acc   0.82 (  0.85)	train_minacc   0.15 (  0.06)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 6.4901 (6.8271)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.58it/s] 27%|##6       | 7/26 [00:00<00:01, 17.52it/s]                                               27%|##6       | 7/26 [00:00<00:01, 17.52it/s] 46%|####6     | 12/26 [00:00<00:00, 25.93it/s] 65%|######5   | 17/26 [00:00<00:00, 29.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 29.73it/s] 85%|########4 | 22/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 26.17it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.94 (  0.94)	Loss_d 0.383 (0.383)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.399 (0.415)	test_acc   0.83 (  0.83)	test_minacc   0.13 (  0.18)	test_majacc   0.95 (  0.95)	Loss_d 0.399 (0.415)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.403 (0.404)	test_acc   0.82 (  0.84)	test_minacc   0.18 (  0.18)	test_majacc   0.95 (  0.95)	Loss_d 0.403 (0.404)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.343 (0.397)	test_acc   0.84 (  0.84)	test_minacc   0.23 (  0.19)	test_majacc   0.96 (  0.95)	Loss_d 0.343 (0.397)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.23 (  0.19)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.699 (1.699)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.699 (1.699)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.699 (1.699)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.699 (1.699)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/190/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0443 (0.0631)	validation_time 0.0003 (0.0036)	train_time 0.0439 (0.0584)
record: (train_acc, test_acc) (0.8388000241518021, 0.25200000405311584)
last accs (train_acc, test_acc) (0.8388000241518021, 0.25200000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 31%|###       | 8/26 [00:00<00:00, 25.49it/s] 42%|####2     | 11/26 [00:00<00:00, 26.41it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.55it/s] 65%|######5   | 17/26 [00:00<00:00, 28.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.67it/s] 88%|########8 | 23/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.790 (3.552)	train_nll   0.41 (  0.41)	train_penalty   0.07 (  0.06)	weight_norm   2.38 (  3.15)	train_acc   0.83 (  0.84)	train_minacc   0.08 (  0.06)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3442 (5.6316)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s] 23%|##3       | 6/26 [00:00<00:00, 22.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.31it/s] 42%|####2     | 11/26 [00:00<00:00, 30.89it/s] 62%|######1   | 16/26 [00:00<00:00, 36.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.58it/s] 81%|########  | 21/26 [00:00<00:00, 39.83it/s]100%|##########| 26/26 [00:00<00:00, 42.89it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
Test: [   0/  26]	Loss 0.350 (0.350)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 0.350 (0.350)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.406 (0.402)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.08)	test_majacc   0.98 (  0.97)	Loss_d 0.406 (0.402)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.08)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.396 (0.387)	test_acc   0.83 (  0.84)	test_minacc   0.14 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.396 (0.387)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.14 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.386 (0.384)	test_acc   0.83 (  0.84)	test_minacc   0.10 (  0.10)	test_majacc   0.97 (  0.97)	Loss_d 0.386 (0.384)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.28it/s]
Test: [  0/  1]	Loss 1.877 (1.877)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.96 (  0.96)	Loss_d 1.877 (1.877)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.877 (1.877)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.96 (  0.96)	Loss_d 1.877 (1.877)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Overall Timing[  2/  1]	epoch_time 0.0409 (0.0557)	validation_time 0.0004 (0.0025)	train_time 0.0405 (0.0524)
record: (train_acc, test_acc) (0.8388000241518021, 0.25200000405311584)
last accs (train_acc, test_acc) (0.8412000189423561, 0.17100000381469727)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 15%|#5        | 4/26 [00:00<00:01, 19.00it/s] 27%|##6       | 7/26 [00:00<00:00, 23.16it/s] 38%|###8      | 10/26 [00:00<00:00, 25.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.78it/s] 65%|######5   | 17/26 [00:00<00:00, 28.24it/s] 81%|########  | 21/26 [00:00<00:00, 28.92it/s] 92%|#########2| 24/26 [00:00<00:00, 28.96it/s]100%|##########| 26/26 [00:01<00:00, 25.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.923 (2.241)	train_nll   0.44 (  0.36)	train_penalty   0.05 (  0.03)	weight_norm   1.48 (  1.88)	train_acc   0.82 (  0.85)	train_minacc   0.20 (  0.14)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 5.0354 (5.0681)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 23.38it/s] 38%|###8      | 10/26 [00:00<00:00, 33.82it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.82it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.07it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.07it/s] 96%|#########6| 25/26 [00:00<00:00, 41.40it/s]100%|##########| 26/26 [00:00<00:00, 34.06it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 0.343 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.372 (0.383)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.07)	test_majacc   0.99 (  0.98)	Loss_d 0.372 (0.383)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.07)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.396 (0.375)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 0.396 (0.375)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.393 (0.372)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.07)	test_majacc   0.99 (  0.98)	Loss_d 0.393 (0.372)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.07)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.97it/s]
Test: [  0/  1]	Loss 1.768 (1.768)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.768 (1.768)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.768 (1.768)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.768 (1.768)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Overall Timing[  3/  1]	epoch_time 0.0461 (0.0533)	validation_time 0.0007 (0.0021)	train_time 0.0454 (0.0507)
record: (train_acc, test_acc) (0.8388000241518021, 0.25200000405311584)
last accs (train_acc, test_acc) (0.8476000189781189, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.25it/s] 23%|##3       | 6/26 [00:00<00:00, 23.83it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.99it/s] 62%|######1   | 16/26 [00:00<00:00, 28.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.84it/s] 88%|########8 | 23/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.336 (1.544)	train_nll   0.38 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.96 (  1.20)	train_acc   0.83 (  0.85)	train_minacc   0.15 (  0.19)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 5.7372 (5.2903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 15%|#5        | 4/26 [00:00<00:01, 19.04it/s] 35%|###4      | 9/26 [00:00<00:00, 31.07it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.71it/s] 92%|#########2| 24/26 [00:00<00:00, 39.34it/s]100%|##########| 26/26 [00:00<00:00, 33.50it/s]
Test: [   0/  26]	Loss 0.308 (0.308)	test_acc   0.87 (  0.87)	test_minacc   0.18 (  0.18)	test_majacc   0.97 (  0.97)	Loss_d 0.308 (0.308)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.342 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.18 (  0.21)	test_majacc   0.98 (  0.97)	Loss_d 0.342 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.18 (  0.21)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.350 (0.339)	test_acc   0.85 (  0.86)	test_minacc   0.29 (  0.23)	test_majacc   0.96 (  0.97)	Loss_d 0.350 (0.339)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.29 (  0.23)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.359 (0.337)	test_acc   0.84 (  0.86)	test_minacc   0.17 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.359 (0.337)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.17 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 1.405 (1.405)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.405 (1.405)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.405 (1.405)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 1.405 (1.405)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/190/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0413 (0.0509)	validation_time 0.0003 (0.0017)	train_time 0.0409 (0.0487)
record: (train_acc, test_acc) (0.8585000264644623, 0.30100002884864807)
last accs (train_acc, test_acc) (0.8585000264644623, 0.30100002884864807)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.38it/s] 35%|###4      | 9/26 [00:00<00:00, 27.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.65it/s] 65%|######5   | 17/26 [00:00<00:00, 30.59it/s] 81%|########  | 21/26 [00:00<00:00, 30.64it/s] 96%|#########6| 25/26 [00:00<00:00, 30.74it/s]100%|##########| 26/26 [00:00<00:00, 27.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.972 (1.113)	train_nll   0.35 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.62 (  0.77)	train_acc   0.86 (  0.85)	train_minacc   0.40 (  0.21)	train_majacc   0.94 (  0.97)	train_corr   0.00 (  0.00)	l1 6.6547 (6.2738)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 19%|#9        | 5/26 [00:00<00:00, 23.81it/s] 38%|###8      | 10/26 [00:00<00:00, 32.63it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.42it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.42it/s] 96%|#########6| 25/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 33.95it/s]
Test: [   0/  26]	Loss 0.336 (0.336)	test_acc   0.84 (  0.84)	test_minacc   0.49 (  0.49)	test_majacc   0.89 (  0.89)	Loss_d 0.336 (0.336)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.340 (0.361)	test_acc   0.86 (  0.84)	test_minacc   0.45 (  0.47)	test_majacc   0.93 (  0.91)	Loss_d 0.340 (0.361)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.93 (  0.91)	test_corr_d   0.80 (  0.78)
Test: [  20/  26]	Loss 0.354 (0.355)	test_acc   0.85 (  0.85)	test_minacc   0.51 (  0.47)	test_majacc   0.92 (  0.91)	Loss_d 0.354 (0.355)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.92 (  0.91)	test_corr_d   0.77 (  0.79)
Test: [  26/  26]	Loss 0.326 (0.351)	test_acc   0.86 (  0.85)	test_minacc   0.55 (  0.48)	test_majacc   0.92 (  0.92)	Loss_d 0.326 (0.351)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.78 (  0.79)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 1.267 (1.267)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.86 (  0.86)	Loss_d 1.267 (1.267)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 1.267 (1.267)	test_acc   0.46 (  0.46)	test_minacc   0.41 (  0.41)	test_majacc   0.86 (  0.86)	Loss_d 1.267 (1.267)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.29 (  0.29)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/190/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0441 (0.0498)	validation_time 0.0004 (0.0015)	train_time 0.0437 (0.0479)
record: (train_acc, test_acc) (0.8500000255703926, 0.45900002121925354)
last accs (train_acc, test_acc) (0.8500000255703926, 0.45900002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 15%|#5        | 4/26 [00:00<00:01, 14.89it/s] 27%|##6       | 7/26 [00:00<00:00, 19.97it/s] 38%|###8      | 10/26 [00:00<00:00, 23.19it/s] 50%|#####     | 13/26 [00:00<00:00, 24.19it/s] 65%|######5   | 17/26 [00:00<00:00, 26.34it/s] 81%|########  | 21/26 [00:00<00:00, 27.72it/s] 96%|#########6| 25/26 [00:01<00:00, 28.82it/s]100%|##########| 26/26 [00:01<00:00, 23.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.773 (0.848)	train_nll   0.36 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.41 (  0.51)	train_acc   0.84 (  0.85)	train_minacc   0.47 (  0.25)	train_majacc   0.91 (  0.96)	train_corr   0.00 (  0.00)	l1 8.2158 (7.3277)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 27%|##6       | 7/26 [00:00<00:00, 25.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.56it/s] 46%|####6     | 12/26 [00:00<00:00, 33.50it/s] 65%|######5   | 17/26 [00:00<00:00, 36.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.14it/s] 85%|########4 | 22/26 [00:00<00:00, 37.80it/s]100%|##########| 26/26 [00:00<00:00, 32.12it/s]
Test: [   0/  26]	Loss 0.292 (0.292)	test_acc   0.88 (  0.88)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.292 (0.292)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.319 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.319 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.320 (0.321)	test_acc   0.85 (  0.86)	test_minacc   0.18 (  0.15)	test_majacc   0.98 (  0.99)	Loss_d 0.320 (0.321)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.18 (  0.15)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.317 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.17 (  0.15)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.17 (  0.15)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 1.760 (1.760)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.94 (  0.94)	Loss_d 1.760 (1.760)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.74)
Test: [  1/  1]	Loss 1.760 (1.760)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.94 (  0.94)	Loss_d 1.760 (1.760)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.74 (  0.74)
Overall Timing[  6/  1]	epoch_time 0.0435 (0.0489)	validation_time 0.0004 (0.0013)	train_time 0.0431 (0.0472)
record: (train_acc, test_acc) (0.8500000255703926, 0.45900002121925354)
last accs (train_acc, test_acc) (0.860600026011467, 0.24500000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.45it/s] 15%|#5        | 4/26 [00:00<00:01, 12.10it/s] 27%|##6       | 7/26 [00:00<00:01, 17.46it/s] 42%|####2     | 11/26 [00:00<00:00, 22.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.42it/s] 65%|######5   | 17/26 [00:00<00:00, 25.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.83it/s] 92%|#########2| 24/26 [00:01<00:00, 28.49it/s]100%|##########| 26/26 [00:01<00:00, 21.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.000 (0.486)	train_nll   0.53 (  0.35)	train_penalty   0.00 (  0.02)	weight_norm   0.32 (  0.35)	train_acc   0.71 (  0.84)	train_minacc   0.70 (  0.35)	train_majacc   0.71 (  0.93)	train_corr   0.00 (  0.00)	l1 9.7407 (9.2196)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.25it/s] 27%|##6       | 7/26 [00:00<00:00, 36.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.21it/s] 46%|####6     | 12/26 [00:00<00:00, 40.31it/s] 65%|######5   | 17/26 [00:00<00:00, 39.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.25it/s] 85%|########4 | 22/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 36.65it/s]
Test: [   0/  26]	Loss 0.566 (0.566)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 0.566 (0.566)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.592 (0.616)	test_acc   0.71 (  0.67)	test_minacc   0.75 (  0.69)	test_majacc   0.71 (  0.67)	Loss_d 0.592 (0.616)	test_acc_d   0.71 (  0.67)	test_minacc_d   0.75 (  0.69)	test_majacc_d   0.71 (  0.67)	test_corr_d   0.35 (  0.33)
Test: [  20/  26]	Loss 0.603 (0.598)	test_acc   0.67 (  0.68)	test_minacc   0.68 (  0.69)	test_majacc   0.67 (  0.68)	Loss_d 0.603 (0.598)	test_acc_d   0.67 (  0.68)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.67 (  0.68)	test_corr_d   0.32 (  0.36)
Test: [  26/  26]	Loss 0.579 (0.594)	test_acc   0.66 (  0.68)	test_minacc   0.62 (  0.70)	test_majacc   0.66 (  0.68)	Loss_d 0.579 (0.594)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.66 (  0.68)	test_corr_d   0.35 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.63 (  0.63)	Loss_d 0.718 (0.718)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.63 (  0.63)	Loss_d 0.718 (0.718)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.22 ( -0.22)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/190/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0451 (0.0484)	validation_time 0.0004 (0.0012)	train_time 0.0447 (0.0469)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 15%|#5        | 4/26 [00:00<00:01, 16.58it/s] 27%|##6       | 7/26 [00:00<00:00, 21.49it/s] 38%|###8      | 10/26 [00:00<00:00, 22.59it/s] 50%|#####     | 13/26 [00:00<00:00, 24.26it/s] 65%|######5   | 17/26 [00:00<00:00, 26.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.74it/s] 92%|#########2| 24/26 [00:00<00:00, 28.12it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.38)	train_acc   0.51 (  0.55)	train_minacc   0.57 (  0.55)	train_majacc   0.50 (  0.55)	train_corr   0.00 (  0.00)	l1 8.9251 (9.1753)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 15%|#5        | 4/26 [00:00<00:01, 17.88it/s] 35%|###4      | 9/26 [00:00<00:00, 29.79it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.16it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.34it/s] 92%|#########2| 24/26 [00:00<00:00, 39.81it/s]100%|##########| 26/26 [00:00<00:00, 31.98it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.687 (0.682)	test_acc   0.47 (  0.49)	test_minacc   0.52 (  0.50)	test_majacc   0.47 (  0.49)	Loss_d 0.687 (0.682)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.25 (  0.20)
Test: [  20/  26]	Loss 0.682 (0.681)	test_acc   0.53 (  0.50)	test_minacc   0.51 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.682 (0.681)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.17 (  0.20)
Test: [  26/  26]	Loss 0.674 (0.681)	test_acc   0.51 (  0.50)	test_minacc   0.57 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.674 (0.681)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.18 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.65it/s]
Test: [  0/  1]	Loss 0.719 (0.719)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.719 (0.719)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.719 (0.719)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.48)	Loss_d 0.719 (0.719)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.11 (  0.11)
Overall Timing[  8/  1]	epoch_time 0.0429 (0.0478)	validation_time 0.0004 (0.0011)	train_time 0.0424 (0.0464)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4987000065147877, 0.4880000352859497)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 15%|#5        | 4/26 [00:00<00:01, 18.58it/s] 27%|##6       | 7/26 [00:00<00:00, 22.85it/s] 38%|###8      | 10/26 [00:00<00:00, 25.40it/s] 50%|#####     | 13/26 [00:00<00:00, 26.35it/s] 65%|######5   | 17/26 [00:00<00:00, 27.43it/s] 81%|########  | 21/26 [00:00<00:00, 28.42it/s] 96%|#########6| 25/26 [00:00<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 25.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.43)	train_acc   0.53 (  0.52)	train_minacc   0.45 (  0.46)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 8.8139 (8.8565)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.37it/s] 27%|##6       | 7/26 [00:00<00:00, 34.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.99it/s] 46%|####6     | 12/26 [00:00<00:00, 40.50it/s] 65%|######5   | 17/26 [00:00<00:00, 38.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.37it/s] 85%|########4 | 22/26 [00:00<00:00, 41.26it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.692 (0.689)	test_acc   0.50 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.689)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.20 (  0.16)
Test: [  20/  26]	Loss 0.687 (0.688)	test_acc   0.53 (  0.52)	test_minacc   0.42 (  0.47)	test_majacc   0.56 (  0.53)	Loss_d 0.687 (0.688)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.16 (  0.16)
Test: [  26/  26]	Loss 0.685 (0.688)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.47)	test_majacc   0.55 (  0.53)	Loss_d 0.685 (0.688)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.17 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.58it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.701 (0.701)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.701 (0.701)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.10)
Overall Timing[  9/  1]	epoch_time 0.0448 (0.0475)	validation_time 0.0003 (0.0011)	train_time 0.0444 (0.0462)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.5193000176250935, 0.4750000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.95it/s] 23%|##3       | 6/26 [00:00<00:00, 24.58it/s] 35%|###4      | 9/26 [00:00<00:00, 26.67it/s] 46%|####6     | 12/26 [00:00<00:00, 27.82it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.80it/s] 88%|########8 | 23/26 [00:00<00:00, 29.20it/s]100%|##########| 26/26 [00:00<00:00, 26.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.53 (  0.51)	train_minacc   0.50 (  0.48)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 8.7820 (8.7969)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.02it/s] 27%|##6       | 7/26 [00:00<00:00, 28.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.78it/s] 46%|####6     | 12/26 [00:00<00:00, 36.72it/s] 65%|######5   | 17/26 [00:00<00:00, 40.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.06it/s] 85%|########4 | 22/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 35.29it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.50 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.13 (  0.09)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.43 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.09 (  0.09)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.53 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.53 (  0.51)	Loss_d 0.688 (0.690)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.11 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.64it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.696 (0.696)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Overall Timing[ 10/  1]	epoch_time 0.0424 (0.0470)	validation_time 0.0004 (0.0010)	train_time 0.0420 (0.0458)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.5053000112771988, 0.4870000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 15%|#5        | 4/26 [00:00<00:01, 18.88it/s] 27%|##6       | 7/26 [00:00<00:00, 23.37it/s] 38%|###8      | 10/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 26.42it/s] 65%|######5   | 17/26 [00:00<00:00, 28.09it/s] 81%|########  | 21/26 [00:00<00:00, 29.37it/s] 96%|#########6| 25/26 [00:00<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 25.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.52 (  0.50)	train_minacc   0.53 (  0.49)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 8.7639 (8.7726)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.83it/s] 23%|##3       | 6/26 [00:00<00:00, 27.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.62it/s] 42%|####2     | 11/26 [00:00<00:00, 34.83it/s] 62%|######1   | 16/26 [00:00<00:00, 39.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.20it/s] 81%|########  | 21/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 33.80it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.691)	test_acc   0.47 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.691)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.45 (  0.50)	test_majacc   0.53 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.07 (  0.08)
Test: [  26/  26]	Loss 0.688 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.10 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.01 (  0.01)
Overall Timing[ 11/  1]	epoch_time 0.0418 (0.0466)	validation_time 0.0004 (0.0009)	train_time 0.0414 (0.0455)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.5007000091373921, 0.4910000264644623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.08it/s] 15%|#5        | 4/26 [00:00<00:01, 13.56it/s] 27%|##6       | 7/26 [00:00<00:00, 19.03it/s] 42%|####2     | 11/26 [00:00<00:00, 23.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.21it/s] 65%|######5   | 17/26 [00:00<00:00, 26.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.09it/s] 88%|########8 | 23/26 [00:00<00:00, 27.82it/s]100%|##########| 26/26 [00:01<00:00, 22.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.51 (  0.50)	train_minacc   0.53 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 8.7516 (8.7579)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 23%|##3       | 6/26 [00:00<00:00, 23.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.99it/s] 42%|####2     | 11/26 [00:00<00:00, 32.50it/s] 62%|######1   | 16/26 [00:00<00:00, 38.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.05it/s] 81%|########  | 21/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.49)	test_minacc   0.52 (  0.50)	test_majacc   0.46 (  0.49)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.09 (  0.06)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.51 (  0.50)	test_minacc   0.43 (  0.49)	test_majacc   0.53 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.05 (  0.06)
Test: [  26/  26]	Loss 0.690 (0.691)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.690 (0.691)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 12/  1]	epoch_time 0.0452 (0.0465)	validation_time 0.0003 (0.0009)	train_time 0.0449 (0.0454)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4967000126540661, 0.492000013589859)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.91it/s] 19%|#9        | 5/26 [00:00<00:01, 19.93it/s] 35%|###4      | 9/26 [00:00<00:00, 24.45it/s] 46%|####6     | 12/26 [00:00<00:00, 26.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.83it/s] 69%|######9   | 18/26 [00:00<00:00, 27.38it/s] 81%|########  | 21/26 [00:00<00:00, 28.00it/s] 92%|#########2| 24/26 [00:00<00:00, 28.52it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.50 (  0.49)	train_minacc   0.53 (  0.50)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 8.7423 (8.7470)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 23%|##3       | 6/26 [00:00<00:00, 26.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.40it/s] 42%|####2     | 11/26 [00:00<00:00, 34.39it/s] 62%|######1   | 16/26 [00:00<00:00, 39.23it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.23it/s] 81%|########  | 21/26 [00:00<00:00, 38.32it/s]100%|##########| 26/26 [00:00<00:00, 41.49it/s]100%|##########| 26/26 [00:00<00:00, 33.43it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.49)	test_minacc   0.52 (  0.51)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.49)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.03 (  0.04)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.50 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.690 (0.692)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 13/  1]	epoch_time 0.0465 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0461 (0.0455)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.49020000755786897, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 15%|#5        | 4/26 [00:00<00:01, 14.57it/s] 27%|##6       | 7/26 [00:00<00:00, 19.77it/s] 38%|###8      | 10/26 [00:00<00:00, 22.87it/s] 50%|#####     | 13/26 [00:00<00:00, 24.67it/s] 62%|######1   | 16/26 [00:00<00:00, 26.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.77it/s] 88%|########8 | 23/26 [00:00<00:00, 28.39it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.44)	train_acc   0.49 (  0.49)	train_minacc   0.53 (  0.51)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 8.7351 (8.7389)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.25it/s] 23%|##3       | 6/26 [00:00<00:00, 28.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.37it/s] 42%|####2     | 11/26 [00:00<00:00, 35.88it/s] 62%|######1   | 16/26 [00:00<00:00, 39.51it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.51it/s] 81%|########  | 21/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 34.37it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.48)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.49)	test_minacc   0.45 (  0.51)	test_majacc   0.52 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.52)	test_majacc   0.49 (  0.48)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.61it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 14/  1]	epoch_time 0.0472 (0.0465)	validation_time 0.0003 (0.0008)	train_time 0.0469 (0.0456)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4881000103354454, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 31%|###       | 8/26 [00:00<00:00, 23.74it/s] 46%|####6     | 12/26 [00:00<00:00, 26.75it/s] 62%|######1   | 16/26 [00:00<00:00, 28.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.38it/s] 92%|#########2| 24/26 [00:00<00:00, 30.11it/s]100%|##########| 26/26 [00:01<00:00, 25.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.44)	train_acc   0.49 (  0.49)	train_minacc   0.53 (  0.52)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 8.7296 (8.7325)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.13it/s] 12%|#1        | 3/26 [00:00<00:02,  9.61it/s] 35%|###4      | 9/26 [00:00<00:00, 25.96it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.54it/s] 92%|#########2| 24/26 [00:00<00:00, 38.19it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.53 (  0.52)	test_majacc   0.45 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.48)	test_minacc   0.45 (  0.51)	test_majacc   0.51 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.00 (  0.01)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.49 (  0.48)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.691 (0.692)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.26it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 15/  1]	epoch_time 0.0397 (0.0461)	validation_time 0.0004 (0.0008)	train_time 0.0393 (0.0452)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.48300000885128974, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.68it/s] 15%|#5        | 4/26 [00:00<00:01, 11.67it/s] 31%|###       | 8/26 [00:00<00:00, 18.76it/s] 42%|####2     | 11/26 [00:00<00:00, 21.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.96it/s] 88%|########8 | 23/26 [00:01<00:00, 28.42it/s]100%|##########| 26/26 [00:01<00:00, 22.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.48)	train_minacc   0.53 (  0.52)	train_majacc   0.48 (  0.47)	train_corr   0.00 (  0.00)	l1 8.7253 (8.7276)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.86it/s] 31%|###       | 8/26 [00:00<00:00, 39.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.74it/s] 50%|#####     | 13/26 [00:00<00:00, 43.90it/s] 69%|######9   | 18/26 [00:00<00:00, 44.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.98it/s] 88%|########8 | 23/26 [00:00<00:00, 44.66it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.52 (  0.53)	test_majacc   0.44 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.44 (  0.47)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.43 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.01 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.55 (  0.53)	test_majacc   0.49 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.04 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.02it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 16/  1]	epoch_time 0.0411 (0.0458)	validation_time 0.0003 (0.0008)	train_time 0.0407 (0.0449)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4786000076234341, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.80it/s] 27%|##6       | 7/26 [00:00<00:00, 26.78it/s] 42%|####2     | 11/26 [00:00<00:00, 28.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.45it/s] 88%|########8 | 23/26 [00:00<00:00, 29.72it/s]100%|##########| 26/26 [00:00<00:00, 27.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.50 (  0.48)	train_minacc   0.55 (  0.53)	train_majacc   0.49 (  0.47)	train_corr   0.00 (  0.00)	l1 8.7220 (8.7238)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.06it/s] 31%|###       | 8/26 [00:00<00:00, 37.45it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.45it/s] 50%|#####     | 13/26 [00:00<00:00, 40.62it/s] 69%|######9   | 18/26 [00:00<00:00, 43.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.45it/s] 88%|########8 | 23/26 [00:00<00:00, 43.31it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.63 (  0.63)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.52 (  0.53)	test_majacc   0.44 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.44 (  0.46)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.42 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.47)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 17/  1]	epoch_time 0.0407 (0.0455)	validation_time 0.0004 (0.0008)	train_time 0.0403 (0.0446)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.47460000902414323, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 12%|#1        | 3/26 [00:00<00:01, 11.71it/s] 23%|##3       | 6/26 [00:00<00:01, 18.54it/s] 35%|###4      | 9/26 [00:00<00:00, 22.30it/s] 50%|#####     | 13/26 [00:00<00:00, 25.90it/s] 65%|######5   | 17/26 [00:00<00:00, 27.46it/s] 81%|########  | 21/26 [00:00<00:00, 28.64it/s] 96%|#########6| 25/26 [00:01<00:00, 29.31it/s]100%|##########| 26/26 [00:01<00:00, 23.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.48)	train_minacc   0.50 (  0.53)	train_majacc   0.49 (  0.47)	train_corr   0.00 (  0.00)	l1 8.7191 (8.7206)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 23%|##3       | 6/26 [00:00<00:00, 29.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.30it/s] 42%|####2     | 11/26 [00:00<00:00, 37.15it/s] 65%|######5   | 17/26 [00:00<00:00, 40.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.15it/s] 85%|########4 | 22/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 35.33it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.63 (  0.63)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.47)	test_minacc   0.52 (  0.53)	test_majacc   0.44 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.42 (  0.52)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.89it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 18/  1]	epoch_time 0.0449 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0446)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.47110000437498095, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 46%|####6     | 12/26 [00:00<00:00, 26.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.01it/s] 88%|########8 | 23/26 [00:00<00:00, 29.09it/s]100%|##########| 26/26 [00:01<00:00, 25.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.47)	train_minacc   0.50 (  0.53)	train_majacc   0.49 (  0.46)	train_corr   0.00 (  0.00)	l1 8.7169 (8.7180)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.84it/s] 23%|##3       | 6/26 [00:00<00:00, 30.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.06it/s] 42%|####2     | 11/26 [00:00<00:00, 36.91it/s] 62%|######1   | 16/26 [00:00<00:00, 41.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.16it/s] 81%|########  | 21/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 43.40it/s]100%|##########| 26/26 [00:00<00:00, 36.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.63 (  0.63)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.52 (  0.53)	test_majacc   0.43 (  0.46)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.43 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.52)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.05 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.46)	test_corr_d   0.03 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 19/  1]	epoch_time 0.0484 (0.0456)	validation_time 0.0006 (0.0007)	train_time 0.0478 (0.0448)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.469600005954504, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.56it/s]  8%|7         | 2/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 14.41it/s] 31%|###       | 8/26 [00:00<00:00, 19.09it/s] 42%|####2     | 11/26 [00:00<00:00, 22.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.01it/s] 85%|########4 | 22/26 [00:01<00:00, 27.81it/s] 96%|#########6| 25/26 [00:01<00:00, 28.41it/s]100%|##########| 26/26 [00:01<00:00, 21.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.47)	train_minacc   0.50 (  0.53)	train_majacc   0.49 (  0.46)	train_corr   0.00 (  0.00)	l1 8.7151 (8.7160)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.48it/s] 12%|#1        | 3/26 [00:00<00:03,  6.56it/s] 35%|###4      | 9/26 [00:00<00:00, 20.27it/s]                                               35%|###4      | 9/26 [00:00<00:00, 20.27it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 32.04it/s] 92%|#########2| 24/26 [00:00<00:00, 35.77it/s]100%|##########| 26/26 [00:01<00:00, 24.37it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.46)	test_minacc   0.52 (  0.54)	test_majacc   0.43 (  0.45)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.43 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.53)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.06 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.50 (  0.53)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 20/  1]	epoch_time 0.0441 (0.0456)	validation_time 0.0003 (0.0007)	train_time 0.0438 (0.0447)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4666000040173531, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 21.38it/s] 31%|###       | 8/26 [00:00<00:00, 24.65it/s] 42%|####2     | 11/26 [00:00<00:00, 26.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.95it/s] 88%|########8 | 23/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:00<00:00, 26.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.47)	train_minacc   0.50 (  0.53)	train_majacc   0.49 (  0.46)	train_corr   0.00 (  0.00)	l1 8.7136 (8.7144)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.71it/s] 23%|##3       | 6/26 [00:00<00:00, 30.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.23it/s] 42%|####2     | 11/26 [00:00<00:00, 37.17it/s] 62%|######1   | 16/26 [00:00<00:00, 41.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.04it/s] 81%|########  | 21/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]100%|##########| 26/26 [00:00<00:00, 35.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.65)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.46)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.46)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.42 (  0.53)	test_majacc   0.49 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.42 (  0.53)	test_majacc_d   0.49 (  0.45)	test_corr_d  -0.07 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.50 (  0.54)	test_majacc   0.49 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.49 (  0.45)	test_corr_d   0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 21/  1]	epoch_time 0.0433 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0429 (0.0447)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.46270000487565993, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 19%|#9        | 5/26 [00:00<00:01, 20.52it/s] 35%|###4      | 9/26 [00:00<00:00, 24.80it/s] 50%|#####     | 13/26 [00:00<00:00, 27.01it/s] 65%|######5   | 17/26 [00:00<00:00, 28.87it/s] 81%|########  | 21/26 [00:00<00:00, 30.52it/s] 96%|#########6| 25/26 [00:00<00:00, 31.05it/s]100%|##########| 26/26 [00:00<00:00, 26.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.49 (  0.46)	train_minacc   0.47 (  0.54)	train_majacc   0.50 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7123 (8.7130)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.13it/s] 27%|##6       | 7/26 [00:00<00:00, 36.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.19it/s] 46%|####6     | 12/26 [00:00<00:00, 41.03it/s] 65%|######5   | 17/26 [00:00<00:00, 43.21it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.21it/s] 85%|########4 | 22/26 [00:00<00:00, 44.28it/s]100%|##########| 26/26 [00:00<00:00, 38.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.65 (  0.65)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.40 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.40 (  0.44)	test_corr_d  -0.04 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.43 (  0.54)	test_majacc   0.49 (  0.44)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.43 (  0.54)	test_majacc_d   0.49 (  0.44)	test_corr_d  -0.08 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.50 (  0.54)	test_majacc   0.49 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.49 (  0.44)	test_corr_d   0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.37it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 22/  1]	epoch_time 0.0425 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0421 (0.0445)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4569000040590763, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 17.84it/s] 27%|##6       | 7/26 [00:00<00:00, 22.52it/s] 42%|####2     | 11/26 [00:00<00:00, 25.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.39it/s] 69%|######9   | 18/26 [00:00<00:00, 28.13it/s] 81%|########  | 21/26 [00:00<00:00, 28.65it/s] 96%|#########6| 25/26 [00:00<00:00, 29.19it/s]100%|##########| 26/26 [00:01<00:00, 24.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 8.712478637695312
set z to 8.276854705810546
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.47 (  0.46)	train_minacc   0.47 (  0.53)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 8.7113 (8.7118)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.12it/s] 27%|##6       | 7/26 [00:00<00:00, 33.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.25it/s] 46%|####6     | 12/26 [00:00<00:00, 39.04it/s] 65%|######5   | 17/26 [00:00<00:00, 41.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.88it/s] 85%|########4 | 22/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 37.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.65 (  0.65)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.41 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.45)	test_minacc   0.42 (  0.54)	test_majacc   0.48 (  0.43)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.42 (  0.54)	test_majacc_d   0.48 (  0.43)	test_corr_d  -0.08 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.45)	test_minacc   0.53 (  0.54)	test_majacc   0.46 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.08it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 23/  1]	epoch_time 0.0431 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0427 (0.0445)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.44920000380277636, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.81it/s] 12%|#1        | 3/26 [00:00<00:03,  7.66it/s] 23%|##3       | 6/26 [00:00<00:01, 13.96it/s] 35%|###4      | 9/26 [00:00<00:00, 18.41it/s] 46%|####6     | 12/26 [00:00<00:00, 21.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 23.53it/s] 69%|######9   | 18/26 [00:00<00:00, 25.10it/s] 85%|########4 | 22/26 [00:01<00:00, 27.14it/s]100%|##########| 26/26 [00:01<00:00, 28.59it/s]100%|##########| 26/26 [00:01<00:00, 20.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.46 (  0.45)	train_minacc   0.47 (  0.54)	train_majacc   0.46 (  0.44)	train_corr   0.00 (  0.00)	l1 8.7105 (8.7109)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.96it/s] 27%|##6       | 7/26 [00:00<00:00, 26.56it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 37.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.49it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.49it/s] 96%|#########6| 25/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 35.94it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.65 (  0.65)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.57 (  0.56)	test_majacc   0.41 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.41 (  0.42)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.42 (  0.55)	test_majacc   0.47 (  0.43)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.42 (  0.55)	test_majacc_d   0.47 (  0.43)	test_corr_d  -0.09 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.50 (  0.55)	test_majacc   0.45 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.45 (  0.43)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 24/  1]	epoch_time 0.0464 (0.0453)	validation_time 0.0004 (0.0007)	train_time 0.0460 (0.0445)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4442000040113926, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 15%|#5        | 4/26 [00:00<00:01, 20.21it/s] 27%|##6       | 7/26 [00:00<00:00, 24.35it/s] 38%|###8      | 10/26 [00:00<00:00, 26.34it/s] 50%|#####     | 13/26 [00:00<00:00, 27.24it/s] 62%|######1   | 16/26 [00:00<00:00, 28.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.49it/s] 88%|########8 | 23/26 [00:00<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.46 (  0.45)	train_minacc   0.50 (  0.54)	train_majacc   0.45 (  0.43)	train_corr   0.00 (  0.00)	l1 8.7097 (8.7101)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 12%|#1        | 3/26 [00:00<00:01, 14.02it/s] 31%|###       | 8/26 [00:00<00:00, 28.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.59it/s] 50%|#####     | 13/26 [00:00<00:00, 34.95it/s] 69%|######9   | 18/26 [00:00<00:00, 36.46it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.46it/s] 88%|########8 | 23/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 32.89it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.46)	test_minacc   0.65 (  0.65)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.57 (  0.56)	test_majacc   0.40 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.42 (  0.55)	test_majacc   0.46 (  0.42)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.42 (  0.55)	test_majacc_d   0.46 (  0.42)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.44)	test_minacc   0.53 (  0.55)	test_majacc   0.45 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 25/  1]	epoch_time 0.0435 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0430 (0.0445)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4411000036597252, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 46%|####6     | 12/26 [00:00<00:00, 26.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.08it/s] 88%|########8 | 23/26 [00:00<00:00, 29.53it/s]100%|##########| 26/26 [00:00<00:00, 29.65it/s]100%|##########| 26/26 [00:01<00:00, 24.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.45 (  0.44)	train_minacc   0.53 (  0.55)	train_majacc   0.43 (  0.43)	train_corr   0.00 (  0.00)	l1 8.7090 (8.7093)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 15.29it/s] 31%|###       | 8/26 [00:00<00:00, 28.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.86it/s] 50%|#####     | 13/26 [00:00<00:00, 35.17it/s] 69%|######9   | 18/26 [00:00<00:00, 39.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.71it/s] 88%|########8 | 23/26 [00:00<00:00, 38.80it/s]100%|##########| 26/26 [00:00<00:00, 34.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.43)	test_minacc   0.42 (  0.56)	test_majacc   0.46 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.42 (  0.56)	test_majacc_d   0.46 (  0.41)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.55 (  0.56)	test_majacc   0.43 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0471 (0.0453)	validation_time 0.0004 (0.0006)	train_time 0.0467 (0.0446)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.43500000435113906, 0.5410000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 31%|###       | 8/26 [00:00<00:00, 25.48it/s] 46%|####6     | 12/26 [00:00<00:00, 27.82it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.26it/s] 88%|########8 | 23/26 [00:00<00:00, 29.79it/s]100%|##########| 26/26 [00:00<00:00, 26.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.45 (  0.44)	train_minacc   0.53 (  0.56)	train_majacc   0.44 (  0.42)	train_corr   0.00 (  0.00)	l1 8.7084 (8.7087)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.22it/s] 27%|##6       | 7/26 [00:00<00:00, 33.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.79it/s] 46%|####6     | 12/26 [00:00<00:00, 39.70it/s] 65%|######5   | 17/26 [00:00<00:00, 38.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.28it/s] 85%|########4 | 22/26 [00:00<00:00, 40.54it/s]100%|##########| 26/26 [00:00<00:00, 35.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.67 (  0.67)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.43)	test_minacc   0.46 (  0.57)	test_majacc   0.44 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.46 (  0.57)	test_majacc_d   0.44 (  0.41)	test_corr_d  -0.10 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.43)	test_minacc   0.55 (  0.57)	test_majacc   0.44 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 27/  1]	epoch_time 0.0427 (0.0452)	validation_time 0.0006 (0.0006)	train_time 0.0420 (0.0445)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4318000047504902, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.64it/s] 19%|#9        | 5/26 [00:00<00:01, 14.55it/s] 35%|###4      | 9/26 [00:00<00:00, 20.39it/s] 50%|#####     | 13/26 [00:00<00:00, 23.79it/s] 62%|######1   | 16/26 [00:00<00:00, 25.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.24it/s] 85%|########4 | 22/26 [00:00<00:00, 26.96it/s] 96%|#########6| 25/26 [00:01<00:00, 27.56it/s]100%|##########| 26/26 [00:01<00:00, 22.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.45 (  0.44)	train_minacc   0.53 (  0.57)	train_majacc   0.43 (  0.41)	train_corr   0.00 (  0.00)	l1 8.7078 (8.7081)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.54it/s] 42%|####2     | 11/26 [00:00<00:00, 36.18it/s] 62%|######1   | 16/26 [00:00<00:00, 40.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.11it/s]100%|##########| 26/26 [00:00<00:00, 42.26it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.69 (  0.69)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.46 (  0.57)	test_majacc   0.43 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.46 (  0.57)	test_majacc_d   0.43 (  0.40)	test_corr_d  -0.10 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.43)	test_minacc   0.55 (  0.58)	test_majacc   0.43 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.55 (  0.58)	test_majacc_d   0.43 (  0.40)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0414 (0.0451)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0443)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4284000047445297, 0.5520000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 19%|#9        | 5/26 [00:00<00:01, 17.90it/s] 35%|###4      | 9/26 [00:00<00:00, 23.08it/s] 50%|#####     | 13/26 [00:00<00:00, 25.90it/s] 62%|######1   | 16/26 [00:00<00:00, 27.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.69it/s] 88%|########8 | 23/26 [00:00<00:00, 28.23it/s]100%|##########| 26/26 [00:01<00:00, 24.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.43 (  0.43)	train_acc   0.44 (  0.43)	train_minacc   0.53 (  0.58)	train_majacc   0.42 (  0.41)	train_corr   0.00 (  0.00)	l1 8.7073 (8.7075)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 23%|##3       | 6/26 [00:00<00:00, 28.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.19it/s] 42%|####2     | 11/26 [00:00<00:00, 35.50it/s] 62%|######1   | 16/26 [00:00<00:00, 37.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.22it/s] 81%|########  | 21/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 42.77it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.69 (  0.69)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.58 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.58 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.07 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.46 (  0.57)	test_majacc   0.43 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.46 (  0.57)	test_majacc_d   0.43 (  0.40)	test_corr_d  -0.10 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.55 (  0.58)	test_majacc   0.42 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.55 (  0.58)	test_majacc_d   0.42 (  0.40)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 29/  1]	epoch_time 0.0418 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42660000517964364, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.89it/s] 15%|#5        | 4/26 [00:00<00:01, 17.86it/s] 27%|##6       | 7/26 [00:00<00:00, 21.71it/s] 42%|####2     | 11/26 [00:00<00:00, 25.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.16it/s] 69%|######9   | 18/26 [00:00<00:00, 27.72it/s] 85%|########4 | 22/26 [00:00<00:00, 28.88it/s]100%|##########| 26/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:01<00:00, 25.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.43)	train_minacc   0.53 (  0.58)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 8.7068 (8.7070)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 12%|#1        | 3/26 [00:00<00:01, 11.86it/s] 35%|###4      | 9/26 [00:00<00:00, 28.43it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.17it/s] 96%|#########6| 25/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 31.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.71 (  0.71)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.60 (  0.60)	test_majacc   0.40 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.40 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.46 (  0.58)	test_majacc   0.43 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.46 (  0.58)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.55 (  0.59)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 30/  1]	epoch_time 0.0404 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0400 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42260000532865527, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 15%|#5        | 4/26 [00:00<00:01, 15.24it/s] 27%|##6       | 7/26 [00:00<00:00, 20.21it/s] 38%|###8      | 10/26 [00:00<00:00, 23.49it/s] 50%|#####     | 13/26 [00:00<00:00, 25.40it/s] 62%|######1   | 16/26 [00:00<00:00, 26.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.02it/s]100%|##########| 26/26 [00:01<00:00, 23.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.43)	train_minacc   0.53 (  0.58)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 8.7064 (8.7066)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 19%|#9        | 5/26 [00:00<00:00, 23.39it/s] 38%|###8      | 10/26 [00:00<00:00, 33.25it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.25it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.30it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.30it/s] 96%|#########6| 25/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 34.23it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.71 (  0.71)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.61)	test_majacc   0.40 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.07 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.46 (  0.59)	test_majacc   0.43 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.46 (  0.59)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.55 (  0.60)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 31/  1]	epoch_time 0.0471 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0468 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42120000541210173, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 12%|#1        | 3/26 [00:00<00:02,  9.56it/s] 23%|##3       | 6/26 [00:00<00:01, 16.18it/s] 35%|###4      | 9/26 [00:00<00:00, 20.17it/s] 46%|####6     | 12/26 [00:00<00:00, 23.17it/s] 62%|######1   | 16/26 [00:00<00:00, 25.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.94it/s] 88%|########8 | 23/26 [00:01<00:00, 28.62it/s]100%|##########| 26/26 [00:01<00:00, 22.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.43)	train_minacc   0.55 (  0.59)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 8.7060 (8.7062)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.62it/s] 19%|#9        | 5/26 [00:00<00:00, 23.32it/s] 38%|###8      | 10/26 [00:00<00:00, 34.09it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.86it/s] 96%|#########6| 25/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 33.48it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.73 (  0.73)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.61)	test_majacc   0.40 (  0.38)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.07 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.46 (  0.59)	test_majacc   0.43 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.46 (  0.59)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.57 (  0.60)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0479 (0.0450)	validation_time 0.0004 (0.0006)	train_time 0.0475 (0.0443)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4205000049173832, 0.5660000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 15%|#5        | 4/26 [00:00<00:01, 17.39it/s] 31%|###       | 8/26 [00:00<00:00, 23.45it/s] 42%|####2     | 11/26 [00:00<00:00, 25.39it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.81it/s] 69%|######9   | 18/26 [00:00<00:00, 28.02it/s] 81%|########  | 21/26 [00:00<00:00, 28.14it/s] 96%|#########6| 25/26 [00:00<00:00, 28.85it/s]100%|##########| 26/26 [00:01<00:00, 24.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.59)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7057 (8.7058)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 23%|##3       | 6/26 [00:00<00:00, 28.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.78it/s] 42%|####2     | 11/26 [00:00<00:00, 36.19it/s] 62%|######1   | 16/26 [00:00<00:00, 39.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.66it/s] 81%|########  | 21/26 [00:00<00:00, 39.91it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.76 (  0.76)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.65 (  0.62)	test_majacc   0.39 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.07 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.48 (  0.60)	test_majacc   0.43 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.48 (  0.60)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.09 ( -0.07)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.60)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0414 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0410 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4204000052511692, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 12%|#1        | 3/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:01, 17.41it/s] 42%|####2     | 11/26 [00:00<00:00, 21.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 23.68it/s] 65%|######5   | 17/26 [00:00<00:00, 25.23it/s] 81%|########  | 21/26 [00:00<00:00, 27.02it/s] 96%|#########6| 25/26 [00:01<00:00, 28.22it/s]100%|##########| 26/26 [00:01<00:00, 22.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7054 (8.7055)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.93it/s] 31%|###       | 8/26 [00:00<00:00, 36.61it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.61it/s] 50%|#####     | 13/26 [00:00<00:00, 40.13it/s] 69%|######9   | 18/26 [00:00<00:00, 42.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.58it/s] 88%|########8 | 23/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.62)	test_majacc   0.40 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.40 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.48 (  0.61)	test_majacc   0.43 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.08 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.61)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 34/  1]	epoch_time 0.0430 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42160000517964363, 0.5730000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 19%|#9        | 5/26 [00:00<00:01, 19.10it/s] 31%|###       | 8/26 [00:00<00:00, 23.10it/s] 42%|####2     | 11/26 [00:00<00:00, 25.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.79it/s] 65%|######5   | 17/26 [00:00<00:00, 27.70it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.35it/s] 88%|########8 | 23/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 24.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7051 (8.7052)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.71it/s] 23%|##3       | 6/26 [00:00<00:00, 28.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.52it/s] 42%|####2     | 11/26 [00:00<00:00, 36.96it/s] 62%|######1   | 16/26 [00:00<00:00, 37.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.17it/s] 81%|########  | 21/26 [00:00<00:00, 40.38it/s]100%|##########| 26/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 36.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.62)	test_majacc   0.40 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.40 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.60)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.60)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.08 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.61)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 35/  1]	epoch_time 0.0438 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4209000052213669, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 15%|#5        | 4/26 [00:00<00:01, 16.97it/s] 31%|###       | 8/26 [00:00<00:00, 23.07it/s] 42%|####2     | 11/26 [00:00<00:00, 25.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.50it/s] 65%|######5   | 17/26 [00:00<00:00, 25.83it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.67it/s] 92%|#########2| 24/26 [00:00<00:00, 28.06it/s]100%|##########| 26/26 [00:01<00:00, 23.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7048 (8.7049)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 12%|#1        | 3/26 [00:00<00:02, 10.70it/s] 31%|###       | 8/26 [00:00<00:00, 24.43it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.43it/s] 50%|#####     | 13/26 [00:00<00:00, 31.90it/s] 69%|######9   | 18/26 [00:00<00:00, 34.24it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.24it/s] 88%|########8 | 23/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.62)	test_majacc   0.40 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.40 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.49 (  0.60)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.49 (  0.60)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.08 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.61)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 36/  1]	epoch_time 0.0436 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0432 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4221000051498413, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.34it/s] 19%|#9        | 5/26 [00:00<00:00, 23.72it/s] 31%|###       | 8/26 [00:00<00:00, 26.33it/s] 42%|####2     | 11/26 [00:00<00:00, 27.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.23it/s] 65%|######5   | 17/26 [00:00<00:00, 27.77it/s] 81%|########  | 21/26 [00:00<00:00, 28.80it/s] 92%|#########2| 24/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7045 (8.7046)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.97it/s] 23%|##3       | 6/26 [00:00<00:00, 20.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.35it/s] 42%|####2     | 11/26 [00:00<00:00, 29.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.62it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.97it/s] 96%|#########6| 25/26 [00:00<00:00, 36.94it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.76 (  0.76)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.63)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.61)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.61)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.57 (  0.61)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.94it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 37/  1]	epoch_time 0.0456 (0.0448)	validation_time 0.0005 (0.0006)	train_time 0.0451 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42080000501871107, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.12it/s]  8%|7         | 2/26 [00:00<00:06,  3.76it/s] 19%|#9        | 5/26 [00:00<00:02, 10.03it/s] 35%|###4      | 9/26 [00:00<00:01, 16.42it/s] 50%|#####     | 13/26 [00:00<00:00, 20.69it/s] 62%|######1   | 16/26 [00:01<00:00, 22.54it/s] 73%|#######3  | 19/26 [00:01<00:00, 23.93it/s] 88%|########8 | 23/26 [00:01<00:00, 26.11it/s]100%|##########| 26/26 [00:01<00:00, 18.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.61)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7043 (8.7044)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 23%|##3       | 6/26 [00:00<00:00, 29.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.49it/s] 42%|####2     | 11/26 [00:00<00:00, 36.59it/s] 62%|######1   | 16/26 [00:00<00:00, 41.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.08it/s] 81%|########  | 21/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 43.05it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.76 (  0.76)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.63)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.48 (  0.61)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Overall Timing[ 38/  1]	epoch_time 0.0465 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0461 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.42050000503659246, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.43it/s] 27%|##6       | 7/26 [00:00<00:00, 27.40it/s] 38%|###8      | 10/26 [00:00<00:00, 28.30it/s] 50%|#####     | 13/26 [00:00<00:00, 28.85it/s] 65%|######5   | 17/26 [00:00<00:00, 30.13it/s] 81%|########  | 21/26 [00:00<00:00, 29.81it/s] 96%|#########6| 25/26 [00:00<00:00, 29.93it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7040 (8.7041)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 15%|#5        | 4/26 [00:00<00:01, 15.14it/s] 35%|###4      | 9/26 [00:00<00:00, 27.58it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.58it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.17it/s]100%|##########| 26/26 [00:00<00:00, 43.25it/s]100%|##########| 26/26 [00:00<00:00, 32.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.76 (  0.76)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.65 (  0.63)	test_majacc   0.39 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.39 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.60)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.60)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.07 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.40 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Overall Timing[ 39/  1]	epoch_time 0.0424 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0420 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4200000050663948, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 15%|#5        | 4/26 [00:00<00:01, 20.80it/s] 27%|##6       | 7/26 [00:00<00:00, 24.55it/s] 42%|####2     | 11/26 [00:00<00:00, 27.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.13it/s] 88%|########8 | 23/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7038 (8.7039)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 23%|##3       | 6/26 [00:00<00:00, 23.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.90it/s] 42%|####2     | 11/26 [00:00<00:00, 31.89it/s] 62%|######1   | 16/26 [00:00<00:00, 37.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.06it/s] 81%|########  | 21/26 [00:00<00:00, 36.90it/s]100%|##########| 26/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 31.69it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.76 (  0.76)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.63)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.63)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.61)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.61)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.40 (  0.38)	test_corr_d   0.00 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Overall Timing[ 40/  1]	epoch_time 0.0399 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0394 (0.0440)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4180000051856041, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.41it/s] 15%|#5        | 4/26 [00:00<00:01, 13.99it/s] 27%|##6       | 7/26 [00:00<00:00, 19.43it/s] 38%|###8      | 10/26 [00:00<00:00, 22.45it/s] 50%|#####     | 13/26 [00:00<00:00, 24.50it/s] 62%|######1   | 16/26 [00:00<00:00, 25.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.22it/s] 88%|########8 | 23/26 [00:00<00:00, 27.88it/s]100%|##########| 26/26 [00:01<00:00, 22.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.42 (  0.42)	train_acc   0.41 (  0.42)	train_minacc   0.55 (  0.60)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7036 (8.7037)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 23%|##3       | 6/26 [00:00<00:00, 24.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.15it/s] 42%|####2     | 11/26 [00:00<00:00, 32.47it/s] 62%|######1   | 16/26 [00:00<00:00, 38.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.04it/s] 81%|########  | 21/26 [00:00<00:00, 38.66it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 32.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.76 (  0.76)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.65 (  0.64)	test_majacc   0.39 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.39 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.61)	test_majacc   0.42 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.61)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.39 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.39 (  0.38)	test_corr_d   0.00 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Overall Timing[ 41/  1]	epoch_time 0.0448 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0444 (0.0440)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.41750000554323197, 0.5790000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.84it/s] 15%|#5        | 4/26 [00:00<00:01, 12.90it/s] 27%|##6       | 7/26 [00:00<00:01, 18.21it/s] 42%|####2     | 11/26 [00:00<00:00, 23.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.93it/s]100%|##########| 26/26 [00:01<00:00, 22.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.53 (  0.61)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7034 (8.7035)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s]                                               19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 42%|####2     | 11/26 [00:00<00:00, 33.81it/s] 62%|######1   | 16/26 [00:00<00:00, 38.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.01it/s] 81%|########  | 21/26 [00:00<00:00, 37.33it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 32.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.63)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.49 (  0.60)	test_majacc   0.41 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.49 (  0.60)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.53 (  0.60)	test_majacc   0.38 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.53 (  0.60)	test_majacc_d   0.38 (  0.39)	test_corr_d  -0.00 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 42/  1]	epoch_time 0.0439 (0.0446)	validation_time 0.0006 (0.0006)	train_time 0.0432 (0.0440)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4181000048816204, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.22it/s] 19%|#9        | 5/26 [00:00<00:01, 16.06it/s] 35%|###4      | 9/26 [00:00<00:00, 22.16it/s] 50%|#####     | 13/26 [00:00<00:00, 25.83it/s] 62%|######1   | 16/26 [00:00<00:00, 26.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.80it/s] 88%|########8 | 23/26 [00:00<00:00, 27.98it/s]100%|##########| 26/26 [00:01<00:00, 23.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.61)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7032 (8.7033)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.47it/s] 15%|#5        | 4/26 [00:00<00:01, 15.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.50it/s] 92%|#########2| 24/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.48 (  0.61)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.48 (  0.61)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.53 (  0.61)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.53 (  0.61)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.00 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 43/  1]	epoch_time 0.0498 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0494 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.41590000501275065, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 15%|#5        | 4/26 [00:00<00:01, 19.82it/s] 27%|##6       | 7/26 [00:00<00:00, 23.72it/s] 42%|####2     | 11/26 [00:00<00:00, 26.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.17it/s] 65%|######5   | 17/26 [00:00<00:00, 27.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.89it/s] 88%|########8 | 23/26 [00:00<00:00, 28.12it/s]100%|##########| 26/26 [00:01<00:00, 24.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.55 (  0.61)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7030 (8.7031)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.04it/s] 23%|##3       | 6/26 [00:00<00:00, 29.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.63it/s] 42%|####2     | 11/26 [00:00<00:00, 36.75it/s] 62%|######1   | 16/26 [00:00<00:00, 40.35it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.35it/s] 81%|########  | 21/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.61)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.61)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.53 (  0.61)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.53 (  0.61)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.00 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 44/  1]	epoch_time 0.0438 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0441)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4183000048696995, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.97it/s] 23%|##3       | 6/26 [00:00<00:00, 25.50it/s] 38%|###8      | 10/26 [00:00<00:00, 28.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.29it/s] 65%|######5   | 17/26 [00:00<00:00, 29.09it/s] 81%|########  | 21/26 [00:00<00:00, 29.37it/s] 92%|#########2| 24/26 [00:00<00:00, 29.16it/s]100%|##########| 26/26 [00:00<00:00, 26.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.57 (  0.61)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7028 (8.7029)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.01it/s] 19%|#9        | 5/26 [00:00<00:00, 22.71it/s] 38%|###8      | 10/26 [00:00<00:00, 32.86it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.45it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.45it/s]100%|##########| 26/26 [00:00<00:00, 44.51it/s]100%|##########| 26/26 [00:00<00:00, 34.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.41 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.41 (  0.38)	test_corr_d  -0.05 ( -0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.49 (  0.61)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.49 (  0.61)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.38 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.00 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 45/  1]	epoch_time 0.0478 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0474 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.41960000520944596, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 12%|#1        | 3/26 [00:00<00:01, 12.55it/s] 23%|##3       | 6/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 23.18it/s] 50%|#####     | 13/26 [00:00<00:00, 26.06it/s] 65%|######5   | 17/26 [00:00<00:00, 27.56it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.92it/s] 88%|########8 | 23/26 [00:00<00:00, 28.39it/s]100%|##########| 26/26 [00:01<00:00, 28.82it/s]100%|##########| 26/26 [00:01<00:00, 23.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.57 (  0.61)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7027 (8.7027)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 23%|##3       | 6/26 [00:00<00:00, 30.60it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.60it/s] 42%|####2     | 11/26 [00:00<00:00, 36.71it/s] 62%|######1   | 16/26 [00:00<00:00, 41.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.37it/s] 81%|########  | 21/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 43.81it/s]100%|##########| 26/26 [00:00<00:00, 35.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.82 (  0.82)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.51 (  0.61)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.51 (  0.61)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.55 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.55 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.00 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Overall Timing[ 46/  1]	epoch_time 0.0455 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0451 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.41750000512599944, 0.5850000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.60it/s] 19%|#9        | 5/26 [00:00<00:01, 19.60it/s] 31%|###       | 8/26 [00:00<00:00, 23.26it/s] 42%|####2     | 11/26 [00:00<00:00, 25.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.22it/s] 85%|########4 | 22/26 [00:00<00:00, 28.62it/s] 96%|#########6| 25/26 [00:00<00:00, 28.80it/s]100%|##########| 26/26 [00:01<00:00, 24.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.57 (  0.62)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7025 (8.7026)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.59it/s] 27%|##6       | 7/26 [00:00<00:00, 28.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.71it/s] 46%|####6     | 12/26 [00:00<00:00, 35.80it/s] 65%|######5   | 17/26 [00:00<00:00, 39.95it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.95it/s] 85%|########4 | 22/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 34.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.80 (  0.80)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.52 (  0.62)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.52 (  0.62)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.57 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.00 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Overall Timing[ 47/  1]	epoch_time 0.0474 (0.0449)	validation_time 0.0004 (0.0005)	train_time 0.0469 (0.0443)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4180000053048134, 0.5830000042915344)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.24it/s] 15%|#5        | 4/26 [00:00<00:01, 16.36it/s] 27%|##6       | 7/26 [00:00<00:00, 20.72it/s] 38%|###8      | 10/26 [00:00<00:00, 23.41it/s] 50%|#####     | 13/26 [00:00<00:00, 25.21it/s] 62%|######1   | 16/26 [00:00<00:00, 26.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.96it/s] 88%|########8 | 23/26 [00:00<00:00, 28.53it/s]100%|##########| 26/26 [00:01<00:00, 23.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.57 (  0.62)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7023 (8.7024)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.83it/s] 27%|##6       | 7/26 [00:00<00:00, 34.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.31it/s] 50%|#####     | 13/26 [00:00<00:00, 42.68it/s] 69%|######9   | 18/26 [00:00<00:00, 44.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.14it/s] 88%|########8 | 23/26 [00:00<00:00, 45.33it/s]100%|##########| 26/26 [00:00<00:00, 38.78it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.82 (  0.82)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.63 (  0.64)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.63 (  0.64)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.05 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.52 (  0.62)	test_majacc   0.41 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.52 (  0.62)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.57 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.01 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.58 (  0.58)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Overall Timing[ 48/  1]	epoch_time 0.0443 (0.0449)	validation_time 0.0007 (0.0006)	train_time 0.0436 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4182000052928925, 0.5840000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 15%|#5        | 4/26 [00:00<00:01, 19.72it/s] 27%|##6       | 7/26 [00:00<00:00, 23.64it/s] 38%|###8      | 10/26 [00:00<00:00, 25.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.97it/s] 65%|######5   | 17/26 [00:00<00:00, 28.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.68it/s] 92%|#########2| 24/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.41 (  0.41)	train_acc   0.42 (  0.42)	train_minacc   0.57 (  0.62)	train_majacc   0.40 (  0.39)	train_corr   0.00 (  0.00)	l1 8.7022 (8.7023)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 27%|##6       | 7/26 [00:00<00:00, 32.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.79it/s] 46%|####6     | 12/26 [00:00<00:00, 39.27it/s] 65%|######5   | 17/26 [00:00<00:00, 41.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.94it/s] 85%|########4 | 22/26 [00:00<00:00, 43.68it/s]100%|##########| 26/26 [00:00<00:00, 36.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.82 (  0.82)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.54 (  0.62)	test_majacc   0.40 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.54 (  0.62)	test_majacc_d   0.40 (  0.38)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.57 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 (  0.01)
Overall Timing[ 49/  1]	epoch_time 0.0424 (0.0448)	validation_time 0.0004 (0.0005)	train_time 0.0420 (0.0442)
record: (train_acc, test_acc) (0.6806000306010246, 0.6310000419616699)
last accs (train_acc, test_acc) (0.4172000053524971, 0.5860000252723694)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpyb2mm_je'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215142-j2e81ol5
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/j2e81ol5
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1205
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5931, 3, 32, 32) (6069, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.51s/it] 19%|#9        | 5/26 [00:01<00:05,  3.97it/s] 31%|###       | 8/26 [00:01<00:02,  6.77it/s] 42%|####2     | 11/26 [00:01<00:01,  9.86it/s] 58%|#####7    | 15/26 [00:01<00:00, 13.93it/s] 73%|#######3  | 19/26 [00:02<00:00, 17.66it/s] 88%|########8 | 23/26 [00:02<00:00, 20.97it/s]100%|##########| 26/26 [00:02<00:00, 13.59it/s]100%|##########| 26/26 [00:02<00:00,  9.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.408 (12.762)	train_nll   0.38 (  0.61)	train_penalty   0.04 (  0.38)	weight_norm  10.03 ( 12.15)	train_acc   0.86 (  0.79)	train_minacc   0.03 (  0.08)	train_majacc   1.00 (  0.91)	train_corr   0.00 (  0.00)	l1 6.5878 (7.5683)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.13it/s] 31%|###       | 8/26 [00:00<00:00, 37.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.70it/s] 50%|#####     | 13/26 [00:00<00:00, 40.74it/s] 69%|######9   | 18/26 [00:00<00:00, 41.41it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.41it/s] 88%|########8 | 23/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.347 (0.347)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.403 (0.427)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.427)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.395 (0.427)	test_acc   0.86 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.395 (0.427)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.375 (0.422)	test_acc   0.86 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.375 (0.422)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]100%|##########| 1/1 [00:00<00:00,  2.47it/s]
Test: [  0/  1]	Loss 1.777 (1.777)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.777 (1.777)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.777 (1.777)	test_acc   0.11 (  0.11)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.777 (1.777)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0780 (0.0780)	validation_time 0.0070 (0.0070)	train_time 0.0679 (0.0679)
record: (train_acc, test_acc) (0.8431000201702118, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8431000201702118, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.03it/s] 15%|#5        | 4/26 [00:00<00:02, 10.29it/s] 27%|##6       | 7/26 [00:00<00:01, 15.75it/s] 38%|###8      | 10/26 [00:00<00:00, 19.73it/s] 50%|#####     | 13/26 [00:00<00:00, 22.67it/s] 65%|######5   | 17/26 [00:00<00:00, 25.30it/s] 81%|########  | 21/26 [00:01<00:00, 27.38it/s] 96%|#########6| 25/26 [00:01<00:00, 28.65it/s]100%|##########| 26/26 [00:01<00:00, 20.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.697 (7.774)	train_nll   0.37 (  0.42)	train_penalty   0.03 (  0.06)	weight_norm   5.33 (  7.36)	train_acc   0.85 (  0.84)	train_minacc   0.00 (  0.01)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2165 (6.4181)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 15%|#5        | 4/26 [00:00<00:01, 15.74it/s] 35%|###4      | 9/26 [00:00<00:00, 28.02it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.16it/s] 92%|#########2| 24/26 [00:00<00:00, 38.32it/s]100%|##########| 26/26 [00:00<00:00, 30.60it/s]
Test: [   0/  26]	Loss 0.338 (0.338)	test_acc   0.89 (  0.89)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.338 (0.338)	test_acc_d   0.89 (  0.89)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.395 (0.417)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.04)	test_majacc   0.98 (  0.99)	Loss_d 0.395 (0.417)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.04)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.377 (0.415)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.377 (0.415)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.354 (0.408)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.354 (0.408)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.56it/s]
Test: [  0/  1]	Loss 1.814 (1.814)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.814 (1.814)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.814 (1.814)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.814 (1.814)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0438 (0.0609)	validation_time 0.0004 (0.0037)	train_time 0.0433 (0.0556)
record: (train_acc, test_acc) (0.8478000224232674, 0.11800000816583633)
last accs (train_acc, test_acc) (0.8478000224232674, 0.11800000816583633)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.11it/s] 12%|#1        | 3/26 [00:00<00:02,  9.23it/s] 23%|##3       | 6/26 [00:00<00:01, 15.76it/s] 35%|###4      | 9/26 [00:00<00:00, 19.82it/s] 46%|####6     | 12/26 [00:00<00:00, 22.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.29it/s] 69%|######9   | 18/26 [00:00<00:00, 25.73it/s] 85%|########4 | 22/26 [00:01<00:00, 27.70it/s] 96%|#########6| 25/26 [00:01<00:00, 28.34it/s]100%|##########| 26/26 [00:01<00:00, 21.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.495 (4.478)	train_nll   0.37 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm   3.13 (  4.06)	train_acc   0.86 (  0.85)	train_minacc   0.15 (  0.02)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 5.2639 (5.7086)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 23%|##3       | 6/26 [00:00<00:00, 31.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.73it/s] 42%|####2     | 11/26 [00:00<00:00, 37.97it/s] 62%|######1   | 16/26 [00:00<00:00, 42.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.48it/s] 81%|########  | 21/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 36.75it/s]
Test: [   0/  26]	Loss 0.333 (0.333)	test_acc   0.88 (  0.88)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.333 (0.333)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.376 (0.413)	test_acc   0.85 (  0.84)	test_minacc   0.17 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.376 (0.413)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.17 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.372 (0.412)	test_acc   0.86 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.98)	Loss_d 0.372 (0.412)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.352 (0.404)	test_acc   0.87 (  0.85)	test_minacc   0.12 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.352 (0.404)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.12 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.09it/s]
Test: [  0/  1]	Loss 1.818 (1.818)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.818 (1.818)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.818 (1.818)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 1.818 (1.818)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0436 (0.0551)	validation_time 0.0004 (0.0026)	train_time 0.0432 (0.0515)
record: (train_acc, test_acc) (0.8466000238656998, 0.1469999998807907)
last accs (train_acc, test_acc) (0.8466000238656998, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.86it/s] 23%|##3       | 6/26 [00:00<00:00, 24.97it/s] 35%|###4      | 9/26 [00:00<00:00, 26.42it/s] 46%|####6     | 12/26 [00:00<00:00, 26.25it/s] 62%|######1   | 16/26 [00:00<00:00, 28.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.56it/s] 92%|#########2| 24/26 [00:00<00:00, 30.13it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.315 (2.882)	train_nll   0.34 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm   1.97 (  2.48)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 4.7915 (4.8354)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.32it/s] 23%|##3       | 6/26 [00:00<00:00, 21.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.44it/s] 42%|####2     | 11/26 [00:00<00:00, 30.46it/s] 62%|######1   | 16/26 [00:00<00:00, 35.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.52it/s] 81%|########  | 21/26 [00:00<00:00, 35.01it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]100%|##########| 26/26 [00:00<00:00, 30.05it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.88 (  0.88)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.329 (0.329)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.356 (0.396)	test_acc   0.84 (  0.84)	test_minacc   0.12 (  0.07)	test_majacc   0.97 (  0.98)	Loss_d 0.356 (0.396)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.12 (  0.07)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.331 (0.388)	test_acc   0.87 (  0.84)	test_minacc   0.14 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.331 (0.388)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.14 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  26/  26]	Loss 0.300 (0.379)	test_acc   0.88 (  0.85)	test_minacc   0.18 (  0.08)	test_majacc   0.99 (  0.98)	Loss_d 0.300 (0.379)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.18 (  0.08)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.74it/s]
Test: [  0/  1]	Loss 1.762 (1.762)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.762 (1.762)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.762 (1.762)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.762 (1.762)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Overall Timing[  3/  1]	epoch_time 0.0521 (0.0544)	validation_time 0.0004 (0.0021)	train_time 0.0517 (0.0515)
record: (train_acc, test_acc) (0.8466000238656998, 0.1469999998807907)
last accs (train_acc, test_acc) (0.8476000242233276, 0.13900001347064972)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 15%|#5        | 4/26 [00:00<00:01, 18.15it/s] 27%|##6       | 7/26 [00:00<00:00, 21.37it/s] 38%|###8      | 10/26 [00:00<00:00, 24.40it/s] 50%|#####     | 13/26 [00:00<00:00, 26.22it/s] 62%|######1   | 16/26 [00:00<00:00, 27.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.00it/s] 88%|########8 | 23/26 [00:00<00:00, 28.43it/s]100%|##########| 26/26 [00:01<00:00, 24.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.612 (1.981)	train_nll   0.31 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm   1.30 (  1.60)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 5.3820 (4.9067)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 23%|##3       | 6/26 [00:00<00:00, 28.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.99it/s] 42%|####2     | 11/26 [00:00<00:00, 35.81it/s] 62%|######1   | 16/26 [00:00<00:00, 38.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.73it/s] 81%|########  | 21/26 [00:00<00:00, 39.63it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]100%|##########| 26/26 [00:00<00:00, 34.36it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.98)	Loss_d 0.321 (0.321)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.368 (0.400)	test_acc   0.84 (  0.84)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.368 (0.400)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.335 (0.381)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.335 (0.381)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.264 (0.370)	test_acc   0.87 (  0.85)	test_minacc   0.12 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.264 (0.370)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.12 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.86it/s]
Test: [  0/  1]	Loss 1.900 (1.900)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.900 (1.900)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.900 (1.900)	test_acc   0.17 (  0.17)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.900 (1.900)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0454 (0.0526)	validation_time 0.0005 (0.0018)	train_time 0.0448 (0.0502)
record: (train_acc, test_acc) (0.8538000234365464, 0.16600000858306885)
last accs (train_acc, test_acc) (0.8538000234365464, 0.16600000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.88it/s] 23%|##3       | 6/26 [00:00<00:01, 19.64it/s] 35%|###4      | 9/26 [00:00<00:00, 22.98it/s] 46%|####6     | 12/26 [00:00<00:00, 25.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.63it/s] 69%|######9   | 18/26 [00:00<00:00, 27.66it/s] 85%|########4 | 22/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:00<00:00, 31.14it/s]100%|##########| 26/26 [00:01<00:00, 25.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.139 (1.434)	train_nll   0.27 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   0.87 (  1.06)	train_acc   0.88 (  0.85)	train_minacc   0.24 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0178 (5.3776)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 23%|##3       | 6/26 [00:00<00:00, 30.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.35it/s] 42%|####2     | 11/26 [00:00<00:00, 37.72it/s] 62%|######1   | 16/26 [00:00<00:00, 41.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.52it/s] 81%|########  | 21/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]
Test: [   0/  26]	Loss 0.294 (0.294)	test_acc   0.88 (  0.88)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.294 (0.294)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.335 (0.367)	test_acc   0.85 (  0.85)	test_minacc   0.13 (  0.15)	test_majacc   0.98 (  0.97)	Loss_d 0.335 (0.367)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.13 (  0.15)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.309 (0.350)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.97)	Loss_d 0.309 (0.350)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.261 (0.340)	test_acc   0.89 (  0.85)	test_minacc   0.29 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.261 (0.340)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.29 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 1.760 (1.760)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 1.760 (1.760)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.760 (1.760)	test_acc   0.27 (  0.27)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 1.760 (1.760)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0446 (0.0512)	validation_time 0.0004 (0.0015)	train_time 0.0442 (0.0492)
record: (train_acc, test_acc) (0.8541000254154205, 0.2710000276565552)
last accs (train_acc, test_acc) (0.8541000254154205, 0.2710000276565552)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.76it/s] 15%|#5        | 4/26 [00:00<00:01, 15.76it/s] 31%|###       | 8/26 [00:00<00:00, 23.01it/s] 42%|####2     | 11/26 [00:00<00:00, 24.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.56it/s] 69%|######9   | 18/26 [00:00<00:00, 27.52it/s] 81%|########  | 21/26 [00:00<00:00, 27.91it/s] 96%|#########6| 25/26 [00:00<00:00, 28.61it/s]100%|##########| 26/26 [00:01<00:00, 24.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.853 (1.081)	train_nll   0.26 (  0.36)	train_penalty   0.01 (  0.03)	weight_norm   0.59 (  0.72)	train_acc   0.89 (  0.85)	train_minacc   0.41 (  0.14)	train_majacc   0.96 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2339 (6.4196)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 23%|##3       | 6/26 [00:00<00:00, 27.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.24it/s] 42%|####2     | 11/26 [00:00<00:00, 35.13it/s] 65%|######5   | 17/26 [00:00<00:00, 39.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.61it/s] 85%|########4 | 22/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 34.47it/s]
Test: [   0/  26]	Loss 0.296 (0.296)	test_acc   0.86 (  0.86)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 0.296 (0.296)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.327 (0.362)	test_acc   0.86 (  0.85)	test_minacc   0.38 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 0.327 (0.362)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.38 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  20/  26]	Loss 0.313 (0.349)	test_acc   0.84 (  0.85)	test_minacc   0.25 (  0.33)	test_majacc   0.93 (  0.94)	Loss_d 0.313 (0.349)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.25 (  0.33)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.250 (0.337)	test_acc   0.89 (  0.85)	test_minacc   0.47 (  0.35)	test_majacc   0.96 (  0.94)	Loss_d 0.250 (0.337)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.47 (  0.35)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.44it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.93 (  0.93)	Loss_d 1.673 (1.673)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.57 (  0.57)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.93 (  0.93)	Loss_d 1.673 (1.673)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.57 (  0.57)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0433 (0.0501)	validation_time 0.0003 (0.0014)	train_time 0.0430 (0.0483)
record: (train_acc, test_acc) (0.8525000253915787, 0.39500001072883606)
last accs (train_acc, test_acc) (0.8525000253915787, 0.39500001072883606)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 15%|#5        | 4/26 [00:00<00:01, 17.07it/s] 27%|##6       | 7/26 [00:00<00:00, 21.29it/s] 38%|###8      | 10/26 [00:00<00:00, 23.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.78it/s] 65%|######5   | 17/26 [00:00<00:00, 27.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.62it/s] 88%|########8 | 23/26 [00:00<00:00, 28.17it/s]100%|##########| 26/26 [00:01<00:00, 24.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.004 (0.630)	train_nll   0.50 (  0.39)	train_penalty   0.00 (  0.03)	weight_norm   0.45 (  0.50)	train_acc   0.74 (  0.83)	train_minacc   0.74 (  0.23)	train_majacc   0.75 (  0.94)	train_corr   0.00 (  0.00)	l1 8.1878 (7.7150)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 23%|##3       | 6/26 [00:00<00:00, 28.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.45it/s] 42%|####2     | 11/26 [00:00<00:00, 36.54it/s] 62%|######1   | 16/26 [00:00<00:00, 41.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.28it/s] 81%|########  | 21/26 [00:00<00:00, 39.37it/s]100%|##########| 26/26 [00:00<00:00, 42.13it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]
Test: [   0/  26]	Loss 0.554 (0.554)	test_acc   0.71 (  0.71)	test_minacc   0.59 (  0.59)	test_majacc   0.73 (  0.73)	Loss_d 0.554 (0.554)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.541 (0.565)	test_acc   0.73 (  0.71)	test_minacc   0.73 (  0.58)	test_majacc   0.72 (  0.73)	Loss_d 0.541 (0.565)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.73 (  0.58)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.45 (  0.49)
Test: [  20/  26]	Loss 0.576 (0.560)	test_acc   0.70 (  0.71)	test_minacc   0.61 (  0.59)	test_majacc   0.71 (  0.73)	Loss_d 0.576 (0.560)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.71 (  0.73)	test_corr_d   0.42 (  0.48)
Test: [  26/  26]	Loss 0.509 (0.554)	test_acc   0.74 (  0.71)	test_minacc   0.74 (  0.60)	test_majacc   0.75 (  0.73)	Loss_d 0.509 (0.554)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.74 (  0.60)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.49 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.770 (0.770)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.75 (  0.75)	Loss_d 0.770 (0.770)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.770 (0.770)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.75 (  0.75)	Loss_d 0.770 (0.770)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.01 (  0.01)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/193/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0480 (0.0498)	validation_time 0.0004 (0.0012)	train_time 0.0476 (0.0482)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 15%|#5        | 4/26 [00:00<00:01, 20.67it/s] 31%|###       | 8/26 [00:00<00:00, 26.17it/s] 46%|####6     | 12/26 [00:00<00:00, 28.55it/s] 62%|######1   | 16/26 [00:00<00:00, 29.41it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.73it/s] 88%|########8 | 23/26 [00:00<00:00, 29.47it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.69 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.47)	train_acc   0.44 (  0.55)	train_minacc   0.41 (  0.62)	train_majacc   0.44 (  0.54)	train_corr   0.00 (  0.00)	l1 7.9304 (8.0511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.13it/s] 12%|#1        | 3/26 [00:00<00:03,  6.07it/s] 31%|###       | 8/26 [00:00<00:01, 16.66it/s]                                               31%|###       | 8/26 [00:00<00:01, 16.66it/s] 46%|####6     | 12/26 [00:00<00:00, 21.97it/s] 65%|######5   | 17/26 [00:00<00:00, 29.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 29.28it/s] 85%|########4 | 22/26 [00:01<00:00, 31.83it/s]100%|##########| 26/26 [00:01<00:00, 22.35it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.41 (  0.41)	test_majacc   0.45 (  0.45)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.685 (0.686)	test_acc   0.48 (  0.47)	test_minacc   0.45 (  0.51)	test_majacc   0.48 (  0.46)	Loss_d 0.685 (0.686)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.48 (  0.46)	test_corr_d   0.12 (  0.15)
Test: [  20/  26]	Loss 0.688 (0.685)	test_acc   0.46 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.47)	Loss_d 0.688 (0.685)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.47)	test_corr_d  -0.00 (  0.13)
Test: [  26/  26]	Loss 0.685 (0.685)	test_acc   0.45 (  0.48)	test_minacc   0.38 (  0.53)	test_majacc   0.46 (  0.47)	Loss_d 0.685 (0.685)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.38 (  0.53)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 ( -0.12)
Overall Timing[  8/  1]	epoch_time 0.0465 (0.0495)	validation_time 0.0006 (0.0012)	train_time 0.0458 (0.0479)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.47870000755786896, 0.5570000410079956)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 15%|#5        | 4/26 [00:00<00:01, 17.41it/s] 27%|##6       | 7/26 [00:00<00:00, 19.20it/s] 42%|####2     | 11/26 [00:00<00:00, 23.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.82it/s] 88%|########8 | 23/26 [00:00<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 23.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.44 (  0.48)	train_minacc   0.41 (  0.50)	train_majacc   0.45 (  0.48)	train_corr   0.00 (  0.00)	l1 7.8842 (7.9005)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 23%|##3       | 6/26 [00:00<00:00, 27.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.02it/s] 42%|####2     | 11/26 [00:00<00:00, 35.15it/s] 62%|######1   | 16/26 [00:00<00:00, 39.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.07it/s] 81%|########  | 21/26 [00:00<00:00, 37.66it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]100%|##########| 26/26 [00:00<00:00, 33.56it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.691)	test_acc   0.49 (  0.48)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.47)	Loss_d 0.692 (0.691)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.05 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.42 (  0.47)	test_minacc   0.47 (  0.50)	test_majacc   0.41 (  0.47)	Loss_d 0.693 (0.691)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.41 (  0.47)	test_corr_d  -0.06 (  0.06)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.44 (  0.47)	test_minacc   0.38 (  0.51)	test_majacc   0.44 (  0.47)	Loss_d 0.692 (0.691)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.38 (  0.51)	test_majacc_d   0.44 (  0.47)	test_corr_d   0.05 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.97it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Overall Timing[  9/  1]	epoch_time 0.0447 (0.0490)	validation_time 0.0005 (0.0011)	train_time 0.0442 (0.0476)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.47200000670552256, 0.5190000534057617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.39it/s] 19%|#9        | 5/26 [00:00<00:00, 21.71it/s] 31%|###       | 8/26 [00:00<00:00, 25.07it/s] 42%|####2     | 11/26 [00:00<00:00, 26.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.33it/s] 65%|######5   | 17/26 [00:00<00:00, 27.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.26it/s] 92%|#########2| 24/26 [00:00<00:00, 28.51it/s]100%|##########| 26/26 [00:01<00:00, 24.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.52 (  0.47)	train_minacc   0.38 (  0.52)	train_majacc   0.54 (  0.46)	train_corr   0.00 (  0.00)	l1 7.8759 (7.8793)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 27%|##6       | 7/26 [00:00<00:00, 27.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.82it/s] 46%|####6     | 12/26 [00:00<00:00, 34.97it/s] 65%|######5   | 17/26 [00:00<00:00, 35.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.24it/s] 85%|########4 | 22/26 [00:00<00:00, 39.29it/s]100%|##########| 26/26 [00:00<00:00, 32.49it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.56 (  0.54)	test_minacc   0.55 (  0.53)	test_majacc   0.56 (  0.55)	Loss_d 0.691 (0.690)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.07 (  0.12)
Test: [  20/  26]	Loss 0.693 (0.690)	test_acc   0.46 (  0.54)	test_minacc   0.57 (  0.52)	test_majacc   0.44 (  0.54)	Loss_d 0.693 (0.690)	test_acc_d   0.46 (  0.54)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.44 (  0.54)	test_corr_d  -0.05 (  0.10)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.51 (  0.53)	test_minacc   0.38 (  0.52)	test_majacc   0.53 (  0.54)	Loss_d 0.691 (0.690)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.38 (  0.52)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.10 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 10/  1]	epoch_time 0.0441 (0.0486)	validation_time 0.0003 (0.0010)	train_time 0.0438 (0.0472)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5345000148415565, 0.5139999985694885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 15%|#5        | 4/26 [00:00<00:01, 16.77it/s] 27%|##6       | 7/26 [00:00<00:00, 21.86it/s] 38%|###8      | 10/26 [00:00<00:00, 24.76it/s] 50%|#####     | 13/26 [00:00<00:00, 26.42it/s] 62%|######1   | 16/26 [00:00<00:00, 27.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.72it/s] 88%|########8 | 23/26 [00:00<00:00, 28.78it/s]100%|##########| 26/26 [00:01<00:00, 24.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.58 (  0.50)	train_minacc   0.44 (  0.50)	train_majacc   0.60 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8744 (7.8756)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 23%|##3       | 6/26 [00:00<00:00, 24.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.49it/s] 42%|####2     | 11/26 [00:00<00:00, 32.15it/s] 62%|######1   | 16/26 [00:00<00:00, 38.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.15it/s] 81%|########  | 21/26 [00:00<00:00, 37.48it/s]100%|##########| 26/26 [00:00<00:00, 40.88it/s]100%|##########| 26/26 [00:00<00:00, 32.32it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.59 (  0.59)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.690 (0.689)	test_acc   0.58 (  0.61)	test_minacc   0.52 (  0.54)	test_majacc   0.59 (  0.62)	Loss_d 0.690 (0.689)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.13 (  0.18)
Test: [  20/  26]	Loss 0.692 (0.690)	test_acc   0.54 (  0.60)	test_minacc   0.55 (  0.53)	test_majacc   0.54 (  0.61)	Loss_d 0.692 (0.690)	test_acc_d   0.54 (  0.60)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.54 (  0.61)	test_corr_d   0.01 (  0.17)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.61 (  0.59)	test_minacc   0.44 (  0.52)	test_majacc   0.63 (  0.60)	Loss_d 0.690 (0.690)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.17 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 11/  1]	epoch_time 0.0450 (0.0483)	validation_time 0.0004 (0.0010)	train_time 0.0446 (0.0470)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5927000072598457, 0.49000000953674316)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.92it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 31%|###       | 8/26 [00:00<00:00, 25.14it/s] 42%|####2     | 11/26 [00:00<00:00, 26.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.45it/s] 88%|########8 | 23/26 [00:00<00:00, 30.45it/s]100%|##########| 26/26 [00:00<00:00, 26.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.54 (  0.52)	train_minacc   0.41 (  0.48)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8724 (7.8738)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.11it/s] 31%|###       | 8/26 [00:00<00:00, 37.82it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.82it/s] 50%|#####     | 13/26 [00:00<00:00, 41.77it/s] 69%|######9   | 18/26 [00:00<00:00, 42.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.31it/s] 88%|########8 | 23/26 [00:00<00:00, 41.36it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.61 (  0.61)	Loss_d 0.690 (0.690)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.691 (0.690)	test_acc   0.56 (  0.60)	test_minacc   0.53 (  0.53)	test_majacc   0.57 (  0.61)	Loss_d 0.691 (0.690)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.57 (  0.61)	test_corr_d   0.12 (  0.16)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.53 (  0.58)	test_minacc   0.43 (  0.51)	test_majacc   0.54 (  0.59)	Loss_d 0.693 (0.691)	test_acc_d   0.53 (  0.58)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.54 (  0.59)	test_corr_d   0.02 (  0.14)
Test: [  26/  26]	Loss 0.691 (0.691)	test_acc   0.57 (  0.58)	test_minacc   0.44 (  0.50)	test_majacc   0.59 (  0.59)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.15 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.74it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.01 (  0.01)
Overall Timing[ 12/  1]	epoch_time 0.0428 (0.0478)	validation_time 0.0004 (0.0009)	train_time 0.0424 (0.0466)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5771000075936318, 0.4750000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 35%|###4      | 9/26 [00:00<00:00, 24.82it/s] 50%|#####     | 13/26 [00:00<00:00, 27.66it/s] 65%|######5   | 17/26 [00:00<00:00, 29.59it/s] 81%|########  | 21/26 [00:00<00:00, 30.52it/s] 96%|#########6| 25/26 [00:00<00:00, 31.22it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.54 (  0.52)	train_minacc   0.41 (  0.47)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8694 (7.8708)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.01it/s] 31%|###       | 8/26 [00:00<00:00, 36.20it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.20it/s] 50%|#####     | 13/26 [00:00<00:00, 39.81it/s] 69%|######9   | 18/26 [00:00<00:00, 42.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.08it/s] 88%|########8 | 23/26 [00:00<00:00, 43.38it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.57)	test_minacc   0.53 (  0.50)	test_majacc   0.52 (  0.58)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.52 (  0.58)	test_corr_d   0.04 (  0.07)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.43 (  0.47)	test_majacc   0.53 (  0.55)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.53 (  0.55)	test_corr_d  -0.01 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.44 (  0.47)	test_majacc   0.58 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.58 (  0.56)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Overall Timing[ 13/  1]	epoch_time 0.0394 (0.0472)	validation_time 0.0003 (0.0009)	train_time 0.0390 (0.0461)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5426000092327595, 0.4490000307559967)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 15%|#5        | 4/26 [00:00<00:01, 15.70it/s] 27%|##6       | 7/26 [00:00<00:00, 20.84it/s] 38%|###8      | 10/26 [00:00<00:00, 23.63it/s] 50%|#####     | 13/26 [00:00<00:00, 25.29it/s] 62%|######1   | 16/26 [00:00<00:00, 26.50it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.57it/s] 92%|#########2| 24/26 [00:00<00:00, 29.88it/s]100%|##########| 26/26 [00:01<00:00, 24.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.49 (  0.52)	train_minacc   0.35 (  0.47)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8665 (7.8675)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.18it/s]  8%|7         | 2/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 20.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 20.78it/s] 46%|####6     | 12/26 [00:00<00:00, 29.54it/s] 65%|######5   | 17/26 [00:00<00:00, 35.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.05it/s] 85%|########4 | 22/26 [00:00<00:00, 36.00it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.53)	test_minacc   0.52 (  0.47)	test_majacc   0.52 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.52 (  0.47)	test_majacc_d   0.52 (  0.54)	test_corr_d  -0.01 (  0.00)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.49 (  0.51)	test_minacc   0.41 (  0.45)	test_majacc   0.50 (  0.52)	Loss_d 0.695 (0.694)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.41 (  0.45)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.51)	test_minacc   0.41 (  0.45)	test_majacc   0.55 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.41 (  0.45)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.00 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Overall Timing[ 14/  1]	epoch_time 0.0410 (0.0468)	validation_time 0.0003 (0.0009)	train_time 0.0407 (0.0457)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5116000132262707, 0.44200003147125244)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 19%|#9        | 5/26 [00:00<00:01, 15.75it/s] 35%|###4      | 9/26 [00:00<00:00, 21.47it/s] 50%|#####     | 13/26 [00:00<00:00, 24.99it/s] 65%|######5   | 17/26 [00:00<00:00, 27.50it/s] 81%|########  | 21/26 [00:00<00:00, 29.12it/s] 96%|#########6| 25/26 [00:00<00:00, 30.32it/s]100%|##########| 26/26 [00:01<00:00, 24.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.48 (  0.52)	train_minacc   0.44 (  0.47)	train_majacc   0.49 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8642 (7.8649)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.61it/s] 27%|##6       | 7/26 [00:00<00:00, 35.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.52it/s] 46%|####6     | 12/26 [00:00<00:00, 40.28it/s] 65%|######5   | 17/26 [00:00<00:00, 42.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.51it/s] 85%|########4 | 22/26 [00:00<00:00, 43.53it/s]100%|##########| 26/26 [00:00<00:00, 38.27it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.45 (  0.47)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.50 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.46 (  0.50)	test_minacc   0.37 (  0.45)	test_majacc   0.47 (  0.50)	Loss_d 0.695 (0.694)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.37 (  0.45)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.41 (  0.45)	test_majacc   0.51 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.41 (  0.45)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.00 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Overall Timing[ 15/  1]	epoch_time 0.0425 (0.0466)	validation_time 0.0004 (0.0008)	train_time 0.0420 (0.0455)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4958000112473965, 0.4520000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 19%|#9        | 5/26 [00:00<00:01, 19.80it/s] 35%|###4      | 9/26 [00:00<00:00, 24.58it/s] 50%|#####     | 13/26 [00:00<00:00, 27.05it/s] 65%|######5   | 17/26 [00:00<00:00, 28.19it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 96%|#########6| 25/26 [00:00<00:00, 28.87it/s]100%|##########| 26/26 [00:01<00:00, 25.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.50 (  0.52)	train_minacc   0.44 (  0.46)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 7.8627 (7.8631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 27%|##6       | 7/26 [00:00<00:00, 34.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.43it/s] 46%|####6     | 12/26 [00:00<00:00, 40.15it/s] 65%|######5   | 17/26 [00:00<00:00, 42.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.59it/s] 85%|########4 | 22/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 37.63it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.50)	test_minacc   0.35 (  0.46)	test_majacc   0.47 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.47 (  0.50)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.50)	test_minacc   0.44 (  0.46)	test_majacc   0.52 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.01 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 31.46it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 16/  1]	epoch_time 0.0460 (0.0465)	validation_time 0.0008 (0.0008)	train_time 0.0452 (0.0455)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.49510001349449156, 0.4570000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 15%|#5        | 4/26 [00:00<00:01, 19.47it/s] 27%|##6       | 7/26 [00:00<00:00, 23.74it/s] 42%|####2     | 11/26 [00:00<00:00, 26.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.60it/s] 65%|######5   | 17/26 [00:00<00:00, 27.49it/s] 81%|########  | 21/26 [00:00<00:00, 28.95it/s] 96%|#########6| 25/26 [00:00<00:00, 29.76it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.51 (  0.52)	train_minacc   0.44 (  0.47)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8618 (7.8620)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 23%|##3       | 6/26 [00:00<00:00, 31.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.68it/s] 42%|####2     | 11/26 [00:00<00:00, 36.46it/s] 65%|######5   | 17/26 [00:00<00:00, 39.84it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.84it/s] 85%|########4 | 22/26 [00:00<00:00, 42.21it/s]100%|##########| 26/26 [00:00<00:00, 36.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.35 (  0.46)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.44 (  0.46)	test_majacc   0.53 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Overall Timing[ 17/  1]	epoch_time 0.0413 (0.0462)	validation_time 0.0004 (0.0008)	train_time 0.0409 (0.0452)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5002000114917755, 0.46000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 15%|#5        | 4/26 [00:00<00:01, 15.75it/s] 27%|##6       | 7/26 [00:00<00:00, 20.78it/s] 38%|###8      | 10/26 [00:00<00:00, 23.65it/s] 50%|#####     | 13/26 [00:00<00:00, 25.57it/s] 65%|######5   | 17/26 [00:00<00:00, 27.17it/s] 81%|########  | 21/26 [00:00<00:00, 27.97it/s] 96%|#########6| 25/26 [00:01<00:00, 28.86it/s]100%|##########| 26/26 [00:01<00:00, 23.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.52 (  0.51)	train_minacc   0.44 (  0.47)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8612 (7.8613)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 23%|##3       | 6/26 [00:00<00:00, 26.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.26it/s] 42%|####2     | 11/26 [00:00<00:00, 34.79it/s] 62%|######1   | 16/26 [00:00<00:00, 39.47it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.47it/s] 81%|########  | 21/26 [00:00<00:00, 38.51it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.43 (  0.47)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.43 (  0.47)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.35 (  0.46)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.46)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.54it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 18/  1]	epoch_time 0.0457 (0.0462)	validation_time 0.0003 (0.0008)	train_time 0.0454 (0.0452)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5028000116348267, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.24it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.62it/s] 65%|######5   | 17/26 [00:00<00:00, 29.45it/s] 81%|########  | 21/26 [00:00<00:00, 30.11it/s] 96%|#########6| 25/26 [00:00<00:00, 30.81it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.52 (  0.51)	train_minacc   0.44 (  0.47)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8606 (7.8607)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 23%|##3       | 6/26 [00:00<00:00, 31.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.11it/s] 42%|####2     | 11/26 [00:00<00:00, 37.66it/s] 62%|######1   | 16/26 [00:00<00:00, 41.57it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.57it/s] 81%|########  | 21/26 [00:00<00:00, 39.54it/s]100%|##########| 26/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 35.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.53)	test_minacc   0.43 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.33 (  0.46)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.33 (  0.46)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.44 (  0.46)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.25it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 19/  1]	epoch_time 0.0412 (0.0460)	validation_time 0.0006 (0.0008)	train_time 0.0406 (0.0450)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5052000114917755, 0.46400001645088196)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 19%|#9        | 5/26 [00:00<00:01, 18.19it/s] 35%|###4      | 9/26 [00:00<00:00, 23.55it/s] 50%|#####     | 13/26 [00:00<00:00, 26.94it/s] 65%|######5   | 17/26 [00:00<00:00, 28.78it/s] 81%|########  | 21/26 [00:00<00:00, 30.42it/s] 96%|#########6| 25/26 [00:00<00:00, 30.89it/s]100%|##########| 26/26 [00:01<00:00, 25.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.52 (  0.51)	train_minacc   0.44 (  0.47)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8601 (7.8602)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 19%|#9        | 5/26 [00:00<00:00, 25.87it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.87it/s] 42%|####2     | 11/26 [00:00<00:00, 38.92it/s] 62%|######1   | 16/26 [00:00<00:00, 40.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.58it/s] 81%|########  | 21/26 [00:00<00:00, 41.41it/s]100%|##########| 26/26 [00:00<00:00, 43.46it/s]100%|##########| 26/26 [00:00<00:00, 35.93it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.35 (  0.46)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.35 (  0.46)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.46)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 20/  1]	epoch_time 0.0408 (0.0457)	validation_time 0.0004 (0.0008)	train_time 0.0403 (0.0448)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5034000092744827, 0.46700000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.72it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.99it/s] 50%|#####     | 13/26 [00:00<00:00, 27.91it/s] 65%|######5   | 17/26 [00:00<00:00, 29.03it/s] 81%|########  | 21/26 [00:00<00:00, 29.57it/s] 96%|#########6| 25/26 [00:00<00:00, 30.04it/s]100%|##########| 26/26 [00:00<00:00, 26.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.50)	train_acc   0.52 (  0.51)	train_minacc   0.41 (  0.47)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8596 (7.8597)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 23%|##3       | 6/26 [00:00<00:00, 29.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.83it/s] 42%|####2     | 11/26 [00:00<00:00, 36.73it/s] 65%|######5   | 17/26 [00:00<00:00, 41.18it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.18it/s] 88%|########8 | 23/26 [00:00<00:00, 46.35it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.42 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.35 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.46)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.46)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0453 (0.0457)	validation_time 0.0005 (0.0007)	train_time 0.0448 (0.0448)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5023000093400478, 0.4650000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.04it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 35%|###4      | 9/26 [00:00<00:00, 27.06it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 29.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.90it/s] 88%|########8 | 23/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:00<00:00, 26.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.51)	train_minacc   0.41 (  0.47)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8591 (7.8591)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.40it/s] 23%|##3       | 6/26 [00:00<00:00, 21.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.69it/s] 42%|####2     | 11/26 [00:00<00:00, 30.59it/s] 62%|######1   | 16/26 [00:00<00:00, 36.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.44it/s] 81%|########  | 21/26 [00:00<00:00, 36.40it/s]100%|##########| 26/26 [00:00<00:00, 31.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.40 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.35 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.47)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 22/  1]	epoch_time 0.0430 (0.0456)	validation_time 0.0003 (0.0007)	train_time 0.0426 (0.0447)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5025000070035458, 0.46700000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 15%|#5        | 4/26 [00:00<00:01, 15.81it/s] 27%|##6       | 7/26 [00:00<00:00, 21.05it/s] 42%|####2     | 11/26 [00:00<00:00, 24.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.41it/s] 65%|######5   | 17/26 [00:00<00:00, 27.38it/s] 81%|########  | 21/26 [00:00<00:00, 28.62it/s] 96%|#########6| 25/26 [00:00<00:00, 29.42it/s]100%|##########| 26/26 [00:01<00:00, 24.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.8587846755981445
set z to 7.465845441818237
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.51)	train_minacc   0.41 (  0.47)	train_majacc   0.54 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8586 (7.8587)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 23%|##3       | 6/26 [00:00<00:00, 30.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.76it/s] 42%|####2     | 11/26 [00:00<00:00, 31.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.39it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.00it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.00it/s] 96%|#########6| 25/26 [00:00<00:00, 40.67it/s]100%|##########| 26/26 [00:00<00:00, 34.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.40 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.37 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.44 (  0.47)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 23/  1]	epoch_time 0.0419 (0.0454)	validation_time 0.0007 (0.0007)	train_time 0.0412 (0.0445)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.5013000105619431, 0.47300001978874207)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.19it/s] 23%|##3       | 6/26 [00:00<00:00, 28.01it/s] 35%|###4      | 9/26 [00:00<00:00, 28.13it/s] 46%|####6     | 12/26 [00:00<00:00, 28.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.65it/s] 88%|########8 | 23/26 [00:00<00:00, 30.12it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.51)	train_minacc   0.41 (  0.47)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8582 (7.8582)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.99it/s] 31%|###       | 8/26 [00:00<00:00, 28.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.88it/s] 50%|#####     | 13/26 [00:00<00:00, 35.37it/s] 69%|######9   | 18/26 [00:00<00:00, 40.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.01it/s] 88%|########8 | 23/26 [00:00<00:00, 40.27it/s]100%|##########| 26/26 [00:00<00:00, 34.75it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.40 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.47)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.41 (  0.47)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.06it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 24/  1]	epoch_time 0.0422 (0.0453)	validation_time 0.0003 (0.0007)	train_time 0.0419 (0.0444)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4993000094294548, 0.48100003600120544)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 19%|#9        | 5/26 [00:00<00:01, 18.96it/s] 35%|###4      | 9/26 [00:00<00:00, 23.88it/s] 50%|#####     | 13/26 [00:00<00:00, 26.38it/s] 65%|######5   | 17/26 [00:00<00:00, 27.65it/s] 81%|########  | 21/26 [00:00<00:00, 28.46it/s] 96%|#########6| 25/26 [00:00<00:00, 29.10it/s]100%|##########| 26/26 [00:01<00:00, 24.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.52 (  0.51)	train_minacc   0.41 (  0.47)	train_majacc   0.53 (  0.52)	train_corr   0.00 (  0.00)	l1 7.8578 (7.8578)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.19it/s] 31%|###       | 8/26 [00:00<00:00, 36.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.09it/s] 50%|#####     | 13/26 [00:00<00:00, 38.89it/s] 69%|######9   | 18/26 [00:00<00:00, 42.21it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.21it/s] 88%|########8 | 23/26 [00:00<00:00, 40.64it/s]100%|##########| 26/26 [00:00<00:00, 36.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.40 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.39 (  0.47)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.49 (  0.50)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.41 (  0.47)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.65it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 25/  1]	epoch_time 0.0437 (0.0452)	validation_time 0.0015 (0.0007)	train_time 0.0421 (0.0444)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4970000151693821, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.12it/s] 19%|#9        | 5/26 [00:00<00:00, 24.11it/s] 35%|###4      | 9/26 [00:00<00:00, 27.56it/s] 50%|#####     | 13/26 [00:00<00:00, 29.26it/s] 65%|######5   | 17/26 [00:00<00:00, 29.89it/s] 81%|########  | 21/26 [00:00<00:00, 29.97it/s] 92%|#########2| 24/26 [00:00<00:00, 29.62it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.51 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8574 (7.8574)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.99it/s] 27%|##6       | 7/26 [00:00<00:00, 34.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.63it/s] 46%|####6     | 12/26 [00:00<00:00, 40.27it/s] 65%|######5   | 17/26 [00:00<00:00, 43.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.22it/s] 85%|########4 | 22/26 [00:00<00:00, 40.96it/s]100%|##########| 26/26 [00:00<00:00, 37.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.40 (  0.48)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.39 (  0.48)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.39 (  0.48)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.41 (  0.48)	test_majacc   0.54 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Overall Timing[ 26/  1]	epoch_time 0.0449 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0444)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4951000143289566, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.18it/s] 15%|#5        | 4/26 [00:00<00:01, 14.27it/s] 27%|##6       | 7/26 [00:00<00:00, 19.72it/s] 38%|###8      | 10/26 [00:00<00:00, 23.11it/s] 50%|#####     | 13/26 [00:00<00:00, 24.90it/s] 65%|######5   | 17/26 [00:00<00:00, 27.14it/s] 81%|########  | 21/26 [00:00<00:00, 28.53it/s] 92%|#########2| 24/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 23.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8570 (7.8570)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.50it/s] 27%|##6       | 7/26 [00:00<00:00, 34.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.08it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 42.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.39it/s] 85%|########4 | 22/26 [00:00<00:00, 41.02it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.38 (  0.48)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.39 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.41 (  0.47)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.78it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Overall Timing[ 27/  1]	epoch_time 0.0429 (0.0451)	validation_time 0.0007 (0.0007)	train_time 0.0423 (0.0443)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4913000110685825, 0.4880000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 12%|#1        | 3/26 [00:00<00:01, 12.54it/s] 23%|##3       | 6/26 [00:00<00:01, 19.29it/s] 35%|###4      | 9/26 [00:00<00:00, 22.91it/s] 50%|#####     | 13/26 [00:00<00:00, 25.73it/s] 65%|######5   | 17/26 [00:00<00:00, 27.17it/s] 81%|########  | 21/26 [00:00<00:00, 28.17it/s] 96%|#########6| 25/26 [00:01<00:00, 28.85it/s]100%|##########| 26/26 [00:01<00:00, 23.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8567 (7.8567)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.96it/s] 31%|###       | 8/26 [00:00<00:00, 31.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 31.07it/s] 50%|#####     | 13/26 [00:00<00:00, 36.59it/s] 69%|######9   | 18/26 [00:00<00:00, 40.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.08it/s] 88%|########8 | 23/26 [00:00<00:00, 38.99it/s]100%|##########| 26/26 [00:00<00:00, 35.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.38 (  0.48)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.04 ( -0.00)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.37 (  0.48)	test_majacc   0.48 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.37 (  0.48)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.41 (  0.47)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 28/  1]	epoch_time 0.0422 (0.0450)	validation_time 0.0004 (0.0007)	train_time 0.0418 (0.0442)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.48880000519752503, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.87it/s] 19%|#9        | 5/26 [00:00<00:00, 21.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.21it/s] 50%|#####     | 13/26 [00:00<00:00, 28.24it/s] 65%|######5   | 17/26 [00:00<00:00, 29.20it/s] 81%|########  | 21/26 [00:00<00:00, 29.60it/s] 96%|#########6| 25/26 [00:00<00:00, 30.00it/s]100%|##########| 26/26 [00:00<00:00, 26.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8563 (7.8563)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.97it/s] 23%|##3       | 6/26 [00:00<00:00, 32.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.05it/s] 42%|####2     | 11/26 [00:00<00:00, 37.79it/s] 62%|######1   | 16/26 [00:00<00:00, 41.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.37it/s] 81%|########  | 21/26 [00:00<00:00, 40.51it/s]100%|##########| 26/26 [00:00<00:00, 36.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.38 (  0.48)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.49)	test_minacc   0.37 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.52 (  0.49)	test_minacc   0.41 (  0.47)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.03 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.04it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 29/  1]	epoch_time 0.0408 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0403 (0.0441)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.48620000514388084, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.23it/s] 19%|#9        | 5/26 [00:00<00:00, 23.81it/s] 35%|###4      | 9/26 [00:00<00:00, 26.99it/s] 50%|#####     | 13/26 [00:00<00:00, 28.51it/s] 65%|######5   | 17/26 [00:00<00:00, 29.34it/s] 81%|########  | 21/26 [00:00<00:00, 29.94it/s] 96%|#########6| 25/26 [00:00<00:00, 30.65it/s]100%|##########| 26/26 [00:00<00:00, 27.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8559 (7.8559)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.23it/s] 27%|##6       | 7/26 [00:00<00:00, 24.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.47it/s] 50%|#####     | 13/26 [00:00<00:00, 34.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.44it/s] 96%|#########6| 25/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 32.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.38 (  0.48)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.04 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.37 (  0.47)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.41 (  0.47)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.03 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Overall Timing[ 30/  1]	epoch_time 0.0434 (0.0448)	validation_time 0.0004 (0.0007)	train_time 0.0429 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4841000083386898, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 15%|#5        | 4/26 [00:00<00:01, 18.97it/s] 27%|##6       | 7/26 [00:00<00:00, 23.25it/s] 42%|####2     | 11/26 [00:00<00:00, 26.69it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.03it/s] 88%|########8 | 23/26 [00:00<00:00, 29.43it/s]100%|##########| 26/26 [00:01<00:00, 25.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.51)	train_minacc   0.41 (  0.48)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8556 (7.8556)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.26it/s] 31%|###       | 8/26 [00:00<00:00, 36.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.99it/s] 50%|#####     | 13/26 [00:00<00:00, 39.77it/s] 69%|######9   | 18/26 [00:00<00:00, 40.76it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.76it/s] 88%|########8 | 23/26 [00:00<00:00, 42.79it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.38 (  0.48)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.03 ( -0.01)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.37 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.48)	test_minacc   0.41 (  0.47)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.03 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 31/  1]	epoch_time 0.0422 (0.0448)	validation_time 0.0003 (0.0007)	train_time 0.0418 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4813000106215477, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.09it/s] 15%|#5        | 4/26 [00:00<00:01, 12.92it/s] 27%|##6       | 7/26 [00:00<00:01, 18.09it/s] 38%|###8      | 10/26 [00:00<00:00, 21.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.97it/s] 69%|######9   | 18/26 [00:00<00:00, 27.17it/s] 85%|########4 | 22/26 [00:00<00:00, 28.55it/s]100%|##########| 26/26 [00:01<00:00, 29.40it/s]100%|##########| 26/26 [00:01<00:00, 22.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.50 (  0.50)	train_minacc   0.41 (  0.48)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8552 (7.8552)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.02it/s] 31%|###       | 8/26 [00:00<00:00, 38.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.77it/s] 50%|#####     | 13/26 [00:00<00:00, 41.37it/s] 69%|######9   | 18/26 [00:00<00:00, 42.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.01it/s] 88%|########8 | 23/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.40 (  0.48)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.03 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.37 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.48)	test_minacc   0.44 (  0.47)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.03 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 32/  1]	epoch_time 0.0455 (0.0448)	validation_time 0.0004 (0.0007)	train_time 0.0450 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4789000098109245, 0.4820000231266022)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 15%|#5        | 4/26 [00:00<00:01, 13.13it/s] 27%|##6       | 7/26 [00:00<00:01, 18.48it/s] 42%|####2     | 11/26 [00:00<00:00, 23.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.50it/s] 69%|######9   | 18/26 [00:00<00:00, 26.74it/s] 85%|########4 | 22/26 [00:00<00:00, 28.16it/s]100%|##########| 26/26 [00:01<00:00, 29.10it/s]100%|##########| 26/26 [00:01<00:00, 22.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.49 (  0.50)	train_minacc   0.41 (  0.48)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8549 (7.8548)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 23%|##3       | 6/26 [00:00<00:00, 23.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.49it/s] 42%|####2     | 11/26 [00:00<00:00, 32.19it/s] 62%|######1   | 16/26 [00:00<00:00, 37.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.30it/s] 81%|########  | 21/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]100%|##########| 26/26 [00:00<00:00, 31.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.40 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.37 (  0.47)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.48)	test_minacc   0.41 (  0.47)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.02 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.02it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 33/  1]	epoch_time 0.0435 (0.0447)	validation_time 0.0007 (0.0007)	train_time 0.0428 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4762000072300434, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 15%|#5        | 4/26 [00:00<00:01, 12.71it/s] 31%|###       | 8/26 [00:00<00:00, 19.61it/s] 42%|####2     | 11/26 [00:00<00:00, 22.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.20it/s] 88%|########8 | 23/26 [00:00<00:00, 28.36it/s]100%|##########| 26/26 [00:01<00:00, 23.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.49 (  0.50)	train_minacc   0.41 (  0.48)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 7.8545 (7.8545)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 19%|#9        | 5/26 [00:00<00:00, 22.09it/s] 38%|###8      | 10/26 [00:00<00:00, 33.15it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.73it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.73it/s] 96%|#########6| 25/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.46)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.40 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.37 (  0.47)	test_majacc   0.48 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.48 (  0.47)	test_corr_d  -0.05 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.49 (  0.47)	test_minacc   0.41 (  0.47)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.01it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 34/  1]	epoch_time 0.0446 (0.0447)	validation_time 0.0003 (0.0007)	train_time 0.0443 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4723000054657459, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 15%|#5        | 4/26 [00:00<00:01, 16.53it/s] 27%|##6       | 7/26 [00:00<00:00, 21.14it/s] 38%|###8      | 10/26 [00:00<00:00, 23.71it/s] 50%|#####     | 13/26 [00:00<00:00, 25.20it/s] 62%|######1   | 16/26 [00:00<00:00, 25.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.68it/s] 88%|########8 | 23/26 [00:00<00:00, 27.84it/s]100%|##########| 26/26 [00:01<00:00, 23.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.41 (  0.48)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8542 (7.8541)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 23.21it/s] 38%|###8      | 10/26 [00:00<00:00, 32.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.41it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.41it/s] 96%|#########6| 25/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 33.53it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.40 (  0.48)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.37 (  0.47)	test_majacc   0.49 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.49 (  0.47)	test_corr_d  -0.06 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.49 (  0.47)	test_minacc   0.41 (  0.47)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.02 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Overall Timing[ 35/  1]	epoch_time 0.0449 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.46930000564455987, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.68it/s] 23%|##3       | 6/26 [00:00<00:00, 25.88it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 46%|####6     | 12/26 [00:00<00:00, 27.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.89it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.41 (  0.48)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8538 (7.8537)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.16it/s] 23%|##3       | 6/26 [00:00<00:00, 21.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.16it/s] 42%|####2     | 11/26 [00:00<00:00, 27.46it/s] 62%|######1   | 16/26 [00:00<00:00, 34.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.20it/s] 81%|########  | 21/26 [00:00<00:00, 37.40it/s]100%|##########| 26/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.46 (  0.48)	test_minacc   0.42 (  0.48)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.02 ( -0.03)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.46)	test_minacc   0.37 (  0.47)	test_majacc   0.49 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.48 (  0.47)	test_minacc   0.41 (  0.47)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.694)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.75it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 36/  1]	epoch_time 0.0438 (0.0447)	validation_time 0.0004 (0.0007)	train_time 0.0433 (0.0440)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4657000059783459, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 28.17it/s] 65%|######5   | 17/26 [00:00<00:00, 29.50it/s] 81%|########  | 21/26 [00:00<00:00, 30.27it/s] 96%|#########6| 25/26 [00:00<00:00, 30.37it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8534 (7.8533)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.20it/s] 23%|##3       | 6/26 [00:00<00:00, 25.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.27it/s] 46%|####6     | 12/26 [00:00<00:00, 35.19it/s] 69%|######9   | 18/26 [00:00<00:00, 42.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.05it/s] 88%|########8 | 23/26 [00:00<00:00, 42.27it/s]100%|##########| 26/26 [00:00<00:00, 36.09it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.48)	test_minacc   0.43 (  0.48)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.02 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.46)	test_minacc   0.37 (  0.47)	test_majacc   0.48 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.48 (  0.46)	test_corr_d  -0.07 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.41 (  0.47)	test_majacc   0.50 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.50 (  0.46)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 37/  1]	epoch_time 0.0422 (0.0447)	validation_time 0.0003 (0.0006)	train_time 0.0419 (0.0439)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4638000039756298, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 15%|#5        | 4/26 [00:00<00:01, 16.88it/s] 27%|##6       | 7/26 [00:00<00:00, 21.98it/s] 42%|####2     | 11/26 [00:00<00:00, 25.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.71it/s] 88%|########8 | 23/26 [00:00<00:00, 29.94it/s]100%|##########| 26/26 [00:01<00:00, 25.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.48 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8530 (7.8529)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.12it/s] 12%|#1        | 3/26 [00:00<00:02,  9.63it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 33.85it/s] 81%|########  | 21/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 30.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.02 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.37 (  0.47)	test_majacc   0.47 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.37 (  0.47)	test_majacc_d   0.47 (  0.46)	test_corr_d  -0.07 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.41 (  0.47)	test_majacc   0.50 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.50 (  0.46)	test_corr_d   0.01 ( -0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.69it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 38/  1]	epoch_time 0.0447 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0442 (0.0439)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.46120000413060186, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.20it/s] 19%|#9        | 5/26 [00:00<00:01, 17.55it/s] 35%|###4      | 9/26 [00:00<00:00, 23.30it/s] 46%|####6     | 12/26 [00:00<00:00, 25.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.52it/s] 88%|########8 | 23/26 [00:00<00:00, 29.92it/s]100%|##########| 26/26 [00:01<00:00, 24.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.49 (  0.49)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8525 (7.8525)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 23%|##3       | 6/26 [00:00<00:00, 24.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.43it/s] 42%|####2     | 11/26 [00:00<00:00, 31.26it/s] 65%|######5   | 17/26 [00:00<00:00, 37.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.82it/s] 88%|########8 | 23/26 [00:00<00:00, 43.83it/s]100%|##########| 26/26 [00:00<00:00, 34.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.48)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.02 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.46)	test_minacc   0.35 (  0.47)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.08 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.41 (  0.48)	test_majacc   0.49 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.01 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Overall Timing[ 39/  1]	epoch_time 0.0404 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0438)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.46000000515580175, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.05it/s] 19%|#9        | 5/26 [00:00<00:01, 15.56it/s] 35%|###4      | 9/26 [00:00<00:00, 21.23it/s] 46%|####6     | 12/26 [00:00<00:00, 23.53it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.03it/s] 88%|########8 | 23/26 [00:00<00:00, 28.46it/s]100%|##########| 26/26 [00:01<00:00, 23.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8521 (7.8520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 23%|##3       | 6/26 [00:00<00:00, 32.53it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.53it/s] 42%|####2     | 11/26 [00:00<00:00, 38.84it/s] 62%|######1   | 16/26 [00:00<00:00, 40.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.70it/s] 81%|########  | 21/26 [00:00<00:00, 40.26it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]100%|##########| 26/26 [00:00<00:00, 35.94it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.48)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.02 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.45 (  0.46)	test_minacc   0.35 (  0.47)	test_majacc   0.46 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.08 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.46)	test_minacc   0.41 (  0.47)	test_majacc   0.48 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.48 (  0.45)	test_corr_d   0.00 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Overall Timing[ 40/  1]	epoch_time 0.0423 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0419 (0.0438)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4571000056564808, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 24.80it/s] 50%|#####     | 13/26 [00:00<00:00, 27.37it/s] 62%|######1   | 16/26 [00:00<00:00, 27.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.85it/s] 92%|#########2| 24/26 [00:00<00:00, 29.54it/s]100%|##########| 26/26 [00:01<00:00, 25.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8516 (7.8515)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.37it/s] 27%|##6       | 7/26 [00:00<00:00, 32.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.68it/s] 46%|####6     | 12/26 [00:00<00:00, 38.98it/s] 65%|######5   | 17/26 [00:00<00:00, 40.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.93it/s] 85%|########4 | 22/26 [00:00<00:00, 40.05it/s]100%|##########| 26/26 [00:00<00:00, 36.72it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.01 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.33 (  0.47)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.33 (  0.47)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.09 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.46)	test_minacc   0.41 (  0.47)	test_majacc   0.48 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.41 (  0.47)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.00 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.93it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Overall Timing[ 41/  1]	epoch_time 0.0407 (0.0444)	validation_time 0.0006 (0.0006)	train_time 0.0400 (0.0437)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.45570000341534617, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.92it/s] 15%|#5        | 4/26 [00:00<00:02, 10.79it/s] 27%|##6       | 7/26 [00:00<00:01, 16.32it/s] 38%|###8      | 10/26 [00:00<00:00, 20.16it/s] 50%|#####     | 13/26 [00:00<00:00, 22.61it/s] 62%|######1   | 16/26 [00:00<00:00, 24.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.77it/s] 88%|########8 | 23/26 [00:01<00:00, 27.42it/s]100%|##########| 26/26 [00:01<00:00, 20.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8511 (7.8510)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 23%|##3       | 6/26 [00:00<00:00, 30.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.40it/s] 42%|####2     | 11/26 [00:00<00:00, 37.58it/s] 62%|######1   | 16/26 [00:00<00:00, 41.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.05it/s] 81%|########  | 21/26 [00:00<00:00, 39.07it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.48)	test_majacc   0.48 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.01 ( -0.05)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.33 (  0.47)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.33 (  0.47)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.09 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.46)	test_minacc   0.41 (  0.48)	test_majacc   0.48 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.00 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.72it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.05 (  0.05)
Overall Timing[ 42/  1]	epoch_time 0.0449 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0437)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.45610000455379485, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 15%|#5        | 4/26 [00:00<00:01, 17.60it/s] 31%|###       | 8/26 [00:00<00:00, 24.05it/s] 42%|####2     | 11/26 [00:00<00:00, 25.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.65it/s] 65%|######5   | 17/26 [00:00<00:00, 27.28it/s] 81%|########  | 21/26 [00:00<00:00, 28.55it/s] 96%|#########6| 25/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 24.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8506 (7.8505)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.12it/s] 27%|##6       | 7/26 [00:00<00:00, 31.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.99it/s] 46%|####6     | 12/26 [00:00<00:00, 38.12it/s] 65%|######5   | 17/26 [00:00<00:00, 41.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.47it/s] 85%|########4 | 22/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.49)	test_majacc   0.48 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.01 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.44 (  0.45)	test_minacc   0.33 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.44 (  0.45)	test_minacc_d   0.33 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.10 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.45)	test_minacc   0.41 (  0.48)	test_majacc   0.48 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.00 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Overall Timing[ 43/  1]	epoch_time 0.0418 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0436)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4546000046432018, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.62it/s] 19%|#9        | 5/26 [00:00<00:01, 17.90it/s] 35%|###4      | 9/26 [00:00<00:00, 23.24it/s] 50%|#####     | 13/26 [00:00<00:00, 25.82it/s] 65%|######5   | 17/26 [00:00<00:00, 27.24it/s] 81%|########  | 21/26 [00:00<00:00, 28.43it/s] 96%|#########6| 25/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:01<00:00, 24.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8500 (7.8500)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.50it/s] 31%|###       | 8/26 [00:00<00:00, 36.39it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.39it/s] 50%|#####     | 13/26 [00:00<00:00, 40.55it/s] 69%|######9   | 18/26 [00:00<00:00, 43.02it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.02it/s] 88%|########8 | 23/26 [00:00<00:00, 40.51it/s]100%|##########| 26/26 [00:00<00:00, 37.89it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.47)	test_minacc   0.47 (  0.49)	test_majacc   0.48 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.00 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.43 (  0.45)	test_minacc   0.31 (  0.47)	test_majacc   0.45 (  0.45)	Loss_d 0.695 (0.694)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.31 (  0.47)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.10 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.45)	test_minacc   0.41 (  0.48)	test_majacc   0.48 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.01 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Overall Timing[ 44/  1]	epoch_time 0.0410 (0.0443)	validation_time 0.0003 (0.0006)	train_time 0.0407 (0.0436)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.452700005710125, 0.46700000762939453)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 35%|###4      | 9/26 [00:00<00:00, 24.61it/s] 50%|#####     | 13/26 [00:00<00:00, 26.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 81%|########  | 21/26 [00:00<00:00, 30.37it/s] 96%|#########6| 25/26 [00:00<00:00, 30.81it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.41 (  0.49)	train_majacc   0.48 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8494 (7.8494)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 23%|##3       | 6/26 [00:00<00:00, 30.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.46it/s] 42%|####2     | 11/26 [00:00<00:00, 37.31it/s] 62%|######1   | 16/26 [00:00<00:00, 37.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.50it/s] 81%|########  | 21/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 42.61it/s]100%|##########| 26/26 [00:00<00:00, 35.72it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.47)	test_minacc   0.47 (  0.49)	test_majacc   0.48 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.48 (  0.46)	test_corr_d   0.00 ( -0.06)
Test: [  20/  26]	Loss 0.695 (0.694)	test_acc   0.42 (  0.45)	test_minacc   0.31 (  0.47)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.694)	test_acc_d   0.42 (  0.45)	test_minacc_d   0.31 (  0.47)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.11 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.41 (  0.48)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.41 (  0.48)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.01 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.71it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Overall Timing[ 45/  1]	epoch_time 0.0407 (0.0442)	validation_time 0.0005 (0.0006)	train_time 0.0402 (0.0435)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4507000057399273, 0.4700000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 15%|#5        | 4/26 [00:00<00:01, 18.59it/s] 27%|##6       | 7/26 [00:00<00:00, 22.50it/s] 38%|###8      | 10/26 [00:00<00:00, 24.73it/s] 50%|#####     | 13/26 [00:00<00:00, 25.96it/s] 62%|######1   | 16/26 [00:00<00:00, 26.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.86it/s] 88%|########8 | 23/26 [00:00<00:00, 29.01it/s]100%|##########| 26/26 [00:01<00:00, 24.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.46 (  0.50)	train_minacc   0.38 (  0.50)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 7.8488 (7.8487)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 12%|#1        | 3/26 [00:00<00:01, 13.54it/s] 31%|###       | 8/26 [00:00<00:00, 28.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.26it/s] 50%|#####     | 13/26 [00:00<00:00, 35.15it/s] 69%|######9   | 18/26 [00:00<00:00, 39.43it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.43it/s] 88%|########8 | 23/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 32.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.52 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.50)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.00 ( -0.07)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.41 (  0.45)	test_minacc   0.31 (  0.48)	test_majacc   0.43 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.31 (  0.48)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.12 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.38 (  0.48)	test_majacc   0.46 (  0.44)	Loss_d 0.694 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.46 (  0.44)	test_corr_d  -0.02 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.06 (  0.06)
Overall Timing[ 46/  1]	epoch_time 0.0426 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0435)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.44790000453591344, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 21.43it/s] 35%|###4      | 9/26 [00:00<00:00, 25.49it/s] 50%|#####     | 13/26 [00:00<00:00, 27.34it/s] 65%|######5   | 17/26 [00:00<00:00, 28.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.56it/s] 88%|########8 | 23/26 [00:00<00:00, 28.45it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.46 (  0.49)	train_minacc   0.38 (  0.50)	train_majacc   0.48 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8480 (7.8480)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.52it/s] 31%|###       | 8/26 [00:00<00:00, 37.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.36it/s] 50%|#####     | 13/26 [00:00<00:00, 40.35it/s] 69%|######9   | 18/26 [00:00<00:00, 39.78it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.78it/s] 88%|########8 | 23/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 37.94it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.52 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.49)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.01 ( -0.07)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.41 (  0.44)	test_minacc   0.33 (  0.48)	test_majacc   0.42 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.41 (  0.44)	test_minacc_d   0.33 (  0.48)	test_majacc_d   0.42 (  0.44)	test_corr_d  -0.12 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.44)	test_minacc   0.38 (  0.47)	test_majacc   0.47 (  0.44)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.38 (  0.47)	test_majacc_d   0.47 (  0.44)	test_corr_d  -0.02 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.64it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Overall Timing[ 47/  1]	epoch_time 0.0429 (0.0441)	validation_time 0.0003 (0.0006)	train_time 0.0425 (0.0435)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.44460000747442247, 0.4650000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 19%|#9        | 5/26 [00:00<00:00, 21.25it/s] 35%|###4      | 9/26 [00:00<00:00, 26.35it/s] 50%|#####     | 13/26 [00:00<00:00, 28.49it/s] 65%|######5   | 17/26 [00:00<00:00, 30.03it/s] 81%|########  | 21/26 [00:00<00:00, 30.83it/s] 96%|#########6| 25/26 [00:00<00:00, 30.44it/s]100%|##########| 26/26 [00:00<00:00, 26.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.46 (  0.49)	train_minacc   0.38 (  0.50)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8473 (7.8473)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 23%|##3       | 6/26 [00:00<00:00, 28.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.06it/s] 42%|####2     | 11/26 [00:00<00:00, 35.72it/s] 62%|######1   | 16/26 [00:00<00:00, 39.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.91it/s] 81%|########  | 21/26 [00:00<00:00, 39.35it/s]100%|##########| 26/26 [00:00<00:00, 41.97it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.43 (  0.49)	test_majacc   0.47 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.43 (  0.49)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.01 ( -0.07)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.42 (  0.44)	test_minacc   0.33 (  0.48)	test_majacc   0.43 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.33 (  0.48)	test_majacc_d   0.43 (  0.44)	test_corr_d  -0.12 ( -0.10)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.44)	test_minacc   0.38 (  0.48)	test_majacc   0.47 (  0.44)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.38 (  0.48)	test_majacc_d   0.47 (  0.44)	test_corr_d  -0.02 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Overall Timing[ 48/  1]	epoch_time 0.0419 (0.0441)	validation_time 0.0006 (0.0006)	train_time 0.0412 (0.0434)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.4436000040471554, 0.46300002932548523)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 12%|#1        | 3/26 [00:00<00:01, 12.67it/s] 27%|##6       | 7/26 [00:00<00:00, 20.76it/s] 42%|####2     | 11/26 [00:00<00:00, 24.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.28it/s] 88%|########8 | 23/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.46 (  0.50)	train_minacc   0.38 (  0.51)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 7.8464 (7.8465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.56it/s] 27%|##6       | 7/26 [00:00<00:00, 33.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.83it/s] 46%|####6     | 12/26 [00:00<00:00, 39.69it/s] 65%|######5   | 17/26 [00:00<00:00, 40.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.96it/s] 85%|########4 | 22/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.45)	test_minacc   0.42 (  0.48)	test_majacc   0.47 (  0.44)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.47 (  0.44)	test_corr_d  -0.01 ( -0.08)
Test: [  20/  26]	Loss 0.696 (0.695)	test_acc   0.42 (  0.44)	test_minacc   0.35 (  0.47)	test_majacc   0.43 (  0.43)	Loss_d 0.696 (0.695)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.35 (  0.47)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.13 ( -0.10)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.45 (  0.44)	test_minacc   0.38 (  0.47)	test_majacc   0.46 (  0.43)	Loss_d 0.694 (0.695)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.38 (  0.47)	test_majacc_d   0.46 (  0.43)	test_corr_d  -0.03 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.07 (  0.07)
Overall Timing[ 49/  1]	epoch_time 0.0417 (0.0440)	validation_time 0.0003 (0.0006)	train_time 0.0414 (0.0434)
record: (train_acc, test_acc) (0.7126000264883041, 0.5760000348091125)
last accs (train_acc, test_acc) (0.44110000631213186, 0.4700000286102295)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.160 MB of 0.160 MB uploadedwandb: \ 0.160 MB of 0.160 MB uploadedwandb: | 0.160 MB of 0.160 MB uploadedwandb: / 0.160 MB of 0.160 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpp09m61wv'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215438-9phgll72
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/9phgll72
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1168
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6004, 3, 32, 32) (5996, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:36,  1.46s/it] 15%|#5        | 4/26 [00:01<00:06,  3.29it/s] 31%|###       | 8/26 [00:01<00:02,  7.33it/s] 46%|####6     | 12/26 [00:01<00:01, 11.37it/s] 62%|######1   | 16/26 [00:01<00:00, 15.28it/s] 77%|#######6  | 20/26 [00:02<00:00, 18.77it/s] 92%|#########2| 24/26 [00:02<00:00, 21.51it/s]100%|##########| 26/26 [00:02<00:00,  9.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 8.604 (11.782)	train_nll   0.40 (  0.50)	train_penalty   0.05 (  0.20)	weight_norm   8.20 ( 11.28)	train_acc   0.84 (  0.82)	train_minacc   0.03 (  0.06)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 6.9356 (8.2459)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.04it/s]  8%|7         | 2/26 [00:00<00:03,  6.76it/s] 27%|##6       | 7/26 [00:00<00:00, 21.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.94it/s] 46%|####6     | 12/26 [00:00<00:00, 30.78it/s] 62%|######1   | 16/26 [00:00<00:00, 33.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.63it/s] 81%|########  | 21/26 [00:00<00:00, 38.36it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
Test: [   0/  26]	Loss 0.369 (0.369)	test_acc   0.87 (  0.87)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.369 (0.369)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.408 (0.402)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.408 (0.402)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.407 (0.411)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.407 (0.411)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.396 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.396 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.751 (1.751)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.751 (1.751)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.751 (1.751)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.751 (1.751)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/195/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0813 (0.0813)	validation_time 0.0069 (0.0069)	train_time 0.0712 (0.0712)
record: (train_acc, test_acc) (0.8475000252127647, 0.1120000034570694)
last accs (train_acc, test_acc) (0.8475000252127647, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.72it/s] 23%|##3       | 6/26 [00:00<00:00, 25.27it/s] 35%|###4      | 9/26 [00:00<00:00, 26.02it/s] 46%|####6     | 12/26 [00:00<00:00, 26.76it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.51it/s] 85%|########4 | 22/26 [00:00<00:00, 28.06it/s] 96%|#########6| 25/26 [00:00<00:00, 28.57it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.216 (5.978)	train_nll   0.41 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   3.81 (  5.57)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2955 (6.5991)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 29.78it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 30.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 30.20it/s] 81%|########  | 21/26 [00:00<00:00, 30.50it/s] 96%|#########6| 25/26 [00:00<00:00, 30.49it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.380 (0.380)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.414 (0.406)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.414 (0.406)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.419 (0.415)	test_acc   0.85 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.419 (0.415)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.396 (0.410)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.396 (0.410)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.60it/s]
Test: [  0/  1]	Loss 1.586 (1.586)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.586 (1.586)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.586 (1.586)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.586 (1.586)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/195/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0482 (0.0648)	validation_time 0.0003 (0.0036)	train_time 0.0479 (0.0595)
record: (train_acc, test_acc) (0.8464000241160393, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8464000241160393, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.37it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 46%|####6     | 12/26 [00:00<00:00, 26.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.57it/s] 69%|######9   | 18/26 [00:00<00:00, 27.70it/s] 85%|########4 | 22/26 [00:00<00:00, 28.92it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]100%|##########| 26/26 [00:01<00:00, 25.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.591 (3.267)	train_nll   0.39 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.20 (  2.87)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4295 (5.8525)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s]  8%|7         | 2/26 [00:00<00:03,  6.01it/s] 12%|#1        | 3/26 [00:00<00:03,  7.29it/s] 31%|###       | 8/26 [00:00<00:00, 20.73it/s]                                               31%|###       | 8/26 [00:00<00:00, 20.73it/s] 50%|#####     | 13/26 [00:00<00:00, 28.84it/s] 69%|######9   | 18/26 [00:00<00:00, 34.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.35it/s] 88%|########8 | 23/26 [00:00<00:00, 36.15it/s]100%|##########| 26/26 [00:00<00:00, 26.62it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.84 (  0.84)	test_minacc   0.36 (  0.36)	test_majacc   0.91 (  0.91)	Loss_d 0.389 (0.389)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.420 (0.411)	test_acc   0.82 (  0.83)	test_minacc   0.32 (  0.30)	test_majacc   0.91 (  0.92)	Loss_d 0.420 (0.411)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.32 (  0.30)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.80 (  0.82)
Test: [  20/  26]	Loss 0.417 (0.415)	test_acc   0.83 (  0.83)	test_minacc   0.35 (  0.31)	test_majacc   0.91 (  0.92)	Loss_d 0.417 (0.415)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.35 (  0.31)	test_majacc_d   0.91 (  0.92)	test_corr_d   0.82 (  0.82)
Test: [  26/  26]	Loss 0.375 (0.413)	test_acc   0.88 (  0.83)	test_minacc   0.45 (  0.32)	test_majacc   0.96 (  0.92)	Loss_d 0.375 (0.413)	test_acc_d   0.88 (  0.83)	test_minacc_d   0.45 (  0.32)	test_majacc_d   0.96 (  0.92)	test_corr_d   0.82 (  0.82)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.70it/s]
Test: [  0/  1]	Loss 1.161 (1.161)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.161 (1.161)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.55 (  0.55)
Test: [  1/  1]	Loss 1.161 (1.161)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.93 (  0.93)	Loss_d 1.161 (1.161)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.55 (  0.55)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/195/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0459 (0.0585)	validation_time 0.0004 (0.0025)	train_time 0.0455 (0.0549)
record: (train_acc, test_acc) (0.8293000264763832, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8293000264763832, 0.3620000183582306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.75it/s] 15%|#5        | 4/26 [00:00<00:02, 10.31it/s] 27%|##6       | 7/26 [00:00<00:01, 15.57it/s] 38%|###8      | 10/26 [00:00<00:00, 19.65it/s] 50%|#####     | 13/26 [00:00<00:00, 22.41it/s] 65%|######5   | 17/26 [00:00<00:00, 25.16it/s] 81%|########  | 21/26 [00:01<00:00, 27.09it/s] 92%|#########2| 24/26 [00:01<00:00, 27.45it/s]100%|##########| 26/26 [00:01<00:00, 20.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.793 (2.162)	train_nll   0.38 (  0.39)	train_penalty   0.04 (  0.04)	weight_norm   1.42 (  1.77)	train_acc   0.84 (  0.84)	train_minacc   0.03 (  0.06)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3081 (5.3167)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.61it/s] 23%|##3       | 6/26 [00:00<00:01, 19.24it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.24it/s] 42%|####2     | 11/26 [00:00<00:00, 28.44it/s] 62%|######1   | 16/26 [00:00<00:00, 34.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.71it/s] 81%|########  | 21/26 [00:00<00:00, 35.59it/s]100%|##########| 26/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
Test: [   0/  26]	Loss 0.324 (0.324)	test_acc   0.88 (  0.88)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.324)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.369 (0.353)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.369 (0.353)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.360 (0.361)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.360 (0.361)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.323 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.323 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.11it/s]
Test: [  0/  1]	Loss 1.484 (1.484)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.484 (1.484)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.484 (1.484)	test_acc   0.15 (  0.15)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.484 (1.484)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Overall Timing[  3/  1]	epoch_time 0.0434 (0.0547)	validation_time 0.0004 (0.0020)	train_time 0.0429 (0.0519)
record: (train_acc, test_acc) (0.8293000264763832, 0.3620000183582306)
last accs (train_acc, test_acc) (0.8491000232100486, 0.1469999998807907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 15%|#5        | 4/26 [00:00<00:01, 19.88it/s] 27%|##6       | 7/26 [00:00<00:00, 24.01it/s] 42%|####2     | 11/26 [00:00<00:00, 26.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.02it/s] 81%|########  | 21/26 [00:00<00:00, 28.93it/s] 96%|#########6| 25/26 [00:00<00:00, 29.78it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.265 (1.510)	train_nll   0.35 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   0.91 (  1.14)	train_acc   0.84 (  0.85)	train_minacc   0.15 (  0.06)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 5.5070 (5.4079)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.56it/s] 27%|##6       | 7/26 [00:00<00:00, 32.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.38it/s] 46%|####6     | 12/26 [00:00<00:00, 39.31it/s] 65%|######5   | 17/26 [00:00<00:00, 42.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.04it/s] 85%|########4 | 22/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 37.93it/s]
Test: [   0/  26]	Loss 0.370 (0.370)	test_acc   0.84 (  0.84)	test_minacc   0.44 (  0.44)	test_majacc   0.90 (  0.90)	Loss_d 0.370 (0.370)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.395 (0.378)	test_acc   0.82 (  0.84)	test_minacc   0.39 (  0.37)	test_majacc   0.90 (  0.92)	Loss_d 0.395 (0.378)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.39 (  0.37)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.81 (  0.82)
Test: [  20/  26]	Loss 0.377 (0.379)	test_acc   0.84 (  0.84)	test_minacc   0.35 (  0.38)	test_majacc   0.92 (  0.92)	Loss_d 0.377 (0.379)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.35 (  0.38)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.82)
Test: [  26/  26]	Loss 0.319 (0.377)	test_acc   0.87 (  0.84)	test_minacc   0.47 (  0.38)	test_majacc   0.95 (  0.92)	Loss_d 0.319 (0.377)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.47 (  0.38)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.82 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.49it/s]
Test: [  0/  1]	Loss 1.312 (1.312)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.89 (  0.89)	Loss_d 1.312 (1.312)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.50 (  0.50)
Test: [  1/  1]	Loss 1.312 (1.312)	test_acc   0.40 (  0.40)	test_minacc   0.35 (  0.35)	test_majacc   0.89 (  0.89)	Loss_d 1.312 (1.312)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.50 (  0.50)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/195/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0432 (0.0524)	validation_time 0.0004 (0.0017)	train_time 0.0428 (0.0501)
record: (train_acc, test_acc) (0.8379000255465507, 0.4020000100135803)
last accs (train_acc, test_acc) (0.8379000255465507, 0.4020000100135803)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 15%|#5        | 4/26 [00:00<00:01, 18.91it/s] 27%|##6       | 7/26 [00:00<00:00, 22.57it/s] 38%|###8      | 10/26 [00:00<00:00, 25.21it/s] 50%|#####     | 13/26 [00:00<00:00, 26.55it/s] 65%|######5   | 17/26 [00:00<00:00, 28.40it/s] 81%|########  | 21/26 [00:00<00:00, 29.57it/s] 96%|#########6| 25/26 [00:00<00:00, 30.10it/s]100%|##########| 26/26 [00:01<00:00, 25.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.945 (1.123)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   0.61 (  0.76)	train_acc   0.84 (  0.84)	train_minacc   0.03 (  0.07)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2235 (5.7991)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.59it/s] 12%|#1        | 3/26 [00:00<00:01, 14.56it/s] 31%|###       | 8/26 [00:00<00:00, 29.63it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.63it/s] 50%|#####     | 13/26 [00:00<00:00, 36.11it/s] 69%|######9   | 18/26 [00:00<00:00, 40.39it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.39it/s] 88%|########8 | 23/26 [00:00<00:00, 43.05it/s]100%|##########| 26/26 [00:00<00:00, 34.68it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.83 (  0.83)	test_minacc   0.60 (  0.60)	test_majacc   0.87 (  0.87)	Loss_d 0.371 (0.371)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.71 (  0.71)
Test: [  10/  26]	Loss 0.402 (0.379)	test_acc   0.82 (  0.84)	test_minacc   0.52 (  0.53)	test_majacc   0.88 (  0.89)	Loss_d 0.402 (0.379)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.52 (  0.53)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.69 (  0.73)
Test: [  20/  26]	Loss 0.365 (0.377)	test_acc   0.84 (  0.83)	test_minacc   0.56 (  0.54)	test_majacc   0.89 (  0.89)	Loss_d 0.365 (0.377)	test_acc_d   0.84 (  0.83)	test_minacc_d   0.56 (  0.54)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.73 (  0.72)
Test: [  26/  26]	Loss 0.324 (0.378)	test_acc   0.85 (  0.84)	test_minacc   0.53 (  0.54)	test_majacc   0.91 (  0.89)	Loss_d 0.324 (0.378)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.91 (  0.89)	test_corr_d   0.73 (  0.72)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.38it/s]
Test: [  0/  1]	Loss 1.041 (1.041)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.87 (  0.87)	Loss_d 1.041 (1.041)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 1.041 (1.041)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.87 (  0.87)	Loss_d 1.041 (1.041)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.15 (  0.15)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/195/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0418 (0.0506)	validation_time 0.0005 (0.0015)	train_time 0.0413 (0.0486)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 15%|#5        | 4/26 [00:00<00:01, 18.22it/s] 27%|##6       | 7/26 [00:00<00:00, 21.96it/s] 38%|###8      | 10/26 [00:00<00:00, 23.89it/s] 50%|#####     | 13/26 [00:00<00:00, 25.46it/s] 65%|######5   | 17/26 [00:00<00:00, 27.56it/s] 81%|########  | 21/26 [00:00<00:00, 28.95it/s] 96%|#########6| 25/26 [00:00<00:00, 29.71it/s]100%|##########| 26/26 [00:01<00:00, 24.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.763 (0.864)	train_nll   0.36 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.41 (  0.51)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.3169 (6.7002)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 23%|##3       | 6/26 [00:00<00:00, 31.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.05it/s] 42%|####2     | 11/26 [00:00<00:00, 38.08it/s] 62%|######1   | 16/26 [00:00<00:00, 41.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.10it/s] 81%|########  | 21/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 37.12it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.87 (  0.87)	test_minacc   0.38 (  0.38)	test_majacc   0.94 (  0.94)	Loss_d 0.330 (0.330)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.367 (0.352)	test_acc   0.83 (  0.85)	test_minacc   0.29 (  0.31)	test_majacc   0.93 (  0.94)	Loss_d 0.367 (0.352)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.29 (  0.31)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.345 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.32)	test_majacc   0.95 (  0.94)	Loss_d 0.345 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.32)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.329 (0.351)	test_acc   0.86 (  0.85)	test_minacc   0.38 (  0.33)	test_majacc   0.95 (  0.94)	Loss_d 0.329 (0.351)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.38 (  0.33)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 1.292 (1.292)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.93 (  0.93)	Loss_d 1.292 (1.292)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.292 (1.292)	test_acc   0.34 (  0.34)	test_minacc   0.27 (  0.27)	test_majacc   0.93 (  0.93)	Loss_d 1.292 (1.292)	test_acc_d   0.34 (  0.34)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Overall Timing[  6/  1]	epoch_time 0.0441 (0.0497)	validation_time 0.0006 (0.0014)	train_time 0.0435 (0.0479)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.8474000244736671, 0.3400000035762787)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.16it/s] 12%|#1        | 3/26 [00:00<00:03,  7.48it/s] 27%|##6       | 7/26 [00:00<00:01, 15.37it/s] 42%|####2     | 11/26 [00:00<00:00, 20.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.71it/s] 88%|########8 | 23/26 [00:01<00:00, 28.53it/s]100%|##########| 26/26 [00:01<00:00, 21.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.004 (0.499)	train_nll   0.60 (  0.39)	train_penalty   0.00 (  0.02)	weight_norm   0.33 (  0.34)	train_acc   0.58 (  0.82)	train_minacc   0.55 (  0.21)	train_majacc   0.58 (  0.93)	train_corr   0.00 (  0.00)	l1 8.1960 (7.9257)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 23%|##3       | 6/26 [00:00<00:00, 26.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.71it/s] 42%|####2     | 11/26 [00:00<00:00, 34.54it/s] 65%|######5   | 17/26 [00:00<00:00, 39.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.67it/s]100%|##########| 26/26 [00:00<00:00, 35.34it/s]
Test: [   0/  26]	Loss 0.603 (0.603)	test_acc   0.61 (  0.61)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.603 (0.603)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.632 (0.635)	test_acc   0.56 (  0.57)	test_minacc   0.60 (  0.60)	test_majacc   0.55 (  0.57)	Loss_d 0.632 (0.635)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.32 (  0.34)
Test: [  20/  26]	Loss 0.610 (0.630)	test_acc   0.63 (  0.58)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.58)	Loss_d 0.610 (0.630)	test_acc_d   0.63 (  0.58)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.58)	test_corr_d   0.34 (  0.33)
Test: [  26/  26]	Loss 0.643 (0.631)	test_acc   0.55 (  0.58)	test_minacc   0.62 (  0.61)	test_majacc   0.54 (  0.57)	Loss_d 0.643 (0.631)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.62 (  0.61)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.27 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.61it/s]
Test: [  0/  1]	Loss 0.752 (0.752)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.752 (0.752)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.752 (0.752)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.59 (  0.59)	Loss_d 0.752 (0.752)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.02 (  0.02)
Overall Timing[  7/  1]	epoch_time 0.0449 (0.0491)	validation_time 0.0004 (0.0012)	train_time 0.0444 (0.0474)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.5768000094294548, 0.6140000224113464)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.76it/s] 19%|#9        | 5/26 [00:00<00:00, 21.36it/s] 35%|###4      | 9/26 [00:00<00:00, 26.39it/s] 50%|#####     | 13/26 [00:00<00:00, 27.93it/s] 65%|######5   | 17/26 [00:00<00:00, 28.85it/s] 81%|########  | 21/26 [00:00<00:00, 30.72it/s] 96%|#########6| 25/26 [00:00<00:00, 31.16it/s]100%|##########| 26/26 [00:00<00:00, 26.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.42)	train_acc   0.48 (  0.52)	train_minacc   0.43 (  0.59)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5909 (7.7636)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 23%|##3       | 6/26 [00:00<00:00, 29.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.23it/s] 42%|####2     | 11/26 [00:00<00:00, 33.58it/s] 62%|######1   | 16/26 [00:00<00:00, 38.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.45it/s] 81%|########  | 21/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 43.17it/s]100%|##########| 26/26 [00:00<00:00, 34.83it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.54)	test_minacc   0.60 (  0.60)	test_majacc   0.53 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.691 (0.691)	test_acc   0.49 (  0.50)	test_minacc   0.47 (  0.54)	test_majacc   0.49 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.26 (  0.19)
Test: [  20/  26]	Loss 0.688 (0.691)	test_acc   0.53 (  0.51)	test_minacc   0.47 (  0.53)	test_majacc   0.54 (  0.50)	Loss_d 0.688 (0.691)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.22 (  0.20)
Test: [  26/  26]	Loss 0.693 (0.691)	test_acc   0.48 (  0.50)	test_minacc   0.43 (  0.52)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.691)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.19 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.49it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.27 (  0.27)
Overall Timing[  8/  1]	epoch_time 0.0416 (0.0483)	validation_time 0.0005 (0.0011)	train_time 0.0411 (0.0467)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.5041000139415264, 0.5180000066757202)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.77it/s] 12%|#1        | 3/26 [00:00<00:02, 10.40it/s] 23%|##3       | 6/26 [00:00<00:01, 17.19it/s] 35%|###4      | 9/26 [00:00<00:00, 21.33it/s] 50%|#####     | 13/26 [00:00<00:00, 24.84it/s] 65%|######5   | 17/26 [00:00<00:00, 27.01it/s] 81%|########  | 21/26 [00:00<00:00, 28.35it/s] 96%|#########6| 25/26 [00:01<00:00, 29.11it/s]100%|##########| 26/26 [00:01<00:00, 22.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.47)	train_acc   0.44 (  0.49)	train_minacc   0.47 (  0.53)	train_majacc   0.44 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5496 (7.5616)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 15%|#5        | 4/26 [00:00<00:01, 16.08it/s] 35%|###4      | 9/26 [00:00<00:00, 29.03it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.30it/s] 92%|#########2| 24/26 [00:00<00:00, 38.58it/s]100%|##########| 26/26 [00:00<00:00, 32.09it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.48 (  0.57)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.48 (  0.57)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.10 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.51 (  0.56)	test_majacc   0.51 (  0.47)	Loss_d 0.691 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.45 (  0.48)	test_minacc   0.47 (  0.55)	test_majacc   0.44 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.45 (  0.48)	test_minacc_d   0.47 (  0.55)	test_majacc_d   0.44 (  0.47)	test_corr_d   0.03 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.06)
Overall Timing[  9/  1]	epoch_time 0.0461 (0.0481)	validation_time 0.0005 (0.0011)	train_time 0.0457 (0.0466)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4815000106692314, 0.5530000329017639)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.19it/s] 15%|#5        | 4/26 [00:00<00:01, 11.16it/s] 27%|##6       | 7/26 [00:00<00:01, 16.74it/s] 38%|###8      | 10/26 [00:00<00:00, 20.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 24.37it/s] 69%|######9   | 18/26 [00:00<00:00, 25.61it/s] 85%|########4 | 22/26 [00:01<00:00, 27.50it/s]100%|##########| 26/26 [00:01<00:00, 28.54it/s]100%|##########| 26/26 [00:01<00:00, 20.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.44 (  0.49)	train_minacc   0.53 (  0.56)	train_majacc   0.42 (  0.47)	train_corr   0.00 (  0.00)	l1 7.5460 (7.5471)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 27%|##6       | 7/26 [00:00<00:00, 35.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.28it/s] 46%|####6     | 12/26 [00:00<00:00, 40.21it/s] 65%|######5   | 17/26 [00:00<00:00, 38.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.57it/s] 85%|########4 | 22/26 [00:00<00:00, 41.31it/s]100%|##########| 26/26 [00:00<00:00, 36.12it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.59)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.59)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.06 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.53 (  0.56)	test_majacc   0.50 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.50 (  0.55)	test_majacc   0.41 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.41 (  0.47)	test_corr_d  -0.00 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Overall Timing[ 10/  1]	epoch_time 0.0447 (0.0477)	validation_time 0.0003 (0.0010)	train_time 0.0443 (0.0464)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4797000052034855, 0.5509999990463257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 12%|#1        | 3/26 [00:00<00:01, 12.50it/s] 27%|##6       | 7/26 [00:00<00:00, 20.58it/s] 38%|###8      | 10/26 [00:00<00:00, 22.81it/s] 50%|#####     | 13/26 [00:00<00:00, 24.83it/s] 65%|######5   | 17/26 [00:00<00:00, 27.43it/s] 81%|########  | 21/26 [00:00<00:00, 29.12it/s] 96%|#########6| 25/26 [00:00<00:00, 30.22it/s]100%|##########| 26/26 [00:01<00:00, 24.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.49)	train_minacc   0.55 (  0.55)	train_majacc   0.46 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5453 (7.5456)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.96it/s] 23%|##3       | 6/26 [00:00<00:00, 20.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.29it/s] 42%|####2     | 11/26 [00:00<00:00, 28.68it/s] 62%|######1   | 16/26 [00:00<00:00, 34.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.69it/s] 81%|########  | 21/26 [00:00<00:00, 36.59it/s]100%|##########| 26/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.55)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.06 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.54 (  0.53)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.55 (  0.53)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Overall Timing[ 11/  1]	epoch_time 0.0433 (0.0474)	validation_time 0.0004 (0.0010)	train_time 0.0429 (0.0461)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48330001106858256, 0.5200000405311584)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 25.41it/s] 50%|#####     | 13/26 [00:00<00:00, 27.42it/s] 65%|######5   | 17/26 [00:00<00:00, 28.63it/s] 81%|########  | 21/26 [00:00<00:00, 29.36it/s] 92%|#########2| 24/26 [00:00<00:00, 29.53it/s]100%|##########| 26/26 [00:01<00:00, 25.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.46 (  0.50)	train_minacc   0.47 (  0.53)	train_majacc   0.46 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5448 (7.5450)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s]  8%|7         | 2/26 [00:00<00:02,  9.78it/s] 27%|##6       | 7/26 [00:00<00:00, 26.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.70it/s] 46%|####6     | 12/26 [00:00<00:00, 33.64it/s] 65%|######5   | 17/26 [00:00<00:00, 37.95it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.95it/s] 85%|########4 | 22/26 [00:00<00:00, 37.06it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.54)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.54)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.47 (  0.51)	test_majacc   0.46 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.67it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.06 (  0.06)
Overall Timing[ 12/  1]	epoch_time 0.0424 (0.0470)	validation_time 0.0007 (0.0009)	train_time 0.0417 (0.0458)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48580000913143156, 0.5040000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.57it/s] 27%|##6       | 7/26 [00:00<00:00, 28.10it/s] 42%|####2     | 11/26 [00:00<00:00, 30.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.36it/s] 69%|######9   | 18/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 28.98it/s] 96%|#########6| 25/26 [00:00<00:00, 29.30it/s]100%|##########| 26/26 [00:00<00:00, 27.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.50)	train_minacc   0.47 (  0.52)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5444 (7.5445)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.50it/s] 23%|##3       | 6/26 [00:00<00:00, 21.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.66it/s] 42%|####2     | 11/26 [00:00<00:00, 30.47it/s] 62%|######1   | 16/26 [00:00<00:00, 36.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.05it/s] 81%|########  | 21/26 [00:00<00:00, 36.51it/s]100%|##########| 26/26 [00:00<00:00, 30.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.47 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.06 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.51)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.05 (  0.05)
Overall Timing[ 13/  1]	epoch_time 0.0464 (0.0469)	validation_time 0.0003 (0.0009)	train_time 0.0460 (0.0458)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48910000669956205, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 25.57it/s] 50%|#####     | 13/26 [00:00<00:00, 27.46it/s] 65%|######5   | 17/26 [00:00<00:00, 28.62it/s] 81%|########  | 21/26 [00:00<00:00, 29.11it/s] 96%|#########6| 25/26 [00:00<00:00, 29.46it/s]100%|##########| 26/26 [00:01<00:00, 25.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5440 (7.5441)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.93it/s] 23%|##3       | 6/26 [00:00<00:00, 29.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.43it/s] 42%|####2     | 11/26 [00:00<00:00, 37.03it/s] 62%|######1   | 16/26 [00:00<00:00, 40.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.73it/s] 81%|########  | 21/26 [00:00<00:00, 39.26it/s]100%|##########| 26/26 [00:00<00:00, 42.29it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.53 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.05 (  0.05)
Overall Timing[ 14/  1]	epoch_time 0.0427 (0.0467)	validation_time 0.0005 (0.0009)	train_time 0.0422 (0.0456)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49060000777244567, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s]  8%|7         | 2/26 [00:00<00:02,  9.11it/s] 23%|##3       | 6/26 [00:00<00:01, 19.89it/s] 38%|###8      | 10/26 [00:00<00:00, 24.45it/s] 50%|#####     | 13/26 [00:00<00:00, 25.80it/s] 65%|######5   | 17/26 [00:00<00:00, 27.55it/s] 81%|########  | 21/26 [00:00<00:00, 28.34it/s] 96%|#########6| 25/26 [00:00<00:00, 28.77it/s]100%|##########| 26/26 [00:01<00:00, 23.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.47 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5436 (7.5438)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 23%|##3       | 6/26 [00:00<00:00, 33.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.03it/s] 42%|####2     | 11/26 [00:00<00:00, 38.86it/s] 62%|######1   | 16/26 [00:00<00:00, 42.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.66it/s] 81%|########  | 21/26 [00:00<00:00, 39.90it/s]100%|##########| 26/26 [00:00<00:00, 36.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.44 (  0.51)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.51 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.05 (  0.05)
Overall Timing[ 15/  1]	epoch_time 0.0451 (0.0466)	validation_time 0.0003 (0.0008)	train_time 0.0448 (0.0455)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49050000894069673, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 15%|#5        | 4/26 [00:00<00:01, 16.26it/s] 27%|##6       | 7/26 [00:00<00:00, 20.88it/s] 38%|###8      | 10/26 [00:00<00:00, 23.58it/s] 50%|#####     | 13/26 [00:00<00:00, 25.36it/s] 62%|######1   | 16/26 [00:00<00:00, 26.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.91it/s] 85%|########4 | 22/26 [00:00<00:00, 27.51it/s]100%|##########| 26/26 [00:01<00:00, 28.79it/s]100%|##########| 26/26 [00:01<00:00, 23.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.48 (  0.48)	train_acc   0.48 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5433 (7.5435)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 23%|##3       | 6/26 [00:00<00:00, 31.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.17it/s] 42%|####2     | 11/26 [00:00<00:00, 37.87it/s] 62%|######1   | 16/26 [00:00<00:00, 41.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.02it/s] 81%|########  | 21/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.44 (  0.51)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.05 (  0.05)
Overall Timing[ 16/  1]	epoch_time 0.0451 (0.0465)	validation_time 0.0004 (0.0008)	train_time 0.0447 (0.0455)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4931000055074692, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.32it/s] 19%|#9        | 5/26 [00:00<00:00, 24.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.43it/s] 46%|####6     | 12/26 [00:00<00:00, 28.19it/s] 62%|######1   | 16/26 [00:00<00:00, 29.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.97it/s] 92%|#########2| 24/26 [00:00<00:00, 30.45it/s]100%|##########| 26/26 [00:00<00:00, 26.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5431 (7.5432)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 23%|##3       | 6/26 [00:00<00:00, 27.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.89it/s] 42%|####2     | 11/26 [00:00<00:00, 35.70it/s] 62%|######1   | 16/26 [00:00<00:00, 40.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.21it/s] 81%|########  | 21/26 [00:00<00:00, 38.83it/s]100%|##########| 26/26 [00:00<00:00, 41.57it/s]100%|##########| 26/26 [00:00<00:00, 34.14it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.44 (  0.52)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.05 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Overall Timing[ 17/  1]	epoch_time 0.0449 (0.0464)	validation_time 0.0004 (0.0008)	train_time 0.0444 (0.0454)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49360001149773597, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.37it/s] 15%|#5        | 4/26 [00:00<00:01, 19.46it/s] 27%|##6       | 7/26 [00:00<00:00, 23.56it/s] 38%|###8      | 10/26 [00:00<00:00, 25.51it/s] 50%|#####     | 13/26 [00:00<00:00, 26.80it/s] 62%|######1   | 16/26 [00:00<00:00, 27.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.45it/s] 92%|#########2| 24/26 [00:00<00:00, 29.56it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5428 (7.5429)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s]  8%|7         | 2/26 [00:00<00:03,  6.89it/s] 27%|##6       | 7/26 [00:00<00:00, 21.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 21.95it/s] 42%|####2     | 11/26 [00:00<00:00, 27.99it/s] 65%|######5   | 17/26 [00:00<00:00, 37.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.22it/s] 85%|########4 | 22/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 30.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.44 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Overall Timing[ 18/  1]	epoch_time 0.0432 (0.0462)	validation_time 0.0004 (0.0008)	train_time 0.0428 (0.0453)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49310001289844513, 0.47700002789497375)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 15%|#5        | 4/26 [00:00<00:01, 16.32it/s] 31%|###       | 8/26 [00:00<00:00, 22.78it/s] 42%|####2     | 11/26 [00:00<00:00, 25.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.91it/s] 88%|########8 | 23/26 [00:00<00:00, 30.09it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.51)	train_minacc   0.50 (  0.49)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5426 (7.5427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.19it/s] 27%|##6       | 7/26 [00:00<00:00, 28.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.60it/s] 46%|####6     | 12/26 [00:00<00:00, 35.85it/s] 65%|######5   | 17/26 [00:00<00:00, 40.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.58it/s] 85%|########4 | 22/26 [00:00<00:00, 42.77it/s]100%|##########| 26/26 [00:00<00:00, 35.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.42 (  0.52)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 19/  1]	epoch_time 0.0448 (0.0461)	validation_time 0.0004 (0.0008)	train_time 0.0443 (0.0452)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49400001031160357, 0.47600001096725464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 12%|#1        | 3/26 [00:00<00:02, 10.49it/s] 27%|##6       | 7/26 [00:00<00:01, 18.92it/s] 42%|####2     | 11/26 [00:00<00:00, 22.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.15it/s] 88%|########8 | 23/26 [00:00<00:00, 28.29it/s]100%|##########| 26/26 [00:01<00:00, 22.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.51)	train_minacc   0.50 (  0.49)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5424 (7.5425)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.49it/s] 31%|###       | 8/26 [00:00<00:00, 37.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.58it/s] 50%|#####     | 13/26 [00:00<00:00, 41.44it/s] 69%|######9   | 18/26 [00:00<00:00, 43.75it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.75it/s] 88%|########8 | 23/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 38.39it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.42 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.42 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 20/  1]	epoch_time 0.0425 (0.0460)	validation_time 0.0003 (0.0007)	train_time 0.0421 (0.0451)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4925000104010105, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 19%|#9        | 5/26 [00:00<00:01, 14.88it/s] 35%|###4      | 9/26 [00:00<00:00, 20.65it/s] 50%|#####     | 13/26 [00:00<00:00, 24.54it/s] 65%|######5   | 17/26 [00:00<00:00, 27.19it/s] 81%|########  | 21/26 [00:00<00:00, 29.24it/s] 96%|#########6| 25/26 [00:01<00:00, 30.33it/s]100%|##########| 26/26 [00:01<00:00, 23.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5422 (7.5423)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 31%|###       | 8/26 [00:00<00:00, 38.49it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.49it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.74it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 43.43it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.44 (  0.52)	test_majacc   0.47 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.46 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Overall Timing[ 21/  1]	epoch_time 0.0413 (0.0458)	validation_time 0.0004 (0.0007)	train_time 0.0408 (0.0449)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49170000779628753, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 15%|#5        | 4/26 [00:00<00:01, 14.94it/s] 27%|##6       | 7/26 [00:00<00:00, 20.03it/s] 38%|###8      | 10/26 [00:00<00:00, 22.89it/s] 50%|#####     | 13/26 [00:00<00:00, 24.84it/s] 65%|######5   | 17/26 [00:00<00:00, 26.68it/s] 81%|########  | 21/26 [00:00<00:00, 27.91it/s] 96%|#########6| 25/26 [00:01<00:00, 29.44it/s]100%|##########| 26/26 [00:01<00:00, 23.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 7.5421 (7.5421)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.67it/s] 35%|###4      | 9/26 [00:00<00:00, 35.54it/s]                                               35%|###4      | 9/26 [00:00<00:00, 35.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 40.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.89it/s] 92%|#########2| 24/26 [00:00<00:00, 42.97it/s]100%|##########| 26/26 [00:00<00:00, 37.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.44 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.44 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 22/  1]	epoch_time 0.0426 (0.0456)	validation_time 0.0006 (0.0007)	train_time 0.0419 (0.0448)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4927000091075897, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s]  8%|7         | 2/26 [00:00<00:03,  7.65it/s] 19%|#9        | 5/26 [00:00<00:01, 16.31it/s] 35%|###4      | 9/26 [00:00<00:00, 22.22it/s] 50%|#####     | 13/26 [00:00<00:00, 25.97it/s] 65%|######5   | 17/26 [00:00<00:00, 28.76it/s] 81%|########  | 21/26 [00:00<00:00, 30.45it/s] 96%|#########6| 25/26 [00:00<00:00, 30.72it/s]100%|##########| 26/26 [00:01<00:00, 24.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 7.5420379638671875
set z to 7.164936065673828
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.50 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5419 (7.5420)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 23%|##3       | 6/26 [00:00<00:00, 24.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.64it/s] 42%|####2     | 11/26 [00:00<00:00, 32.89it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 37.48it/s]100%|##########| 26/26 [00:00<00:00, 40.79it/s]100%|##########| 26/26 [00:00<00:00, 32.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.45 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.36it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 23/  1]	epoch_time 0.0435 (0.0455)	validation_time 0.0003 (0.0007)	train_time 0.0432 (0.0447)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.49220000913739204, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:01, 18.78it/s] 35%|###4      | 9/26 [00:00<00:00, 23.75it/s] 50%|#####     | 13/26 [00:00<00:00, 26.44it/s] 65%|######5   | 17/26 [00:00<00:00, 27.86it/s] 81%|########  | 21/26 [00:00<00:00, 28.59it/s] 92%|#########2| 24/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 24.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5417 (7.5418)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.99it/s] 27%|##6       | 7/26 [00:00<00:00, 30.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.80it/s] 46%|####6     | 12/26 [00:00<00:00, 37.64it/s] 65%|######5   | 17/26 [00:00<00:00, 41.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.02it/s] 85%|########4 | 22/26 [00:00<00:00, 38.60it/s]100%|##########| 26/26 [00:00<00:00, 35.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.87it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.03 (  0.03)
Overall Timing[ 24/  1]	epoch_time 0.0464 (0.0456)	validation_time 0.0004 (0.0007)	train_time 0.0460 (0.0447)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4915000080168247, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.76it/s] 15%|#5        | 4/26 [00:00<00:01, 14.64it/s] 31%|###       | 8/26 [00:00<00:00, 21.64it/s] 46%|####6     | 12/26 [00:00<00:00, 25.31it/s] 62%|######1   | 16/26 [00:00<00:00, 27.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.61it/s] 92%|#########2| 24/26 [00:00<00:00, 29.33it/s]100%|##########| 26/26 [00:01<00:00, 24.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5416 (7.5417)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.16it/s] 27%|##6       | 7/26 [00:00<00:00, 31.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.33it/s] 46%|####6     | 12/26 [00:00<00:00, 38.26it/s] 65%|######5   | 17/26 [00:00<00:00, 42.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.20it/s] 85%|########4 | 22/26 [00:00<00:00, 40.70it/s]100%|##########| 26/26 [00:00<00:00, 37.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.02 (  0.02)
Overall Timing[ 25/  1]	epoch_time 0.0438 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0434 (0.0447)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4901000070571899, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 15%|#5        | 4/26 [00:00<00:01, 19.63it/s] 27%|##6       | 7/26 [00:00<00:00, 24.03it/s] 42%|####2     | 11/26 [00:00<00:00, 26.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.86it/s] 88%|########8 | 23/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:00<00:00, 26.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.48 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5415 (7.5415)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.73it/s] 23%|##3       | 6/26 [00:00<00:00, 22.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.72it/s] 46%|####6     | 12/26 [00:00<00:00, 33.74it/s] 65%|######5   | 17/26 [00:00<00:00, 36.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.10it/s] 85%|########4 | 22/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 32.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.49it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Overall Timing[ 26/  1]	epoch_time 0.0445 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0441 (0.0447)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4891000094413757, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.41it/s] 12%|#1        | 3/26 [00:00<00:02,  8.32it/s] 27%|##6       | 7/26 [00:00<00:01, 16.83it/s] 42%|####2     | 11/26 [00:00<00:00, 21.82it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.46it/s] 88%|########8 | 23/26 [00:01<00:00, 27.83it/s]100%|##########| 26/26 [00:01<00:00, 21.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5413 (7.5414)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 27%|##6       | 7/26 [00:00<00:00, 33.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.37it/s] 46%|####6     | 12/26 [00:00<00:00, 39.14it/s] 65%|######5   | 17/26 [00:00<00:00, 42.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.05it/s] 85%|########4 | 22/26 [00:00<00:00, 43.26it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.45 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.45it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Overall Timing[ 27/  1]	epoch_time 0.0452 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0448 (0.0447)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48980000844597815, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.02it/s] 19%|#9        | 5/26 [00:00<00:00, 21.57it/s] 35%|###4      | 9/26 [00:00<00:00, 26.31it/s] 46%|####6     | 12/26 [00:00<00:00, 27.31it/s] 62%|######1   | 16/26 [00:00<00:00, 28.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.64it/s] 88%|########8 | 23/26 [00:00<00:00, 29.59it/s]100%|##########| 26/26 [00:00<00:00, 26.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.47 (  0.47)	train_acc   0.49 (  0.50)	train_minacc   0.45 (  0.50)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 7.5412 (7.5413)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.08it/s] 27%|##6       | 7/26 [00:00<00:00, 28.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.09it/s] 46%|####6     | 12/26 [00:00<00:00, 34.76it/s] 65%|######5   | 17/26 [00:00<00:00, 38.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.33it/s] 85%|########4 | 22/26 [00:00<00:00, 38.47it/s]100%|##########| 26/26 [00:00<00:00, 32.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.45 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.50)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.01 (  0.01)
Overall Timing[ 28/  1]	epoch_time 0.0440 (0.0454)	validation_time 0.0003 (0.0006)	train_time 0.0436 (0.0446)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4889000081717968, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 15%|#5        | 4/26 [00:00<00:01, 21.58it/s] 27%|##6       | 7/26 [00:00<00:00, 24.08it/s] 42%|####2     | 11/26 [00:00<00:00, 26.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.36it/s] 88%|########8 | 23/26 [00:00<00:00, 30.01it/s]100%|##########| 26/26 [00:00<00:00, 26.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.47)	train_acc   0.49 (  0.49)	train_minacc   0.45 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5411 (7.5412)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 23%|##3       | 6/26 [00:00<00:00, 32.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.51it/s] 42%|####2     | 11/26 [00:00<00:00, 39.43it/s] 62%|######1   | 16/26 [00:00<00:00, 43.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 43.17it/s] 81%|########  | 21/26 [00:00<00:00, 42.89it/s]100%|##########| 26/26 [00:00<00:00, 43.60it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.45 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.73it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 29/  1]	epoch_time 0.0454 (0.0454)	validation_time 0.0006 (0.0006)	train_time 0.0447 (0.0446)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4883000105321407, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 31%|###       | 8/26 [00:00<00:00, 24.42it/s] 46%|####6     | 12/26 [00:00<00:00, 26.97it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.53it/s] 88%|########8 | 23/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.49 (  0.49)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5410 (7.5411)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.33it/s] 15%|#5        | 4/26 [00:00<00:01, 15.92it/s] 35%|###4      | 9/26 [00:00<00:00, 29.04it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.14it/s] 92%|#########2| 24/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 32.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.93it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 (  0.01)
Overall Timing[ 30/  1]	epoch_time 0.0443 (0.0454)	validation_time 0.0006 (0.0006)	train_time 0.0436 (0.0446)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48930001026391984, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 19%|#9        | 5/26 [00:00<00:01, 18.49it/s] 35%|###4      | 9/26 [00:00<00:00, 23.57it/s] 50%|#####     | 13/26 [00:00<00:00, 26.35it/s] 65%|######5   | 17/26 [00:00<00:00, 27.81it/s] 81%|########  | 21/26 [00:00<00:00, 29.18it/s] 96%|#########6| 25/26 [00:00<00:00, 29.63it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.50 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5409 (7.5409)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.99it/s] 31%|###       | 8/26 [00:00<00:00, 34.57it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.57it/s] 50%|#####     | 13/26 [00:00<00:00, 40.25it/s] 69%|######9   | 18/26 [00:00<00:00, 42.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.89it/s] 88%|########8 | 23/26 [00:00<00:00, 42.98it/s]100%|##########| 26/26 [00:00<00:00, 36.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.48 (  0.52)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.48 (  0.49)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.02 (  0.02)
Overall Timing[ 31/  1]	epoch_time 0.0418 (0.0453)	validation_time 0.0005 (0.0006)	train_time 0.0413 (0.0445)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4907000081539154, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 15%|#5        | 4/26 [00:00<00:01, 17.49it/s] 27%|##6       | 7/26 [00:00<00:00, 21.42it/s] 38%|###8      | 10/26 [00:00<00:00, 23.50it/s] 50%|#####     | 13/26 [00:00<00:00, 25.37it/s] 65%|######5   | 17/26 [00:00<00:00, 27.07it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.62it/s] 92%|#########2| 24/26 [00:00<00:00, 28.94it/s]100%|##########| 26/26 [00:01<00:00, 24.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.50)	train_minacc   0.55 (  0.50)	train_majacc   0.49 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5408 (7.5408)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.70it/s] 27%|##6       | 7/26 [00:00<00:00, 34.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.49it/s] 46%|####6     | 12/26 [00:00<00:00, 39.50it/s] 65%|######5   | 17/26 [00:00<00:00, 42.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.25it/s] 85%|########4 | 22/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 38.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.48 (  0.53)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.55 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.00 (  0.00)
Overall Timing[ 32/  1]	epoch_time 0.0441 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0445)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48720000594854357, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 15%|#5        | 4/26 [00:00<00:01, 15.72it/s] 31%|###       | 8/26 [00:00<00:00, 22.15it/s] 42%|####2     | 11/26 [00:00<00:00, 24.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.08it/s] 69%|######9   | 18/26 [00:00<00:00, 27.72it/s] 81%|########  | 21/26 [00:00<00:00, 27.79it/s] 96%|#########6| 25/26 [00:00<00:00, 29.02it/s]100%|##########| 26/26 [00:01<00:00, 23.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.55 (  0.52)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5407 (7.5408)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 19%|#9        | 5/26 [00:00<00:00, 23.92it/s] 38%|###8      | 10/26 [00:00<00:00, 34.12it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.82it/s] 96%|#########6| 25/26 [00:00<00:00, 40.65it/s]100%|##########| 26/26 [00:00<00:00, 33.85it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0432 (0.0452)	validation_time 0.0003 (0.0006)	train_time 0.0428 (0.0444)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.486000008136034, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.74it/s] 15%|#5        | 4/26 [00:00<00:01, 18.37it/s] 27%|##6       | 7/26 [00:00<00:00, 22.62it/s] 38%|###8      | 10/26 [00:00<00:00, 25.27it/s] 50%|#####     | 13/26 [00:00<00:00, 26.46it/s] 65%|######5   | 17/26 [00:00<00:00, 28.13it/s] 81%|########  | 21/26 [00:00<00:00, 28.99it/s] 96%|#########6| 25/26 [00:00<00:00, 29.86it/s]100%|##########| 26/26 [00:01<00:00, 24.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.53 (  0.51)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5406 (7.5407)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.82it/s] 23%|##3       | 6/26 [00:00<00:00, 22.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.73it/s] 42%|####2     | 11/26 [00:00<00:00, 31.45it/s] 62%|######1   | 16/26 [00:00<00:00, 36.92it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.92it/s] 81%|########  | 21/26 [00:00<00:00, 36.18it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 31.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.48 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.55 (  0.50)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.26it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Overall Timing[ 34/  1]	epoch_time 0.0453 (0.0452)	validation_time 0.0004 (0.0006)	train_time 0.0448 (0.0444)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4896000061035156, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.49it/s] 15%|#5        | 4/26 [00:00<00:01, 12.23it/s] 27%|##6       | 7/26 [00:00<00:01, 17.60it/s] 38%|###8      | 10/26 [00:00<00:00, 21.43it/s] 50%|#####     | 13/26 [00:00<00:00, 23.89it/s] 62%|######1   | 16/26 [00:00<00:00, 25.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.88it/s] 85%|########4 | 22/26 [00:00<00:00, 27.75it/s] 96%|#########6| 25/26 [00:01<00:00, 28.36it/s]100%|##########| 26/26 [00:01<00:00, 21.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.55 (  0.51)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5405 (7.5406)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.19it/s] 42%|####2     | 11/26 [00:00<00:00, 34.35it/s] 65%|######5   | 17/26 [00:00<00:00, 39.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.59it/s] 88%|########8 | 23/26 [00:00<00:00, 44.56it/s]100%|##########| 26/26 [00:00<00:00, 35.45it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.48 (  0.55)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.52)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.52)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 35/  1]	epoch_time 0.0441 (0.0451)	validation_time 0.0006 (0.0006)	train_time 0.0435 (0.0444)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4857000094056129, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 19%|#9        | 5/26 [00:00<00:01, 15.89it/s] 35%|###4      | 9/26 [00:00<00:00, 21.51it/s] 46%|####6     | 12/26 [00:00<00:00, 23.99it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.63it/s] 69%|######9   | 18/26 [00:00<00:00, 26.72it/s] 81%|########  | 21/26 [00:00<00:00, 27.67it/s] 96%|#########6| 25/26 [00:01<00:00, 28.58it/s]100%|##########| 26/26 [00:01<00:00, 22.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.50 (  0.52)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5405 (7.5405)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.01it/s] 27%|##6       | 7/26 [00:00<00:00, 35.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.10it/s] 46%|####6     | 12/26 [00:00<00:00, 40.44it/s] 65%|######5   | 17/26 [00:00<00:00, 40.17it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.17it/s] 85%|########4 | 22/26 [00:00<00:00, 42.60it/s]100%|##########| 26/26 [00:00<00:00, 37.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.58 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.50 (  0.54)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.49 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.53 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 36/  1]	epoch_time 0.0428 (0.0451)	validation_time 0.0003 (0.0006)	train_time 0.0424 (0.0444)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4883000116944313, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.33it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.33it/s] 65%|######5   | 17/26 [00:00<00:00, 28.62it/s] 81%|########  | 21/26 [00:00<00:00, 29.42it/s] 96%|#########6| 25/26 [00:00<00:00, 29.60it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.51 (  0.49)	train_minacc   0.50 (  0.51)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5404 (7.5404)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.38it/s] 27%|##6       | 7/26 [00:00<00:00, 25.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.99it/s] 46%|####6     | 12/26 [00:00<00:00, 33.91it/s] 65%|######5   | 17/26 [00:00<00:00, 38.24it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.24it/s] 85%|########4 | 22/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 34.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.50 (  0.53)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.47 (  0.50)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.53 (  0.50)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.77it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Overall Timing[ 37/  1]	epoch_time 0.0409 (0.0450)	validation_time 0.0003 (0.0006)	train_time 0.0406 (0.0443)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4871000085771084, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 19%|#9        | 5/26 [00:00<00:01, 15.82it/s] 35%|###4      | 9/26 [00:00<00:00, 21.52it/s] 50%|#####     | 13/26 [00:00<00:00, 24.68it/s] 65%|######5   | 17/26 [00:00<00:00, 26.87it/s] 81%|########  | 21/26 [00:00<00:00, 28.03it/s] 96%|#########6| 25/26 [00:01<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 23.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.53 (  0.51)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5403 (7.5403)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 23%|##3       | 6/26 [00:00<00:00, 30.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.68it/s] 42%|####2     | 11/26 [00:00<00:00, 38.08it/s] 65%|######5   | 17/26 [00:00<00:00, 40.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.54it/s] 85%|########4 | 22/26 [00:00<00:00, 42.59it/s]100%|##########| 26/26 [00:00<00:00, 35.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.46 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.55 (  0.51)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.01 (  0.01)
Overall Timing[ 38/  1]	epoch_time 0.0439 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0434 (0.0442)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48260001054406165, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.43it/s] 35%|###4      | 9/26 [00:00<00:00, 25.44it/s] 46%|####6     | 12/26 [00:00<00:00, 26.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.05it/s] 88%|########8 | 23/26 [00:00<00:00, 29.26it/s]100%|##########| 26/26 [00:01<00:00, 25.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.46 (  0.46)	train_acc   0.50 (  0.49)	train_minacc   0.53 (  0.51)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5402 (7.5402)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.70it/s] 23%|##3       | 6/26 [00:00<00:01, 19.28it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.28it/s] 42%|####2     | 11/26 [00:00<00:00, 28.42it/s] 62%|######1   | 16/26 [00:00<00:00, 34.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.53it/s] 81%|########  | 21/26 [00:00<00:00, 35.30it/s]100%|##########| 26/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.56)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.53)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.25it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 39/  1]	epoch_time 0.0417 (0.0449)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0442)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4882000065147877, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 15%|#5        | 4/26 [00:00<00:01, 18.47it/s] 27%|##6       | 7/26 [00:00<00:00, 22.71it/s] 38%|###8      | 10/26 [00:00<00:00, 25.19it/s] 50%|#####     | 13/26 [00:00<00:00, 26.67it/s] 65%|######5   | 17/26 [00:00<00:00, 28.00it/s] 81%|########  | 21/26 [00:00<00:00, 28.85it/s] 96%|#########6| 25/26 [00:00<00:00, 29.64it/s]100%|##########| 26/26 [00:01<00:00, 25.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.49 (  0.49)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5401 (7.5401)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.84it/s] 15%|#5        | 4/26 [00:00<00:01, 18.33it/s] 35%|###4      | 9/26 [00:00<00:00, 31.22it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.22it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.79it/s] 92%|#########2| 24/26 [00:00<00:00, 39.04it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.46 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.46 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.55 (  0.50)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0432 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0441)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48400001087784766, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 15%|#5        | 4/26 [00:00<00:01, 15.91it/s] 27%|##6       | 7/26 [00:00<00:00, 20.39it/s] 38%|###8      | 10/26 [00:00<00:00, 23.15it/s] 50%|#####     | 13/26 [00:00<00:00, 24.93it/s] 62%|######1   | 16/26 [00:00<00:00, 26.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.35it/s] 88%|########8 | 23/26 [00:00<00:00, 28.20it/s]100%|##########| 26/26 [00:01<00:00, 23.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.51 (  0.49)	train_minacc   0.53 (  0.50)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 7.5400 (7.5401)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.16it/s] 23%|##3       | 6/26 [00:00<00:00, 20.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.99it/s] 42%|####2     | 11/26 [00:00<00:00, 29.95it/s] 65%|######5   | 17/26 [00:00<00:00, 35.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.70it/s] 85%|########4 | 22/26 [00:00<00:00, 39.00it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.51 (  0.53)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 41/  1]	epoch_time 0.0473 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0468 (0.0442)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4838000069856644, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 15%|#5        | 4/26 [00:00<00:01, 15.21it/s] 27%|##6       | 7/26 [00:00<00:00, 20.68it/s] 38%|###8      | 10/26 [00:00<00:00, 23.79it/s] 50%|#####     | 13/26 [00:00<00:00, 25.82it/s] 62%|######1   | 16/26 [00:00<00:00, 27.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.77it/s] 88%|########8 | 23/26 [00:00<00:00, 28.47it/s]100%|##########| 26/26 [00:01<00:00, 23.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.51 (  0.49)	train_minacc   0.50 (  0.52)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5399 (7.5400)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.26it/s] 27%|##6       | 7/26 [00:00<00:00, 33.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.51it/s] 46%|####6     | 12/26 [00:00<00:00, 39.43it/s] 65%|######5   | 17/26 [00:00<00:00, 42.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.00it/s] 85%|########4 | 22/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.50 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.51)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.53 (  0.52)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 42/  1]	epoch_time 0.0426 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0422 (0.0441)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4795000074505806, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 15%|#5        | 4/26 [00:00<00:01, 17.13it/s] 27%|##6       | 7/26 [00:00<00:00, 21.85it/s] 42%|####2     | 11/26 [00:00<00:00, 25.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.42it/s] 69%|######9   | 18/26 [00:00<00:00, 28.05it/s] 85%|########4 | 22/26 [00:00<00:00, 28.86it/s] 96%|#########6| 25/26 [00:00<00:00, 28.89it/s]100%|##########| 26/26 [00:01<00:00, 24.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.51 (  0.49)	train_minacc   0.53 (  0.51)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5398 (7.5399)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 23%|##3       | 6/26 [00:00<00:00, 25.28it/s] 38%|###8      | 10/26 [00:00<00:00, 30.89it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.01it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.85it/s] 96%|#########6| 25/26 [00:00<00:00, 40.85it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.52 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.51 (  0.52)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.53 (  0.52)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.83it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0422 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0441)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.487800006210804, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 19.06it/s] 35%|###4      | 9/26 [00:00<00:00, 24.25it/s] 50%|#####     | 13/26 [00:00<00:00, 27.07it/s] 65%|######5   | 17/26 [00:00<00:00, 28.47it/s] 81%|########  | 21/26 [00:00<00:00, 29.38it/s] 96%|#########6| 25/26 [00:00<00:00, 29.58it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.49 (  0.48)	train_minacc   0.45 (  0.51)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5398 (7.5398)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.69it/s] 31%|###       | 8/26 [00:00<00:00, 37.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.98it/s] 69%|######9   | 18/26 [00:00<00:00, 42.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.71it/s] 88%|########8 | 23/26 [00:00<00:00, 41.71it/s]100%|##########| 26/26 [00:00<00:00, 38.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.54 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.48 (  0.52)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.48)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.01 (  0.01)
Overall Timing[ 44/  1]	epoch_time 0.0445 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0441)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48210000824928284, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 15%|#5        | 4/26 [00:00<00:01, 15.01it/s] 31%|###       | 8/26 [00:00<00:00, 21.65it/s] 42%|####2     | 11/26 [00:00<00:00, 24.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.87it/s] 69%|######9   | 18/26 [00:00<00:00, 27.66it/s] 81%|########  | 21/26 [00:00<00:00, 28.24it/s] 96%|#########6| 25/26 [00:00<00:00, 29.08it/s]100%|##########| 26/26 [00:01<00:00, 24.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.51 (  0.49)	train_minacc   0.50 (  0.50)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5396 (7.5397)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.57it/s] 23%|##3       | 6/26 [00:00<00:00, 32.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.05it/s] 42%|####2     | 11/26 [00:00<00:00, 37.59it/s] 62%|######1   | 16/26 [00:00<00:00, 41.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.68it/s] 81%|########  | 21/26 [00:00<00:00, 39.57it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.60)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.55 (  0.56)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.49 (  0.53)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 45/  1]	epoch_time 0.0432 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0441)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.47910000747442244, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 15%|#5        | 4/26 [00:00<00:01, 16.23it/s] 27%|##6       | 7/26 [00:00<00:00, 20.93it/s] 38%|###8      | 10/26 [00:00<00:00, 24.08it/s] 50%|#####     | 13/26 [00:00<00:00, 26.01it/s] 62%|######1   | 16/26 [00:00<00:00, 26.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.80it/s] 88%|########8 | 23/26 [00:00<00:00, 28.15it/s]100%|##########| 26/26 [00:01<00:00, 23.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.51 (  0.48)	train_minacc   0.50 (  0.52)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5396 (7.5396)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.35it/s] 23%|##3       | 6/26 [00:00<00:01, 18.00it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.00it/s] 42%|####2     | 11/26 [00:00<00:00, 27.39it/s] 62%|######1   | 16/26 [00:00<00:00, 33.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.71it/s] 81%|########  | 21/26 [00:00<00:00, 34.77it/s]100%|##########| 26/26 [00:00<00:00, 28.67it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.54)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.48)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.20it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 46/  1]	epoch_time 0.0435 (0.0447)	validation_time 0.0007 (0.0006)	train_time 0.0428 (0.0440)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4809000059962273, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.47it/s] 35%|###4      | 9/26 [00:00<00:00, 24.81it/s] 50%|#####     | 13/26 [00:00<00:00, 27.12it/s] 65%|######5   | 17/26 [00:00<00:00, 28.36it/s] 81%|########  | 21/26 [00:00<00:00, 29.27it/s] 96%|#########6| 25/26 [00:00<00:00, 29.69it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.50 (  0.48)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5395 (7.5395)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.87it/s] 12%|#1        | 3/26 [00:00<00:02,  9.69it/s] 31%|###       | 8/26 [00:00<00:00, 23.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 69%|######9   | 18/26 [00:00<00:00, 35.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.89it/s] 88%|########8 | 23/26 [00:00<00:00, 36.09it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.60 (  0.60)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 47/  1]	epoch_time 0.0434 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0429 (0.0440)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4803000099360943, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 12%|#1        | 3/26 [00:00<00:01, 12.71it/s] 27%|##6       | 7/26 [00:00<00:00, 20.97it/s] 42%|####2     | 11/26 [00:00<00:00, 25.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.13it/s] 69%|######9   | 18/26 [00:00<00:00, 27.31it/s] 85%|########4 | 22/26 [00:00<00:00, 28.59it/s]100%|##########| 26/26 [00:01<00:00, 29.66it/s]100%|##########| 26/26 [00:01<00:00, 24.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.45 (  0.45)	train_acc   0.50 (  0.48)	train_minacc   0.47 (  0.52)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5394 (7.5394)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 19%|#9        | 5/26 [00:00<00:00, 25.03it/s] 38%|###8      | 10/26 [00:00<00:00, 31.67it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.20it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.20it/s] 96%|#########6| 25/26 [00:00<00:00, 42.54it/s]100%|##########| 26/26 [00:00<00:00, 35.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.52 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.47 (  0.52)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.52 (  0.48)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.04it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 48/  1]	epoch_time 0.0401 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0397 (0.0439)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.48170000636577603, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 19%|#9        | 5/26 [00:00<00:01, 17.12it/s] 35%|###4      | 9/26 [00:00<00:00, 22.88it/s] 50%|#####     | 13/26 [00:00<00:00, 25.75it/s] 62%|######1   | 16/26 [00:00<00:00, 26.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.27it/s] 85%|########4 | 22/26 [00:00<00:00, 27.73it/s] 96%|#########6| 25/26 [00:01<00:00, 28.37it/s]100%|##########| 26/26 [00:01<00:00, 23.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.44 (  0.45)	train_acc   0.51 (  0.48)	train_minacc   0.47 (  0.52)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 7.5393 (7.5393)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.00it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 46%|####6     | 12/26 [00:00<00:00, 39.74it/s] 65%|######5   | 17/26 [00:00<00:00, 42.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.47it/s] 85%|########4 | 22/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.56)	test_majacc   0.47 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.48)	test_minacc   0.50 (  0.53)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.51 (  0.47)	test_corr_d   0.05 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.80it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 49/  1]	epoch_time 0.0424 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0421 (0.0439)
record: (train_acc, test_acc) (0.8351000259518624, 0.5410000085830688)
last accs (train_acc, test_acc) (0.4790000076889992, 0.5360000133514404)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedwandb: \ 0.158 MB of 0.158 MB uploadedwandb: | 0.158 MB of 0.158 MB uploadedwandb: / 0.158 MB of 0.158 MB uploadedwandb: - 0.158 MB of 0.158 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp9uiustpi'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_215735-hulnmwwt
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/hulnmwwt
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1202
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6040, 3, 32, 32) (5960, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.49s/it] 19%|#9        | 5/26 [00:01<00:05,  4.00it/s] 35%|###4      | 9/26 [00:01<00:02,  7.65it/s] 50%|#####     | 13/26 [00:01<00:01, 11.34it/s] 65%|######5   | 17/26 [00:02<00:00, 14.97it/s] 81%|########  | 21/26 [00:02<00:00, 18.31it/s] 92%|#########2| 24/26 [00:02<00:00, 20.48it/s]100%|##########| 26/26 [00:02<00:00,  9.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.084 (12.559)	train_nll   0.47 (  0.55)	train_penalty   0.10 (  0.21)	weight_norm   9.62 ( 12.01)	train_acc   0.82 (  0.80)	train_minacc   0.03 (  0.11)	train_majacc   0.98 (  0.92)	train_corr   0.00 (  0.00)	l1 7.7478 (7.8639)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.33it/s] 12%|#1        | 3/26 [00:00<00:02,  9.43it/s] 27%|##6       | 7/26 [00:00<00:01, 17.80it/s]                                               27%|##6       | 7/26 [00:00<00:01, 17.80it/s] 46%|####6     | 12/26 [00:00<00:00, 27.04it/s] 65%|######5   | 17/26 [00:00<00:00, 32.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.36it/s] 88%|########8 | 23/26 [00:00<00:00, 35.63it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
Test: [   0/  26]	Loss 0.455 (0.455)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.455 (0.455)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.486 (0.436)	test_acc   0.81 (  0.84)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.486 (0.436)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.426 (0.432)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.426 (0.432)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.453 (0.431)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.453 (0.431)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.822 (1.822)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.822 (1.822)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.822 (1.822)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.822 (1.822)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/197/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0819 (0.0819)	validation_time 0.0068 (0.0068)	train_time 0.0719 (0.0719)
record: (train_acc, test_acc) (0.8419000270366669, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8419000270366669, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 15%|#5        | 4/26 [00:00<00:01, 20.19it/s] 27%|##6       | 7/26 [00:00<00:00, 23.04it/s] 38%|###8      | 10/26 [00:00<00:00, 25.36it/s] 50%|#####     | 13/26 [00:00<00:00, 26.84it/s] 62%|######1   | 16/26 [00:00<00:00, 27.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.41it/s] 88%|########8 | 23/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.328 (7.296)	train_nll   0.44 (  0.41)	train_penalty   0.10 (  0.06)	weight_norm   4.88 (  6.88)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.5630 (7.7452)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 23%|##3       | 6/26 [00:00<00:00, 24.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.99it/s] 42%|####2     | 11/26 [00:00<00:00, 33.43it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 36.64it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
Test: [   0/  26]	Loss 0.425 (0.425)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.425)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.463 (0.415)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.463 (0.415)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.392 (0.408)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.392 (0.408)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.427 (0.406)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.427 (0.406)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 1.874 (1.874)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.874 (1.874)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.874 (1.874)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.874 (1.874)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0471 (0.0645)	validation_time 0.0004 (0.0036)	train_time 0.0466 (0.0593)
record: (train_acc, test_acc) (0.8419000270366669, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8487000280022621, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.98it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.31it/s] 50%|#####     | 13/26 [00:00<00:00, 27.85it/s] 65%|######5   | 17/26 [00:00<00:00, 29.04it/s] 81%|########  | 21/26 [00:00<00:00, 29.59it/s] 96%|#########6| 25/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:00<00:00, 26.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.248 (4.092)	train_nll   0.42 (  0.40)	train_penalty   0.08 (  0.05)	weight_norm   2.83 (  3.69)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.05)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5964 (7.0623)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.70it/s] 27%|##6       | 7/26 [00:00<00:00, 24.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.46it/s] 46%|####6     | 12/26 [00:00<00:00, 33.03it/s] 69%|######9   | 18/26 [00:00<00:00, 39.74it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.74it/s] 88%|########8 | 23/26 [00:00<00:00, 42.90it/s]100%|##########| 26/26 [00:00<00:00, 34.52it/s]
Test: [   0/  26]	Loss 0.413 (0.413)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.413 (0.413)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.450 (0.405)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.450 (0.405)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.395 (0.401)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.395 (0.401)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.409 (0.398)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.409 (0.398)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 1.822 (1.822)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.822 (1.822)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.822 (1.822)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.822 (1.822)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/197/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0420 (0.0570)	validation_time 0.0003 (0.0025)	train_time 0.0416 (0.0534)
record: (train_acc, test_acc) (0.8495000279545784, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8495000279545784, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.93it/s] 15%|#5        | 4/26 [00:00<00:01, 13.04it/s] 27%|##6       | 7/26 [00:00<00:01, 18.34it/s] 38%|###8      | 10/26 [00:00<00:00, 21.92it/s] 50%|#####     | 13/26 [00:00<00:00, 23.78it/s] 62%|######1   | 16/26 [00:00<00:00, 25.60it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.51it/s] 85%|########4 | 22/26 [00:00<00:00, 27.44it/s]100%|##########| 26/26 [00:01<00:00, 29.18it/s]100%|##########| 26/26 [00:01<00:00, 22.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.178 (2.626)	train_nll   0.40 (  0.39)	train_penalty   0.06 (  0.04)	weight_norm   1.78 (  2.24)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.8431 (6.1330)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.03it/s] 23%|##3       | 6/26 [00:00<00:00, 28.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.91it/s] 42%|####2     | 11/26 [00:00<00:00, 36.35it/s] 62%|######1   | 16/26 [00:00<00:00, 39.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.18it/s] 81%|########  | 21/26 [00:00<00:00, 41.68it/s]100%|##########| 26/26 [00:00<00:00, 43.89it/s]100%|##########| 26/26 [00:00<00:00, 36.02it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   0.98 (  0.98)	Loss_d 0.399 (0.399)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.426 (0.373)	test_acc   0.82 (  0.85)	test_minacc   0.10 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.426 (0.373)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.10 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.94)
Test: [  20/  26]	Loss 0.337 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.337 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.375 (0.363)	test_acc   0.84 (  0.85)	test_minacc   0.08 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.375 (0.363)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.08 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 1.621 (1.621)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.621 (1.621)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.621 (1.621)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 1.621 (1.621)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/197/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0456 (0.0542)	validation_time 0.0004 (0.0020)	train_time 0.0452 (0.0513)
record: (train_acc, test_acc) (0.8525000231266022, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8525000231266022, 0.20000000298023224)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.37it/s] 12%|#1        | 3/26 [00:00<00:02,  9.64it/s] 23%|##3       | 6/26 [00:00<00:01, 16.26it/s] 35%|###4      | 9/26 [00:00<00:00, 20.54it/s] 50%|#####     | 13/26 [00:00<00:00, 24.20it/s] 62%|######1   | 16/26 [00:00<00:00, 25.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.54it/s] 92%|#########2| 24/26 [00:01<00:00, 28.64it/s]100%|##########| 26/26 [00:01<00:00, 21.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.538 (1.790)	train_nll   0.39 (  0.36)	train_penalty   0.08 (  0.03)	weight_norm   1.15 (  1.43)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 5.9498 (5.8431)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 12%|#1        | 3/26 [00:00<00:02,  9.74it/s] 35%|###4      | 9/26 [00:00<00:00, 25.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.11it/s] 92%|#########2| 24/26 [00:00<00:00, 38.25it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.377 (0.377)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.443 (0.382)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.443 (0.382)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  20/  26]	Loss 0.347 (0.375)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.347 (0.375)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.373 (0.372)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.373 (0.372)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 1.828 (1.828)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.828 (1.828)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.828 (1.828)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.828 (1.828)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  4/  1]	epoch_time 0.0430 (0.0519)	validation_time 0.0004 (0.0017)	train_time 0.0425 (0.0496)
record: (train_acc, test_acc) (0.8525000231266022, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8502000257968902, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.11it/s] 15%|#5        | 4/26 [00:00<00:01, 15.50it/s] 27%|##6       | 7/26 [00:00<00:00, 20.37it/s] 38%|###8      | 10/26 [00:00<00:00, 23.60it/s] 50%|#####     | 13/26 [00:00<00:00, 25.31it/s] 62%|######1   | 16/26 [00:00<00:00, 26.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.67it/s] 88%|########8 | 23/26 [00:00<00:00, 27.62it/s]100%|##########| 26/26 [00:01<00:00, 23.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.175 (1.295)	train_nll   0.42 (  0.36)	train_penalty   0.09 (  0.03)	weight_norm   0.76 (  0.93)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.4650 (6.1428)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 32.82it/s] 35%|###4      | 9/26 [00:00<00:00, 39.90it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.89it/s] 92%|#########2| 24/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.417 (0.417)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.417 (0.417)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.448 (0.398)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.448 (0.398)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.387 (0.393)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.387 (0.393)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.398 (0.392)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.392)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 1.791 (1.791)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.791 (1.791)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.791 (1.791)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.791 (1.791)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  5/  1]	epoch_time 0.0421 (0.0503)	validation_time 0.0004 (0.0015)	train_time 0.0417 (0.0483)
record: (train_acc, test_acc) (0.8525000231266022, 0.20000000298023224)
last accs (train_acc, test_acc) (0.8476000245809555, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 12%|#1        | 3/26 [00:00<00:01, 11.58it/s] 27%|##6       | 7/26 [00:00<00:00, 19.82it/s] 42%|####2     | 11/26 [00:00<00:00, 23.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.30it/s] 88%|########8 | 23/26 [00:00<00:00, 28.10it/s]100%|##########| 26/26 [00:01<00:00, 23.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.877 (0.982)	train_nll   0.37 (  0.36)	train_penalty   0.06 (  0.03)	weight_norm   0.51 (  0.63)	train_acc   0.84 (  0.85)	train_minacc   0.05 (  0.15)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.6076 (6.8971)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.43it/s] 27%|##6       | 7/26 [00:00<00:00, 33.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.64it/s] 46%|####6     | 12/26 [00:00<00:00, 38.78it/s] 69%|######9   | 18/26 [00:00<00:00, 40.29it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.29it/s] 88%|########8 | 23/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 37.78it/s]
Test: [   0/  26]	Loss 0.368 (0.368)	test_acc   0.83 (  0.83)	test_minacc   0.16 (  0.16)	test_majacc   0.95 (  0.95)	Loss_d 0.368 (0.368)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.389 (0.356)	test_acc   0.81 (  0.84)	test_minacc   0.23 (  0.27)	test_majacc   0.94 (  0.95)	Loss_d 0.389 (0.356)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.23 (  0.27)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.310 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.26 (  0.29)	test_majacc   0.96 (  0.95)	Loss_d 0.310 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.26 (  0.29)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.334 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.30)	test_majacc   0.95 (  0.95)	Loss_d 0.334 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.30)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.50it/s]
Test: [  0/  1]	Loss 1.577 (1.577)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.577 (1.577)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.577 (1.577)	test_acc   0.33 (  0.33)	test_minacc   0.27 (  0.27)	test_majacc   0.94 (  0.94)	Loss_d 1.577 (1.577)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.62 (  0.62)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/197/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0417 (0.0491)	validation_time 0.0004 (0.0013)	train_time 0.0413 (0.0473)
record: (train_acc, test_acc) (0.8544000259637833, 0.33400002121925354)
last accs (train_acc, test_acc) (0.8544000259637833, 0.33400002121925354)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.67it/s] 15%|#5        | 4/26 [00:00<00:01, 12.66it/s] 27%|##6       | 7/26 [00:00<00:01, 17.95it/s] 38%|###8      | 10/26 [00:00<00:00, 21.42it/s] 50%|#####     | 13/26 [00:00<00:00, 23.52it/s] 65%|######5   | 17/26 [00:00<00:00, 25.93it/s] 81%|########  | 21/26 [00:00<00:00, 27.53it/s] 96%|#########6| 25/26 [00:01<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 22.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.569)	train_nll   0.47 (  0.37)	train_penalty   0.00 (  0.02)	weight_norm   0.42 (  0.44)	train_acc   0.76 (  0.84)	train_minacc   0.70 (  0.27)	train_majacc   0.77 (  0.94)	train_corr   0.00 (  0.00)	l1 7.8100 (8.0563)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 23%|##3       | 6/26 [00:00<00:00, 31.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.81it/s] 42%|####2     | 11/26 [00:00<00:00, 37.81it/s] 62%|######1   | 16/26 [00:00<00:00, 41.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.70it/s] 81%|########  | 21/26 [00:00<00:00, 39.43it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]100%|##########| 26/26 [00:00<00:00, 35.85it/s]
Test: [   0/  26]	Loss 0.465 (0.465)	test_acc   0.79 (  0.79)	test_minacc   0.67 (  0.67)	test_majacc   0.81 (  0.81)	Loss_d 0.465 (0.465)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.81 (  0.81)	test_corr_d   0.58 (  0.58)
Test: [  10/  26]	Loss 0.472 (0.458)	test_acc   0.80 (  0.79)	test_minacc   0.80 (  0.71)	test_majacc   0.80 (  0.81)	Loss_d 0.472 (0.458)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.80 (  0.71)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.48 (  0.55)
Test: [  20/  26]	Loss 0.430 (0.449)	test_acc   0.81 (  0.80)	test_minacc   0.74 (  0.73)	test_majacc   0.82 (  0.81)	Loss_d 0.430 (0.449)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.61 (  0.56)
Test: [  26/  26]	Loss 0.464 (0.448)	test_acc   0.77 (  0.80)	test_minacc   0.73 (  0.73)	test_majacc   0.78 (  0.81)	Loss_d 0.464 (0.448)	test_acc_d   0.77 (  0.80)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.78 (  0.81)	test_corr_d   0.54 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.65it/s]
Test: [  0/  1]	Loss 0.630 (0.630)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.81 (  0.81)	Loss_d 0.630 (0.630)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.630 (0.630)	test_acc   0.70 (  0.70)	test_minacc   0.69 (  0.69)	test_majacc   0.81 (  0.81)	Loss_d 0.630 (0.630)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.81 (  0.81)	test_corr_d  -0.25 ( -0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/197/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0425 (0.0482)	validation_time 0.0004 (0.0012)	train_time 0.0421 (0.0466)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 15%|#5        | 4/26 [00:00<00:01, 13.09it/s] 27%|##6       | 7/26 [00:00<00:01, 18.63it/s] 38%|###8      | 10/26 [00:00<00:00, 22.09it/s] 50%|#####     | 13/26 [00:00<00:00, 23.83it/s] 65%|######5   | 17/26 [00:00<00:00, 26.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 27.21it/s] 92%|#########2| 24/26 [00:01<00:00, 28.68it/s]100%|##########| 26/26 [00:01<00:00, 22.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.001 (0.002)	train_nll   0.60 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.48)	train_acc   0.67 (  0.69)	train_minacc   0.65 (  0.67)	train_majacc   0.67 (  0.69)	train_corr   0.00 (  0.00)	l1 6.6958 (7.1042)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 23%|##3       | 6/26 [00:00<00:00, 26.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.13it/s] 42%|####2     | 11/26 [00:00<00:00, 34.43it/s] 62%|######1   | 16/26 [00:00<00:00, 39.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.05it/s] 81%|########  | 21/26 [00:00<00:00, 38.74it/s]100%|##########| 26/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 34.18it/s]
Test: [   0/  26]	Loss 0.601 (0.601)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.601 (0.601)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.623 (0.620)	test_acc   0.64 (  0.64)	test_minacc   0.72 (  0.64)	test_majacc   0.63 (  0.64)	Loss_d 0.623 (0.620)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.72 (  0.64)	test_majacc_d   0.63 (  0.64)	test_corr_d   0.19 (  0.27)
Test: [  20/  26]	Loss 0.605 (0.621)	test_acc   0.69 (  0.64)	test_minacc   0.74 (  0.64)	test_majacc   0.68 (  0.64)	Loss_d 0.605 (0.621)	test_acc_d   0.69 (  0.64)	test_minacc_d   0.74 (  0.64)	test_majacc_d   0.68 (  0.64)	test_corr_d   0.31 (  0.27)
Test: [  26/  26]	Loss 0.599 (0.622)	test_acc   0.68 (  0.64)	test_minacc   0.65 (  0.64)	test_majacc   0.69 (  0.64)	Loss_d 0.599 (0.622)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.69 (  0.64)	test_corr_d   0.33 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.74it/s]
Test: [  0/  1]	Loss 0.616 (0.616)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.58 (  0.58)	Loss_d 0.616 (0.616)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.616 (0.616)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.58 (  0.58)	Loss_d 0.616 (0.616)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.33 ( -0.33)
Overall Timing[  8/  1]	epoch_time 0.0436 (0.0477)	validation_time 0.0003 (0.0011)	train_time 0.0432 (0.0462)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.639400009572506, 0.6530000567436218)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 31%|###       | 8/26 [00:00<00:00, 22.94it/s] 42%|####2     | 11/26 [00:00<00:00, 25.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.10it/s] 69%|######9   | 18/26 [00:00<00:00, 27.63it/s] 85%|########4 | 22/26 [00:00<00:00, 29.09it/s] 96%|#########6| 25/26 [00:00<00:00, 29.24it/s]100%|##########| 26/26 [00:01<00:00, 25.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.001 (0.001)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.52)	train_acc   0.63 (  0.62)	train_minacc   0.60 (  0.62)	train_majacc   0.63 (  0.62)	train_corr   0.00 (  0.00)	l1 6.4743 (6.5491)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 23.40it/s] 31%|###       | 8/26 [00:00<00:00, 26.12it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.46it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.46it/s] 96%|#########6| 25/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 34.88it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.61 (  0.61)	test_minacc   0.67 (  0.67)	test_majacc   0.60 (  0.60)	Loss_d 0.653 (0.653)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.651 (0.661)	test_acc   0.59 (  0.58)	test_minacc   0.65 (  0.59)	test_majacc   0.57 (  0.58)	Loss_d 0.651 (0.661)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.12 (  0.17)
Test: [  20/  26]	Loss 0.657 (0.663)	test_acc   0.65 (  0.59)	test_minacc   0.74 (  0.60)	test_majacc   0.63 (  0.59)	Loss_d 0.657 (0.663)	test_acc_d   0.65 (  0.59)	test_minacc_d   0.74 (  0.60)	test_majacc_d   0.63 (  0.59)	test_corr_d   0.16 (  0.17)
Test: [  26/  26]	Loss 0.630 (0.663)	test_acc   0.63 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.64 (  0.59)	Loss_d 0.630 (0.663)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.28 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.21it/s]
Test: [  0/  1]	Loss 0.655 (0.655)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.655 (0.655)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.655 (0.655)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.655 (0.655)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.24 ( -0.24)
Overall Timing[  9/  1]	epoch_time 0.0452 (0.0475)	validation_time 0.0004 (0.0010)	train_time 0.0447 (0.0461)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.5905000094771385, 0.6050000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.07it/s] 15%|#5        | 4/26 [00:00<00:01, 17.97it/s] 27%|##6       | 7/26 [00:00<00:00, 22.25it/s] 38%|###8      | 10/26 [00:00<00:00, 24.77it/s] 50%|#####     | 13/26 [00:00<00:00, 25.80it/s] 62%|######1   | 16/26 [00:00<00:00, 27.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.82it/s] 88%|########8 | 23/26 [00:00<00:00, 28.68it/s]100%|##########| 26/26 [00:01<00:00, 24.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.001 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.62 (  0.59)	train_minacc   0.65 (  0.56)	train_majacc   0.62 (  0.59)	train_corr   0.00 (  0.00)	l1 6.4121 (6.4437)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 15%|#5        | 4/26 [00:00<00:01, 18.92it/s] 35%|###4      | 9/26 [00:00<00:00, 30.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.88it/s] 92%|#########2| 24/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 33.13it/s]
Test: [   0/  26]	Loss 0.679 (0.679)	test_acc   0.57 (  0.57)	test_minacc   0.46 (  0.46)	test_majacc   0.60 (  0.60)	Loss_d 0.679 (0.679)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.671 (0.679)	test_acc   0.56 (  0.57)	test_minacc   0.54 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.671 (0.679)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.10 (  0.11)
Test: [  20/  26]	Loss 0.686 (0.680)	test_acc   0.52 (  0.56)	test_minacc   0.44 (  0.49)	test_majacc   0.53 (  0.57)	Loss_d 0.686 (0.680)	test_acc_d   0.52 (  0.56)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.09 (  0.12)
Test: [  26/  26]	Loss 0.659 (0.679)	test_acc   0.62 (  0.56)	test_minacc   0.65 (  0.49)	test_majacc   0.62 (  0.58)	Loss_d 0.659 (0.679)	test_acc_d   0.62 (  0.56)	test_minacc_d   0.65 (  0.49)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.25 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.65it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.678 (0.678)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.678 (0.678)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 10/  1]	epoch_time 0.0428 (0.0470)	validation_time 0.0004 (0.0010)	train_time 0.0423 (0.0457)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.5633000130057335, 0.49500003457069397)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.08it/s] 19%|#9        | 5/26 [00:00<00:01, 15.45it/s] 35%|###4      | 9/26 [00:00<00:00, 21.31it/s] 50%|#####     | 13/26 [00:00<00:00, 24.56it/s] 65%|######5   | 17/26 [00:00<00:00, 26.44it/s] 81%|########  | 21/26 [00:00<00:00, 27.90it/s] 96%|#########6| 25/26 [00:01<00:00, 28.78it/s]100%|##########| 26/26 [00:01<00:00, 23.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.57 (  0.51)	train_minacc   0.57 (  0.50)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 6.3896 (6.4017)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 23%|##3       | 6/26 [00:00<00:00, 28.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.43it/s] 42%|####2     | 11/26 [00:00<00:00, 35.36it/s] 62%|######1   | 16/26 [00:00<00:00, 40.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.13it/s] 81%|########  | 21/26 [00:00<00:00, 42.56it/s]100%|##########| 26/26 [00:00<00:00, 44.46it/s]100%|##########| 26/26 [00:00<00:00, 36.12it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.685 (0.685)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.679 (0.685)	test_acc   0.49 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.679 (0.685)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.07 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.686)	test_acc   0.48 (  0.51)	test_minacc   0.56 (  0.51)	test_majacc   0.47 (  0.51)	Loss_d 0.691 (0.686)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.04 (  0.08)
Test: [  26/  26]	Loss 0.671 (0.685)	test_acc   0.54 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.51)	Loss_d 0.671 (0.685)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.22 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.91it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.47 (  0.47)	Loss_d 0.683 (0.683)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 11/  1]	epoch_time 0.0422 (0.0466)	validation_time 0.0005 (0.0009)	train_time 0.0417 (0.0454)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.5077000127136707, 0.5010000467300415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.63it/s] 15%|#5        | 4/26 [00:00<00:01, 15.92it/s] 31%|###       | 8/26 [00:00<00:00, 22.60it/s] 46%|####6     | 12/26 [00:00<00:00, 25.93it/s] 62%|######1   | 16/26 [00:00<00:00, 28.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.55it/s] 92%|#########2| 24/26 [00:00<00:00, 29.82it/s]100%|##########| 26/26 [00:01<00:00, 24.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.50 (  0.48)	train_minacc   0.47 (  0.52)	train_majacc   0.50 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3843 (6.3884)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 15%|#5        | 4/26 [00:00<00:01, 18.56it/s] 35%|###4      | 9/26 [00:00<00:00, 30.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.66it/s] 50%|#####     | 13/26 [00:00<00:00, 33.15it/s] 69%|######9   | 18/26 [00:00<00:00, 34.68it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.68it/s] 88%|########8 | 23/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 32.22it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.44 (  0.44)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.688 (0.688)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.685 (0.688)	test_acc   0.51 (  0.48)	test_minacc   0.58 (  0.54)	test_majacc   0.49 (  0.47)	Loss_d 0.685 (0.688)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.06 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.689)	test_acc   0.47 (  0.49)	test_minacc   0.57 (  0.53)	test_majacc   0.45 (  0.48)	Loss_d 0.692 (0.689)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.45 (  0.48)	test_corr_d   0.00 (  0.06)
Test: [  26/  26]	Loss 0.679 (0.688)	test_acc   0.50 (  0.49)	test_minacc   0.45 (  0.52)	test_majacc   0.51 (  0.48)	Loss_d 0.679 (0.688)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.18 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.686 (0.686)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 12/  1]	epoch_time 0.0451 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0447 (0.0454)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48920000877976416, 0.5120000243186951)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.83it/s] 19%|#9        | 5/26 [00:00<00:00, 21.14it/s] 31%|###       | 8/26 [00:00<00:00, 23.86it/s] 42%|####2     | 11/26 [00:00<00:00, 25.86it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.56it/s] 69%|######9   | 18/26 [00:00<00:00, 28.02it/s] 85%|########4 | 22/26 [00:00<00:00, 29.13it/s] 96%|#########6| 25/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 25.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.47 (  0.47)	train_minacc   0.45 (  0.53)	train_majacc   0.48 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3846 (6.3858)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.60it/s] 27%|##6       | 7/26 [00:00<00:00, 34.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.71it/s] 46%|####6     | 12/26 [00:00<00:00, 40.52it/s] 65%|######5   | 17/26 [00:00<00:00, 40.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.92it/s] 85%|########4 | 22/26 [00:00<00:00, 43.07it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.51 (  0.47)	test_minacc   0.59 (  0.54)	test_majacc   0.49 (  0.46)	Loss_d 0.688 (0.691)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.49 (  0.46)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.691)	test_acc   0.46 (  0.48)	test_minacc   0.59 (  0.53)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.691)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.04 (  0.04)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.46 (  0.48)	test_minacc   0.43 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.685 (0.691)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.43 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.15 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.06it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.689 (0.689)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 13/  1]	epoch_time 0.0423 (0.0462)	validation_time 0.0004 (0.0009)	train_time 0.0419 (0.0451)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47780000400543216, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 15%|#5        | 4/26 [00:00<00:01, 19.55it/s] 27%|##6       | 7/26 [00:00<00:00, 23.50it/s] 42%|####2     | 11/26 [00:00<00:00, 26.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.48it/s] 65%|######5   | 17/26 [00:00<00:00, 28.13it/s] 81%|########  | 21/26 [00:00<00:00, 29.14it/s] 96%|#########6| 25/26 [00:00<00:00, 29.87it/s]100%|##########| 26/26 [00:01<00:00, 25.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.47 (  0.47)	train_minacc   0.45 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3867 (6.3868)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s] 23%|##3       | 6/26 [00:00<00:00, 25.74it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.74it/s] 42%|####2     | 11/26 [00:00<00:00, 33.36it/s] 62%|######1   | 16/26 [00:00<00:00, 38.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.32it/s] 81%|########  | 21/26 [00:00<00:00, 40.22it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.48 (  0.47)	test_minacc   0.55 (  0.54)	test_majacc   0.47 (  0.46)	Loss_d 0.691 (0.692)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.47 (  0.46)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.48)	test_minacc   0.61 (  0.54)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.09 (  0.01)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.46 (  0.48)	test_minacc   0.45 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.688 (0.692)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.45 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.11 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.40 (  0.40)	Loss_d 0.690 (0.690)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 14/  1]	epoch_time 0.0407 (0.0459)	validation_time 0.0006 (0.0008)	train_time 0.0401 (0.0448)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47700000870227816, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.35it/s] 15%|#5        | 4/26 [00:00<00:01, 11.86it/s] 27%|##6       | 7/26 [00:00<00:01, 17.42it/s] 42%|####2     | 11/26 [00:00<00:00, 22.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.66it/s] 85%|########4 | 22/26 [00:01<00:00, 27.43it/s]100%|##########| 26/26 [00:01<00:00, 28.75it/s]100%|##########| 26/26 [00:01<00:00, 21.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.44 (  0.47)	train_minacc   0.47 (  0.53)	train_majacc   0.43 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3888 (6.3885)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 11.81it/s] 31%|###       | 8/26 [00:00<00:00, 25.14it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.14it/s] 50%|#####     | 13/26 [00:00<00:00, 33.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.35it/s] 96%|#########6| 25/26 [00:00<00:00, 44.47it/s]100%|##########| 26/26 [00:00<00:00, 34.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.48)	test_minacc   0.61 (  0.54)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.12 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.50 (  0.54)	test_majacc   0.42 (  0.46)	Loss_d 0.690 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.42 (  0.46)	test_corr_d   0.09 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.32it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 15/  1]	epoch_time 0.0446 (0.0458)	validation_time 0.0004 (0.0008)	train_time 0.0442 (0.0447)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47360000872612, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 31%|###       | 8/26 [00:00<00:00, 24.13it/s] 42%|####2     | 11/26 [00:00<00:00, 25.64it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.05it/s] 65%|######5   | 17/26 [00:00<00:00, 27.74it/s] 81%|########  | 21/26 [00:00<00:00, 28.80it/s] 96%|#########6| 25/26 [00:00<00:00, 29.22it/s]100%|##########| 26/26 [00:01<00:00, 25.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.43 (  0.47)	train_minacc   0.53 (  0.53)	train_majacc   0.41 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3900 (6.3898)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 23%|##3       | 6/26 [00:00<00:00, 28.27it/s] 38%|###8      | 10/26 [00:00<00:00, 30.25it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.25it/s] 62%|######1   | 16/26 [00:00<00:00, 37.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.86it/s] 81%|########  | 21/26 [00:00<00:00, 39.49it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]100%|##########| 26/26 [00:00<00:00, 33.66it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.51 (  0.51)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.49 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.00 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.61 (  0.54)	test_majacc   0.44 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.11 ( -0.02)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.55 (  0.54)	test_majacc   0.40 (  0.46)	Loss_d 0.691 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.40 (  0.46)	test_corr_d   0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 16/  1]	epoch_time 0.0432 (0.0456)	validation_time 0.0006 (0.0008)	train_time 0.0425 (0.0446)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47270000699162484, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.95it/s] 15%|#5        | 4/26 [00:00<00:02, 10.67it/s] 27%|##6       | 7/26 [00:00<00:01, 16.04it/s] 38%|###8      | 10/26 [00:00<00:00, 20.04it/s] 50%|#####     | 13/26 [00:00<00:00, 22.44it/s] 62%|######1   | 16/26 [00:00<00:00, 24.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.01it/s] 88%|########8 | 23/26 [00:01<00:00, 27.51it/s]100%|##########| 26/26 [00:01<00:00, 20.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.42 (  0.48)	train_minacc   0.53 (  0.53)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3904 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.83it/s] 27%|##6       | 7/26 [00:00<00:00, 34.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.28it/s] 46%|####6     | 12/26 [00:00<00:00, 40.31it/s] 65%|######5   | 17/26 [00:00<00:00, 43.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.45it/s] 85%|########4 | 22/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.51 (  0.53)	test_majacc   0.45 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.01 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.47)	test_minacc   0.55 (  0.53)	test_majacc   0.40 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.47)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.40 (  0.46)	test_corr_d   0.05 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 17/  1]	epoch_time 0.0507 (0.0459)	validation_time 0.0004 (0.0008)	train_time 0.0503 (0.0449)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47060000711679456, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 15%|#5        | 4/26 [00:00<00:01, 19.91it/s] 27%|##6       | 7/26 [00:00<00:00, 24.22it/s] 38%|###8      | 10/26 [00:00<00:00, 26.15it/s] 50%|#####     | 13/26 [00:00<00:00, 26.58it/s] 62%|######1   | 16/26 [00:00<00:00, 27.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.01it/s] 85%|########4 | 22/26 [00:00<00:00, 28.27it/s] 96%|#########6| 25/26 [00:00<00:00, 28.52it/s]100%|##########| 26/26 [00:01<00:00, 25.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.42 (  0.48)	train_minacc   0.50 (  0.53)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3905 (6.3906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 23%|##3       | 6/26 [00:00<00:00, 31.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.73it/s] 42%|####2     | 11/26 [00:00<00:00, 37.31it/s] 62%|######1   | 16/26 [00:00<00:00, 41.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.21it/s] 81%|########  | 21/26 [00:00<00:00, 40.51it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.47)	test_minacc   0.51 (  0.52)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.50 (  0.53)	test_majacc   0.41 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.41 (  0.46)	test_corr_d   0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.44it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 18/  1]	epoch_time 0.0510 (0.0462)	validation_time 0.0004 (0.0008)	train_time 0.0506 (0.0452)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4676000059247017, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.29it/s] 19%|#9        | 5/26 [00:00<00:01, 18.41it/s] 31%|###       | 8/26 [00:00<00:00, 22.73it/s] 42%|####2     | 11/26 [00:00<00:00, 24.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.99it/s] 65%|######5   | 17/26 [00:00<00:00, 26.68it/s] 81%|########  | 21/26 [00:00<00:00, 28.13it/s] 96%|#########6| 25/26 [00:00<00:00, 28.91it/s]100%|##########| 26/26 [00:01<00:00, 24.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.53 (  0.53)	train_acc   0.42 (  0.47)	train_minacc   0.50 (  0.53)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3904 (6.3905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.32it/s] 31%|###       | 8/26 [00:00<00:00, 35.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.10it/s] 50%|#####     | 13/26 [00:00<00:00, 39.43it/s] 69%|######9   | 18/26 [00:00<00:00, 41.08it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.08it/s] 88%|########8 | 23/26 [00:00<00:00, 42.50it/s]100%|##########| 26/26 [00:00<00:00, 37.10it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.42 (  0.42)	test_minacc   0.46 (  0.46)	test_majacc   0.41 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.54 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.61 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.46)	test_minacc   0.53 (  0.53)	test_majacc   0.40 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.40 (  0.45)	test_corr_d   0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 19/  1]	epoch_time 0.0434 (0.0460)	validation_time 0.0003 (0.0007)	train_time 0.0431 (0.0451)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.464800007045269, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 15%|#5        | 4/26 [00:00<00:01, 15.59it/s] 27%|##6       | 7/26 [00:00<00:00, 20.14it/s] 42%|####2     | 11/26 [00:00<00:00, 24.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.68it/s] 65%|######5   | 17/26 [00:00<00:00, 26.70it/s] 81%|########  | 21/26 [00:00<00:00, 28.10it/s] 96%|#########6| 25/26 [00:00<00:00, 28.83it/s]100%|##########| 26/26 [00:01<00:00, 24.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.42 (  0.47)	train_minacc   0.53 (  0.53)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.85it/s] 23%|##3       | 6/26 [00:00<00:00, 25.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.56it/s] 42%|####2     | 11/26 [00:00<00:00, 33.66it/s] 62%|######1   | 16/26 [00:00<00:00, 38.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.46it/s] 81%|########  | 21/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 33.33it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.46 (  0.46)	test_majacc   0.42 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.46)	test_minacc   0.54 (  0.51)	test_majacc   0.46 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.59 (  0.52)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.09 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.41 (  0.46)	test_minacc   0.53 (  0.52)	test_majacc   0.39 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.41 (  0.46)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.39 (  0.45)	test_corr_d   0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 20/  1]	epoch_time 0.0406 (0.0458)	validation_time 0.0004 (0.0007)	train_time 0.0401 (0.0449)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4624000038206577, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 15%|#5        | 4/26 [00:00<00:01, 20.65it/s] 27%|##6       | 7/26 [00:00<00:00, 24.28it/s] 42%|####2     | 11/26 [00:00<00:00, 27.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.32it/s] 88%|########8 | 23/26 [00:00<00:00, 29.94it/s]100%|##########| 26/26 [00:00<00:00, 26.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.43 (  0.47)	train_minacc   0.57 (  0.53)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.49it/s] 27%|##6       | 7/26 [00:00<00:00, 24.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.75it/s] 50%|#####     | 13/26 [00:00<00:00, 34.18it/s] 69%|######9   | 18/26 [00:00<00:00, 38.13it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.13it/s] 88%|########8 | 23/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 33.38it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.46 (  0.46)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.55 (  0.50)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.57 (  0.51)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.08 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.46)	test_minacc   0.53 (  0.51)	test_majacc   0.40 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.40 (  0.45)	test_corr_d   0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.89it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 21/  1]	epoch_time 0.0395 (0.0455)	validation_time 0.0004 (0.0007)	train_time 0.0391 (0.0446)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.46210000467300416, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.46it/s] 19%|#9        | 5/26 [00:00<00:00, 22.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.75it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 62%|######1   | 16/26 [00:00<00:00, 28.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.97it/s] 88%|########8 | 23/26 [00:00<00:00, 29.80it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.42 (  0.47)	train_minacc   0.57 (  0.52)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.96it/s] 27%|##6       | 7/26 [00:00<00:00, 31.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.58it/s] 46%|####6     | 12/26 [00:00<00:00, 37.04it/s] 65%|######5   | 17/26 [00:00<00:00, 39.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.90it/s] 85%|########4 | 22/26 [00:00<00:00, 42.00it/s]100%|##########| 26/26 [00:00<00:00, 35.77it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.46 (  0.46)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.56 (  0.51)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.57 (  0.52)	test_majacc   0.48 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.48 (  0.45)	test_corr_d  -0.08 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.46)	test_minacc   0.53 (  0.52)	test_majacc   0.40 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.40 (  0.45)	test_corr_d   0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 22/  1]	epoch_time 0.0439 (0.0454)	validation_time 0.0003 (0.0007)	train_time 0.0435 (0.0446)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4635000059604645, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.08it/s] 27%|##6       | 7/26 [00:00<00:00, 22.10it/s] 42%|####2     | 11/26 [00:00<00:00, 25.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.40it/s] 88%|########8 | 23/26 [00:00<00:00, 29.17it/s]100%|##########| 26/26 [00:01<00:00, 25.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.390574932098389
set z to 6.0710461854934685
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.42 (  0.47)	train_minacc   0.50 (  0.51)	train_majacc   0.40 (  0.46)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 23%|##3       | 6/26 [00:00<00:00, 27.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.26it/s] 42%|####2     | 11/26 [00:00<00:00, 34.98it/s] 62%|######1   | 16/26 [00:00<00:00, 39.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.25it/s] 81%|########  | 21/26 [00:00<00:00, 38.05it/s]100%|##########| 26/26 [00:00<00:00, 41.36it/s]100%|##########| 26/26 [00:00<00:00, 33.75it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.46 (  0.46)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.46)	test_minacc   0.58 (  0.51)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.47)	test_minacc   0.59 (  0.52)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.07 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.46)	test_minacc   0.53 (  0.52)	test_majacc   0.40 (  0.45)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.40 (  0.45)	test_corr_d   0.04 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.22it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 23/  1]	epoch_time 0.0446 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0442 (0.0445)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4647000058889389, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 19%|#9        | 5/26 [00:00<00:01, 15.05it/s] 31%|###       | 8/26 [00:00<00:00, 19.29it/s] 42%|####2     | 11/26 [00:00<00:00, 22.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 25.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.16it/s] 88%|########8 | 23/26 [00:00<00:00, 28.50it/s]100%|##########| 26/26 [00:01<00:00, 22.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.42 (  0.47)	train_minacc   0.50 (  0.51)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 15%|#5        | 4/26 [00:00<00:01, 18.90it/s] 35%|###4      | 9/26 [00:00<00:00, 30.98it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.11it/s] 92%|#########2| 24/26 [00:00<00:00, 41.18it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.46)	test_minacc   0.56 (  0.51)	test_majacc   0.47 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.47 (  0.45)	test_corr_d  -0.02 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.47)	test_minacc   0.59 (  0.52)	test_majacc   0.49 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.49 (  0.46)	test_corr_d  -0.07 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.50 (  0.52)	test_majacc   0.40 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.40 (  0.46)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.92it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 24/  1]	epoch_time 0.0415 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0411 (0.0444)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4659000079333782, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 15%|#5        | 4/26 [00:00<00:01, 15.11it/s] 27%|##6       | 7/26 [00:00<00:00, 20.37it/s] 38%|###8      | 10/26 [00:00<00:00, 23.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.29it/s] 65%|######5   | 17/26 [00:00<00:00, 27.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 26.86it/s] 88%|########8 | 23/26 [00:00<00:00, 27.62it/s]100%|##########| 26/26 [00:01<00:00, 23.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.47)	train_minacc   0.50 (  0.50)	train_majacc   0.39 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3903 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 11.87it/s] 31%|###       | 8/26 [00:00<00:00, 25.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.18it/s] 50%|#####     | 13/26 [00:00<00:00, 32.60it/s] 69%|######9   | 18/26 [00:00<00:00, 37.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.58it/s] 88%|########8 | 23/26 [00:00<00:00, 37.45it/s]100%|##########| 26/26 [00:00<00:00, 32.40it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.58 (  0.50)	test_majacc   0.48 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.48 (  0.46)	test_corr_d  -0.03 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.47)	test_minacc   0.56 (  0.51)	test_majacc   0.50 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.50 (  0.46)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.50 (  0.51)	test_majacc   0.40 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.40 (  0.46)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.16it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 25/  1]	epoch_time 0.0425 (0.0451)	validation_time 0.0006 (0.0007)	train_time 0.0419 (0.0443)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.46840000662207604, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.81it/s] 23%|##3       | 6/26 [00:00<00:00, 24.28it/s] 38%|###8      | 10/26 [00:00<00:00, 27.11it/s] 50%|#####     | 13/26 [00:00<00:00, 27.91it/s] 62%|######1   | 16/26 [00:00<00:00, 28.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.88it/s] 88%|########8 | 23/26 [00:00<00:00, 29.34it/s]100%|##########| 26/26 [00:00<00:00, 26.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.47)	train_minacc   0.50 (  0.50)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3904 (6.3904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.75it/s] 27%|##6       | 7/26 [00:00<00:00, 34.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.94it/s] 46%|####6     | 12/26 [00:00<00:00, 40.55it/s] 65%|######5   | 17/26 [00:00<00:00, 38.33it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.33it/s] 85%|########4 | 22/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 36.42it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.58 (  0.50)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.47)	test_minacc   0.54 (  0.50)	test_majacc   0.50 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.50 (  0.46)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.41 (  0.47)	test_minacc   0.50 (  0.51)	test_majacc   0.39 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.41 (  0.47)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.39 (  0.46)	test_corr_d   0.04 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.49it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 26/  1]	epoch_time 0.0400 (0.0449)	validation_time 0.0004 (0.0007)	train_time 0.0396 (0.0441)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4679000069797039, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.89it/s] 19%|#9        | 5/26 [00:00<00:00, 22.30it/s] 31%|###       | 8/26 [00:00<00:00, 25.09it/s] 42%|####2     | 11/26 [00:00<00:00, 26.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.52it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.48it/s] 88%|########8 | 23/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.40 (  0.47)	train_minacc   0.50 (  0.49)	train_majacc   0.39 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3905 (6.3905)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.05it/s] 23%|##3       | 6/26 [00:00<00:01, 15.96it/s] 38%|###8      | 10/26 [00:00<00:00, 22.73it/s]                                                38%|###8      | 10/26 [00:00<00:00, 22.73it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.21it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.21it/s] 96%|#########6| 25/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 27.88it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.48 (  0.48)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.56 (  0.49)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.47)	test_minacc   0.52 (  0.50)	test_majacc   0.50 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.06 ( -0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.41 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.40 (  0.46)	Loss_d 0.692 (0.693)	test_acc_d   0.41 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.40 (  0.46)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 27/  1]	epoch_time 0.0482 (0.0451)	validation_time 0.0004 (0.0007)	train_time 0.0478 (0.0443)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4684000048339367, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:01, 20.84it/s] 35%|###4      | 9/26 [00:00<00:00, 25.23it/s] 50%|#####     | 13/26 [00:00<00:00, 27.21it/s] 62%|######1   | 16/26 [00:00<00:00, 27.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.36it/s] 88%|########8 | 23/26 [00:00<00:00, 28.80it/s]100%|##########| 26/26 [00:01<00:00, 25.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.47)	train_minacc   0.50 (  0.49)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3905 (6.3906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 23%|##3       | 6/26 [00:00<00:00, 28.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.90it/s] 42%|####2     | 11/26 [00:00<00:00, 36.13it/s] 62%|######1   | 16/26 [00:00<00:00, 40.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.21it/s] 81%|########  | 21/26 [00:00<00:00, 38.90it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]100%|##########| 26/26 [00:00<00:00, 34.47it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.47)	test_minacc   0.59 (  0.50)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.47)	test_minacc   0.52 (  0.50)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.41 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.40 (  0.47)	Loss_d 0.692 (0.693)	test_acc_d   0.41 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.40 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.23it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 28/  1]	epoch_time 0.0427 (0.0450)	validation_time 0.0005 (0.0007)	train_time 0.0422 (0.0442)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47070000585913657, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.26it/s] 19%|#9        | 5/26 [00:00<00:01, 18.22it/s] 35%|###4      | 9/26 [00:00<00:00, 23.72it/s] 50%|#####     | 13/26 [00:00<00:00, 26.07it/s] 65%|######5   | 17/26 [00:00<00:00, 27.74it/s] 81%|########  | 21/26 [00:00<00:00, 28.69it/s] 96%|#########6| 25/26 [00:00<00:00, 29.35it/s]100%|##########| 26/26 [00:01<00:00, 25.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.48)	train_minacc   0.50 (  0.49)	train_majacc   0.40 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3906 (6.3907)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 23%|##3       | 6/26 [00:00<00:00, 24.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.33it/s] 42%|####2     | 11/26 [00:00<00:00, 32.36it/s] 62%|######1   | 16/26 [00:00<00:00, 37.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.90it/s] 81%|########  | 21/26 [00:00<00:00, 37.81it/s]100%|##########| 26/26 [00:00<00:00, 40.36it/s]100%|##########| 26/26 [00:00<00:00, 31.18it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.51 (  0.51)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.47)	test_minacc   0.58 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.54 (  0.50)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.40 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.40 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 29/  1]	epoch_time 0.0424 (0.0449)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0441)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4724000052213669, 0.5250000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.97it/s] 19%|#9        | 5/26 [00:00<00:01, 12.74it/s] 31%|###       | 8/26 [00:00<00:01, 17.50it/s] 42%|####2     | 11/26 [00:00<00:00, 20.92it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.44it/s] 88%|########8 | 23/26 [00:01<00:00, 27.59it/s]100%|##########| 26/26 [00:01<00:00, 21.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.48)	train_minacc   0.50 (  0.49)	train_majacc   0.39 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3907 (6.3907)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 23%|##3       | 6/26 [00:00<00:00, 21.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.28it/s] 42%|####2     | 11/26 [00:00<00:00, 30.22it/s] 62%|######1   | 16/26 [00:00<00:00, 36.10it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.10it/s] 81%|########  | 21/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 41.86it/s]100%|##########| 26/26 [00:00<00:00, 32.20it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.54 (  0.50)	test_majacc   0.51 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.51 (  0.47)	test_corr_d  -0.05 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.39 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.39 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 30/  1]	epoch_time 0.0429 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0425 (0.0441)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47250000670552256, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.37it/s] 19%|#9        | 5/26 [00:00<00:00, 23.61it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 46%|####6     | 12/26 [00:00<00:00, 27.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.40it/s] 88%|########8 | 23/26 [00:00<00:00, 29.84it/s]100%|##########| 26/26 [00:00<00:00, 26.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.48)	train_minacc   0.50 (  0.49)	train_majacc   0.39 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3908 (6.3909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 23%|##3       | 6/26 [00:00<00:00, 30.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.47it/s] 42%|####2     | 11/26 [00:00<00:00, 37.04it/s] 62%|######1   | 16/26 [00:00<00:00, 40.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.99it/s] 81%|########  | 21/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 42.15it/s]100%|##########| 26/26 [00:00<00:00, 35.39it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.54 (  0.50)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.39 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.39 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.73it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 31/  1]	epoch_time 0.0447 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0442 (0.0441)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47230000883340834, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 15%|#5        | 4/26 [00:00<00:01, 17.91it/s] 27%|##6       | 7/26 [00:00<00:00, 22.78it/s] 42%|####2     | 11/26 [00:00<00:00, 26.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.03it/s] 69%|######9   | 18/26 [00:00<00:00, 28.31it/s] 85%|########4 | 22/26 [00:00<00:00, 29.39it/s]100%|##########| 26/26 [00:00<00:00, 30.08it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.48)	train_minacc   0.50 (  0.49)	train_majacc   0.40 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3909 (6.3910)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.56it/s] 38%|###8      | 10/26 [00:00<00:00, 34.08it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.77it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.67it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.67it/s] 96%|#########6| 25/26 [00:00<00:00, 42.59it/s]100%|##########| 26/26 [00:00<00:00, 34.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.50)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.54 (  0.50)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.38 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.38 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.39it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.45 (  0.45)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 32/  1]	epoch_time 0.0427 (0.0448)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4734000056087971, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 15%|#5        | 4/26 [00:00<00:01, 18.12it/s] 27%|##6       | 7/26 [00:00<00:00, 22.54it/s] 38%|###8      | 10/26 [00:00<00:00, 24.38it/s] 50%|#####     | 13/26 [00:00<00:00, 25.22it/s] 62%|######1   | 16/26 [00:00<00:00, 26.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 25.48it/s] 85%|########4 | 22/26 [00:00<00:00, 26.75it/s] 96%|#########6| 25/26 [00:01<00:00, 27.62it/s]100%|##########| 26/26 [00:01<00:00, 23.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.52 (  0.52)	train_acc   0.41 (  0.48)	train_minacc   0.47 (  0.49)	train_majacc   0.40 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3911 (6.3911)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 23%|##3       | 6/26 [00:00<00:00, 31.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.54it/s] 42%|####2     | 11/26 [00:00<00:00, 38.11it/s] 62%|######1   | 16/26 [00:00<00:00, 41.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.93it/s] 81%|########  | 21/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 42.44it/s]100%|##########| 26/26 [00:00<00:00, 35.69it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.49 (  0.49)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.56 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.04 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.50)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.52 (  0.47)	test_corr_d  -0.04 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.47)	test_minacc   0.50 (  0.50)	test_majacc   0.38 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.47)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.38 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 33/  1]	epoch_time 0.0452 (0.0448)	validation_time 0.0003 (0.0006)	train_time 0.0449 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4747000061571598, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 12%|#1        | 3/26 [00:00<00:02, 11.17it/s] 23%|##3       | 6/26 [00:00<00:01, 17.97it/s] 35%|###4      | 9/26 [00:00<00:00, 21.50it/s] 46%|####6     | 12/26 [00:00<00:00, 24.22it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.01it/s] 69%|######9   | 18/26 [00:00<00:00, 26.85it/s] 81%|########  | 21/26 [00:00<00:00, 27.67it/s] 96%|#########6| 25/26 [00:01<00:00, 29.30it/s]100%|##########| 26/26 [00:01<00:00, 23.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.41 (  0.48)	train_minacc   0.45 (  0.49)	train_majacc   0.40 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3912 (6.3912)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.80it/s] 23%|##3       | 6/26 [00:00<00:00, 32.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.20it/s] 42%|####2     | 11/26 [00:00<00:00, 38.38it/s] 62%|######1   | 16/26 [00:00<00:00, 41.96it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.96it/s] 81%|########  | 21/26 [00:00<00:00, 39.97it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.49)	test_majacc   0.43 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.58 (  0.51)	test_majacc   0.46 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.46 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.50)	test_majacc   0.52 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.52 (  0.48)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.48)	test_minacc   0.50 (  0.50)	test_majacc   0.39 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.48)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.39 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.92it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 34/  1]	epoch_time 0.0437 (0.0447)	validation_time 0.0004 (0.0006)	train_time 0.0433 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.47720000526309014, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.74it/s] 31%|###       | 8/26 [00:00<00:00, 25.63it/s] 42%|####2     | 11/26 [00:00<00:00, 26.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.73it/s] 65%|######5   | 17/26 [00:00<00:00, 28.16it/s] 81%|########  | 21/26 [00:00<00:00, 29.14it/s] 92%|#########2| 24/26 [00:00<00:00, 29.12it/s]100%|##########| 26/26 [00:00<00:00, 26.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.48)	train_minacc   0.47 (  0.49)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3913 (6.3913)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.70it/s] 19%|#9        | 5/26 [00:00<00:00, 25.73it/s] 38%|###8      | 10/26 [00:00<00:00, 33.06it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.06it/s] 62%|######1   | 16/26 [00:00<00:00, 37.47it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.47it/s] 81%|########  | 21/26 [00:00<00:00, 39.74it/s]100%|##########| 26/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.48)	test_minacc   0.58 (  0.51)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.04 ( -0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.50)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.53 (  0.48)	test_corr_d  -0.03 ( -0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.48)	test_minacc   0.47 (  0.50)	test_majacc   0.40 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.48)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.40 (  0.47)	test_corr_d   0.03 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 35/  1]	epoch_time 0.0450 (0.0447)	validation_time 0.0005 (0.0006)	train_time 0.0445 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4784000075161457, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.38it/s] 15%|#5        | 4/26 [00:00<00:01, 11.82it/s] 27%|##6       | 7/26 [00:00<00:01, 16.90it/s] 38%|###8      | 10/26 [00:00<00:00, 20.53it/s] 50%|#####     | 13/26 [00:00<00:00, 22.58it/s] 65%|######5   | 17/26 [00:00<00:00, 24.75it/s] 81%|########  | 21/26 [00:01<00:00, 26.53it/s] 96%|#########6| 25/26 [00:01<00:00, 27.69it/s]100%|##########| 26/26 [00:01<00:00, 21.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.48)	train_minacc   0.45 (  0.48)	train_majacc   0.41 (  0.48)	train_corr   0.00 (  0.00)	l1 6.3914 (6.3915)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.00it/s] 15%|#5        | 4/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.79it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.17it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.97it/s] 96%|#########6| 25/26 [00:00<00:00, 40.55it/s]100%|##########| 26/26 [00:00<00:00, 32.90it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.49)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.56 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.56 (  0.50)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.53 (  0.48)	test_corr_d  -0.03 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.47 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 36/  1]	epoch_time 0.0436 (0.0447)	validation_time 0.0003 (0.0006)	train_time 0.0433 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4804000084400177, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.59it/s] 15%|#5        | 4/26 [00:00<00:01, 14.49it/s] 27%|##6       | 7/26 [00:00<00:00, 20.00it/s] 42%|####2     | 11/26 [00:00<00:00, 23.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.77it/s] 65%|######5   | 17/26 [00:00<00:00, 27.01it/s] 81%|########  | 21/26 [00:00<00:00, 28.01it/s] 96%|#########6| 25/26 [00:01<00:00, 28.74it/s]100%|##########| 26/26 [00:01<00:00, 23.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3916 (6.3916)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 20.38it/s] 31%|###       | 8/26 [00:00<00:00, 33.46it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.46it/s] 50%|#####     | 13/26 [00:00<00:00, 38.06it/s] 69%|######9   | 18/26 [00:00<00:00, 41.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.84it/s] 88%|########8 | 23/26 [00:00<00:00, 39.32it/s]100%|##########| 26/26 [00:00<00:00, 36.64it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.58 (  0.51)	test_majacc   0.49 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.56 (  0.50)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.53 (  0.48)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.40 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.40 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 37/  1]	epoch_time 0.0421 (0.0446)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0440)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48210000866651537, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 15%|#5        | 4/26 [00:00<00:01, 19.97it/s] 27%|##6       | 7/26 [00:00<00:00, 24.02it/s] 38%|###8      | 10/26 [00:00<00:00, 25.84it/s] 50%|#####     | 13/26 [00:00<00:00, 27.17it/s] 65%|######5   | 17/26 [00:00<00:00, 28.27it/s] 81%|########  | 21/26 [00:00<00:00, 28.80it/s] 92%|#########2| 24/26 [00:00<00:00, 29.13it/s]100%|##########| 26/26 [00:01<00:00, 25.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3917 (6.3917)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.95it/s] 27%|##6       | 7/26 [00:00<00:00, 28.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.24it/s] 46%|####6     | 12/26 [00:00<00:00, 35.42it/s] 65%|######5   | 17/26 [00:00<00:00, 39.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.45it/s] 85%|########4 | 22/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.58 (  0.50)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.53 (  0.49)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 38/  1]	epoch_time 0.0392 (0.0445)	validation_time 0.0003 (0.0006)	train_time 0.0389 (0.0438)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48260000577569007, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s] 15%|#5        | 4/26 [00:00<00:01, 14.62it/s] 31%|###       | 8/26 [00:00<00:00, 21.25it/s] 42%|####2     | 11/26 [00:00<00:00, 23.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.91it/s] 88%|########8 | 23/26 [00:00<00:00, 28.56it/s]100%|##########| 26/26 [00:01<00:00, 23.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3918 (6.3919)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.10it/s] 15%|#5        | 4/26 [00:00<00:01, 11.03it/s] 35%|###4      | 9/26 [00:00<00:00, 22.01it/s]                                               35%|###4      | 9/26 [00:00<00:00, 22.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 32.32it/s] 92%|#########2| 24/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.53 (  0.49)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 39/  1]	epoch_time 0.0405 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0401 (0.0437)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4844000079929829, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.49it/s] 27%|##6       | 7/26 [00:00<00:00, 27.11it/s] 42%|####2     | 11/26 [00:00<00:00, 28.75it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.97it/s] 88%|########8 | 23/26 [00:00<00:00, 30.51it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3919 (6.3920)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.93it/s] 23%|##3       | 6/26 [00:00<00:01, 15.77it/s]                                               23%|##3       | 6/26 [00:00<00:01, 15.77it/s] 42%|####2     | 11/26 [00:00<00:00, 24.61it/s] 62%|######1   | 16/26 [00:00<00:00, 31.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 34.78it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 27.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.48 (  0.48)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.58 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.53 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.53 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.30it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 40/  1]	epoch_time 0.0407 (0.0443)	validation_time 0.0003 (0.0006)	train_time 0.0404 (0.0436)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4845000068247318, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.44it/s] 35%|###4      | 9/26 [00:00<00:00, 25.31it/s] 50%|#####     | 13/26 [00:00<00:00, 27.02it/s] 62%|######1   | 16/26 [00:00<00:00, 27.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.33it/s] 88%|########8 | 23/26 [00:00<00:00, 28.84it/s]100%|##########| 26/26 [00:01<00:00, 24.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3921 (6.3921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.70it/s] 23%|##3       | 6/26 [00:00<00:00, 27.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.63it/s] 42%|####2     | 11/26 [00:00<00:00, 31.64it/s] 62%|######1   | 16/26 [00:00<00:00, 37.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.14it/s] 81%|########  | 21/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.46 (  0.46)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.58 (  0.49)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.03 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.65it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 41/  1]	epoch_time 0.0413 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0408 (0.0436)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4834000092148781, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.22it/s] 19%|#9        | 5/26 [00:00<00:00, 23.34it/s] 35%|###4      | 9/26 [00:00<00:00, 26.85it/s] 50%|#####     | 13/26 [00:00<00:00, 28.50it/s] 65%|######5   | 17/26 [00:00<00:00, 29.05it/s] 81%|########  | 21/26 [00:00<00:00, 29.37it/s] 96%|#########6| 25/26 [00:00<00:00, 29.70it/s]100%|##########| 26/26 [00:00<00:00, 26.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.49)	train_majacc   0.41 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3922 (6.3923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 23%|##3       | 6/26 [00:00<00:00, 29.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.78it/s] 42%|####2     | 11/26 [00:00<00:00, 35.58it/s] 65%|######5   | 17/26 [00:00<00:00, 39.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.07it/s] 85%|########4 | 22/26 [00:00<00:00, 41.80it/s]100%|##########| 26/26 [00:00<00:00, 35.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.58 (  0.49)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.56 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.45 (  0.49)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 42/  1]	epoch_time 0.0423 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0419 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4849000044763088, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.52it/s] 12%|#1        | 3/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:01, 16.49it/s] 42%|####2     | 11/26 [00:00<00:00, 21.14it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.06it/s] 69%|######9   | 18/26 [00:00<00:00, 25.48it/s] 81%|########  | 21/26 [00:01<00:00, 26.36it/s] 96%|#########6| 25/26 [00:01<00:00, 27.42it/s]100%|##########| 26/26 [00:01<00:00, 21.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.43 (  0.49)	train_minacc   0.47 (  0.49)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3923 (6.3924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.99it/s] 31%|###       | 8/26 [00:00<00:00, 39.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.01it/s] 50%|#####     | 13/26 [00:00<00:00, 41.08it/s] 69%|######9   | 18/26 [00:00<00:00, 41.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.17it/s] 88%|########8 | 23/26 [00:00<00:00, 42.90it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.47 (  0.49)	test_majacc   0.40 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.40 (  0.48)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 43/  1]	epoch_time 0.0431 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48460000681877136, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 19%|#9        | 5/26 [00:00<00:01, 19.96it/s] 35%|###4      | 9/26 [00:00<00:00, 24.21it/s] 46%|####6     | 12/26 [00:00<00:00, 26.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.20it/s] 69%|######9   | 18/26 [00:00<00:00, 27.91it/s] 81%|########  | 21/26 [00:00<00:00, 28.43it/s] 92%|#########2| 24/26 [00:00<00:00, 28.69it/s]100%|##########| 26/26 [00:01<00:00, 24.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.51 (  0.51)	train_acc   0.43 (  0.49)	train_minacc   0.47 (  0.49)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3924 (6.3925)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.55it/s] 27%|##6       | 7/26 [00:00<00:00, 33.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.94it/s] 46%|####6     | 12/26 [00:00<00:00, 38.41it/s] 65%|######5   | 17/26 [00:00<00:00, 38.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.11it/s] 85%|########4 | 22/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.49)	test_minacc   0.56 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.56 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.54 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.54 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.47 (  0.48)	test_majacc   0.41 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.41 (  0.48)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 44/  1]	epoch_time 0.0442 (0.0442)	validation_time 0.0005 (0.0006)	train_time 0.0437 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48450000607967375, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.15it/s] 19%|#9        | 5/26 [00:00<00:01, 13.33it/s] 35%|###4      | 9/26 [00:00<00:00, 19.21it/s] 50%|#####     | 13/26 [00:00<00:00, 22.81it/s] 65%|######5   | 17/26 [00:00<00:00, 25.14it/s] 81%|########  | 21/26 [00:00<00:00, 26.95it/s] 92%|#########2| 24/26 [00:01<00:00, 27.72it/s]100%|##########| 26/26 [00:01<00:00, 21.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.51)	train_acc   0.43 (  0.49)	train_minacc   0.47 (  0.48)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3926 (6.3927)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 23%|##3       | 6/26 [00:00<00:00, 28.83it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.83it/s] 42%|####2     | 11/26 [00:00<00:00, 35.37it/s] 65%|######5   | 17/26 [00:00<00:00, 37.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.87it/s] 85%|########4 | 22/26 [00:00<00:00, 40.72it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.03 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.01 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.41 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.41 (  0.49)	test_corr_d   0.02 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.15it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 45/  1]	epoch_time 0.0424 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4857000106573105, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 19%|#9        | 5/26 [00:00<00:01, 20.83it/s] 31%|###       | 8/26 [00:00<00:00, 23.56it/s] 42%|####2     | 11/26 [00:00<00:00, 25.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.65it/s] 65%|######5   | 17/26 [00:00<00:00, 26.71it/s] 81%|########  | 21/26 [00:00<00:00, 27.97it/s] 96%|#########6| 25/26 [00:00<00:00, 28.90it/s]100%|##########| 26/26 [00:01<00:00, 25.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.43 (  0.49)	train_minacc   0.45 (  0.48)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3927 (6.3928)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s]  8%|7         | 2/26 [00:00<00:03,  6.84it/s] 27%|##6       | 7/26 [00:00<00:00, 22.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.05it/s] 46%|####6     | 12/26 [00:00<00:00, 30.46it/s] 69%|######9   | 18/26 [00:00<00:00, 36.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.14it/s] 88%|########8 | 23/26 [00:00<00:00, 39.64it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.45 (  0.45)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.55 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.00 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.47 (  0.49)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.42 (  0.49)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 46/  1]	epoch_time 0.0449 (0.0442)	validation_time 0.0005 (0.0006)	train_time 0.0445 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.485400008559227, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.63it/s] 15%|#5        | 4/26 [00:00<00:01, 12.60it/s] 27%|##6       | 7/26 [00:00<00:01, 17.96it/s] 38%|###8      | 10/26 [00:00<00:00, 21.53it/s] 50%|#####     | 13/26 [00:00<00:00, 23.70it/s] 62%|######1   | 16/26 [00:00<00:00, 25.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 26.49it/s] 88%|########8 | 23/26 [00:01<00:00, 27.72it/s]100%|##########| 26/26 [00:01<00:00, 22.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.48)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3928 (6.3929)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.55it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.55it/s] 42%|####2     | 11/26 [00:00<00:00, 34.90it/s] 62%|######1   | 16/26 [00:00<00:00, 38.31it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.31it/s] 81%|########  | 21/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 41.58it/s]100%|##########| 26/26 [00:00<00:00, 33.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.51 (  0.49)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.00 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.48)	test_minacc   0.45 (  0.48)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.42 (  0.49)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 47/  1]	epoch_time 0.0476 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0472 (0.0436)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4845000120997429, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.61it/s] 31%|###       | 8/26 [00:00<00:00, 24.77it/s] 42%|####2     | 11/26 [00:00<00:00, 26.03it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.66it/s] 88%|########8 | 23/26 [00:00<00:00, 29.06it/s]100%|##########| 26/26 [00:01<00:00, 25.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.42 (  0.49)	train_minacc   0.45 (  0.48)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3929 (6.3930)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.90it/s] 23%|##3       | 6/26 [00:00<00:00, 25.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.89it/s] 42%|####2     | 11/26 [00:00<00:00, 33.91it/s] 62%|######1   | 16/26 [00:00<00:00, 38.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.72it/s] 81%|########  | 21/26 [00:00<00:00, 40.37it/s]100%|##########| 26/26 [00:00<00:00, 43.10it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.51 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.49)	test_minacc   0.45 (  0.48)	test_majacc   0.42 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.49)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.42 (  0.49)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 48/  1]	epoch_time 0.0415 (0.0442)	validation_time 0.0004 (0.0005)	train_time 0.0411 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.48510000836849215, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.14it/s] 15%|#5        | 4/26 [00:00<00:01, 18.00it/s] 31%|###       | 8/26 [00:00<00:00, 24.01it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.42it/s] 88%|########8 | 23/26 [00:00<00:00, 29.27it/s]100%|##########| 26/26 [00:01<00:00, 25.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.50 (  0.50)	train_acc   0.42 (  0.49)	train_minacc   0.43 (  0.48)	train_majacc   0.42 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3930 (6.3932)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.72it/s] 27%|##6       | 7/26 [00:00<00:00, 31.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.83it/s] 46%|####6     | 12/26 [00:00<00:00, 37.96it/s] 65%|######5   | 17/26 [00:00<00:00, 40.98it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.98it/s] 85%|########4 | 22/26 [00:00<00:00, 43.43it/s]100%|##########| 26/26 [00:00<00:00, 37.04it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.44 (  0.44)	test_majacc   0.44 (  0.44)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.51 (  0.48)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d  -0.00 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.49)	test_minacc   0.45 (  0.48)	test_majacc   0.41 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.49)	test_minacc_d   0.45 (  0.48)	test_majacc_d   0.41 (  0.49)	test_corr_d   0.02 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 49/  1]	epoch_time 0.0405 (0.0441)	validation_time 0.0003 (0.0005)	train_time 0.0402 (0.0435)
record: (train_acc, test_acc) (0.7995000305771828, 0.703000009059906)
last accs (train_acc, test_acc) (0.4860000081062317, 0.5190000534057617)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp9quseytg'
wandb: ERROR Internal wandb error: file data was not synced
