hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_204532-ljxsvnsd
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/ljxsvnsd
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1226
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6048, 3, 32, 32) (5952, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:03<01:29,  3.59s/it] 19%|#9        | 5/26 [00:03<00:11,  1.80it/s] 35%|###4      | 9/26 [00:03<00:04,  3.75it/s] 50%|#####     | 13/26 [00:03<00:02,  6.19it/s] 65%|######5   | 17/26 [00:04<00:00,  9.15it/s] 85%|########4 | 22/26 [00:04<00:00, 13.39it/s]100%|##########| 26/26 [00:04<00:00, 11.72it/s]100%|##########| 26/26 [00:04<00:00,  5.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.369 (0.527)	train_nll   0.37 (  0.53)	train_penalty   0.04 (  0.23)	weight_norm  20.84 ( 18.12)	train_acc   0.88 (  0.81)	train_minacc   0.03 (  0.06)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 7.3896 (8.5004)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 27%|##6       | 7/26 [00:00<00:00, 33.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.71it/s] 46%|####6     | 12/26 [00:00<00:00, 39.33it/s] 65%|######5   | 17/26 [00:00<00:00, 39.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.11it/s] 85%|########4 | 22/26 [00:00<00:00, 42.03it/s]100%|##########| 26/26 [00:00<00:00, 36.33it/s]
Test: [   0/  26]	Loss 0.429 (0.429)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.429 (0.429)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.470 (0.432)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.470 (0.432)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.424 (0.427)	test_acc   0.86 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.424 (0.427)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.366 (0.424)	test_acc   0.88 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.366 (0.424)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.840 (1.840)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.840 (1.840)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.840 (1.840)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.840 (1.840)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.1121 (0.1121)	validation_time 0.0067 (0.0067)	train_time 0.1025 (0.1025)
record: (train_acc, test_acc) (0.8448000230193138, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8448000230193138, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 15%|#5        | 4/26 [00:00<00:01, 18.67it/s] 31%|###       | 8/26 [00:00<00:00, 26.71it/s] 46%|####6     | 12/26 [00:00<00:00, 30.47it/s] 62%|######1   | 16/26 [00:00<00:00, 33.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.96it/s] 96%|#########6| 25/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.332 (0.404)	train_nll   0.33 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm  21.94 ( 21.60)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.1172 (7.2510)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 27%|##6       | 7/26 [00:00<00:00, 37.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.17it/s] 46%|####6     | 12/26 [00:00<00:00, 40.69it/s] 69%|######9   | 18/26 [00:00<00:00, 46.43it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.43it/s] 92%|#########2| 24/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.403)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.425 (0.404)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.404)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.388 (0.399)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.388 (0.399)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.330 (0.396)	test_acc   0.88 (  0.85)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.396)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.25it/s]
Test: [  0/  1]	Loss 1.908 (1.908)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.908 (1.908)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.908 (1.908)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0368 (0.0745)	validation_time 0.0006 (0.0037)	train_time 0.0362 (0.0693)
record: (train_acc, test_acc) (0.8448000230193138, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8483000253438949, 0.10700000822544098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:00, 22.17it/s] 35%|###4      | 9/26 [00:00<00:00, 28.24it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.67it/s] 96%|#########6| 25/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 29.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.316 (0.379)	train_nll   0.32 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm  22.07 ( 22.02)	train_acc   0.88 (  0.85)	train_minacc   0.10 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.0852 (7.1291)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 25.18it/s] 38%|###8      | 10/26 [00:00<00:00, 34.87it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.86it/s] 96%|#########6| 25/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 33.93it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.383)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.382 (0.374)	test_acc   0.84 (  0.85)	test_minacc   0.10 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.382 (0.374)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.10 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.345 (0.365)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.345 (0.365)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.309 (0.362)	test_acc   0.89 (  0.85)	test_minacc   0.13 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.309 (0.362)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.13 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.32it/s]
Test: [  0/  1]	Loss 1.865 (1.865)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.865 (1.865)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.865 (1.865)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.865 (1.865)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0427 (0.0639)	validation_time 0.0004 (0.0026)	train_time 0.0423 (0.0603)
record: (train_acc, test_acc) (0.85220002669096, 0.11600000411272049)
last accs (train_acc, test_acc) (0.85220002669096, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.92it/s] 27%|##6       | 7/26 [00:00<00:00, 29.42it/s] 42%|####2     | 11/26 [00:00<00:00, 32.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.02it/s] 88%|########8 | 23/26 [00:00<00:00, 35.84it/s]100%|##########| 26/26 [00:00<00:00, 31.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.271 (0.356)	train_nll   0.27 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm  22.14 ( 22.11)	train_acc   0.88 (  0.85)	train_minacc   0.10 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2028 (7.1528)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.99it/s] 23%|##3       | 6/26 [00:00<00:00, 28.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.46it/s] 42%|####2     | 11/26 [00:00<00:00, 36.05it/s] 62%|######1   | 16/26 [00:00<00:00, 40.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.04it/s] 81%|########  | 21/26 [00:00<00:00, 38.96it/s]100%|##########| 26/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 33.86it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.351)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.374 (0.352)	test_acc   0.85 (  0.86)	test_minacc   0.11 (  0.09)	test_majacc   1.00 (  0.99)	Loss_d 0.374 (0.352)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.11 (  0.09)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.325 (0.342)	test_acc   0.88 (  0.86)	test_minacc   0.13 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.325 (0.342)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.13 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.273 (0.338)	test_acc   0.88 (  0.86)	test_minacc   0.10 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.273 (0.338)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.10 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.21it/s]
Test: [  0/  1]	Loss 2.028 (2.028)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 2.028 (2.028)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 2.028 (2.028)	test_acc   0.13 (  0.13)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 2.028 (2.028)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0391 (0.0577)	validation_time 0.0003 (0.0020)	train_time 0.0387 (0.0549)
record: (train_acc, test_acc) (0.8582000272870064, 0.13100001215934753)
last accs (train_acc, test_acc) (0.8582000272870064, 0.13100001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 19.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.24it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.10it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.262 (0.337)	train_nll   0.26 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.23 ( 22.19)	train_acc   0.90 (  0.86)	train_minacc   0.23 (  0.22)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 6.9891 (7.0749)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 23%|##3       | 6/26 [00:00<00:00, 28.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.19it/s] 42%|####2     | 11/26 [00:00<00:00, 35.75it/s] 62%|######1   | 16/26 [00:00<00:00, 40.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.25it/s] 81%|########  | 21/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]100%|##########| 26/26 [00:00<00:00, 33.80it/s]
Test: [   0/  26]	Loss 0.342 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 0.342 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.349 (0.335)	test_acc   0.85 (  0.86)	test_minacc   0.13 (  0.14)	test_majacc   0.99 (  0.98)	Loss_d 0.349 (0.335)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.13 (  0.14)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.300 (0.323)	test_acc   0.88 (  0.86)	test_minacc   0.21 (  0.16)	test_majacc   0.99 (  0.98)	Loss_d 0.300 (0.323)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.21 (  0.16)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.237 (0.318)	test_acc   0.90 (  0.86)	test_minacc   0.23 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 0.237 (0.318)	test_acc_d   0.90 (  0.86)	test_minacc_d   0.23 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.22it/s]
Test: [  0/  1]	Loss 1.985 (1.985)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.985 (1.985)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.985 (1.985)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 1.985 (1.985)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0399 (0.0541)	validation_time 0.0004 (0.0017)	train_time 0.0395 (0.0518)
record: (train_acc, test_acc) (0.8617000192403793, 0.1850000023841858)
last accs (train_acc, test_acc) (0.8617000192403793, 0.1850000023841858)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 19%|#9        | 5/26 [00:00<00:00, 23.20it/s] 35%|###4      | 9/26 [00:00<00:00, 30.01it/s] 50%|#####     | 13/26 [00:00<00:00, 33.67it/s] 65%|######5   | 17/26 [00:00<00:00, 33.52it/s] 81%|########  | 21/26 [00:00<00:00, 34.13it/s] 96%|#########6| 25/26 [00:00<00:00, 34.66it/s]100%|##########| 26/26 [00:00<00:00, 29.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.250 (0.326)	train_nll   0.25 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm  22.34 ( 22.29)	train_acc   0.90 (  0.86)	train_minacc   0.32 (  0.28)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 6.9195 (6.8855)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 23%|##3       | 6/26 [00:00<00:00, 23.15it/s] 38%|###8      | 10/26 [00:00<00:00, 27.83it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.83it/s] 65%|######5   | 17/26 [00:00<00:00, 36.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.87it/s] 85%|########4 | 22/26 [00:00<00:00, 39.61it/s]100%|##########| 26/26 [00:00<00:00, 31.46it/s]
Test: [   0/  26]	Loss 0.336 (0.336)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.33)	test_majacc   0.94 (  0.94)	Loss_d 0.336 (0.336)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.328 (0.318)	test_acc   0.87 (  0.86)	test_minacc   0.30 (  0.31)	test_majacc   0.98 (  0.96)	Loss_d 0.328 (0.318)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.30 (  0.31)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.89)
Test: [  20/  26]	Loss 0.276 (0.308)	test_acc   0.90 (  0.87)	test_minacc   0.42 (  0.34)	test_majacc   0.97 (  0.96)	Loss_d 0.276 (0.308)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.42 (  0.34)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.232 (0.304)	test_acc   0.90 (  0.87)	test_minacc   0.32 (  0.34)	test_majacc   0.98 (  0.96)	Loss_d 0.232 (0.304)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.32 (  0.34)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.77it/s]
Test: [  0/  1]	Loss 1.899 (1.899)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.899 (1.899)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.899 (1.899)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 1.899 (1.899)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0407 (0.0519)	validation_time 0.0004 (0.0015)	train_time 0.0402 (0.0499)
record: (train_acc, test_acc) (0.868900024831295, 0.30000001192092896)
last accs (train_acc, test_acc) (0.868900024831295, 0.30000001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.97it/s] 50%|#####     | 13/26 [00:00<00:00, 30.44it/s] 65%|######5   | 17/26 [00:00<00:00, 32.45it/s] 81%|########  | 21/26 [00:00<00:00, 33.76it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.213 (0.310)	train_nll   0.21 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.45 ( 22.40)	train_acc   0.89 (  0.87)	train_minacc   0.35 (  0.34)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 7.0689 (6.7853)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.60it/s] 23%|##3       | 6/26 [00:00<00:00, 25.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.14it/s] 42%|####2     | 11/26 [00:00<00:00, 33.38it/s] 62%|######1   | 16/26 [00:00<00:00, 37.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.68it/s] 81%|########  | 21/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 42.73it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]
Test: [   0/  26]	Loss 0.299 (0.299)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.96 (  0.96)	Loss_d 0.299 (0.299)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.320 (0.307)	test_acc   0.87 (  0.87)	test_minacc   0.27 (  0.30)	test_majacc   0.98 (  0.97)	Loss_d 0.320 (0.307)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.27 (  0.30)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.260 (0.295)	test_acc   0.89 (  0.87)	test_minacc   0.35 (  0.32)	test_majacc   0.97 (  0.97)	Loss_d 0.260 (0.295)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.35 (  0.32)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.198 (0.290)	test_acc   0.90 (  0.88)	test_minacc   0.39 (  0.33)	test_majacc   0.98 (  0.97)	Loss_d 0.198 (0.290)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.39 (  0.33)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 2.077 (2.077)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 2.077 (2.077)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 2.077 (2.077)	test_acc   0.28 (  0.28)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 2.077 (2.077)	test_acc_d   0.28 (  0.28)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
Overall Timing[  6/  1]	epoch_time 0.0402 (0.0502)	validation_time 0.0004 (0.0013)	train_time 0.0398 (0.0485)
record: (train_acc, test_acc) (0.868900024831295, 0.30000001192092896)
last accs (train_acc, test_acc) (0.8777000210285186, 0.27900001406669617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.98it/s] 19%|#9        | 5/26 [00:00<00:01, 20.50it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 28.34it/s] 65%|######5   | 17/26 [00:00<00:00, 30.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.210)	train_nll   0.33 (  0.30)	train_penalty   0.00 (  0.01)	weight_norm  22.59 ( 22.52)	train_acc   0.81 (  0.87)	train_minacc   0.81 (  0.46)	train_majacc   0.81 (  0.94)	train_corr   0.00 (  0.00)	l1 6.8434 (6.8386)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 23%|##3       | 6/26 [00:00<00:00, 30.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.38it/s] 42%|####2     | 11/26 [00:00<00:00, 37.72it/s] 62%|######1   | 16/26 [00:00<00:00, 41.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.65it/s] 81%|########  | 21/26 [00:00<00:00, 39.56it/s]100%|##########| 26/26 [00:00<00:00, 42.67it/s]100%|##########| 26/26 [00:00<00:00, 35.56it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.82 (  0.82)	test_minacc   0.80 (  0.80)	test_majacc   0.83 (  0.83)	Loss_d 0.391 (0.391)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.367 (0.399)	test_acc   0.82 (  0.80)	test_minacc   0.86 (  0.78)	test_majacc   0.81 (  0.80)	Loss_d 0.367 (0.399)	test_acc_d   0.82 (  0.80)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.81 (  0.80)	test_corr_d   0.57 (  0.57)
Test: [  20/  26]	Loss 0.382 (0.389)	test_acc   0.81 (  0.81)	test_minacc   0.83 (  0.80)	test_majacc   0.80 (  0.81)	Loss_d 0.382 (0.389)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.83 (  0.80)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.58 (  0.57)
Test: [  26/  26]	Loss 0.349 (0.386)	test_acc   0.80 (  0.81)	test_minacc   0.74 (  0.80)	test_majacc   0.80 (  0.81)	Loss_d 0.349 (0.386)	test_acc_d   0.80 (  0.81)	test_minacc_d   0.74 (  0.80)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.62 (  0.57)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 1.338 (1.338)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.88 (  0.88)	Loss_d 1.338 (1.338)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.88 (  0.88)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 1.338 (1.338)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.88 (  0.88)	Loss_d 1.338 (1.338)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.88 (  0.88)	test_corr_d  -0.00 ( -0.00)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0395 (0.0489)	validation_time 0.0003 (0.0012)	train_time 0.0391 (0.0473)
record: (train_acc, test_acc) (0.8069000290632248, 0.6220000386238098)
last accs (train_acc, test_acc) (0.8069000290632248, 0.6220000386238098)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.43it/s]  8%|7         | 2/26 [00:00<00:04,  5.39it/s] 23%|##3       | 6/26 [00:00<00:01, 15.76it/s] 38%|###8      | 10/26 [00:00<00:00, 22.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.06it/s] 69%|######9   | 18/26 [00:00<00:00, 30.22it/s] 85%|########4 | 22/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:01<00:00, 34.33it/s]100%|##########| 26/26 [00:01<00:00, 23.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.001 (0.003)	train_nll   0.42 (  0.40)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.62)	train_acc   0.76 (  0.79)	train_minacc   0.81 (  0.77)	train_majacc   0.75 (  0.79)	train_corr   0.00 (  0.00)	l1 6.0190 (6.2567)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.02it/s] 23%|##3       | 6/26 [00:00<00:00, 24.96it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.96it/s] 42%|####2     | 11/26 [00:00<00:00, 33.93it/s] 62%|######1   | 16/26 [00:00<00:00, 35.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.56it/s] 81%|########  | 21/26 [00:00<00:00, 39.39it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]100%|##########| 26/26 [00:00<00:00, 33.01it/s]
Test: [   0/  26]	Loss 0.474 (0.474)	test_acc   0.71 (  0.71)	test_minacc   0.82 (  0.82)	test_majacc   0.70 (  0.70)	Loss_d 0.474 (0.474)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.424 (0.455)	test_acc   0.80 (  0.74)	test_minacc   0.83 (  0.79)	test_majacc   0.80 (  0.73)	Loss_d 0.424 (0.455)	test_acc_d   0.80 (  0.74)	test_minacc_d   0.83 (  0.79)	test_majacc_d   0.80 (  0.73)	test_corr_d   0.52 (  0.51)
Test: [  20/  26]	Loss 0.468 (0.446)	test_acc   0.73 (  0.75)	test_minacc   0.81 (  0.81)	test_majacc   0.72 (  0.73)	Loss_d 0.468 (0.446)	test_acc_d   0.73 (  0.75)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.72 (  0.73)	test_corr_d   0.49 (  0.51)
Test: [  26/  26]	Loss 0.438 (0.449)	test_acc   0.76 (  0.74)	test_minacc   0.81 (  0.80)	test_majacc   0.75 (  0.73)	Loss_d 0.438 (0.449)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.55 (  0.51)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.84it/s]
Test: [  0/  1]	Loss 1.053 (1.053)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.83 (  0.83)	Loss_d 1.053 (1.053)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 1.053 (1.053)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.83 (  0.83)	Loss_d 1.053 (1.053)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.05 (  0.05)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0436 (0.0483)	validation_time 0.0004 (0.0011)	train_time 0.0431 (0.0468)
record: (train_acc, test_acc) (0.7433000299334526, 0.6580000519752502)
last accs (train_acc, test_acc) (0.7433000299334526, 0.6580000519752502)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 31.30it/s] 31%|###       | 8/26 [00:00<00:00, 33.62it/s] 46%|####6     | 12/26 [00:00<00:00, 34.52it/s] 62%|######1   | 16/26 [00:00<00:00, 35.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.03it/s] 92%|#########2| 24/26 [00:00<00:00, 36.27it/s]100%|##########| 26/26 [00:00<00:00, 32.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.001 (0.001)	train_nll   0.43 (  0.46)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.65)	train_acc   0.77 (  0.73)	train_minacc   0.81 (  0.83)	train_majacc   0.76 (  0.72)	train_corr   0.00 (  0.00)	l1 5.8524 (5.9589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.04it/s] 27%|##6       | 7/26 [00:00<00:00, 33.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.59it/s] 46%|####6     | 12/26 [00:00<00:00, 39.16it/s] 65%|######5   | 17/26 [00:00<00:00, 42.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.04it/s] 85%|########4 | 22/26 [00:00<00:00, 43.20it/s]100%|##########| 26/26 [00:00<00:00, 37.84it/s]
Test: [   0/  26]	Loss 0.428 (0.428)	test_acc   0.77 (  0.77)	test_minacc   0.91 (  0.91)	test_majacc   0.75 (  0.75)	Loss_d 0.428 (0.428)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.54 (  0.54)
Test: [  10/  26]	Loss 0.422 (0.430)	test_acc   0.80 (  0.77)	test_minacc   0.86 (  0.81)	test_majacc   0.79 (  0.76)	Loss_d 0.422 (0.430)	test_acc_d   0.80 (  0.77)	test_minacc_d   0.86 (  0.81)	test_majacc_d   0.79 (  0.76)	test_corr_d   0.56 (  0.56)
Test: [  20/  26]	Loss 0.426 (0.424)	test_acc   0.77 (  0.77)	test_minacc   0.85 (  0.82)	test_majacc   0.75 (  0.76)	Loss_d 0.426 (0.424)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.85 (  0.82)	test_majacc_d   0.75 (  0.76)	test_corr_d   0.56 (  0.56)
Test: [  26/  26]	Loss 0.435 (0.426)	test_acc   0.76 (  0.77)	test_minacc   0.81 (  0.81)	test_majacc   0.76 (  0.76)	Loss_d 0.435 (0.426)	test_acc_d   0.76 (  0.77)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.58 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 1.052 (1.052)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.88 (  0.88)	Loss_d 1.052 (1.052)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 1.052 (1.052)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.88 (  0.88)	Loss_d 1.052 (1.052)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.14 (  0.14)
Overall Timing[  9/  1]	epoch_time 0.0393 (0.0474)	validation_time 0.0005 (0.0011)	train_time 0.0388 (0.0460)
record: (train_acc, test_acc) (0.7433000299334526, 0.6580000519752502)
last accs (train_acc, test_acc) (0.7674000347256661, 0.6430000066757202)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.64it/s] 35%|###4      | 9/26 [00:00<00:00, 28.44it/s] 50%|#####     | 13/26 [00:00<00:00, 30.60it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.26it/s] 96%|#########6| 25/26 [00:00<00:00, 34.23it/s]100%|##########| 26/26 [00:00<00:00, 28.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.002 (0.001)	train_nll   0.43 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.65)	train_acc   0.76 (  0.72)	train_minacc   0.77 (  0.82)	train_majacc   0.75 (  0.71)	train_corr   0.00 (  0.00)	l1 5.8408 (5.9319)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 19%|#9        | 5/26 [00:00<00:00, 25.77it/s] 38%|###8      | 10/26 [00:00<00:00, 32.91it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.77it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.77it/s] 96%|#########6| 25/26 [00:00<00:00, 42.34it/s]100%|##########| 26/26 [00:00<00:00, 35.20it/s]
Test: [   0/  26]	Loss 0.416 (0.416)	test_acc   0.77 (  0.77)	test_minacc   0.85 (  0.85)	test_majacc   0.76 (  0.76)	Loss_d 0.416 (0.416)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.59 (  0.59)
Test: [  10/  26]	Loss 0.424 (0.415)	test_acc   0.79 (  0.78)	test_minacc   0.81 (  0.78)	test_majacc   0.79 (  0.78)	Loss_d 0.424 (0.415)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.61 (  0.61)
Test: [  20/  26]	Loss 0.398 (0.410)	test_acc   0.80 (  0.79)	test_minacc   0.77 (  0.79)	test_majacc   0.80 (  0.79)	Loss_d 0.398 (0.410)	test_acc_d   0.80 (  0.79)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.80 (  0.79)	test_corr_d   0.63 (  0.61)
Test: [  26/  26]	Loss 0.423 (0.412)	test_acc   0.77 (  0.78)	test_minacc   0.77 (  0.79)	test_majacc   0.77 (  0.78)	Loss_d 0.423 (0.412)	test_acc_d   0.77 (  0.78)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.77 (  0.78)	test_corr_d   0.63 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.39it/s]
Test: [  0/  1]	Loss 1.134 (1.134)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 1.134 (1.134)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 1.134 (1.134)	test_acc   0.59 (  0.59)	test_minacc   0.55 (  0.55)	test_majacc   0.91 (  0.91)	Loss_d 1.134 (1.134)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.27 (  0.27)
Overall Timing[ 10/  1]	epoch_time 0.0396 (0.0467)	validation_time 0.0003 (0.0010)	train_time 0.0392 (0.0454)
record: (train_acc, test_acc) (0.7433000299334526, 0.6580000519752502)
last accs (train_acc, test_acc) (0.7840000266432762, 0.5870000123977661)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.38it/s] 35%|###4      | 9/26 [00:00<00:00, 27.90it/s] 50%|#####     | 13/26 [00:00<00:00, 31.43it/s] 65%|######5   | 17/26 [00:00<00:00, 33.59it/s] 81%|########  | 21/26 [00:00<00:00, 34.57it/s] 96%|#########6| 25/26 [00:00<00:00, 35.25it/s]100%|##########| 26/26 [00:00<00:00, 29.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.001)	train_nll   0.48 (  0.46)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.70 (  0.73)	train_minacc   0.77 (  0.83)	train_majacc   0.69 (  0.71)	train_corr   0.00 (  0.00)	l1 6.0254 (6.0271)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.50it/s] 19%|#9        | 5/26 [00:00<00:01, 17.70it/s] 38%|###8      | 10/26 [00:00<00:00, 28.39it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.01it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 34.01it/s] 81%|########  | 21/26 [00:00<00:00, 39.23it/s]100%|##########| 26/26 [00:00<00:00, 31.29it/s]
Test: [   0/  26]	Loss 0.464 (0.464)	test_acc   0.72 (  0.72)	test_minacc   0.89 (  0.89)	test_majacc   0.70 (  0.70)	Loss_d 0.464 (0.464)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.460 (0.453)	test_acc   0.76 (  0.73)	test_minacc   0.86 (  0.82)	test_majacc   0.74 (  0.72)	Loss_d 0.460 (0.453)	test_acc_d   0.76 (  0.73)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.55 (  0.54)
Test: [  20/  26]	Loss 0.434 (0.448)	test_acc   0.76 (  0.74)	test_minacc   0.81 (  0.83)	test_majacc   0.76 (  0.72)	Loss_d 0.434 (0.448)	test_acc_d   0.76 (  0.74)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.76 (  0.72)	test_corr_d   0.56 (  0.54)
Test: [  26/  26]	Loss 0.464 (0.449)	test_acc   0.73 (  0.74)	test_minacc   0.77 (  0.82)	test_majacc   0.72 (  0.72)	Loss_d 0.464 (0.449)	test_acc_d   0.73 (  0.74)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.57 (  0.54)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 1.108 (1.108)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.78 (  0.78)	Loss_d 1.108 (1.108)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.108 (1.108)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.78 (  0.78)	Loss_d 1.108 (1.108)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.08 (  0.08)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0402 (0.0461)	validation_time 0.0004 (0.0009)	train_time 0.0398 (0.0449)
record: (train_acc, test_acc) (0.7370000256896019, 0.6880000233650208)
last accs (train_acc, test_acc) (0.7370000256896019, 0.6880000233650208)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 19%|#9        | 5/26 [00:00<00:01, 17.92it/s] 35%|###4      | 9/26 [00:00<00:00, 24.59it/s] 50%|#####     | 13/26 [00:00<00:00, 27.96it/s] 65%|######5   | 17/26 [00:00<00:00, 29.97it/s] 81%|########  | 21/26 [00:00<00:00, 31.72it/s] 96%|#########6| 25/26 [00:00<00:00, 32.90it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.001)	train_nll   0.52 (  0.46)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.67 (  0.73)	train_minacc   0.74 (  0.81)	train_majacc   0.66 (  0.71)	train_corr   0.00 (  0.00)	l1 5.8372 (5.9273)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 23%|##3       | 6/26 [00:00<00:00, 21.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.37it/s] 42%|####2     | 11/26 [00:00<00:00, 31.03it/s] 62%|######1   | 16/26 [00:00<00:00, 37.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.01it/s] 81%|########  | 21/26 [00:00<00:00, 38.24it/s]100%|##########| 26/26 [00:00<00:00, 31.71it/s]
Test: [   0/  26]	Loss 0.545 (0.545)	test_acc   0.65 (  0.65)	test_minacc   0.89 (  0.89)	test_majacc   0.61 (  0.61)	Loss_d 0.545 (0.545)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.499 (0.516)	test_acc   0.73 (  0.69)	test_minacc   0.89 (  0.84)	test_majacc   0.70 (  0.66)	Loss_d 0.499 (0.516)	test_acc_d   0.73 (  0.69)	test_minacc_d   0.89 (  0.84)	test_majacc_d   0.70 (  0.66)	test_corr_d   0.43 (  0.41)
Test: [  20/  26]	Loss 0.523 (0.510)	test_acc   0.68 (  0.69)	test_minacc   0.81 (  0.85)	test_majacc   0.66 (  0.66)	Loss_d 0.523 (0.510)	test_acc_d   0.68 (  0.69)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.42 (  0.41)
Test: [  26/  26]	Loss 0.520 (0.511)	test_acc   0.67 (  0.69)	test_minacc   0.74 (  0.84)	test_majacc   0.66 (  0.67)	Loss_d 0.520 (0.511)	test_acc_d   0.67 (  0.69)	test_minacc_d   0.74 (  0.84)	test_majacc_d   0.66 (  0.67)	test_corr_d   0.47 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.51it/s]
Test: [  0/  1]	Loss 0.943 (0.943)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.78 (  0.78)	Loss_d 0.943 (0.943)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.943 (0.943)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.78 (  0.78)	Loss_d 0.943 (0.943)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.07 ( -0.07)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0391 (0.0456)	validation_time 0.0007 (0.0009)	train_time 0.0384 (0.0444)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 19%|#9        | 5/26 [00:00<00:00, 22.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.44it/s] 50%|#####     | 13/26 [00:00<00:00, 30.55it/s] 65%|######5   | 17/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 33.40it/s] 96%|#########6| 25/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.001)	train_nll   0.49 (  0.50)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.70 (  0.70)	train_minacc   0.71 (  0.83)	train_majacc   0.70 (  0.68)	train_corr   0.00 (  0.00)	l1 5.7331 (5.7611)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.52it/s] 31%|###       | 8/26 [00:00<00:00, 40.25it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.25it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 69%|######9   | 18/26 [00:00<00:00, 41.48it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.48it/s] 88%|########8 | 23/26 [00:00<00:00, 42.76it/s]100%|##########| 26/26 [00:00<00:00, 37.62it/s]
Test: [   0/  26]	Loss 0.505 (0.505)	test_acc   0.69 (  0.69)	test_minacc   0.85 (  0.85)	test_majacc   0.66 (  0.66)	Loss_d 0.505 (0.505)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.470 (0.489)	test_acc   0.75 (  0.71)	test_minacc   0.89 (  0.81)	test_majacc   0.72 (  0.69)	Loss_d 0.470 (0.489)	test_acc_d   0.75 (  0.71)	test_minacc_d   0.89 (  0.81)	test_majacc_d   0.72 (  0.69)	test_corr_d   0.48 (  0.48)
Test: [  20/  26]	Loss 0.479 (0.479)	test_acc   0.71 (  0.71)	test_minacc   0.83 (  0.82)	test_majacc   0.70 (  0.69)	Loss_d 0.479 (0.479)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.49 (  0.48)
Test: [  26/  26]	Loss 0.494 (0.481)	test_acc   0.70 (  0.71)	test_minacc   0.71 (  0.81)	test_majacc   0.70 (  0.69)	Loss_d 0.494 (0.481)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.71 (  0.81)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.53 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.35it/s]
Test: [  0/  1]	Loss 0.966 (0.966)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 0.966 (0.966)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.966 (0.966)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 0.966 (0.966)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 13/  1]	epoch_time 0.0395 (0.0452)	validation_time 0.0005 (0.0009)	train_time 0.0390 (0.0441)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7115000286102295, 0.7010000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 12%|#1        | 3/26 [00:00<00:01, 13.36it/s] 27%|##6       | 7/26 [00:00<00:00, 22.71it/s] 42%|####2     | 11/26 [00:00<00:00, 27.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.85it/s] 88%|########8 | 23/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 26.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.48 (  0.49)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.72 (  0.70)	train_minacc   0.77 (  0.83)	train_majacc   0.71 (  0.68)	train_corr   0.00 (  0.00)	l1 5.6673 (5.7345)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 42%|####2     | 11/26 [00:00<00:00, 33.09it/s] 62%|######1   | 16/26 [00:00<00:00, 38.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.52it/s] 81%|########  | 21/26 [00:00<00:00, 41.38it/s]100%|##########| 26/26 [00:00<00:00, 35.07it/s]
Test: [   0/  26]	Loss 0.485 (0.485)	test_acc   0.70 (  0.70)	test_minacc   0.87 (  0.87)	test_majacc   0.67 (  0.67)	Loss_d 0.485 (0.485)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.47 (  0.47)
Test: [  10/  26]	Loss 0.462 (0.475)	test_acc   0.75 (  0.71)	test_minacc   0.90 (  0.83)	test_majacc   0.72 (  0.69)	Loss_d 0.462 (0.475)	test_acc_d   0.75 (  0.71)	test_minacc_d   0.90 (  0.83)	test_majacc_d   0.72 (  0.69)	test_corr_d   0.50 (  0.49)
Test: [  20/  26]	Loss 0.459 (0.464)	test_acc   0.73 (  0.72)	test_minacc   0.81 (  0.84)	test_majacc   0.72 (  0.70)	Loss_d 0.459 (0.464)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.52 (  0.50)
Test: [  26/  26]	Loss 0.475 (0.465)	test_acc   0.72 (  0.72)	test_minacc   0.77 (  0.83)	test_majacc   0.71 (  0.70)	Loss_d 0.475 (0.465)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.53 (  0.50)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.16it/s]
Test: [  0/  1]	Loss 0.947 (0.947)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.77 (  0.77)	Loss_d 0.947 (0.947)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.947 (0.947)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.77 (  0.77)	Loss_d 0.947 (0.947)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 14/  1]	epoch_time 0.0419 (0.0449)	validation_time 0.0004 (0.0009)	train_time 0.0414 (0.0439)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7217000329494476, 0.7150000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 19%|#9        | 5/26 [00:00<00:01, 16.65it/s] 35%|###4      | 9/26 [00:00<00:00, 23.45it/s] 50%|#####     | 13/26 [00:00<00:00, 27.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.28it/s] 96%|#########6| 25/26 [00:00<00:00, 32.02it/s]100%|##########| 26/26 [00:01<00:00, 25.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.47 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.70 (  0.71)	train_minacc   0.77 (  0.83)	train_majacc   0.69 (  0.69)	train_corr   0.00 (  0.00)	l1 5.7292 (5.7961)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.56it/s] 31%|###       | 8/26 [00:00<00:00, 32.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.96it/s] 50%|#####     | 13/26 [00:00<00:00, 37.39it/s] 69%|######9   | 18/26 [00:00<00:00, 38.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.31it/s] 88%|########8 | 23/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 35.98it/s]
Test: [   0/  26]	Loss 0.466 (0.466)	test_acc   0.72 (  0.72)	test_minacc   0.87 (  0.87)	test_majacc   0.70 (  0.70)	Loss_d 0.466 (0.466)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.450 (0.459)	test_acc   0.76 (  0.72)	test_minacc   0.89 (  0.82)	test_majacc   0.74 (  0.71)	Loss_d 0.450 (0.459)	test_acc_d   0.76 (  0.72)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.53 (  0.52)
Test: [  20/  26]	Loss 0.437 (0.451)	test_acc   0.75 (  0.73)	test_minacc   0.83 (  0.84)	test_majacc   0.73 (  0.71)	Loss_d 0.437 (0.451)	test_acc_d   0.75 (  0.73)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.55 (  0.52)
Test: [  26/  26]	Loss 0.466 (0.452)	test_acc   0.71 (  0.73)	test_minacc   0.77 (  0.83)	test_majacc   0.70 (  0.71)	Loss_d 0.466 (0.452)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.70 (  0.71)	test_corr_d   0.55 (  0.52)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.90it/s]
Test: [  0/  1]	Loss 0.991 (0.991)	test_acc   0.71 (  0.71)	test_minacc   0.70 (  0.70)	test_majacc   0.78 (  0.78)	Loss_d 0.991 (0.991)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.991 (0.991)	test_acc   0.71 (  0.71)	test_minacc   0.70 (  0.70)	test_majacc   0.78 (  0.78)	Loss_d 0.991 (0.991)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.02 (  0.02)
Overall Timing[ 15/  1]	epoch_time 0.0436 (0.0449)	validation_time 0.0007 (0.0008)	train_time 0.0429 (0.0438)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7301000310778618, 0.7050000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 12%|#1        | 3/26 [00:00<00:01, 14.14it/s] 27%|##6       | 7/26 [00:00<00:00, 24.38it/s] 42%|####2     | 11/26 [00:00<00:00, 28.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.81it/s] 88%|########8 | 23/26 [00:00<00:00, 32.13it/s]100%|##########| 26/26 [00:00<00:00, 27.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.000)	train_nll   0.51 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.68 (  0.71)	train_minacc   0.71 (  0.83)	train_majacc   0.67 (  0.69)	train_corr   0.00 (  0.00)	l1 5.8915 (5.8579)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.49it/s] 31%|###       | 8/26 [00:00<00:00, 37.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.69it/s] 50%|#####     | 13/26 [00:00<00:00, 38.57it/s] 69%|######9   | 18/26 [00:00<00:00, 41.76it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.76it/s] 88%|########8 | 23/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 37.11it/s]
Test: [   0/  26]	Loss 0.508 (0.508)	test_acc   0.69 (  0.69)	test_minacc   0.87 (  0.87)	test_majacc   0.66 (  0.66)	Loss_d 0.508 (0.508)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.485 (0.496)	test_acc   0.75 (  0.70)	test_minacc   0.90 (  0.82)	test_majacc   0.72 (  0.68)	Loss_d 0.485 (0.496)	test_acc_d   0.75 (  0.70)	test_minacc_d   0.90 (  0.82)	test_majacc_d   0.72 (  0.68)	test_corr_d   0.48 (  0.46)
Test: [  20/  26]	Loss 0.472 (0.483)	test_acc   0.71 (  0.71)	test_minacc   0.83 (  0.83)	test_majacc   0.70 (  0.69)	Loss_d 0.472 (0.483)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.50 (  0.47)
Test: [  26/  26]	Loss 0.497 (0.483)	test_acc   0.69 (  0.71)	test_minacc   0.71 (  0.82)	test_majacc   0.68 (  0.69)	Loss_d 0.497 (0.483)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.71 (  0.82)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.51 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.73it/s]
Test: [  0/  1]	Loss 0.986 (0.986)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.74 (  0.74)	Loss_d 0.986 (0.986)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.986 (0.986)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.74 (  0.74)	Loss_d 0.986 (0.986)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 16/  1]	epoch_time 0.0401 (0.0446)	validation_time 0.0004 (0.0008)	train_time 0.0397 (0.0436)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7095000302195549, 0.7100000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.45it/s] 27%|##6       | 7/26 [00:00<00:00, 30.70it/s] 42%|####2     | 11/26 [00:00<00:00, 32.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.70it/s] 88%|########8 | 23/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 30.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.49 (  0.49)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.71 (  0.71)	train_minacc   0.77 (  0.83)	train_majacc   0.70 (  0.68)	train_corr   0.00 (  0.00)	l1 5.6993 (5.7923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.57it/s] 15%|#5        | 4/26 [00:00<00:01, 12.37it/s] 35%|###4      | 9/26 [00:00<00:00, 23.99it/s]                                               35%|###4      | 9/26 [00:00<00:00, 23.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 33.63it/s] 92%|#########2| 24/26 [00:00<00:00, 37.78it/s]100%|##########| 26/26 [00:00<00:00, 28.26it/s]
Test: [   0/  26]	Loss 0.515 (0.515)	test_acc   0.67 (  0.67)	test_minacc   0.85 (  0.85)	test_majacc   0.64 (  0.64)	Loss_d 0.515 (0.515)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.469 (0.493)	test_acc   0.74 (  0.70)	test_minacc   0.87 (  0.83)	test_majacc   0.71 (  0.68)	Loss_d 0.469 (0.493)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.71 (  0.68)	test_corr_d   0.47 (  0.46)
Test: [  20/  26]	Loss 0.464 (0.479)	test_acc   0.73 (  0.71)	test_minacc   0.87 (  0.85)	test_majacc   0.71 (  0.69)	Loss_d 0.464 (0.479)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.49 (  0.47)
Test: [  26/  26]	Loss 0.487 (0.481)	test_acc   0.70 (  0.71)	test_minacc   0.77 (  0.83)	test_majacc   0.69 (  0.69)	Loss_d 0.487 (0.481)	test_acc_d   0.70 (  0.71)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.51 (  0.48)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.82it/s]
Test: [  0/  1]	Loss 0.917 (0.917)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.78 (  0.78)	Loss_d 0.917 (0.917)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.917 (0.917)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.78 (  0.78)	Loss_d 0.917 (0.917)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 17/  1]	epoch_time 0.0423 (0.0445)	validation_time 0.0004 (0.0008)	train_time 0.0419 (0.0435)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7102000377774239, 0.718000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.89it/s] 15%|#5        | 4/26 [00:00<00:01, 14.59it/s] 31%|###       | 8/26 [00:00<00:00, 22.69it/s] 46%|####6     | 12/26 [00:00<00:00, 27.09it/s] 62%|######1   | 16/26 [00:00<00:00, 29.43it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.23it/s] 92%|#########2| 24/26 [00:00<00:00, 32.19it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.000)	train_nll   0.46 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.72 (  0.71)	train_minacc   0.77 (  0.82)	train_majacc   0.71 (  0.69)	train_corr   0.00 (  0.00)	l1 5.6690 (5.7139)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.43it/s] 23%|##3       | 6/26 [00:00<00:00, 26.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.76it/s] 46%|####6     | 12/26 [00:00<00:00, 37.58it/s] 69%|######9   | 18/26 [00:00<00:00, 43.23it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.23it/s] 88%|########8 | 23/26 [00:00<00:00, 44.24it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.468 (0.468)	test_acc   0.71 (  0.71)	test_minacc   0.89 (  0.89)	test_majacc   0.68 (  0.68)	Loss_d 0.468 (0.468)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.452 (0.467)	test_acc   0.77 (  0.72)	test_minacc   0.89 (  0.82)	test_majacc   0.75 (  0.70)	Loss_d 0.452 (0.467)	test_acc_d   0.77 (  0.72)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.75 (  0.70)	test_corr_d   0.54 (  0.52)
Test: [  20/  26]	Loss 0.441 (0.455)	test_acc   0.73 (  0.73)	test_minacc   0.81 (  0.84)	test_majacc   0.72 (  0.71)	Loss_d 0.441 (0.455)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.55 (  0.52)
Test: [  26/  26]	Loss 0.463 (0.455)	test_acc   0.71 (  0.73)	test_minacc   0.77 (  0.83)	test_majacc   0.70 (  0.71)	Loss_d 0.463 (0.455)	test_acc_d   0.71 (  0.73)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.70 (  0.71)	test_corr_d   0.55 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.979 (0.979)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.76 (  0.76)	Loss_d 0.979 (0.979)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.979 (0.979)	test_acc   0.72 (  0.72)	test_minacc   0.71 (  0.71)	test_majacc   0.76 (  0.76)	Loss_d 0.979 (0.979)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.00 (  0.00)
Overall Timing[ 18/  1]	epoch_time 0.0433 (0.0444)	validation_time 0.0004 (0.0008)	train_time 0.0429 (0.0435)
record: (train_acc, test_acc) (0.6917000352144241, 0.7220000624656677)
last accs (train_acc, test_acc) (0.7257000313401222, 0.7160000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.25it/s] 27%|##6       | 7/26 [00:00<00:00, 30.19it/s] 42%|####2     | 11/26 [00:00<00:00, 32.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.47it/s] 88%|########8 | 23/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 30.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.50 (  0.49)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.68 (  0.70)	train_minacc   0.77 (  0.85)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 5.8318 (5.8288)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 19%|#9        | 5/26 [00:00<00:00, 24.68it/s] 38%|###8      | 10/26 [00:00<00:00, 34.67it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.67it/s] 62%|######1   | 16/26 [00:00<00:00, 42.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.73it/s] 81%|########  | 21/26 [00:00<00:00, 41.81it/s]100%|##########| 26/26 [00:00<00:00, 44.13it/s]100%|##########| 26/26 [00:00<00:00, 35.40it/s]
Test: [   0/  26]	Loss 0.497 (0.497)	test_acc   0.69 (  0.69)	test_minacc   0.89 (  0.89)	test_majacc   0.66 (  0.66)	Loss_d 0.497 (0.497)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.477 (0.488)	test_acc   0.73 (  0.70)	test_minacc   0.89 (  0.82)	test_majacc   0.70 (  0.67)	Loss_d 0.477 (0.488)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.70 (  0.67)	test_corr_d   0.49 (  0.47)
Test: [  20/  26]	Loss 0.453 (0.473)	test_acc   0.72 (  0.71)	test_minacc   0.83 (  0.84)	test_majacc   0.70 (  0.69)	Loss_d 0.453 (0.473)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.52 (  0.48)
Test: [  26/  26]	Loss 0.487 (0.473)	test_acc   0.69 (  0.71)	test_minacc   0.81 (  0.83)	test_majacc   0.68 (  0.69)	Loss_d 0.487 (0.473)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.51 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.65it/s]
Test: [  0/  1]	Loss 0.982 (0.982)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.77 (  0.77)	Loss_d 0.982 (0.982)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.982 (0.982)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.77 (  0.77)	Loss_d 0.982 (0.982)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.05 ( -0.05)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0408 (0.0442)	validation_time 0.0005 (0.0008)	train_time 0.0403 (0.0433)
record: (train_acc, test_acc) (0.7090000327825546, 0.7230000495910645)
last accs (train_acc, test_acc) (0.7090000327825546, 0.7230000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 28.10it/s] 50%|#####     | 13/26 [00:00<00:00, 31.30it/s] 65%|######5   | 17/26 [00:00<00:00, 33.81it/s] 81%|########  | 21/26 [00:00<00:00, 35.14it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.48 (  0.47)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.70 (  0.71)	train_minacc   0.77 (  0.81)	train_majacc   0.69 (  0.69)	train_corr   0.00 (  0.00)	l1 5.6649 (5.7288)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 23%|##3       | 6/26 [00:00<00:00, 25.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.59it/s] 42%|####2     | 11/26 [00:00<00:00, 33.09it/s] 62%|######1   | 16/26 [00:00<00:00, 37.62it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.62it/s] 81%|########  | 21/26 [00:00<00:00, 39.06it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]100%|##########| 26/26 [00:00<00:00, 33.07it/s]
Test: [   0/  26]	Loss 0.506 (0.506)	test_acc   0.69 (  0.69)	test_minacc   0.91 (  0.91)	test_majacc   0.66 (  0.66)	Loss_d 0.506 (0.506)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.483 (0.498)	test_acc   0.73 (  0.69)	test_minacc   0.92 (  0.85)	test_majacc   0.69 (  0.67)	Loss_d 0.483 (0.498)	test_acc_d   0.73 (  0.69)	test_minacc_d   0.92 (  0.85)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.46 (  0.45)
Test: [  20/  26]	Loss 0.457 (0.482)	test_acc   0.73 (  0.71)	test_minacc   0.87 (  0.86)	test_majacc   0.71 (  0.68)	Loss_d 0.457 (0.482)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.71 (  0.68)	test_corr_d   0.50 (  0.46)
Test: [  26/  26]	Loss 0.486 (0.482)	test_acc   0.69 (  0.71)	test_minacc   0.77 (  0.85)	test_majacc   0.68 (  0.68)	Loss_d 0.486 (0.482)	test_acc_d   0.69 (  0.71)	test_minacc_d   0.77 (  0.85)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.52 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.54it/s]
Test: [  0/  1]	Loss 0.894 (0.894)	test_acc   0.75 (  0.75)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.894 (0.894)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.894 (0.894)	test_acc   0.75 (  0.75)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.894 (0.894)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.11 ( -0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 20/  1]	epoch_time 0.0383 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0379 (0.0430)
record: (train_acc, test_acc) (0.7073000340461731, 0.7460000514984131)
last accs (train_acc, test_acc) (0.7073000340461731, 0.7460000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.27it/s] 15%|#5        | 4/26 [00:00<00:01, 19.07it/s] 31%|###       | 8/26 [00:00<00:00, 26.88it/s] 46%|####6     | 12/26 [00:00<00:00, 29.51it/s] 62%|######1   | 16/26 [00:00<00:00, 30.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.12it/s] 92%|#########2| 24/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.67 (  0.69)	train_minacc   0.71 (  0.85)	train_majacc   0.67 (  0.66)	train_corr   0.00 (  0.00)	l1 5.7967 (5.7413)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 27%|##6       | 7/26 [00:00<00:00, 26.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.81it/s] 46%|####6     | 12/26 [00:00<00:00, 31.38it/s] 65%|######5   | 17/26 [00:00<00:00, 35.99it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.99it/s] 85%|########4 | 22/26 [00:00<00:00, 39.21it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
Test: [   0/  26]	Loss 0.494 (0.494)	test_acc   0.70 (  0.70)	test_minacc   0.87 (  0.87)	test_majacc   0.67 (  0.67)	Loss_d 0.494 (0.494)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.496 (0.499)	test_acc   0.72 (  0.70)	test_minacc   0.90 (  0.82)	test_majacc   0.68 (  0.67)	Loss_d 0.496 (0.499)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.90 (  0.82)	test_majacc_d   0.68 (  0.67)	test_corr_d   0.47 (  0.47)
Test: [  20/  26]	Loss 0.456 (0.482)	test_acc   0.73 (  0.71)	test_minacc   0.88 (  0.84)	test_majacc   0.71 (  0.69)	Loss_d 0.456 (0.482)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.52 (  0.48)
Test: [  26/  26]	Loss 0.495 (0.481)	test_acc   0.68 (  0.71)	test_minacc   0.74 (  0.83)	test_majacc   0.68 (  0.69)	Loss_d 0.495 (0.481)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.74 (  0.83)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.52 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.57it/s]
Test: [  0/  1]	Loss 1.011 (1.011)	test_acc   0.73 (  0.73)	test_minacc   0.72 (  0.72)	test_majacc   0.78 (  0.78)	Loss_d 1.011 (1.011)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 1.011 (1.011)	test_acc   0.73 (  0.73)	test_minacc   0.72 (  0.72)	test_majacc   0.78 (  0.78)	Loss_d 1.011 (1.011)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 21/  1]	epoch_time 0.0481 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0476 (0.0432)
record: (train_acc, test_acc) (0.7073000340461731, 0.7460000514984131)
last accs (train_acc, test_acc) (0.7088000323772431, 0.7260000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 15%|#5        | 4/26 [00:00<00:01, 16.25it/s] 31%|###       | 8/26 [00:00<00:00, 23.97it/s] 46%|####6     | 12/26 [00:00<00:00, 28.30it/s] 62%|######1   | 16/26 [00:00<00:00, 30.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.17it/s] 92%|#########2| 24/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 27.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.50 (  0.48)	train_penalty   0.00 (  0.00)	weight_norm  22.71 ( 22.70)	train_acc   0.69 (  0.71)	train_minacc   0.81 (  0.83)	train_majacc   0.68 (  0.68)	train_corr   0.00 (  0.00)	l1 5.7030 (5.7428)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.36it/s] 31%|###       | 8/26 [00:00<00:00, 29.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.34it/s] 50%|#####     | 13/26 [00:00<00:00, 35.99it/s] 69%|######9   | 18/26 [00:00<00:00, 39.79it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.79it/s] 88%|########8 | 23/26 [00:00<00:00, 38.62it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]
Test: [   0/  26]	Loss 0.512 (0.512)	test_acc   0.67 (  0.67)	test_minacc   0.89 (  0.89)	test_majacc   0.63 (  0.63)	Loss_d 0.512 (0.512)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.501 (0.508)	test_acc   0.73 (  0.68)	test_minacc   0.92 (  0.84)	test_majacc   0.69 (  0.65)	Loss_d 0.501 (0.508)	test_acc_d   0.73 (  0.68)	test_minacc_d   0.92 (  0.84)	test_majacc_d   0.69 (  0.65)	test_corr_d   0.44 (  0.43)
Test: [  20/  26]	Loss 0.457 (0.491)	test_acc   0.74 (  0.70)	test_minacc   0.87 (  0.86)	test_majacc   0.72 (  0.67)	Loss_d 0.457 (0.491)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.72 (  0.67)	test_corr_d   0.50 (  0.45)
Test: [  26/  26]	Loss 0.492 (0.489)	test_acc   0.69 (  0.70)	test_minacc   0.81 (  0.85)	test_majacc   0.67 (  0.67)	Loss_d 0.492 (0.489)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.51 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.39it/s]
Test: [  0/  1]	Loss 0.895 (0.895)	test_acc   0.75 (  0.75)	test_minacc   0.75 (  0.75)	test_majacc   0.74 (  0.74)	Loss_d 0.895 (0.895)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.895 (0.895)	test_acc   0.75 (  0.75)	test_minacc   0.75 (  0.75)	test_majacc   0.74 (  0.74)	Loss_d 0.895 (0.895)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.13 ( -0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 22/  1]	epoch_time 0.0408 (0.0440)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0431)
record: (train_acc, test_acc) (0.6983000332117081, 0.7500000596046448)
last accs (train_acc, test_acc) (0.6983000332117081, 0.7500000596046448)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  6.51it/s] 19%|#9        | 5/26 [00:00<00:01, 12.92it/s] 35%|###4      | 9/26 [00:00<00:00, 19.94it/s] 50%|#####     | 13/26 [00:00<00:00, 24.64it/s] 65%|######5   | 17/26 [00:00<00:00, 27.65it/s] 81%|########  | 21/26 [00:00<00:00, 29.86it/s] 96%|#########6| 25/26 [00:01<00:00, 31.34it/s]100%|##########| 26/26 [00:01<00:00, 23.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 5.623187065124512
set z to 5.342027711868286
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  22.71 ( 22.71)	train_acc   0.69 (  0.69)	train_minacc   0.77 (  0.83)	train_majacc   0.68 (  0.67)	train_corr   0.00 (  0.00)	l1 5.7073 (5.6610)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.80it/s] 23%|##3       | 6/26 [00:00<00:00, 27.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.50it/s] 42%|####2     | 11/26 [00:00<00:00, 35.67it/s] 62%|######1   | 16/26 [00:00<00:00, 40.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.22it/s] 81%|########  | 21/26 [00:00<00:00, 41.26it/s]100%|##########| 26/26 [00:00<00:00, 43.48it/s]100%|##########| 26/26 [00:00<00:00, 35.37it/s]
Test: [   0/  26]	Loss 0.513 (0.513)	test_acc   0.69 (  0.69)	test_minacc   0.89 (  0.89)	test_majacc   0.65 (  0.65)	Loss_d 0.513 (0.513)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.518 (0.523)	test_acc   0.69 (  0.67)	test_minacc   0.89 (  0.82)	test_majacc   0.65 (  0.64)	Loss_d 0.518 (0.523)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.89 (  0.82)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.45 (  0.44)
Test: [  20/  26]	Loss 0.477 (0.506)	test_acc   0.71 (  0.69)	test_minacc   0.85 (  0.84)	test_majacc   0.69 (  0.66)	Loss_d 0.477 (0.506)	test_acc_d   0.71 (  0.69)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.50 (  0.45)
Test: [  26/  26]	Loss 0.508 (0.503)	test_acc   0.68 (  0.69)	test_minacc   0.74 (  0.84)	test_majacc   0.67 (  0.66)	Loss_d 0.508 (0.503)	test_acc_d   0.68 (  0.69)	test_minacc_d   0.74 (  0.84)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.50 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 0.956 (0.956)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.956 (0.956)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.956 (0.956)	test_acc   0.74 (  0.74)	test_minacc   0.74 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.956 (0.956)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 23/  1]	epoch_time 0.0431 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0426 (0.0431)
record: (train_acc, test_acc) (0.6983000332117081, 0.7500000596046448)
last accs (train_acc, test_acc) (0.6905000309348106, 0.7420000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.61it/s]  8%|7         | 2/26 [00:00<00:04,  5.59it/s] 23%|##3       | 6/26 [00:00<00:01, 15.87it/s] 38%|###8      | 10/26 [00:00<00:00, 22.19it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.39it/s] 69%|######9   | 18/26 [00:00<00:00, 29.03it/s] 85%|########4 | 22/26 [00:00<00:00, 30.62it/s]100%|##########| 26/26 [00:01<00:00, 32.24it/s]100%|##########| 26/26 [00:01<00:00, 23.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.51 (  0.49)	train_penalty   0.00 (  0.00)	weight_norm  22.71 ( 22.71)	train_acc   0.68 (  0.70)	train_minacc   0.81 (  0.84)	train_majacc   0.67 (  0.67)	train_corr   0.00 (  0.00)	l1 5.8535 (5.7842)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.29it/s] 31%|###       | 8/26 [00:00<00:00, 37.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.90it/s] 50%|#####     | 13/26 [00:00<00:00, 41.62it/s] 69%|######9   | 18/26 [00:00<00:00, 43.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.90it/s] 88%|########8 | 23/26 [00:00<00:00, 43.23it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.517 (0.517)	test_acc   0.67 (  0.67)	test_minacc   0.89 (  0.89)	test_majacc   0.64 (  0.64)	Loss_d 0.517 (0.517)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.512 (0.520)	test_acc   0.72 (  0.67)	test_minacc   0.92 (  0.85)	test_majacc   0.68 (  0.64)	Loss_d 0.512 (0.520)	test_acc_d   0.72 (  0.67)	test_minacc_d   0.92 (  0.85)	test_majacc_d   0.68 (  0.64)	test_corr_d   0.43 (  0.42)
Test: [  20/  26]	Loss 0.460 (0.504)	test_acc   0.73 (  0.69)	test_minacc   0.88 (  0.86)	test_majacc   0.70 (  0.65)	Loss_d 0.460 (0.504)	test_acc_d   0.73 (  0.69)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.70 (  0.65)	test_corr_d   0.49 (  0.43)
Test: [  26/  26]	Loss 0.499 (0.501)	test_acc   0.69 (  0.69)	test_minacc   0.77 (  0.86)	test_majacc   0.68 (  0.66)	Loss_d 0.499 (0.501)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.50 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.923 (0.923)	test_acc   0.76 (  0.76)	test_minacc   0.76 (  0.76)	test_majacc   0.74 (  0.74)	Loss_d 0.923 (0.923)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.923 (0.923)	test_acc   0.76 (  0.76)	test_minacc   0.76 (  0.76)	test_majacc   0.74 (  0.74)	Loss_d 0.923 (0.923)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.13 ( -0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 24/  1]	epoch_time 0.0468 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0463 (0.0432)
record: (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
last accs (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 15%|#5        | 4/26 [00:00<00:01, 18.13it/s] 31%|###       | 8/26 [00:00<00:00, 25.20it/s] 46%|####6     | 12/26 [00:00<00:00, 29.23it/s] 62%|######1   | 16/26 [00:00<00:00, 31.13it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.49it/s] 92%|#########2| 24/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.52 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.72 ( 22.71)	train_acc   0.69 (  0.68)	train_minacc   0.84 (  0.81)	train_majacc   0.67 (  0.66)	train_corr   0.00 (  0.00)	l1 5.2498 (5.4075)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 23%|##3       | 6/26 [00:00<00:00, 24.59it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.59it/s] 42%|####2     | 11/26 [00:00<00:00, 34.23it/s] 62%|######1   | 16/26 [00:00<00:00, 39.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.22it/s] 81%|########  | 21/26 [00:00<00:00, 38.22it/s]100%|##########| 26/26 [00:00<00:00, 41.43it/s]100%|##########| 26/26 [00:00<00:00, 33.19it/s]
Test: [   0/  26]	Loss 0.535 (0.535)	test_acc   0.69 (  0.69)	test_minacc   0.84 (  0.84)	test_majacc   0.67 (  0.67)	Loss_d 0.535 (0.535)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.561 (0.548)	test_acc   0.64 (  0.66)	test_minacc   0.81 (  0.80)	test_majacc   0.60 (  0.63)	Loss_d 0.561 (0.548)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.55 (  0.52)
Test: [  20/  26]	Loss 0.526 (0.539)	test_acc   0.67 (  0.67)	test_minacc   0.83 (  0.81)	test_majacc   0.65 (  0.64)	Loss_d 0.526 (0.539)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.83 (  0.81)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.57 (  0.52)
Test: [  26/  26]	Loss 0.523 (0.537)	test_acc   0.68 (  0.67)	test_minacc   0.84 (  0.81)	test_majacc   0.66 (  0.64)	Loss_d 0.523 (0.537)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.57 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.46it/s]
Test: [  0/  1]	Loss 1.028 (1.028)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.028 (1.028)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 1.028 (1.028)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.75 (  0.75)	Loss_d 1.028 (1.028)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.09 (  0.09)
Overall Timing[ 25/  1]	epoch_time 0.0417 (0.0440)	validation_time 0.0003 (0.0007)	train_time 0.0413 (0.0432)
record: (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
last accs (train_acc, test_acc) (0.6705000311732292, 0.7040000557899475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.84it/s] 19%|#9        | 5/26 [00:00<00:01, 12.95it/s] 35%|###4      | 9/26 [00:00<00:00, 20.00it/s] 50%|#####     | 13/26 [00:00<00:00, 24.70it/s] 65%|######5   | 17/26 [00:00<00:00, 27.83it/s] 81%|########  | 21/26 [00:00<00:00, 30.21it/s] 96%|#########6| 25/26 [00:01<00:00, 31.56it/s]100%|##########| 26/26 [00:01<00:00, 23.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.72 ( 22.72)	train_acc   0.66 (  0.65)	train_minacc   0.84 (  0.85)	train_majacc   0.63 (  0.62)	train_corr   0.00 (  0.00)	l1 5.3337 (5.2587)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.89it/s] 12%|#1        | 3/26 [00:00<00:01, 13.53it/s] 31%|###       | 8/26 [00:00<00:00, 28.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.50it/s] 50%|#####     | 13/26 [00:00<00:00, 36.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.17it/s] 92%|#########2| 24/26 [00:00<00:00, 41.48it/s]100%|##########| 26/26 [00:00<00:00, 33.55it/s]
Test: [   0/  26]	Loss 0.554 (0.554)	test_acc   0.66 (  0.66)	test_minacc   0.91 (  0.91)	test_majacc   0.61 (  0.61)	Loss_d 0.554 (0.554)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.553 (0.561)	test_acc   0.66 (  0.64)	test_minacc   0.87 (  0.85)	test_majacc   0.62 (  0.60)	Loss_d 0.553 (0.561)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.48 (  0.43)
Test: [  20/  26]	Loss 0.530 (0.554)	test_acc   0.68 (  0.65)	test_minacc   0.92 (  0.87)	test_majacc   0.64 (  0.61)	Loss_d 0.530 (0.554)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.48 (  0.43)
Test: [  26/  26]	Loss 0.546 (0.551)	test_acc   0.67 (  0.65)	test_minacc   0.84 (  0.87)	test_majacc   0.65 (  0.61)	Loss_d 0.546 (0.551)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.49 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.956 (0.956)	test_acc   0.75 (  0.75)	test_minacc   0.75 (  0.75)	test_majacc   0.70 (  0.70)	Loss_d 0.956 (0.956)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.956 (0.956)	test_acc   0.75 (  0.75)	test_minacc   0.75 (  0.75)	test_majacc   0.70 (  0.70)	Loss_d 0.956 (0.956)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 26/  1]	epoch_time 0.0411 (0.0439)	validation_time 0.0004 (0.0007)	train_time 0.0406 (0.0431)
record: (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
last accs (train_acc, test_acc) (0.652900020301342, 0.7470000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.39it/s] 19%|#9        | 5/26 [00:00<00:01, 20.31it/s] 35%|###4      | 9/26 [00:00<00:00, 26.74it/s] 50%|#####     | 13/26 [00:00<00:00, 29.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.000)	train_nll   0.51 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.72 ( 22.72)	train_acc   0.69 (  0.65)	train_minacc   0.71 (  0.84)	train_majacc   0.69 (  0.62)	train_corr   0.00 (  0.00)	l1 5.4637 (5.3848)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 20.41it/s] 38%|###8      | 10/26 [00:00<00:00, 31.20it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.11it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.11it/s] 96%|#########6| 25/26 [00:00<00:00, 41.99it/s]100%|##########| 26/26 [00:00<00:00, 33.16it/s]
Test: [   0/  26]	Loss 0.532 (0.532)	test_acc   0.67 (  0.67)	test_minacc   0.87 (  0.87)	test_majacc   0.63 (  0.63)	Loss_d 0.532 (0.532)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.523 (0.533)	test_acc   0.72 (  0.68)	test_minacc   0.86 (  0.79)	test_majacc   0.69 (  0.65)	Loss_d 0.523 (0.533)	test_acc_d   0.72 (  0.68)	test_minacc_d   0.86 (  0.79)	test_majacc_d   0.69 (  0.65)	test_corr_d   0.46 (  0.44)
Test: [  20/  26]	Loss 0.473 (0.523)	test_acc   0.72 (  0.68)	test_minacc   0.87 (  0.81)	test_majacc   0.70 (  0.66)	Loss_d 0.473 (0.523)	test_acc_d   0.72 (  0.68)	test_minacc_d   0.87 (  0.81)	test_majacc_d   0.70 (  0.66)	test_corr_d   0.50 (  0.44)
Test: [  26/  26]	Loss 0.511 (0.521)	test_acc   0.70 (  0.68)	test_minacc   0.71 (  0.81)	test_majacc   0.69 (  0.66)	Loss_d 0.511 (0.521)	test_acc_d   0.70 (  0.68)	test_minacc_d   0.71 (  0.81)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.53 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.50it/s]
Test: [  0/  1]	Loss 0.896 (0.896)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.70 (  0.70)	Loss_d 0.896 (0.896)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.896 (0.896)	test_acc   0.72 (  0.72)	test_minacc   0.72 (  0.72)	test_majacc   0.70 (  0.70)	Loss_d 0.896 (0.896)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 27/  1]	epoch_time 0.0406 (0.0437)	validation_time 0.0004 (0.0007)	train_time 0.0402 (0.0430)
record: (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
last accs (train_acc, test_acc) (0.6839000251889229, 0.7190000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.87it/s] 23%|##3       | 6/26 [00:00<00:00, 26.78it/s] 38%|###8      | 10/26 [00:00<00:00, 30.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.75it/s] 69%|######9   | 18/26 [00:00<00:00, 33.40it/s] 85%|########4 | 22/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 30.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.001)	train_nll   0.56 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.73 ( 22.72)	train_acc   0.65 (  0.67)	train_minacc   0.81 (  0.82)	train_majacc   0.63 (  0.64)	train_corr   0.00 (  0.00)	l1 5.5362 (5.5561)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.09it/s] 31%|###       | 8/26 [00:00<00:00, 37.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.96it/s] 50%|#####     | 13/26 [00:00<00:00, 37.79it/s] 69%|######9   | 18/26 [00:00<00:00, 40.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.67it/s] 88%|########8 | 23/26 [00:00<00:00, 41.93it/s]100%|##########| 26/26 [00:00<00:00, 37.87it/s]
Test: [   0/  26]	Loss 0.582 (0.582)	test_acc   0.63 (  0.63)	test_minacc   0.87 (  0.87)	test_majacc   0.59 (  0.59)	Loss_d 0.582 (0.582)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.549 (0.560)	test_acc   0.68 (  0.64)	test_minacc   0.90 (  0.86)	test_majacc   0.64 (  0.60)	Loss_d 0.549 (0.560)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.39 (  0.36)
Test: [  20/  26]	Loss 0.522 (0.554)	test_acc   0.67 (  0.64)	test_minacc   0.90 (  0.87)	test_majacc   0.63 (  0.60)	Loss_d 0.522 (0.554)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.90 (  0.87)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.40 (  0.36)
Test: [  26/  26]	Loss 0.544 (0.552)	test_acc   0.65 (  0.65)	test_minacc   0.81 (  0.86)	test_majacc   0.63 (  0.61)	Loss_d 0.544 (0.552)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.44 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 0.874 (0.874)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.76)	test_majacc   0.72 (  0.72)	Loss_d 0.874 (0.874)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.874 (0.874)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.76)	test_majacc   0.72 (  0.72)	Loss_d 0.874 (0.874)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 28/  1]	epoch_time 0.0407 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0429)
record: (train_acc, test_acc) (0.6900000278949737, 0.7580000162124634)
last accs (train_acc, test_acc) (0.6474000172615051, 0.753000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 15%|#5        | 4/26 [00:00<00:01, 15.60it/s] 31%|###       | 8/26 [00:00<00:00, 23.70it/s] 46%|####6     | 12/26 [00:00<00:00, 27.18it/s] 62%|######1   | 16/26 [00:00<00:00, 29.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.89it/s] 92%|#########2| 24/26 [00:00<00:00, 32.17it/s]100%|##########| 26/26 [00:00<00:00, 26.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.000)	train_nll   0.54 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  22.73 ( 22.73)	train_acc   0.63 (  0.65)	train_minacc   0.77 (  0.84)	train_majacc   0.61 (  0.62)	train_corr   0.00 (  0.00)	l1 5.6266 (5.4706)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.40it/s] 15%|#5        | 4/26 [00:00<00:01, 14.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.95it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.86it/s] 92%|#########2| 24/26 [00:00<00:00, 40.33it/s]100%|##########| 26/26 [00:00<00:00, 32.17it/s]
Test: [   0/  26]	Loss 0.574 (0.574)	test_acc   0.60 (  0.60)	test_minacc   0.89 (  0.89)	test_majacc   0.56 (  0.56)	Loss_d 0.574 (0.574)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.561 (0.570)	test_acc   0.64 (  0.61)	test_minacc   0.92 (  0.86)	test_majacc   0.58 (  0.57)	Loss_d 0.561 (0.570)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.92 (  0.86)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.534 (0.556)	test_acc   0.61 (  0.62)	test_minacc   0.85 (  0.86)	test_majacc   0.57 (  0.58)	Loss_d 0.534 (0.556)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.85 (  0.86)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.37 (  0.35)
Test: [  26/  26]	Loss 0.540 (0.552)	test_acc   0.64 (  0.62)	test_minacc   0.77 (  0.86)	test_majacc   0.62 (  0.58)	Loss_d 0.540 (0.552)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.45 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 0.876 (0.876)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.63 (  0.63)	Loss_d 0.876 (0.876)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.876 (0.876)	test_acc   0.77 (  0.77)	test_minacc   0.79 (  0.79)	test_majacc   0.63 (  0.63)	Loss_d 0.876 (0.876)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.20 ( -0.20)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/158/checkpoints/model_best.pth
Overall Timing[ 29/  1]	epoch_time 0.0415 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0428)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.45it/s] 15%|#5        | 4/26 [00:00<00:01, 15.63it/s] 31%|###       | 8/26 [00:00<00:00, 24.51it/s] 46%|####6     | 12/26 [00:00<00:00, 29.30it/s] 62%|######1   | 16/26 [00:00<00:00, 32.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.93it/s] 92%|#########2| 24/26 [00:00<00:00, 34.86it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.001)	train_nll   0.52 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  22.74 ( 22.74)	train_acc   0.66 (  0.69)	train_minacc   0.81 (  0.72)	train_majacc   0.64 (  0.68)	train_corr   0.00 (  0.00)	l1 5.6123 (5.4979)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.61it/s] 23%|##3       | 6/26 [00:00<00:00, 25.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.12it/s] 42%|####2     | 11/26 [00:00<00:00, 33.63it/s] 62%|######1   | 16/26 [00:00<00:00, 38.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.98it/s] 81%|########  | 21/26 [00:00<00:00, 38.19it/s]100%|##########| 26/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 33.04it/s]
Test: [   0/  26]	Loss 0.542 (0.542)	test_acc   0.63 (  0.63)	test_minacc   0.91 (  0.91)	test_majacc   0.58 (  0.58)	Loss_d 0.542 (0.542)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.542 (0.550)	test_acc   0.65 (  0.64)	test_minacc   0.86 (  0.82)	test_majacc   0.61 (  0.60)	Loss_d 0.542 (0.550)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.40 (  0.40)
Test: [  20/  26]	Loss 0.500 (0.538)	test_acc   0.66 (  0.64)	test_minacc   0.88 (  0.84)	test_majacc   0.63 (  0.61)	Loss_d 0.500 (0.538)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.44 (  0.40)
Test: [  26/  26]	Loss 0.525 (0.534)	test_acc   0.65 (  0.65)	test_minacc   0.84 (  0.84)	test_majacc   0.62 (  0.61)	Loss_d 0.525 (0.534)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.46 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.872 (0.872)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.66 (  0.66)	Loss_d 0.872 (0.872)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.872 (0.872)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.66 (  0.66)	Loss_d 0.872 (0.872)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 30/  1]	epoch_time 0.0446 (0.0436)	validation_time 0.0005 (0.0006)	train_time 0.0441 (0.0428)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6479000146985054, 0.7380000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 15%|#5        | 4/26 [00:00<00:01, 16.26it/s] 31%|###       | 8/26 [00:00<00:00, 23.98it/s] 46%|####6     | 12/26 [00:00<00:00, 27.69it/s] 62%|######1   | 16/26 [00:00<00:00, 30.35it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.47it/s] 92%|#########2| 24/26 [00:00<00:00, 32.50it/s]100%|##########| 26/26 [00:00<00:00, 26.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.75 ( 22.74)	train_acc   0.66 (  0.64)	train_minacc   0.84 (  0.84)	train_majacc   0.64 (  0.60)	train_corr   0.00 (  0.00)	l1 5.3540 (5.3401)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 19%|#9        | 5/26 [00:00<00:00, 25.05it/s] 38%|###8      | 10/26 [00:00<00:00, 34.62it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.62it/s] 62%|######1   | 16/26 [00:00<00:00, 42.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.94it/s] 81%|########  | 21/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 43.29it/s]100%|##########| 26/26 [00:00<00:00, 35.66it/s]
Test: [   0/  26]	Loss 0.541 (0.541)	test_acc   0.62 (  0.62)	test_minacc   0.95 (  0.95)	test_majacc   0.57 (  0.57)	Loss_d 0.541 (0.541)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.95 (  0.95)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.557 (0.548)	test_acc   0.63 (  0.63)	test_minacc   0.87 (  0.86)	test_majacc   0.59 (  0.58)	Loss_d 0.557 (0.548)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.42 (  0.41)
Test: [  20/  26]	Loss 0.517 (0.541)	test_acc   0.63 (  0.63)	test_minacc   0.88 (  0.86)	test_majacc   0.59 (  0.59)	Loss_d 0.517 (0.541)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.88 (  0.86)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.44 (  0.41)
Test: [  26/  26]	Loss 0.525 (0.537)	test_acc   0.66 (  0.64)	test_minacc   0.84 (  0.86)	test_majacc   0.64 (  0.60)	Loss_d 0.525 (0.537)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.48 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.16it/s]
Test: [  0/  1]	Loss 0.916 (0.916)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.916 (0.916)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.66 (  0.66)	Loss_d 0.916 (0.916)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 31/  1]	epoch_time 0.0447 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0442 (0.0429)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.636300011575222, 0.7630000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.09it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.13it/s] 65%|######5   | 17/26 [00:00<00:00, 31.78it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.001)	train_nll   0.57 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.75 ( 22.75)	train_acc   0.62 (  0.61)	train_minacc   0.81 (  0.86)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 5.2062 (5.3112)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 23%|##3       | 6/26 [00:00<00:00, 28.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.49it/s] 42%|####2     | 11/26 [00:00<00:00, 36.11it/s] 62%|######1   | 16/26 [00:00<00:00, 40.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.49it/s] 81%|########  | 21/26 [00:00<00:00, 39.01it/s]100%|##########| 26/26 [00:00<00:00, 35.07it/s]
Test: [   0/  26]	Loss 0.566 (0.566)	test_acc   0.60 (  0.60)	test_minacc   0.89 (  0.89)	test_majacc   0.55 (  0.55)	Loss_d 0.566 (0.566)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.579 (0.565)	test_acc   0.63 (  0.61)	test_minacc   0.78 (  0.80)	test_majacc   0.60 (  0.57)	Loss_d 0.579 (0.565)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.78 (  0.80)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.40 (  0.38)
Test: [  20/  26]	Loss 0.535 (0.565)	test_acc   0.63 (  0.60)	test_minacc   0.85 (  0.80)	test_majacc   0.59 (  0.57)	Loss_d 0.535 (0.565)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.85 (  0.80)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.41 (  0.38)
Test: [  26/  26]	Loss 0.557 (0.563)	test_acc   0.61 (  0.61)	test_minacc   0.77 (  0.79)	test_majacc   0.58 (  0.57)	Loss_d 0.557 (0.563)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.43 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.47it/s]
Test: [  0/  1]	Loss 0.873 (0.873)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.68 (  0.68)	Loss_d 0.873 (0.873)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.873 (0.873)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.68 (  0.68)	Loss_d 0.873 (0.873)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0403 (0.0435)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0428)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6063000110983848, 0.7210000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 12%|#1        | 3/26 [00:00<00:02, 11.11it/s] 27%|##6       | 7/26 [00:00<00:00, 20.42it/s] 42%|####2     | 11/26 [00:00<00:00, 25.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.55it/s] 88%|########8 | 23/26 [00:00<00:00, 32.27it/s]100%|##########| 26/26 [00:01<00:00, 25.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.76 ( 22.76)	train_acc   0.68 (  0.67)	train_minacc   0.71 (  0.68)	train_majacc   0.68 (  0.67)	train_corr   0.00 (  0.00)	l1 5.0270 (5.0427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 23%|##3       | 6/26 [00:00<00:00, 29.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.15it/s] 42%|####2     | 11/26 [00:00<00:00, 37.75it/s] 62%|######1   | 16/26 [00:00<00:00, 41.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.18it/s] 81%|########  | 21/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 42.86it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.585 (0.585)	test_acc   0.61 (  0.61)	test_minacc   0.87 (  0.87)	test_majacc   0.56 (  0.56)	Loss_d 0.585 (0.585)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.574 (0.563)	test_acc   0.67 (  0.65)	test_minacc   0.87 (  0.82)	test_majacc   0.63 (  0.62)	Loss_d 0.574 (0.563)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.87 (  0.82)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.33 (  0.34)
Test: [  20/  26]	Loss 0.525 (0.557)	test_acc   0.67 (  0.65)	test_minacc   0.87 (  0.83)	test_majacc   0.64 (  0.62)	Loss_d 0.525 (0.557)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.37 (  0.35)
Test: [  26/  26]	Loss 0.517 (0.552)	test_acc   0.67 (  0.65)	test_minacc   0.71 (  0.82)	test_majacc   0.67 (  0.62)	Loss_d 0.517 (0.552)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.71 (  0.82)	test_majacc_d   0.67 (  0.62)	test_corr_d   0.47 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.08it/s]
Test: [  0/  1]	Loss 0.778 (0.778)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.65 (  0.65)	Loss_d 0.778 (0.778)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.778 (0.778)	test_acc   0.74 (  0.74)	test_minacc   0.75 (  0.75)	test_majacc   0.65 (  0.65)	Loss_d 0.778 (0.778)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 33/  1]	epoch_time 0.0391 (0.0434)	validation_time 0.0003 (0.0006)	train_time 0.0387 (0.0427)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6522000168561936, 0.7420000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 15%|#5        | 4/26 [00:00<00:01, 13.76it/s] 31%|###       | 8/26 [00:00<00:00, 22.18it/s] 46%|####6     | 12/26 [00:00<00:00, 27.15it/s] 62%|######1   | 16/26 [00:00<00:00, 30.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.19it/s] 92%|#########2| 24/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:01<00:00, 25.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.001 (0.001)	train_nll   0.55 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.77 ( 22.76)	train_acc   0.59 (  0.63)	train_minacc   0.81 (  0.85)	train_majacc   0.56 (  0.59)	train_corr   0.00 (  0.00)	l1 5.1994 (5.0022)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.59it/s] 27%|##6       | 7/26 [00:00<00:00, 26.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.16it/s] 42%|####2     | 11/26 [00:00<00:00, 30.69it/s] 65%|######5   | 17/26 [00:00<00:00, 37.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.94it/s] 85%|########4 | 22/26 [00:00<00:00, 38.45it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]
Test: [   0/  26]	Loss 0.555 (0.555)	test_acc   0.59 (  0.59)	test_minacc   0.87 (  0.87)	test_majacc   0.54 (  0.54)	Loss_d 0.555 (0.555)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.580 (0.567)	test_acc   0.58 (  0.60)	test_minacc   0.84 (  0.86)	test_majacc   0.54 (  0.55)	Loss_d 0.580 (0.567)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.84 (  0.86)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.37 (  0.35)
Test: [  20/  26]	Loss 0.549 (0.568)	test_acc   0.59 (  0.59)	test_minacc   0.90 (  0.86)	test_majacc   0.54 (  0.54)	Loss_d 0.549 (0.568)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.38 (  0.34)
Test: [  26/  26]	Loss 0.547 (0.564)	test_acc   0.59 (  0.59)	test_minacc   0.81 (  0.86)	test_majacc   0.56 (  0.55)	Loss_d 0.547 (0.564)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.43 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.875 (0.875)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.61 (  0.61)	Loss_d 0.875 (0.875)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.875 (0.875)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.61 (  0.61)	Loss_d 0.875 (0.875)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 34/  1]	epoch_time 0.0423 (0.0434)	validation_time 0.0005 (0.0006)	train_time 0.0418 (0.0427)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5944000084400177, 0.7590000629425049)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.32it/s] 19%|#9        | 5/26 [00:00<00:01, 14.01it/s] 35%|###4      | 9/26 [00:00<00:00, 20.60it/s] 50%|#####     | 13/26 [00:00<00:00, 25.44it/s] 65%|######5   | 17/26 [00:00<00:00, 28.44it/s] 81%|########  | 21/26 [00:00<00:00, 30.51it/s] 96%|#########6| 25/26 [00:00<00:00, 31.69it/s]100%|##########| 26/26 [00:01<00:00, 23.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.77 ( 22.77)	train_acc   0.60 (  0.60)	train_minacc   0.77 (  0.86)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 5.1382 (5.0449)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.69it/s] 15%|#5        | 4/26 [00:00<00:01, 19.84it/s] 35%|###4      | 9/26 [00:00<00:00, 32.56it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.56it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.22it/s] 92%|#########2| 24/26 [00:00<00:00, 40.10it/s]100%|##########| 26/26 [00:00<00:00, 34.82it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.55 (  0.55)	test_minacc   0.91 (  0.91)	test_majacc   0.49 (  0.49)	Loss_d 0.571 (0.571)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.576 (0.577)	test_acc   0.61 (  0.57)	test_minacc   0.86 (  0.85)	test_majacc   0.56 (  0.52)	Loss_d 0.576 (0.577)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.86 (  0.85)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.549 (0.578)	test_acc   0.58 (  0.57)	test_minacc   0.90 (  0.87)	test_majacc   0.53 (  0.52)	Loss_d 0.549 (0.578)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.90 (  0.87)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.37 (  0.32)
Test: [  26/  26]	Loss 0.547 (0.575)	test_acc   0.60 (  0.57)	test_minacc   0.77 (  0.86)	test_majacc   0.58 (  0.52)	Loss_d 0.547 (0.575)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.77 (  0.86)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.42 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.835 (0.835)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.65 (  0.65)	Loss_d 0.835 (0.835)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.835 (0.835)	test_acc   0.76 (  0.76)	test_minacc   0.77 (  0.77)	test_majacc   0.65 (  0.65)	Loss_d 0.835 (0.835)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 35/  1]	epoch_time 0.0427 (0.0433)	validation_time 0.0003 (0.0006)	train_time 0.0423 (0.0426)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5744000137448311, 0.7600000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 23.44it/s] 35%|###4      | 9/26 [00:00<00:00, 28.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.35it/s] 65%|######5   | 17/26 [00:00<00:00, 32.88it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.77 ( 22.77)	train_acc   0.60 (  0.59)	train_minacc   0.77 (  0.84)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9799 (4.9855)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.21it/s] 27%|##6       | 7/26 [00:00<00:00, 33.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.03it/s] 46%|####6     | 12/26 [00:00<00:00, 38.87it/s] 65%|######5   | 17/26 [00:00<00:00, 40.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.36it/s] 85%|########4 | 22/26 [00:00<00:00, 40.94it/s]100%|##########| 26/26 [00:00<00:00, 36.52it/s]
Test: [   0/  26]	Loss 0.555 (0.555)	test_acc   0.63 (  0.63)	test_minacc   0.84 (  0.84)	test_majacc   0.59 (  0.59)	Loss_d 0.555 (0.555)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.593 (0.569)	test_acc   0.59 (  0.60)	test_minacc   0.83 (  0.83)	test_majacc   0.54 (  0.56)	Loss_d 0.593 (0.569)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.43 (  0.40)
Test: [  20/  26]	Loss 0.562 (0.571)	test_acc   0.58 (  0.59)	test_minacc   0.87 (  0.83)	test_majacc   0.54 (  0.55)	Loss_d 0.562 (0.571)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.42 (  0.38)
Test: [  26/  26]	Loss 0.549 (0.568)	test_acc   0.60 (  0.60)	test_minacc   0.77 (  0.82)	test_majacc   0.57 (  0.55)	Loss_d 0.549 (0.568)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.46 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.922 (0.922)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.922 (0.922)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.922 (0.922)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.922 (0.922)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 36/  1]	epoch_time 0.0394 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0390 (0.0425)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5952000111341477, 0.7210000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:01, 20.81it/s] 35%|###4      | 9/26 [00:00<00:00, 26.99it/s] 50%|#####     | 13/26 [00:00<00:00, 30.27it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 33.70it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.78 ( 22.78)	train_acc   0.58 (  0.59)	train_minacc   0.77 (  0.84)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 5.1612 (4.9845)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.82it/s] 27%|##6       | 7/26 [00:00<00:00, 25.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.78it/s] 46%|####6     | 12/26 [00:00<00:00, 32.47it/s] 65%|######5   | 17/26 [00:00<00:00, 37.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.40it/s] 85%|########4 | 22/26 [00:00<00:00, 40.67it/s]100%|##########| 26/26 [00:00<00:00, 32.01it/s]
Test: [   0/  26]	Loss 0.577 (0.577)	test_acc   0.54 (  0.54)	test_minacc   0.84 (  0.84)	test_majacc   0.49 (  0.49)	Loss_d 0.577 (0.577)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.579 (0.579)	test_acc   0.59 (  0.57)	test_minacc   0.78 (  0.82)	test_majacc   0.56 (  0.52)	Loss_d 0.579 (0.579)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.36 (  0.33)
Test: [  20/  26]	Loss 0.563 (0.585)	test_acc   0.56 (  0.56)	test_minacc   0.85 (  0.83)	test_majacc   0.52 (  0.51)	Loss_d 0.563 (0.585)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.85 (  0.83)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.35 (  0.32)
Test: [  26/  26]	Loss 0.558 (0.582)	test_acc   0.57 (  0.56)	test_minacc   0.77 (  0.82)	test_majacc   0.54 (  0.52)	Loss_d 0.558 (0.582)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.77 (  0.82)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.41 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 0.864 (0.864)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.57 (  0.57)	Loss_d 0.864 (0.864)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.864 (0.864)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.57 (  0.57)	Loss_d 0.864 (0.864)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 37/  1]	epoch_time 0.0401 (0.0432)	validation_time 0.0006 (0.0006)	train_time 0.0395 (0.0425)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5630000156164169, 0.7050000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.26it/s] 35%|###4      | 9/26 [00:00<00:00, 28.44it/s] 50%|#####     | 13/26 [00:00<00:00, 31.26it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.17it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.78 ( 22.78)	train_acc   0.62 (  0.58)	train_minacc   0.77 (  0.84)	train_majacc   0.59 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9318 (4.9769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.79it/s] 23%|##3       | 6/26 [00:00<00:00, 30.95it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.95it/s] 42%|####2     | 11/26 [00:00<00:00, 38.27it/s] 62%|######1   | 16/26 [00:00<00:00, 42.19it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.19it/s] 81%|########  | 21/26 [00:00<00:00, 40.35it/s]100%|##########| 26/26 [00:00<00:00, 43.05it/s]100%|##########| 26/26 [00:00<00:00, 35.67it/s]
Test: [   0/  26]	Loss 0.560 (0.560)	test_acc   0.65 (  0.65)	test_minacc   0.80 (  0.80)	test_majacc   0.62 (  0.62)	Loss_d 0.560 (0.560)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.602 (0.573)	test_acc   0.58 (  0.61)	test_minacc   0.79 (  0.80)	test_majacc   0.54 (  0.58)	Loss_d 0.602 (0.573)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.44 (  0.41)
Test: [  20/  26]	Loss 0.580 (0.578)	test_acc   0.57 (  0.60)	test_minacc   0.75 (  0.79)	test_majacc   0.54 (  0.57)	Loss_d 0.580 (0.578)	test_acc_d   0.57 (  0.60)	test_minacc_d   0.75 (  0.79)	test_majacc_d   0.54 (  0.57)	test_corr_d   0.42 (  0.39)
Test: [  26/  26]	Loss 0.557 (0.575)	test_acc   0.61 (  0.60)	test_minacc   0.74 (  0.78)	test_majacc   0.59 (  0.57)	Loss_d 0.557 (0.575)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.74 (  0.78)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.47 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.45it/s]
Test: [  0/  1]	Loss 0.952 (0.952)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.63 (  0.63)	Loss_d 0.952 (0.952)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.952 (0.952)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.63 (  0.63)	Loss_d 0.952 (0.952)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 38/  1]	epoch_time 0.0407 (0.0431)	validation_time 0.0005 (0.0006)	train_time 0.0402 (0.0424)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.604700010240078, 0.690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 27.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.55it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 33.67it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.78 ( 22.78)	train_acc   0.57 (  0.59)	train_minacc   0.81 (  0.84)	train_majacc   0.53 (  0.55)	train_corr   0.00 (  0.00)	l1 5.1260 (4.9332)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 23%|##3       | 6/26 [00:00<00:00, 26.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.16it/s] 42%|####2     | 11/26 [00:00<00:00, 33.99it/s] 62%|######1   | 16/26 [00:00<00:00, 39.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.13it/s] 81%|########  | 21/26 [00:00<00:00, 38.32it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]100%|##########| 26/26 [00:00<00:00, 33.33it/s]
Test: [   0/  26]	Loss 0.568 (0.568)	test_acc   0.58 (  0.58)	test_minacc   0.91 (  0.91)	test_majacc   0.53 (  0.53)	Loss_d 0.568 (0.568)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.594 (0.578)	test_acc   0.53 (  0.56)	test_minacc   0.86 (  0.88)	test_majacc   0.47 (  0.51)	Loss_d 0.594 (0.578)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.86 (  0.88)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.580 (0.586)	test_acc   0.53 (  0.55)	test_minacc   0.92 (  0.87)	test_majacc   0.46 (  0.49)	Loss_d 0.580 (0.586)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.35 (  0.32)
Test: [  26/  26]	Loss 0.555 (0.583)	test_acc   0.57 (  0.56)	test_minacc   0.81 (  0.87)	test_majacc   0.54 (  0.50)	Loss_d 0.555 (0.583)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.81 (  0.87)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.42 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.24it/s]
Test: [  0/  1]	Loss 0.909 (0.909)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.909 (0.909)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.909 (0.909)	test_acc   0.76 (  0.76)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.909 (0.909)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 39/  1]	epoch_time 0.0401 (0.0430)	validation_time 0.0005 (0.0006)	train_time 0.0396 (0.0423)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5570000113248825, 0.7580000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:01, 20.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.63it/s] 50%|#####     | 13/26 [00:00<00:00, 30.21it/s] 65%|######5   | 17/26 [00:00<00:00, 31.39it/s] 81%|########  | 21/26 [00:00<00:00, 32.70it/s] 96%|#########6| 25/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.79 ( 22.78)	train_acc   0.62 (  0.59)	train_minacc   0.74 (  0.78)	train_majacc   0.60 (  0.55)	train_corr   0.00 (  0.00)	l1 5.0815 (5.0274)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 23%|##3       | 6/26 [00:00<00:00, 27.62it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.62it/s] 42%|####2     | 11/26 [00:00<00:00, 35.68it/s] 65%|######5   | 17/26 [00:00<00:00, 37.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.68it/s] 85%|########4 | 22/26 [00:00<00:00, 41.20it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]
Test: [   0/  26]	Loss 0.570 (0.570)	test_acc   0.55 (  0.55)	test_minacc   0.76 (  0.76)	test_majacc   0.52 (  0.52)	Loss_d 0.570 (0.570)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.572 (0.567)	test_acc   0.60 (  0.58)	test_minacc   0.59 (  0.68)	test_majacc   0.61 (  0.57)	Loss_d 0.572 (0.567)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.59 (  0.68)	test_majacc_d   0.61 (  0.57)	test_corr_d   0.40 (  0.38)
Test: [  20/  26]	Loss 0.566 (0.578)	test_acc   0.59 (  0.57)	test_minacc   0.77 (  0.71)	test_majacc   0.57 (  0.55)	Loss_d 0.566 (0.578)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.37 (  0.35)
Test: [  26/  26]	Loss 0.555 (0.577)	test_acc   0.61 (  0.57)	test_minacc   0.74 (  0.70)	test_majacc   0.59 (  0.55)	Loss_d 0.555 (0.577)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.43 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.893 (0.893)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.893 (0.893)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.893 (0.893)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.63 (  0.63)	Loss_d 0.893 (0.893)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.02 (  0.02)
Overall Timing[ 40/  1]	epoch_time 0.0431 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0427 (0.0423)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5740000132322312, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 19%|#9        | 5/26 [00:00<00:00, 22.22it/s] 35%|###4      | 9/26 [00:00<00:00, 26.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.72it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 81%|########  | 21/26 [00:00<00:00, 34.99it/s]100%|##########| 26/26 [00:00<00:00, 37.36it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  22.79 ( 22.79)	train_acc   0.63 (  0.58)	train_minacc   0.61 (  0.77)	train_majacc   0.63 (  0.55)	train_corr   0.00 (  0.00)	l1 4.7641 (4.9914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 23%|##3       | 6/26 [00:00<00:00, 27.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.31it/s] 42%|####2     | 11/26 [00:00<00:00, 35.41it/s] 62%|######1   | 16/26 [00:00<00:00, 39.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.95it/s] 81%|########  | 21/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 41.80it/s]100%|##########| 26/26 [00:00<00:00, 33.88it/s]
Test: [   0/  26]	Loss 0.561 (0.561)	test_acc   0.66 (  0.66)	test_minacc   0.64 (  0.64)	test_majacc   0.67 (  0.67)	Loss_d 0.561 (0.561)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.600 (0.565)	test_acc   0.61 (  0.64)	test_minacc   0.73 (  0.68)	test_majacc   0.58 (  0.64)	Loss_d 0.600 (0.565)	test_acc_d   0.61 (  0.64)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.58 (  0.64)	test_corr_d   0.50 (  0.47)
Test: [  20/  26]	Loss 0.580 (0.572)	test_acc   0.62 (  0.64)	test_minacc   0.62 (  0.68)	test_majacc   0.62 (  0.63)	Loss_d 0.580 (0.572)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.46 (  0.45)
Test: [  26/  26]	Loss 0.561 (0.571)	test_acc   0.65 (  0.64)	test_minacc   0.65 (  0.68)	test_majacc   0.65 (  0.63)	Loss_d 0.561 (0.571)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.65 (  0.68)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.52 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.24it/s]
Test: [  0/  1]	Loss 0.987 (0.987)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.64 (  0.64)	Loss_d 0.987 (0.987)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.987 (0.987)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.64 (  0.64)	Loss_d 0.987 (0.987)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.04 (  0.04)
Overall Timing[ 41/  1]	epoch_time 0.0391 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0387 (0.0423)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6407000104784966, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 22.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.75it/s] 50%|#####     | 13/26 [00:00<00:00, 30.38it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 28.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.001 (0.000)	train_nll   0.59 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.79 ( 22.79)	train_acc   0.60 (  0.62)	train_minacc   0.71 (  0.71)	train_majacc   0.58 (  0.61)	train_corr   0.00 (  0.00)	l1 4.7906 (4.7264)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 12%|#1        | 3/26 [00:00<00:01, 11.64it/s] 31%|###       | 8/26 [00:00<00:00, 25.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 32.57it/s] 69%|######9   | 18/26 [00:00<00:00, 37.71it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.71it/s] 88%|########8 | 23/26 [00:00<00:00, 37.91it/s]100%|##########| 26/26 [00:00<00:00, 30.80it/s]
Test: [   0/  26]	Loss 0.577 (0.577)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.577 (0.577)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.587 (0.573)	test_acc   0.58 (  0.61)	test_minacc   0.87 (  0.77)	test_majacc   0.53 (  0.58)	Loss_d 0.587 (0.573)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.87 (  0.77)	test_majacc_d   0.53 (  0.58)	test_corr_d   0.41 (  0.41)
Test: [  20/  26]	Loss 0.579 (0.581)	test_acc   0.56 (  0.60)	test_minacc   0.65 (  0.76)	test_majacc   0.55 (  0.57)	Loss_d 0.579 (0.581)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.65 (  0.76)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.41 (  0.39)
Test: [  26/  26]	Loss 0.569 (0.578)	test_acc   0.60 (  0.61)	test_minacc   0.74 (  0.76)	test_majacc   0.58 (  0.58)	Loss_d 0.569 (0.578)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.74 (  0.76)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.46 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.907 (0.907)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.64 (  0.64)	Loss_d 0.907 (0.907)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.907 (0.907)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.64 (  0.64)	Loss_d 0.907 (0.907)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 42/  1]	epoch_time 0.0460 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0455 (0.0423)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6051000097990036, 0.6980000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 19%|#9        | 5/26 [00:00<00:00, 24.77it/s] 35%|###4      | 9/26 [00:00<00:00, 29.87it/s] 50%|#####     | 13/26 [00:00<00:00, 32.28it/s] 65%|######5   | 17/26 [00:00<00:00, 33.55it/s] 81%|########  | 21/26 [00:00<00:00, 34.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.84it/s]100%|##########| 26/26 [00:00<00:00, 30.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.001 (0.000)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.80 ( 22.79)	train_acc   0.70 (  0.63)	train_minacc   0.48 (  0.75)	train_majacc   0.73 (  0.60)	train_corr   0.00 (  0.00)	l1 4.9311 (4.8534)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 27%|##6       | 7/26 [00:00<00:00, 31.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.53it/s] 46%|####6     | 12/26 [00:00<00:00, 38.19it/s] 65%|######5   | 17/26 [00:00<00:00, 38.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.96it/s] 85%|########4 | 22/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 35.44it/s]
Test: [   0/  26]	Loss 0.579 (0.579)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.63 (  0.63)	Loss_d 0.579 (0.579)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.532 (0.564)	test_acc   0.72 (  0.68)	test_minacc   0.52 (  0.55)	test_majacc   0.76 (  0.70)	Loss_d 0.532 (0.564)	test_acc_d   0.72 (  0.68)	test_minacc_d   0.52 (  0.55)	test_majacc_d   0.76 (  0.70)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.546 (0.572)	test_acc   0.73 (  0.67)	test_minacc   0.69 (  0.57)	test_majacc   0.73 (  0.69)	Loss_d 0.546 (0.572)	test_acc_d   0.73 (  0.67)	test_minacc_d   0.69 (  0.57)	test_majacc_d   0.73 (  0.69)	test_corr_d   0.41 (  0.38)
Test: [  26/  26]	Loss 0.550 (0.570)	test_acc   0.70 (  0.67)	test_minacc   0.55 (  0.56)	test_majacc   0.73 (  0.69)	Loss_d 0.550 (0.570)	test_acc_d   0.70 (  0.67)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.73 (  0.69)	test_corr_d   0.45 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 0.812 (0.812)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.75 (  0.75)	Loss_d 0.812 (0.812)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.812 (0.812)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.75 (  0.75)	Loss_d 0.812 (0.812)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 43/  1]	epoch_time 0.0398 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0394 (0.0423)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6714000251889228, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.12it/s] 19%|#9        | 5/26 [00:00<00:01, 18.27it/s] 35%|###4      | 9/26 [00:00<00:00, 24.12it/s] 50%|#####     | 13/26 [00:00<00:00, 27.41it/s] 65%|######5   | 17/26 [00:00<00:00, 29.65it/s] 81%|########  | 21/26 [00:00<00:00, 31.78it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 26.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.80 ( 22.80)	train_acc   0.62 (  0.62)	train_minacc   0.74 (  0.79)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 4.8363 (4.7947)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.84it/s] 38%|###8      | 10/26 [00:00<00:00, 34.20it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.05it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.05it/s] 96%|#########6| 25/26 [00:00<00:00, 41.98it/s]100%|##########| 26/26 [00:00<00:00, 35.49it/s]
Test: [   0/  26]	Loss 0.538 (0.538)	test_acc   0.61 (  0.61)	test_minacc   0.87 (  0.87)	test_majacc   0.56 (  0.56)	Loss_d 0.538 (0.538)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.540 (0.546)	test_acc   0.60 (  0.61)	test_minacc   0.86 (  0.84)	test_majacc   0.55 (  0.57)	Loss_d 0.540 (0.546)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.86 (  0.84)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.42 (  0.41)
Test: [  20/  26]	Loss 0.545 (0.550)	test_acc   0.59 (  0.60)	test_minacc   0.83 (  0.84)	test_majacc   0.56 (  0.56)	Loss_d 0.545 (0.550)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.41 (  0.39)
Test: [  26/  26]	Loss 0.528 (0.548)	test_acc   0.61 (  0.61)	test_minacc   0.77 (  0.83)	test_majacc   0.58 (  0.57)	Loss_d 0.528 (0.548)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.77 (  0.83)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.47 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 0.873 (0.873)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.76)	test_majacc   0.69 (  0.69)	Loss_d 0.873 (0.873)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.873 (0.873)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.76)	test_majacc   0.69 (  0.69)	Loss_d 0.873 (0.873)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 44/  1]	epoch_time 0.0405 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0401 (0.0422)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6074000098705292, 0.7490000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:01, 20.91it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 65%|######5   | 17/26 [00:00<00:00, 31.40it/s] 81%|########  | 21/26 [00:00<00:00, 32.91it/s] 96%|#########6| 25/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.81 ( 22.81)	train_acc   0.59 (  0.60)	train_minacc   0.71 (  0.80)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 4.6202 (4.7998)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.20it/s] 27%|##6       | 7/26 [00:00<00:00, 34.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.49it/s] 46%|####6     | 12/26 [00:00<00:00, 39.46it/s] 65%|######5   | 17/26 [00:00<00:00, 41.91it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.91it/s] 85%|########4 | 22/26 [00:00<00:00, 42.51it/s]100%|##########| 26/26 [00:00<00:00, 37.95it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.61 (  0.61)	test_minacc   0.78 (  0.78)	test_majacc   0.58 (  0.58)	Loss_d 0.571 (0.571)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.594 (0.575)	test_acc   0.59 (  0.60)	test_minacc   0.81 (  0.83)	test_majacc   0.55 (  0.56)	Loss_d 0.594 (0.575)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.41 (  0.38)
Test: [  20/  26]	Loss 0.589 (0.580)	test_acc   0.56 (  0.59)	test_minacc   0.83 (  0.81)	test_majacc   0.52 (  0.55)	Loss_d 0.589 (0.580)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.83 (  0.81)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.38 (  0.36)
Test: [  26/  26]	Loss 0.570 (0.580)	test_acc   0.58 (  0.59)	test_minacc   0.68 (  0.80)	test_majacc   0.57 (  0.55)	Loss_d 0.570 (0.580)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.68 (  0.80)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.43 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.84it/s]
Test: [  0/  1]	Loss 0.887 (0.887)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.887 (0.887)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.887 (0.887)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.887 (0.887)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0413 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0422)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.590900012254715, 0.7130000591278076)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 19%|#9        | 5/26 [00:00<00:00, 25.33it/s] 35%|###4      | 9/26 [00:00<00:00, 30.57it/s] 50%|#####     | 13/26 [00:00<00:00, 33.30it/s] 65%|######5   | 17/26 [00:00<00:00, 35.01it/s] 81%|########  | 21/26 [00:00<00:00, 36.17it/s] 96%|#########6| 25/26 [00:00<00:00, 36.26it/s]100%|##########| 26/26 [00:00<00:00, 30.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.81 ( 22.81)	train_acc   0.60 (  0.58)	train_minacc   0.68 (  0.76)	train_majacc   0.59 (  0.54)	train_corr   0.00 (  0.00)	l1 4.6602 (4.6940)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 23%|##3       | 6/26 [00:00<00:00, 21.98it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.98it/s] 42%|####2     | 11/26 [00:00<00:00, 30.50it/s] 62%|######1   | 16/26 [00:00<00:00, 35.47it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.47it/s] 81%|########  | 21/26 [00:00<00:00, 36.58it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]100%|##########| 26/26 [00:00<00:00, 31.02it/s]
Test: [   0/  26]	Loss 0.576 (0.576)	test_acc   0.55 (  0.55)	test_minacc   0.82 (  0.82)	test_majacc   0.50 (  0.50)	Loss_d 0.576 (0.576)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.559 (0.568)	test_acc   0.62 (  0.58)	test_minacc   0.71 (  0.79)	test_majacc   0.60 (  0.55)	Loss_d 0.559 (0.568)	test_acc_d   0.62 (  0.58)	test_minacc_d   0.71 (  0.79)	test_majacc_d   0.60 (  0.55)	test_corr_d   0.39 (  0.37)
Test: [  20/  26]	Loss 0.570 (0.575)	test_acc   0.58 (  0.57)	test_minacc   0.83 (  0.78)	test_majacc   0.55 (  0.54)	Loss_d 0.570 (0.575)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.83 (  0.78)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.37 (  0.36)
Test: [  26/  26]	Loss 0.566 (0.575)	test_acc   0.59 (  0.57)	test_minacc   0.74 (  0.77)	test_majacc   0.57 (  0.54)	Loss_d 0.566 (0.575)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.74 (  0.77)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.42 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.841 (0.841)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.841 (0.841)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.841 (0.841)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.841 (0.841)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 46/  1]	epoch_time 0.0417 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0422)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5741000121831894, 0.675000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 12%|#1        | 3/26 [00:00<00:01, 12.90it/s] 27%|##6       | 7/26 [00:00<00:00, 22.74it/s] 42%|####2     | 11/26 [00:00<00:00, 27.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.64it/s] 88%|########8 | 23/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  22.81 ( 22.81)	train_acc   0.60 (  0.58)	train_minacc   0.71 (  0.83)	train_majacc   0.58 (  0.53)	train_corr   0.00 (  0.00)	l1 4.7073 (4.7001)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 42%|####2     | 11/26 [00:00<00:00, 36.83it/s] 62%|######1   | 16/26 [00:00<00:00, 38.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.50it/s] 81%|########  | 21/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 43.94it/s]100%|##########| 26/26 [00:00<00:00, 36.06it/s]
Test: [   0/  26]	Loss 0.574 (0.574)	test_acc   0.60 (  0.60)	test_minacc   0.73 (  0.73)	test_majacc   0.58 (  0.58)	Loss_d 0.574 (0.574)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.599 (0.572)	test_acc   0.58 (  0.62)	test_minacc   0.81 (  0.80)	test_majacc   0.53 (  0.58)	Loss_d 0.599 (0.572)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.81 (  0.80)	test_majacc_d   0.53 (  0.58)	test_corr_d   0.41 (  0.39)
Test: [  20/  26]	Loss 0.593 (0.576)	test_acc   0.58 (  0.61)	test_minacc   0.73 (  0.78)	test_majacc   0.55 (  0.58)	Loss_d 0.593 (0.576)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.38 (  0.38)
Test: [  26/  26]	Loss 0.576 (0.576)	test_acc   0.60 (  0.61)	test_minacc   0.71 (  0.77)	test_majacc   0.58 (  0.58)	Loss_d 0.576 (0.576)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.71 (  0.77)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.42 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.24it/s]
Test: [  0/  1]	Loss 0.965 (0.965)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.965 (0.965)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.965 (0.965)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.965 (0.965)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.01 (  0.01)
Overall Timing[ 47/  1]	epoch_time 0.0396 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0392 (0.0421)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6091000091433525, 0.687000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 19%|#9        | 5/26 [00:00<00:01, 19.01it/s] 35%|###4      | 9/26 [00:00<00:00, 24.47it/s] 50%|#####     | 13/26 [00:00<00:00, 28.19it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 27.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.81 ( 22.81)	train_acc   0.56 (  0.59)	train_minacc   0.81 (  0.81)	train_majacc   0.52 (  0.55)	train_corr   0.00 (  0.00)	l1 4.7307 (4.7252)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 23%|##3       | 6/26 [00:00<00:00, 28.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.69it/s] 42%|####2     | 11/26 [00:00<00:00, 35.68it/s] 62%|######1   | 16/26 [00:00<00:00, 40.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.37it/s] 81%|########  | 21/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 41.73it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.54 (  0.54)	test_minacc   0.87 (  0.87)	test_majacc   0.49 (  0.49)	Loss_d 0.571 (0.571)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.553 (0.566)	test_acc   0.57 (  0.56)	test_minacc   0.84 (  0.87)	test_majacc   0.52 (  0.51)	Loss_d 0.553 (0.566)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.84 (  0.87)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.38 (  0.37)
Test: [  20/  26]	Loss 0.569 (0.573)	test_acc   0.57 (  0.55)	test_minacc   0.92 (  0.87)	test_majacc   0.51 (  0.50)	Loss_d 0.569 (0.573)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.92 (  0.87)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.36 (  0.35)
Test: [  26/  26]	Loss 0.561 (0.572)	test_acc   0.56 (  0.56)	test_minacc   0.81 (  0.86)	test_majacc   0.52 (  0.50)	Loss_d 0.561 (0.572)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.42 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 0.836 (0.836)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.56 (  0.56)	Loss_d 0.836 (0.836)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.836 (0.836)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.56 (  0.56)	Loss_d 0.836 (0.836)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 48/  1]	epoch_time 0.0394 (0.0427)	validation_time 0.0007 (0.0006)	train_time 0.0387 (0.0420)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.5552000074386597, 0.753000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.44it/s] 19%|#9        | 5/26 [00:00<00:01, 14.38it/s] 35%|###4      | 9/26 [00:00<00:00, 21.38it/s] 50%|#####     | 13/26 [00:00<00:00, 25.97it/s] 65%|######5   | 17/26 [00:00<00:00, 28.83it/s] 81%|########  | 21/26 [00:00<00:00, 30.96it/s] 96%|#########6| 25/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:01<00:00, 24.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.81 ( 22.81)	train_acc   0.58 (  0.57)	train_minacc   0.68 (  0.85)	train_majacc   0.57 (  0.52)	train_corr   0.00 (  0.00)	l1 4.7047 (4.7649)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.45it/s] 23%|##3       | 6/26 [00:00<00:01, 18.34it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.34it/s] 42%|####2     | 11/26 [00:00<00:00, 27.28it/s] 62%|######1   | 16/26 [00:00<00:00, 33.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.59it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 38.31it/s]100%|##########| 26/26 [00:00<00:00, 28.15it/s]
Test: [   0/  26]	Loss 0.562 (0.562)	test_acc   0.63 (  0.63)	test_minacc   0.84 (  0.84)	test_majacc   0.59 (  0.59)	Loss_d 0.562 (0.562)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.84 (  0.84)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.566 (0.558)	test_acc   0.61 (  0.61)	test_minacc   0.87 (  0.83)	test_majacc   0.56 (  0.57)	Loss_d 0.566 (0.558)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.87 (  0.83)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.41 (  0.40)
Test: [  20/  26]	Loss 0.576 (0.563)	test_acc   0.56 (  0.60)	test_minacc   0.83 (  0.82)	test_majacc   0.52 (  0.56)	Loss_d 0.576 (0.563)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.83 (  0.82)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.39 (  0.39)
Test: [  26/  26]	Loss 0.559 (0.563)	test_acc   0.58 (  0.60)	test_minacc   0.68 (  0.81)	test_majacc   0.56 (  0.56)	Loss_d 0.559 (0.563)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.68 (  0.81)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.45 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.97it/s]
Test: [  0/  1]	Loss 0.922 (0.922)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.922 (0.922)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.922 (0.922)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.64 (  0.64)	Loss_d 0.922 (0.922)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 49/  1]	epoch_time 0.0429 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0424 (0.0420)
record: (train_acc, test_acc) (0.6244000099897384, 0.7720000147819519)
last accs (train_acc, test_acc) (0.6016000123620033, 0.7220000624656677)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpw2qaegxl'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_204811-e356ld8y
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/e356ld8y
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1198
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6048, 3, 32, 32) (5952, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:02<01:02,  2.51s/it] 19%|#9        | 5/26 [00:02<00:08,  2.53it/s] 38%|###8      | 10/26 [00:02<00:02,  5.80it/s] 54%|#####3    | 14/26 [00:02<00:01,  8.86it/s] 69%|######9   | 18/26 [00:02<00:00, 12.41it/s] 88%|########8 | 23/26 [00:03<00:00, 17.19it/s]100%|##########| 26/26 [00:03<00:00,  7.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.411 (0.534)	train_nll   0.41 (  0.53)	train_penalty   0.07 (  0.20)	weight_norm  20.88 ( 18.12)	train_acc   0.85 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9190 (8.1101)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.60it/s] 46%|####6     | 12/26 [00:00<00:00, 39.32it/s] 65%|######5   | 17/26 [00:00<00:00, 43.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.26it/s] 88%|########8 | 23/26 [00:00<00:00, 47.32it/s]100%|##########| 26/26 [00:00<00:00, 37.97it/s]
Test: [   0/  26]	Loss 0.452 (0.452)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.452 (0.452)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.357 (0.418)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.357 (0.418)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.422 (0.414)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.422 (0.414)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.406 (0.414)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.414)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.866 (1.866)	test_acc   0.10 (  0.10)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.866 (1.866)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.866 (1.866)	test_acc   0.10 (  0.10)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.866 (1.866)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0895 (0.0895)	validation_time 0.0069 (0.0069)	train_time 0.0804 (0.0804)
record: (train_acc, test_acc) (0.8479000288844109, 0.10400000214576721)
last accs (train_acc, test_acc) (0.8479000288844109, 0.10400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:36,  1.45s/it] 19%|#9        | 5/26 [00:01<00:05,  4.20it/s] 35%|###4      | 9/26 [00:01<00:02,  8.20it/s] 50%|#####     | 13/26 [00:01<00:01, 12.36it/s] 65%|######5   | 17/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 20.50it/s] 96%|#########6| 25/26 [00:02<00:00, 24.49it/s]100%|##########| 26/26 [00:02<00:00, 11.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.388 (0.410)	train_nll   0.39 (  0.41)	train_penalty   0.04 (  0.06)	weight_norm  21.99 ( 21.65)	train_acc   0.86 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.6941 (6.7330)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 32.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.69it/s] 50%|#####     | 13/26 [00:00<00:00, 40.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.97it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.97it/s] 96%|#########6| 25/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 39.29it/s]
Test: [   0/  26]	Loss 0.443 (0.443)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.443 (0.443)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.372 (0.414)	test_acc   0.88 (  0.85)	test_minacc   0.04 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.372 (0.414)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.04 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.410 (0.409)	test_acc   0.85 (  0.85)	test_minacc   0.03 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.410 (0.409)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.03 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.390 (0.407)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.390 (0.407)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.81it/s]
Test: [  0/  1]	Loss 1.668 (1.668)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.668 (1.668)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.668 (1.668)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.668 (1.668)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0581 (0.0738)	validation_time 0.0004 (0.0037)	train_time 0.0577 (0.0690)
record: (train_acc, test_acc) (0.8490000267028809, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8490000267028809, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 19%|#9        | 5/26 [00:00<00:00, 24.55it/s] 35%|###4      | 9/26 [00:00<00:00, 30.42it/s] 50%|#####     | 13/26 [00:00<00:00, 33.95it/s] 65%|######5   | 17/26 [00:00<00:00, 36.01it/s] 81%|########  | 21/26 [00:00<00:00, 36.96it/s] 96%|#########6| 25/26 [00:00<00:00, 37.37it/s]100%|##########| 26/26 [00:00<00:00, 31.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.376 (0.399)	train_nll   0.38 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm  22.10 ( 22.06)	train_acc   0.85 (  0.85)	train_minacc   0.08 (  0.03)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8938 (6.7631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 23%|##3       | 6/26 [00:00<00:00, 30.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.21it/s] 46%|####6     | 12/26 [00:00<00:00, 39.35it/s] 69%|######9   | 18/26 [00:00<00:00, 44.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.03it/s] 88%|########8 | 23/26 [00:00<00:00, 44.87it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.451 (0.451)	test_acc   0.82 (  0.82)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 0.451 (0.451)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.386 (0.414)	test_acc   0.86 (  0.84)	test_minacc   0.11 (  0.13)	test_majacc   0.96 (  0.97)	Loss_d 0.386 (0.414)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.11 (  0.13)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.407 (0.408)	test_acc   0.84 (  0.84)	test_minacc   0.11 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.407 (0.408)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.11 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.384 (0.405)	test_acc   0.86 (  0.85)	test_minacc   0.14 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.384 (0.405)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.14 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.21it/s]
Test: [  0/  1]	Loss 1.747 (1.747)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.747 (1.747)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.747 (1.747)	test_acc   0.18 (  0.18)	test_minacc   0.10 (  0.10)	test_majacc   0.96 (  0.96)	Loss_d 1.747 (1.747)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0380 (0.0619)	validation_time 0.0004 (0.0026)	train_time 0.0375 (0.0585)
record: (train_acc, test_acc) (0.8456000198125839, 0.18400001525878906)
last accs (train_acc, test_acc) (0.8456000198125839, 0.18400001525878906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.90it/s] 23%|##3       | 6/26 [00:00<00:00, 27.69it/s] 38%|###8      | 10/26 [00:00<00:00, 31.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.38it/s] 69%|######9   | 18/26 [00:00<00:00, 34.39it/s] 88%|########8 | 23/26 [00:00<00:00, 36.83it/s]100%|##########| 26/26 [00:00<00:00, 31.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.381 (0.388)	train_nll   0.38 (  0.39)	train_penalty   0.04 (  0.05)	weight_norm  22.13 ( 22.11)	train_acc   0.85 (  0.85)	train_minacc   0.25 (  0.07)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9774 (6.8382)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 46%|####6     | 12/26 [00:00<00:00, 41.22it/s] 65%|######5   | 17/26 [00:00<00:00, 44.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.01it/s] 85%|########4 | 22/26 [00:00<00:00, 42.61it/s]100%|##########| 26/26 [00:00<00:00, 39.27it/s]
Test: [   0/  26]	Loss 0.435 (0.435)	test_acc   0.82 (  0.82)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 0.435 (0.435)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.360 (0.386)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.20)	test_majacc   0.95 (  0.97)	Loss_d 0.360 (0.386)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.20)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.368 (0.379)	test_acc   0.84 (  0.85)	test_minacc   0.15 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.368 (0.379)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.15 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.381 (0.377)	test_acc   0.86 (  0.85)	test_minacc   0.19 (  0.20)	test_majacc   0.97 (  0.96)	Loss_d 0.381 (0.377)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.19 (  0.20)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.79it/s]
Test: [  0/  1]	Loss 1.749 (1.749)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.749 (1.749)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.749 (1.749)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.749 (1.749)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0452 (0.0577)	validation_time 0.0003 (0.0020)	train_time 0.0448 (0.0551)
record: (train_acc, test_acc) (0.8496000243425369, 0.23800000548362732)
last accs (train_acc, test_acc) (0.8496000243425369, 0.23800000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.15it/s] 27%|##6       | 7/26 [00:00<00:00, 30.10it/s] 42%|####2     | 11/26 [00:00<00:00, 32.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.20it/s] 88%|########8 | 23/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 31.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.339 (0.360)	train_nll   0.34 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm  22.18 ( 22.16)	train_acc   0.85 (  0.85)	train_minacc   0.14 (  0.12)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0659 (6.8491)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.14it/s] 23%|##3       | 6/26 [00:00<00:00, 26.09it/s] 38%|###8      | 10/26 [00:00<00:00, 30.50it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.12it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.12it/s] 96%|#########6| 25/26 [00:00<00:00, 38.68it/s]100%|##########| 26/26 [00:00<00:00, 32.49it/s]
Test: [   0/  26]	Loss 0.398 (0.398)	test_acc   0.82 (  0.82)	test_minacc   0.15 (  0.15)	test_majacc   0.95 (  0.95)	Loss_d 0.398 (0.398)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.319 (0.355)	test_acc   0.86 (  0.85)	test_minacc   0.13 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.319 (0.355)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.333 (0.343)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.333 (0.343)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.329 (0.342)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.329 (0.342)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 1.750 (1.750)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.750 (1.750)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.750 (1.750)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 1.750 (1.750)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.82 (  0.82)
Overall Timing[  4/  1]	epoch_time 0.0392 (0.0540)	validation_time 0.0004 (0.0017)	train_time 0.0388 (0.0518)
record: (train_acc, test_acc) (0.8496000243425369, 0.23800000548362732)
last accs (train_acc, test_acc) (0.8569000204205512, 0.22100001573562622)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.80it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 31.17it/s] 65%|######5   | 17/26 [00:00<00:00, 31.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 28.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.309 (0.333)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.23 ( 22.21)	train_acc   0.86 (  0.86)	train_minacc   0.28 (  0.21)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2959 (7.0081)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.65it/s] 12%|#1        | 3/26 [00:00<00:01, 14.87it/s] 31%|###       | 8/26 [00:00<00:00, 29.14it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.14it/s] 50%|#####     | 13/26 [00:00<00:00, 35.86it/s] 69%|######9   | 18/26 [00:00<00:00, 40.11it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.11it/s] 88%|########8 | 23/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]
Test: [   0/  26]	Loss 0.374 (0.374)	test_acc   0.84 (  0.84)	test_minacc   0.32 (  0.32)	test_majacc   0.94 (  0.94)	Loss_d 0.374 (0.374)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.308 (0.346)	test_acc   0.87 (  0.86)	test_minacc   0.33 (  0.30)	test_majacc   0.94 (  0.96)	Loss_d 0.308 (0.346)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.33 (  0.30)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.327 (0.331)	test_acc   0.87 (  0.86)	test_minacc   0.37 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 0.327 (0.331)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.37 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.298 (0.327)	test_acc   0.87 (  0.86)	test_minacc   0.36 (  0.32)	test_majacc   0.95 (  0.96)	Loss_d 0.298 (0.327)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.36 (  0.32)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.83it/s]
Test: [  0/  1]	Loss 1.736 (1.736)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.736 (1.736)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
Test: [  1/  1]	Loss 1.736 (1.736)	test_acc   0.32 (  0.32)	test_minacc   0.25 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 1.736 (1.736)	test_acc_d   0.32 (  0.32)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.70 (  0.70)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0427 (0.0521)	validation_time 0.0003 (0.0015)	train_time 0.0424 (0.0503)
record: (train_acc, test_acc) (0.8613000227808952, 0.3190000057220459)
last accs (train_acc, test_acc) (0.8613000227808952, 0.3190000057220459)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.79it/s] 65%|######5   | 17/26 [00:00<00:00, 33.43it/s] 81%|########  | 21/26 [00:00<00:00, 34.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.68it/s]100%|##########| 26/26 [00:00<00:00, 28.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.292 (0.314)	train_nll   0.29 (  0.31)	train_penalty   0.01 (  0.02)	weight_norm  22.31 ( 22.27)	train_acc   0.86 (  0.86)	train_minacc   0.36 (  0.32)	train_majacc   0.94 (  0.96)	train_corr   0.00 (  0.00)	l1 7.2885 (7.2115)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.90it/s] 23%|##3       | 6/26 [00:00<00:01, 19.24it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.24it/s] 42%|####2     | 11/26 [00:00<00:00, 29.07it/s] 65%|######5   | 17/26 [00:00<00:00, 36.11it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.11it/s] 85%|########4 | 22/26 [00:00<00:00, 38.35it/s]100%|##########| 26/26 [00:00<00:00, 31.12it/s]
Test: [   0/  26]	Loss 0.338 (0.338)	test_acc   0.84 (  0.84)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.338 (0.338)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.283 (0.317)	test_acc   0.87 (  0.87)	test_minacc   0.28 (  0.36)	test_majacc   0.95 (  0.96)	Loss_d 0.283 (0.317)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.28 (  0.36)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.279 (0.301)	test_acc   0.88 (  0.87)	test_minacc   0.39 (  0.38)	test_majacc   0.98 (  0.96)	Loss_d 0.279 (0.301)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.39 (  0.38)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.251 (0.296)	test_acc   0.88 (  0.87)	test_minacc   0.39 (  0.38)	test_majacc   0.96 (  0.96)	Loss_d 0.251 (0.296)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.39 (  0.38)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.47it/s]
Test: [  0/  1]	Loss 1.683 (1.683)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 1.683 (1.683)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.683 (1.683)	test_acc   0.33 (  0.33)	test_minacc   0.26 (  0.26)	test_majacc   0.95 (  0.95)	Loss_d 1.683 (1.683)	test_acc_d   0.33 (  0.33)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.65 (  0.65)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0399 (0.0504)	validation_time 0.0006 (0.0014)	train_time 0.0392 (0.0487)
record: (train_acc, test_acc) (0.8721000202298165, 0.3320000171661377)
last accs (train_acc, test_acc) (0.8721000202298165, 0.3320000171661377)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 15%|#5        | 4/26 [00:00<00:01, 14.72it/s] 31%|###       | 8/26 [00:00<00:00, 22.86it/s] 46%|####6     | 12/26 [00:00<00:00, 27.43it/s] 62%|######1   | 16/26 [00:00<00:00, 29.91it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.53it/s] 92%|#########2| 24/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.003 (0.223)	train_nll   0.36 (  0.32)	train_penalty   0.00 (  0.02)	weight_norm  22.42 ( 22.36)	train_acc   0.82 (  0.86)	train_minacc   0.61 (  0.37)	train_majacc   0.85 (  0.94)	train_corr   0.00 (  0.00)	l1 6.6840 (7.1986)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 23%|##3       | 6/26 [00:00<00:00, 26.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.22it/s] 42%|####2     | 11/26 [00:00<00:00, 35.02it/s] 62%|######1   | 16/26 [00:00<00:00, 39.59it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.59it/s] 81%|########  | 21/26 [00:00<00:00, 42.75it/s]100%|##########| 26/26 [00:00<00:00, 44.97it/s]100%|##########| 26/26 [00:00<00:00, 35.10it/s]
Test: [   0/  26]	Loss 0.444 (0.444)	test_acc   0.79 (  0.79)	test_minacc   0.58 (  0.58)	test_majacc   0.83 (  0.83)	Loss_d 0.444 (0.444)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.83 (  0.83)	test_corr_d   0.61 (  0.61)
Test: [  10/  26]	Loss 0.398 (0.427)	test_acc   0.80 (  0.80)	test_minacc   0.72 (  0.64)	test_majacc   0.81 (  0.83)	Loss_d 0.398 (0.427)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.72 (  0.64)	test_majacc_d   0.81 (  0.83)	test_corr_d   0.64 (  0.61)
Test: [  20/  26]	Loss 0.351 (0.421)	test_acc   0.84 (  0.80)	test_minacc   0.69 (  0.65)	test_majacc   0.87 (  0.82)	Loss_d 0.351 (0.421)	test_acc_d   0.84 (  0.80)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.87 (  0.82)	test_corr_d   0.65 (  0.60)
Test: [  26/  26]	Loss 0.392 (0.417)	test_acc   0.81 (  0.80)	test_minacc   0.67 (  0.65)	test_majacc   0.84 (  0.83)	Loss_d 0.392 (0.417)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.84 (  0.83)	test_corr_d   0.62 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.91it/s]
Test: [  0/  1]	Loss 1.031 (1.031)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.031 (1.031)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 1.031 (1.031)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.85 (  0.85)	Loss_d 1.031 (1.031)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.08 (  0.08)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/160/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0422 (0.0493)	validation_time 0.0004 (0.0012)	train_time 0.0417 (0.0478)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 19%|#9        | 5/26 [00:00<00:01, 20.87it/s] 35%|###4      | 9/26 [00:00<00:00, 26.74it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 33.89it/s] 96%|#########6| 25/26 [00:00<00:00, 35.67it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.64 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  22.49 ( 22.47)	train_acc   0.58 (  0.67)	train_minacc   0.47 (  0.63)	train_majacc   0.60 (  0.68)	train_corr   0.00 (  0.00)	l1 5.0357 (5.5203)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 23%|##3       | 6/26 [00:00<00:00, 28.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.15it/s] 42%|####2     | 11/26 [00:00<00:00, 35.64it/s] 62%|######1   | 16/26 [00:00<00:00, 39.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.75it/s] 81%|########  | 21/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 41.45it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]
Test: [   0/  26]	Loss 0.619 (0.619)	test_acc   0.66 (  0.66)	test_minacc   0.53 (  0.53)	test_majacc   0.68 (  0.68)	Loss_d 0.619 (0.619)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.604 (0.618)	test_acc   0.68 (  0.64)	test_minacc   0.59 (  0.55)	test_majacc   0.70 (  0.66)	Loss_d 0.604 (0.618)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.59 (  0.55)	test_majacc_d   0.70 (  0.66)	test_corr_d   0.44 (  0.43)
Test: [  20/  26]	Loss 0.606 (0.618)	test_acc   0.63 (  0.64)	test_minacc   0.55 (  0.56)	test_majacc   0.65 (  0.66)	Loss_d 0.606 (0.618)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.55 (  0.56)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.42 (  0.42)
Test: [  26/  26]	Loss 0.630 (0.618)	test_acc   0.60 (  0.64)	test_minacc   0.50 (  0.55)	test_majacc   0.61 (  0.65)	Loss_d 0.630 (0.618)	test_acc_d   0.60 (  0.64)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.45 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.25it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.70 (  0.70)	Loss_d 0.679 (0.679)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.70 (  0.70)	Loss_d 0.679 (0.679)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.10 ( -0.10)
Overall Timing[  8/  1]	epoch_time 0.0420 (0.0485)	validation_time 0.0004 (0.0011)	train_time 0.0416 (0.0471)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.6393000119924546, 0.5710000395774841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s]  8%|7         | 2/26 [00:00<00:03,  7.36it/s] 23%|##3       | 6/26 [00:00<00:01, 18.81it/s] 38%|###8      | 10/26 [00:00<00:00, 25.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.02it/s] 69%|######9   | 18/26 [00:00<00:00, 31.34it/s] 85%|########4 | 22/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.001)	train_nll   0.70 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.49)	train_acc   0.42 (  0.55)	train_minacc   0.94 (  0.63)	train_majacc   0.33 (  0.53)	train_corr   0.00 (  0.00)	l1 4.8143 (4.9121)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.34it/s] 31%|###       | 8/26 [00:00<00:00, 39.01it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.01it/s] 50%|#####     | 13/26 [00:00<00:00, 37.54it/s] 69%|######9   | 18/26 [00:00<00:00, 40.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.69it/s] 88%|########8 | 23/26 [00:00<00:00, 42.00it/s]100%|##########| 26/26 [00:00<00:00, 35.83it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.45 (  0.45)	test_minacc   0.91 (  0.91)	test_majacc   0.36 (  0.36)	Loss_d 0.687 (0.687)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.18 ( -0.18)
Test: [  10/  26]	Loss 0.687 (0.686)	test_acc   0.44 (  0.46)	test_minacc   0.93 (  0.90)	test_majacc   0.38 (  0.38)	Loss_d 0.687 (0.686)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.93 (  0.90)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.10 ( -0.11)
Test: [  20/  26]	Loss 0.683 (0.686)	test_acc   0.49 (  0.46)	test_minacc   0.97 (  0.92)	test_majacc   0.41 (  0.38)	Loss_d 0.683 (0.686)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.97 (  0.92)	test_majacc_d   0.41 (  0.38)	test_corr_d  -0.13 ( -0.11)
Test: [  26/  26]	Loss 0.691 (0.686)	test_acc   0.42 (  0.46)	test_minacc   0.89 (  0.92)	test_majacc   0.35 (  0.38)	Loss_d 0.691 (0.686)	test_acc_d   0.42 (  0.46)	test_minacc_d   0.89 (  0.92)	test_majacc_d   0.35 (  0.38)	test_corr_d  -0.12 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.639 (0.639)	test_acc   0.84 (  0.84)	test_minacc   0.88 (  0.88)	test_majacc   0.44 (  0.44)	Loss_d 0.639 (0.639)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.59 ( -0.59)
Test: [  1/  1]	Loss 0.639 (0.639)	test_acc   0.84 (  0.84)	test_minacc   0.88 (  0.88)	test_majacc   0.44 (  0.44)	Loss_d 0.639 (0.639)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.59 ( -0.59)
Overall Timing[  9/  1]	epoch_time 0.0417 (0.0478)	validation_time 0.0004 (0.0011)	train_time 0.0412 (0.0465)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.4620000062584877, 0.8390000462532043)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 15%|#5        | 4/26 [00:00<00:01, 16.96it/s] 31%|###       | 8/26 [00:00<00:00, 25.26it/s] 46%|####6     | 12/26 [00:00<00:00, 29.53it/s] 62%|######1   | 16/26 [00:00<00:00, 31.58it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.80it/s] 92%|#########2| 24/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 27.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.60 (  0.53)	train_minacc   0.58 (  0.56)	train_majacc   0.60 (  0.53)	train_corr   0.00 (  0.00)	l1 4.7190 (4.7462)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.34it/s] 31%|###       | 8/26 [00:00<00:00, 35.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.10it/s] 50%|#####     | 13/26 [00:00<00:00, 39.85it/s] 69%|######9   | 18/26 [00:00<00:00, 42.92it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.92it/s] 88%|########8 | 23/26 [00:00<00:00, 40.29it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.56 (  0.56)	test_minacc   0.62 (  0.62)	test_majacc   0.54 (  0.54)	Loss_d 0.684 (0.684)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.688 (0.683)	test_acc   0.52 (  0.57)	test_minacc   0.52 (  0.54)	test_majacc   0.52 (  0.57)	Loss_d 0.688 (0.683)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.52 (  0.54)	test_majacc_d   0.52 (  0.57)	test_corr_d   0.13 (  0.11)
Test: [  20/  26]	Loss 0.682 (0.683)	test_acc   0.56 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.56 (  0.57)	Loss_d 0.682 (0.683)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.09 (  0.10)
Test: [  26/  26]	Loss 0.681 (0.682)	test_acc   0.59 (  0.57)	test_minacc   0.58 (  0.56)	test_majacc   0.59 (  0.58)	Loss_d 0.681 (0.682)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.58 (  0.56)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.10 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.671 (0.671)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.60 (  0.60)	Loss_d 0.671 (0.671)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.671 (0.671)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.60 (  0.60)	Loss_d 0.671 (0.671)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 10/  1]	epoch_time 0.0441 (0.0475)	validation_time 0.0003 (0.0010)	train_time 0.0437 (0.0463)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5727000122666359, 0.5430000424385071)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 19%|#9        | 5/26 [00:00<00:01, 17.89it/s] 35%|###4      | 9/26 [00:00<00:00, 25.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.72it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.89it/s] 96%|#########6| 25/26 [00:00<00:00, 34.43it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.38 (  0.49)	train_minacc   0.47 (  0.73)	train_majacc   0.36 (  0.45)	train_corr   0.00 (  0.00)	l1 4.7180 (4.7180)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.26it/s] 27%|##6       | 7/26 [00:00<00:00, 34.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.17it/s] 46%|####6     | 12/26 [00:00<00:00, 38.85it/s] 65%|######5   | 17/26 [00:00<00:00, 42.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.61it/s] 85%|########4 | 22/26 [00:00<00:00, 40.37it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.43 (  0.43)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.694 (0.694)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.21 ( -0.21)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.43)	test_minacc   0.61 (  0.59)	test_majacc   0.46 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.46 (  0.40)	test_corr_d  -0.10 ( -0.09)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.66 (  0.62)	test_majacc   0.40 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.15 ( -0.10)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.39 (  0.44)	test_minacc   0.44 (  0.62)	test_majacc   0.38 (  0.41)	Loss_d 0.696 (0.693)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.44 (  0.62)	test_majacc_d   0.38 (  0.41)	test_corr_d  -0.10 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.22it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.70 (  0.70)	test_minacc   0.74 (  0.74)	test_majacc   0.38 (  0.38)	Loss_d 0.679 (0.679)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.70 (  0.70)	test_minacc   0.74 (  0.74)	test_majacc   0.38 (  0.38)	Loss_d 0.679 (0.679)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 11/  1]	epoch_time 0.0399 (0.0469)	validation_time 0.0003 (0.0010)	train_time 0.0396 (0.0457)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.44070000597834585, 0.703000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.32it/s] 23%|##3       | 6/26 [00:00<00:00, 26.91it/s] 38%|###8      | 10/26 [00:00<00:00, 30.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.73it/s] 69%|######9   | 18/26 [00:00<00:00, 33.78it/s] 85%|########4 | 22/26 [00:00<00:00, 34.46it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.48 (  0.48)	train_minacc   0.33 (  0.53)	train_majacc   0.50 (  0.47)	train_corr   0.00 (  0.00)	l1 4.7118 (4.7138)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 23%|##3       | 6/26 [00:00<00:00, 26.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.21it/s] 46%|####6     | 12/26 [00:00<00:00, 35.72it/s] 65%|######5   | 17/26 [00:00<00:00, 38.01it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.01it/s] 85%|########4 | 22/26 [00:00<00:00, 40.92it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.59 (  0.59)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.48)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.34 (  0.47)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.34 (  0.47)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.31 (  0.48)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.31 (  0.48)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.77it/s]
Test: [  0/  1]	Loss 0.688 (0.688)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.688 (0.688)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.688 (0.688)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.688 (0.688)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 12/  1]	epoch_time 0.0418 (0.0465)	validation_time 0.0004 (0.0009)	train_time 0.0413 (0.0454)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5087000115513801, 0.5960000157356262)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.85it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 28.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:00<00:00, 28.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.45 (  0.50)	train_minacc   0.31 (  0.47)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 4.7093 (4.7108)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.29it/s] 23%|##3       | 6/26 [00:00<00:00, 21.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.38it/s] 42%|####2     | 11/26 [00:00<00:00, 27.86it/s] 62%|######1   | 16/26 [00:00<00:00, 34.25it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.25it/s] 81%|########  | 21/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 30.67it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.47)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.47)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.37 (  0.48)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.37 (  0.48)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.01 (  0.04)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.33 (  0.48)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.33 (  0.48)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.25it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 13/  1]	epoch_time 0.0429 (0.0462)	validation_time 0.0004 (0.0009)	train_time 0.0425 (0.0452)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5021000081598759, 0.6000000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.03it/s] 23%|##3       | 6/26 [00:00<00:00, 23.07it/s] 38%|###8      | 10/26 [00:00<00:00, 28.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.55it/s] 69%|######9   | 18/26 [00:00<00:00, 30.82it/s] 85%|########4 | 22/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.45 (  0.49)	train_minacc   0.36 (  0.49)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 4.7066 (4.7081)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 23%|##3       | 6/26 [00:00<00:00, 31.10it/s] 38%|###8      | 10/26 [00:00<00:00, 33.51it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.76it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.68it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.68it/s] 96%|#########6| 25/26 [00:00<00:00, 39.76it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.61)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.39 (  0.49)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.03 (  0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.50)	test_minacc   0.36 (  0.50)	test_majacc   0.48 (  0.50)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.36 (  0.50)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.01 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.56it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.28 ( -0.28)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.44 (  0.44)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.28 ( -0.28)
Overall Timing[ 14/  1]	epoch_time 0.0397 (0.0458)	validation_time 0.0004 (0.0008)	train_time 0.0392 (0.0448)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5010000107586384, 0.6160000562667847)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.29it/s] 27%|##6       | 7/26 [00:00<00:00, 30.24it/s] 46%|####6     | 12/26 [00:00<00:00, 34.77it/s] 62%|######1   | 16/26 [00:00<00:00, 33.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.03it/s] 92%|#########2| 24/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.45 (  0.50)	train_minacc   0.33 (  0.50)	train_majacc   0.47 (  0.49)	train_corr   0.00 (  0.00)	l1 4.7043 (4.7054)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 15%|#5        | 4/26 [00:00<00:01, 14.83it/s] 35%|###4      | 9/26 [00:00<00:00, 27.02it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.02it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.63it/s] 92%|#########2| 24/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.39 (  0.49)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.50)	test_minacc   0.33 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.50)	test_minacc_d   0.33 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 15/  1]	epoch_time 0.0486 (0.0460)	validation_time 0.0004 (0.0008)	train_time 0.0482 (0.0450)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5045000105500221, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.11it/s] 12%|#1        | 3/26 [00:00<00:02, 11.32it/s] 27%|##6       | 7/26 [00:00<00:00, 21.01it/s] 42%|####2     | 11/26 [00:00<00:00, 26.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.57it/s] 88%|########8 | 23/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:01<00:00, 25.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.45 (  0.50)	train_minacc   0.33 (  0.49)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 4.7023 (4.7034)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 23%|##3       | 6/26 [00:00<00:00, 29.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.78it/s] 42%|####2     | 11/26 [00:00<00:00, 36.49it/s] 62%|######1   | 16/26 [00:00<00:00, 40.84it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.84it/s] 81%|########  | 21/26 [00:00<00:00, 39.02it/s]100%|##########| 26/26 [00:00<00:00, 42.03it/s]100%|##########| 26/26 [00:00<00:00, 34.90it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.37 (  0.49)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.33 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.69it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 16/  1]	epoch_time 0.0397 (0.0456)	validation_time 0.0003 (0.0008)	train_time 0.0394 (0.0447)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5071000131368637, 0.6170000433921814)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.05it/s] 19%|#9        | 5/26 [00:00<00:01, 16.65it/s] 35%|###4      | 9/26 [00:00<00:00, 23.89it/s] 50%|#####     | 13/26 [00:00<00:00, 28.38it/s] 65%|######5   | 17/26 [00:00<00:00, 31.19it/s] 81%|########  | 21/26 [00:00<00:00, 32.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 26.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.50)	train_minacc   0.33 (  0.49)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 4.7003 (4.7014)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.60it/s] 27%|##6       | 7/26 [00:00<00:00, 25.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.50it/s] 46%|####6     | 12/26 [00:00<00:00, 34.10it/s] 65%|######5   | 17/26 [00:00<00:00, 34.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.82it/s] 85%|########4 | 22/26 [00:00<00:00, 38.75it/s]100%|##########| 26/26 [00:00<00:00, 31.12it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.49)	test_majacc   0.49 (  0.50)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.37 (  0.49)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.01 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.33 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.38it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 17/  1]	epoch_time 0.0449 (0.0456)	validation_time 0.0004 (0.0008)	train_time 0.0445 (0.0446)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5092000164985657, 0.6200000047683716)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.04it/s] 23%|##3       | 6/26 [00:00<00:00, 26.37it/s] 38%|###8      | 10/26 [00:00<00:00, 30.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.29it/s] 69%|######9   | 18/26 [00:00<00:00, 33.13it/s] 85%|########4 | 22/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 29.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.50)	train_minacc   0.31 (  0.49)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 4.6984 (4.6995)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.47it/s] 23%|##3       | 6/26 [00:00<00:00, 28.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.30it/s] 42%|####2     | 11/26 [00:00<00:00, 35.85it/s] 62%|######1   | 16/26 [00:00<00:00, 40.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.12it/s] 81%|########  | 21/26 [00:00<00:00, 38.69it/s]100%|##########| 26/26 [00:00<00:00, 34.44it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.47 (  0.51)	test_minacc   0.37 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.01 (  0.02)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.51)	test_minacc   0.33 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.73it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 18/  1]	epoch_time 0.0425 (0.0454)	validation_time 0.0006 (0.0008)	train_time 0.0419 (0.0445)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5121000101864338, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 20.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.61it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.87it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.47 (  0.50)	train_minacc   0.31 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 4.6966 (4.6976)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 19%|#9        | 5/26 [00:00<00:01, 20.48it/s] 38%|###8      | 10/26 [00:00<00:00, 31.01it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.81it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.59it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.59it/s] 96%|#########6| 25/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 32.16it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.37 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.00 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.28 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.28 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 19/  1]	epoch_time 0.0435 (0.0453)	validation_time 0.0005 (0.0007)	train_time 0.0430 (0.0444)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5153000099956989, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.48it/s] 65%|######5   | 17/26 [00:00<00:00, 29.66it/s] 81%|########  | 21/26 [00:00<00:00, 31.03it/s] 96%|#########6| 25/26 [00:00<00:00, 32.24it/s]100%|##########| 26/26 [00:00<00:00, 27.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.47 (  0.50)	train_minacc   0.31 (  0.49)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 4.6949 (4.6959)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.36it/s] 27%|##6       | 7/26 [00:00<00:00, 34.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.59it/s] 46%|####6     | 12/26 [00:00<00:00, 39.62it/s] 65%|######5   | 17/26 [00:00<00:00, 39.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.03it/s] 85%|########4 | 22/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 35.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.37 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.00 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.25 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.25 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.41it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 20/  1]	epoch_time 0.0437 (0.0452)	validation_time 0.0004 (0.0007)	train_time 0.0433 (0.0444)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5168000133931637, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 19%|#9        | 5/26 [00:00<00:01, 20.30it/s] 35%|###4      | 9/26 [00:00<00:00, 25.86it/s] 50%|#####     | 13/26 [00:00<00:00, 28.86it/s] 65%|######5   | 17/26 [00:00<00:00, 29.97it/s] 81%|########  | 21/26 [00:00<00:00, 31.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.01it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.47 (  0.51)	train_minacc   0.28 (  0.49)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6933 (4.6943)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.05it/s]  8%|7         | 2/26 [00:00<00:03,  7.00it/s] 27%|##6       | 7/26 [00:00<00:00, 22.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.48it/s] 46%|####6     | 12/26 [00:00<00:00, 31.63it/s] 62%|######1   | 16/26 [00:00<00:00, 34.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.18it/s] 81%|########  | 21/26 [00:00<00:00, 37.52it/s]100%|##########| 26/26 [00:00<00:00, 40.48it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.62)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.35 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.35 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.00 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.25 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.25 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.24it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 21/  1]	epoch_time 0.0490 (0.0454)	validation_time 0.0004 (0.0007)	train_time 0.0486 (0.0446)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5180000136494637, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.23it/s] 35%|###4      | 9/26 [00:00<00:00, 27.42it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 31.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.21it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.51)	train_minacc   0.28 (  0.49)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6918 (4.6927)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.94it/s] 23%|##3       | 6/26 [00:00<00:01, 16.37it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.37it/s] 42%|####2     | 11/26 [00:00<00:00, 25.60it/s] 62%|######1   | 16/26 [00:00<00:00, 29.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.04it/s] 81%|########  | 21/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 38.03it/s]100%|##########| 26/26 [00:00<00:00, 26.58it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.35 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.35 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.25 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.25 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 32.58it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 22/  1]	epoch_time 0.0419 (0.0452)	validation_time 0.0009 (0.0007)	train_time 0.0410 (0.0444)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5195000100731849, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 12%|#1        | 3/26 [00:00<00:01, 15.17it/s] 27%|##6       | 7/26 [00:00<00:00, 24.87it/s] 42%|####2     | 11/26 [00:00<00:00, 29.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.68it/s] 88%|########8 | 23/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 28.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 4.691301345825195
set z to 4.456736278533936
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.51)	train_minacc   0.28 (  0.49)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6904 (4.6913)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 12%|#1        | 3/26 [00:00<00:01, 12.93it/s] 31%|###       | 8/26 [00:00<00:00, 27.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 33.83it/s] 69%|######9   | 18/26 [00:00<00:00, 38.30it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.30it/s] 88%|########8 | 23/26 [00:00<00:00, 37.95it/s]100%|##########| 26/26 [00:00<00:00, 32.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.34 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.25 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.25 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.33it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.34 ( -0.34)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.47 (  0.47)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.34 ( -0.34)
Overall Timing[ 23/  1]	epoch_time 0.0398 (0.0450)	validation_time 0.0005 (0.0007)	train_time 0.0393 (0.0442)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5206000134944916, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.99it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.74it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6890 (4.6899)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 15%|#5        | 4/26 [00:00<00:01, 19.85it/s] 35%|###4      | 9/26 [00:00<00:00, 31.73it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.34it/s] 92%|#########2| 24/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 33.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.34 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.47 (  0.52)	test_minacc   0.28 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.28 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.35 ( -0.35)
Overall Timing[ 24/  1]	epoch_time 0.0409 (0.0449)	validation_time 0.0003 (0.0007)	train_time 0.0405 (0.0440)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5224000099003315, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.32it/s] 19%|#9        | 5/26 [00:00<00:01, 19.10it/s] 35%|###4      | 9/26 [00:00<00:00, 25.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.58it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 27.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6877 (4.6886)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.69it/s] 23%|##3       | 6/26 [00:00<00:01, 19.35it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.35it/s] 42%|####2     | 11/26 [00:00<00:00, 28.67it/s] 62%|######1   | 16/26 [00:00<00:00, 34.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.55it/s] 81%|########  | 21/26 [00:00<00:00, 34.84it/s]100%|##########| 26/26 [00:00<00:00, 38.56it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.34 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.34 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.01 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.28 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.28 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.36 ( -0.36)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.36 ( -0.36)
Overall Timing[ 25/  1]	epoch_time 0.0416 (0.0447)	validation_time 0.0006 (0.0007)	train_time 0.0410 (0.0439)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5239000083208084, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 12%|#1        | 3/26 [00:00<00:02, 10.89it/s] 27%|##6       | 7/26 [00:00<00:00, 20.67it/s] 42%|####2     | 11/26 [00:00<00:00, 25.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.08it/s] 88%|########8 | 23/26 [00:00<00:00, 30.95it/s]100%|##########| 26/26 [00:01<00:00, 25.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.46 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6865 (4.6873)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 12%|#1        | 3/26 [00:00<00:01, 12.63it/s] 31%|###       | 8/26 [00:00<00:00, 27.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 27.07it/s] 46%|####6     | 12/26 [00:00<00:00, 31.68it/s] 65%|######5   | 17/26 [00:00<00:00, 36.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.73it/s] 85%|########4 | 22/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 31.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.35 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.35 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.28 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.28 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.23it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.36 ( -0.36)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.36 ( -0.36)
Overall Timing[ 26/  1]	epoch_time 0.0398 (0.0445)	validation_time 0.0004 (0.0007)	train_time 0.0394 (0.0438)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5248000138700009, 0.6310000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.22it/s] 19%|#9        | 5/26 [00:00<00:01, 16.78it/s] 35%|###4      | 9/26 [00:00<00:00, 23.90it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.93it/s] 85%|########4 | 22/26 [00:00<00:00, 34.84it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.47 (  0.51)	train_minacc   0.33 (  0.49)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6853 (4.6861)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.10it/s] 27%|##6       | 7/26 [00:00<00:00, 30.42it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.42it/s] 46%|####6     | 12/26 [00:00<00:00, 36.95it/s] 65%|######5   | 17/26 [00:00<00:00, 39.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.82it/s] 85%|########4 | 22/26 [00:00<00:00, 41.56it/s]100%|##########| 26/26 [00:00<00:00, 35.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.35 (  0.48)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.35 (  0.48)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.02 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.12it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.37 ( -0.37)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.45 (  0.45)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.37 ( -0.37)
Overall Timing[ 27/  1]	epoch_time 0.0415 (0.0444)	validation_time 0.0003 (0.0007)	train_time 0.0412 (0.0437)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5262000105082989, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.20it/s] 19%|#9        | 5/26 [00:00<00:01, 20.73it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 29.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.41it/s] 81%|########  | 21/26 [00:00<00:00, 34.28it/s] 96%|#########6| 25/26 [00:00<00:00, 35.34it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.47 (  0.51)	train_minacc   0.33 (  0.49)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6841 (4.6849)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.88it/s] 19%|#9        | 5/26 [00:00<00:00, 23.69it/s] 38%|###8      | 10/26 [00:00<00:00, 34.08it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.94it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.94it/s] 96%|#########6| 25/26 [00:00<00:00, 40.73it/s]100%|##########| 26/26 [00:00<00:00, 34.32it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.35 (  0.48)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.35 (  0.48)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.48)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.48)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.38 ( -0.38)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.38 ( -0.38)
Overall Timing[ 28/  1]	epoch_time 0.0427 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0423 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5276000185608863, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 35%|###4      | 9/26 [00:00<00:00, 28.89it/s] 50%|#####     | 13/26 [00:00<00:00, 31.00it/s] 65%|######5   | 17/26 [00:00<00:00, 32.87it/s] 81%|########  | 21/26 [00:00<00:00, 34.46it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.48 (  0.51)	train_minacc   0.33 (  0.48)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6831 (4.6838)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s]  8%|7         | 2/26 [00:00<00:02,  8.56it/s] 27%|##6       | 7/26 [00:00<00:00, 25.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.52it/s] 46%|####6     | 12/26 [00:00<00:00, 33.79it/s] 69%|######9   | 18/26 [00:00<00:00, 39.06it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.06it/s] 92%|#########2| 24/26 [00:00<00:00, 43.26it/s]100%|##########| 26/26 [00:00<00:00, 32.84it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.37 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.48)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.48)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.38 ( -0.38)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.38 ( -0.38)
Overall Timing[ 29/  1]	epoch_time 0.0407 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5280000094473362, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.79it/s] 50%|#####     | 13/26 [00:00<00:00, 30.21it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s] 96%|#########6| 25/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.48 (  0.51)	train_minacc   0.33 (  0.48)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 4.6821 (4.6828)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 23%|##3       | 6/26 [00:00<00:00, 30.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.06it/s] 42%|####2     | 11/26 [00:00<00:00, 36.79it/s] 62%|######1   | 16/26 [00:00<00:00, 38.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.71it/s] 81%|########  | 21/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 34.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.37 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.37 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.37it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.39 ( -0.39)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.39 ( -0.39)
Overall Timing[ 30/  1]	epoch_time 0.0411 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0406 (0.0434)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.527700016438961, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 19%|#9        | 5/26 [00:00<00:00, 21.32it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.25it/s] 65%|######5   | 17/26 [00:00<00:00, 31.97it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.71it/s]100%|##########| 26/26 [00:00<00:00, 28.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.48 (  0.51)	train_minacc   0.33 (  0.49)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6811 (4.6818)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.10it/s] 15%|#5        | 4/26 [00:00<00:01, 18.60it/s] 35%|###4      | 9/26 [00:00<00:00, 31.47it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.30it/s] 92%|#########2| 24/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 33.22it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.04 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.49)	test_majacc   0.56 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.51 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.28it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.39 ( -0.39)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.39 ( -0.39)
Overall Timing[ 31/  1]	epoch_time 0.0419 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0415 (0.0434)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5285000161826611, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.59it/s] 27%|##6       | 7/26 [00:00<00:00, 29.26it/s] 42%|####2     | 11/26 [00:00<00:00, 31.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.52it/s] 88%|########8 | 23/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.49 (  0.51)	train_minacc   0.33 (  0.49)	train_majacc   0.51 (  0.52)	train_corr   0.00 (  0.00)	l1 4.6802 (4.6809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.74it/s] 27%|##6       | 7/26 [00:00<00:00, 35.09it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.09it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 38.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.89it/s] 85%|########4 | 22/26 [00:00<00:00, 41.31it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.48 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.52it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.40 ( -0.40)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.40 ( -0.40)
Overall Timing[ 32/  1]	epoch_time 0.0489 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0486 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.527000011831522, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.16it/s] 27%|##6       | 7/26 [00:00<00:00, 26.51it/s] 42%|####2     | 11/26 [00:00<00:00, 30.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.75it/s] 88%|########8 | 23/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.48 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6793 (4.6800)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.23it/s] 19%|#9        | 5/26 [00:00<00:01, 10.85it/s]                                               19%|#9        | 5/26 [00:00<00:01, 10.85it/s] 42%|####2     | 11/26 [00:00<00:00, 22.42it/s] 62%|######1   | 16/26 [00:00<00:00, 29.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.30it/s] 81%|########  | 21/26 [00:00<00:00, 31.22it/s]100%|##########| 26/26 [00:01<00:00, 35.47it/s]100%|##########| 26/26 [00:01<00:00, 23.49it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.40 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.40 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.52 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.03 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Overall Timing[ 33/  1]	epoch_time 0.0476 (0.0443)	validation_time 0.0003 (0.0006)	train_time 0.0472 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5274000096917152, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.39it/s] 15%|#5        | 4/26 [00:00<00:01, 18.95it/s] 31%|###       | 8/26 [00:00<00:00, 25.70it/s] 46%|####6     | 12/26 [00:00<00:00, 29.17it/s] 62%|######1   | 16/26 [00:00<00:00, 31.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.54it/s] 92%|#########2| 24/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 27.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.49 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 4.6785 (4.6792)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.86it/s] 23%|##3       | 6/26 [00:00<00:00, 20.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.17it/s] 42%|####2     | 11/26 [00:00<00:00, 29.28it/s] 62%|######1   | 16/26 [00:00<00:00, 34.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.69it/s] 81%|########  | 21/26 [00:00<00:00, 35.52it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 29.41it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.40 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.40 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.04 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Overall Timing[ 34/  1]	epoch_time 0.0441 (0.0443)	validation_time 0.0006 (0.0006)	train_time 0.0434 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5284000110924244, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.95it/s] 23%|##3       | 6/26 [00:00<00:00, 24.10it/s] 38%|###8      | 10/26 [00:00<00:00, 29.07it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.00it/s] 69%|######9   | 18/26 [00:00<00:00, 32.38it/s] 85%|########4 | 22/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 29.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.49 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6777 (4.6784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 27%|##6       | 7/26 [00:00<00:00, 26.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.50it/s] 46%|####6     | 12/26 [00:00<00:00, 34.31it/s] 62%|######1   | 16/26 [00:00<00:00, 35.30it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.30it/s] 81%|########  | 21/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.14it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.46 (  0.46)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.41 ( -0.41)
Overall Timing[ 35/  1]	epoch_time 0.0487 (0.0444)	validation_time 0.0004 (0.0006)	train_time 0.0483 (0.0438)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5279000111222267, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.35it/s] 19%|#9        | 5/26 [00:00<00:00, 25.17it/s] 35%|###4      | 9/26 [00:00<00:00, 30.16it/s] 50%|#####     | 13/26 [00:00<00:00, 32.21it/s] 65%|######5   | 17/26 [00:00<00:00, 33.77it/s] 81%|########  | 21/26 [00:00<00:00, 34.52it/s] 96%|#########6| 25/26 [00:00<00:00, 35.21it/s]100%|##########| 26/26 [00:00<00:00, 29.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.49 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 4.6770 (4.6776)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 23%|##3       | 6/26 [00:00<00:00, 27.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.68it/s] 42%|####2     | 11/26 [00:00<00:00, 35.30it/s] 62%|######1   | 16/26 [00:00<00:00, 39.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.89it/s] 81%|########  | 21/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 41.25it/s]100%|##########| 26/26 [00:00<00:00, 33.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.58 (  0.58)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.24it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.43 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.42 ( -0.42)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.43 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.42 ( -0.42)
Overall Timing[ 36/  1]	epoch_time 0.0403 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.527300007045269, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.97it/s] 81%|########  | 21/26 [00:00<00:00, 32.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.50 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6763 (4.6769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s]  8%|7         | 2/26 [00:00<00:05,  4.37it/s] 27%|##6       | 7/26 [00:00<00:01, 16.39it/s]                                               27%|##6       | 7/26 [00:00<00:01, 16.39it/s] 42%|####2     | 11/26 [00:00<00:00, 22.81it/s] 62%|######1   | 16/26 [00:00<00:00, 30.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.09it/s] 81%|########  | 21/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 37.83it/s]100%|##########| 26/26 [00:01<00:00, 24.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.05 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.43 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.42 ( -0.42)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.43 (  0.43)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.42 ( -0.42)
Overall Timing[ 37/  1]	epoch_time 0.0456 (0.0444)	validation_time 0.0006 (0.0006)	train_time 0.0449 (0.0437)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5269000053703785, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.61it/s] 50%|#####     | 13/26 [00:00<00:00, 31.31it/s] 65%|######5   | 17/26 [00:00<00:00, 32.76it/s] 81%|########  | 21/26 [00:00<00:00, 33.84it/s] 96%|#########6| 25/26 [00:00<00:00, 34.31it/s]100%|##########| 26/26 [00:00<00:00, 28.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.50 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6757 (4.6763)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.73it/s] 19%|#9        | 5/26 [00:00<00:00, 23.57it/s] 38%|###8      | 10/26 [00:00<00:00, 33.64it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.69it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.69it/s] 96%|#########6| 25/26 [00:00<00:00, 41.56it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.05 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.55 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.46it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 38/  1]	epoch_time 0.0414 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5273000099956989, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.46it/s] 19%|#9        | 5/26 [00:00<00:00, 21.05it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 32.56it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.50 (  0.51)	train_minacc   0.31 (  0.48)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6750 (4.6757)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.59it/s] 23%|##3       | 6/26 [00:00<00:00, 27.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.56it/s] 42%|####2     | 11/26 [00:00<00:00, 35.47it/s] 62%|######1   | 16/26 [00:00<00:00, 40.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.46it/s] 81%|########  | 21/26 [00:00<00:00, 37.51it/s]100%|##########| 26/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 33.29it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.44 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.89it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.43 ( -0.43)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.43 ( -0.43)
Overall Timing[ 39/  1]	epoch_time 0.0404 (0.0442)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5259000135660171, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  6.14it/s] 23%|##3       | 6/26 [00:00<00:01, 15.94it/s] 38%|###8      | 10/26 [00:00<00:00, 22.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 25.98it/s] 69%|######9   | 18/26 [00:00<00:00, 28.46it/s] 85%|########4 | 22/26 [00:00<00:00, 30.35it/s]100%|##########| 26/26 [00:01<00:00, 30.24it/s]100%|##########| 26/26 [00:01<00:00, 23.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.50 (  0.51)	train_minacc   0.31 (  0.49)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6745 (4.6751)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.26it/s] 19%|#9        | 5/26 [00:00<00:01, 14.58it/s] 38%|###8      | 10/26 [00:00<00:00, 25.01it/s]                                                38%|###8      | 10/26 [00:00<00:00, 25.01it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.35it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.82it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 38.00it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.44 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.75it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 40/  1]	epoch_time 0.0558 (0.0445)	validation_time 0.0004 (0.0006)	train_time 0.0553 (0.0438)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5263000139594078, 0.6330000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.25it/s] 19%|#9        | 5/26 [00:00<00:01, 20.60it/s] 35%|###4      | 9/26 [00:00<00:00, 26.69it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 32.30it/s] 81%|########  | 21/26 [00:00<00:00, 33.69it/s] 96%|#########6| 25/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 28.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.51 (  0.51)	train_minacc   0.33 (  0.48)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6739 (4.6745)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 23%|##3       | 6/26 [00:00<00:00, 30.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.03it/s] 42%|####2     | 11/26 [00:00<00:00, 37.59it/s] 62%|######1   | 16/26 [00:00<00:00, 41.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.24it/s] 81%|########  | 21/26 [00:00<00:00, 39.70it/s]100%|##########| 26/26 [00:00<00:00, 42.42it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.31 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.31 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.23it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 41/  1]	epoch_time 0.0408 (0.0444)	validation_time 0.0003 (0.0006)	train_time 0.0405 (0.0437)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5270000185668469, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.84it/s] 23%|##3       | 6/26 [00:00<00:00, 27.77it/s] 38%|###8      | 10/26 [00:00<00:00, 31.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.86it/s] 69%|######9   | 18/26 [00:00<00:00, 33.50it/s] 85%|########4 | 22/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 30.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.51 (  0.51)	train_minacc   0.33 (  0.48)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6734 (4.6740)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.70it/s] 15%|#5        | 4/26 [00:00<00:01, 18.70it/s] 35%|###4      | 9/26 [00:00<00:00, 30.92it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.29it/s] 92%|#########2| 24/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 33.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.48)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.33 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.44 ( -0.44)
Overall Timing[ 42/  1]	epoch_time 0.0425 (0.0443)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0437)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5264000143706798, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.81it/s] 19%|#9        | 5/26 [00:00<00:00, 22.67it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 28.66it/s] 65%|######5   | 17/26 [00:00<00:00, 29.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.06it/s] 96%|#########6| 25/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.50 (  0.51)	train_minacc   0.33 (  0.49)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6728 (4.6735)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.48it/s] 27%|##6       | 7/26 [00:00<00:00, 32.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.25it/s] 46%|####6     | 12/26 [00:00<00:00, 34.51it/s] 65%|######5   | 17/26 [00:00<00:00, 38.53it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.53it/s] 85%|########4 | 22/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 34.81it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.33 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.33 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.85it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 43/  1]	epoch_time 0.0404 (0.0443)	validation_time 0.0007 (0.0006)	train_time 0.0397 (0.0436)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5263000130057335, 0.6290000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 19%|#9        | 5/26 [00:00<00:00, 23.33it/s] 35%|###4      | 9/26 [00:00<00:00, 28.32it/s] 50%|#####     | 13/26 [00:00<00:00, 30.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.57it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 29.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.51 (  0.51)	train_minacc   0.36 (  0.49)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6723 (4.6730)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.44it/s] 23%|##3       | 6/26 [00:00<00:01, 18.62it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.62it/s] 42%|####2     | 11/26 [00:00<00:00, 27.68it/s] 62%|######1   | 16/26 [00:00<00:00, 34.35it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.35it/s] 81%|########  | 21/26 [00:00<00:00, 35.21it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]100%|##########| 26/26 [00:00<00:00, 28.27it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.45 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.36 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.36 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.47it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 44/  1]	epoch_time 0.0416 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5255000109374524, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.52it/s] 19%|#9        | 5/26 [00:00<00:00, 23.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 30.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.10it/s] 81%|########  | 21/26 [00:00<00:00, 32.26it/s] 96%|#########6| 25/26 [00:00<00:00, 32.90it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.52 (  0.51)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6719 (4.6725)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.43it/s] 15%|#5        | 4/26 [00:00<00:02,  9.69it/s] 38%|###8      | 10/26 [00:00<00:00, 23.68it/s]                                                38%|###8      | 10/26 [00:00<00:00, 23.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.63it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 29.63it/s] 81%|########  | 21/26 [00:00<00:00, 37.02it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.36 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.36 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.05 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.09it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.42 (  0.42)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 45/  1]	epoch_time 0.0436 (0.0442)	validation_time 0.0005 (0.0006)	train_time 0.0431 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5262000097334385, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.15it/s] 19%|#9        | 5/26 [00:00<00:01, 20.79it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 30.39it/s] 65%|######5   | 17/26 [00:00<00:00, 32.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.80it/s] 96%|#########6| 25/26 [00:00<00:00, 34.60it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.52 (  0.51)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6714 (4.6720)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.54it/s] 23%|##3       | 6/26 [00:00<00:00, 27.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.00it/s] 42%|####2     | 11/26 [00:00<00:00, 34.91it/s] 62%|######1   | 16/26 [00:00<00:00, 39.09it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.09it/s] 81%|########  | 21/26 [00:00<00:00, 37.65it/s]100%|##########| 26/26 [00:00<00:00, 40.54it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.07 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.39 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.74it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.41 (  0.41)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.45 ( -0.45)
Overall Timing[ 46/  1]	epoch_time 0.0422 (0.0441)	validation_time 0.0005 (0.0006)	train_time 0.0417 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5260000113248825, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.13it/s] 23%|##3       | 6/26 [00:00<00:00, 27.41it/s] 38%|###8      | 10/26 [00:00<00:00, 30.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.38it/s] 69%|######9   | 18/26 [00:00<00:00, 33.34it/s] 85%|########4 | 22/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 34.24it/s]100%|##########| 26/26 [00:00<00:00, 29.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.52 (  0.51)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6709 (4.6716)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.71it/s] 27%|##6       | 7/26 [00:00<00:00, 32.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.91it/s] 46%|####6     | 12/26 [00:00<00:00, 40.05it/s] 65%|######5   | 17/26 [00:00<00:00, 42.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.68it/s] 85%|########4 | 22/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 36.53it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.39 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.62 (  0.62)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Overall Timing[ 47/  1]	epoch_time 0.0431 (0.0441)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5258000171482563, 0.6240000128746033)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.86it/s] 19%|#9        | 5/26 [00:00<00:01, 18.43it/s] 35%|###4      | 9/26 [00:00<00:00, 24.36it/s] 50%|#####     | 13/26 [00:00<00:00, 28.49it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.52 (  0.51)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6705 (4.6711)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 23%|##3       | 6/26 [00:00<00:00, 22.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.85it/s] 42%|####2     | 11/26 [00:00<00:00, 30.88it/s] 62%|######1   | 16/26 [00:00<00:00, 36.45it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.45it/s] 81%|########  | 21/26 [00:00<00:00, 36.32it/s]100%|##########| 26/26 [00:00<00:00, 39.44it/s]100%|##########| 26/26 [00:00<00:00, 30.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.52)	test_minacc   0.50 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.50 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.49)	test_majacc   0.54 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.08 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.39 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.74it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Overall Timing[ 48/  1]	epoch_time 0.0423 (0.0441)	validation_time 0.0005 (0.0006)	train_time 0.0418 (0.0434)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5252000183463097, 0.6260000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 19%|#9        | 5/26 [00:00<00:00, 22.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.22it/s] 81%|########  | 21/26 [00:00<00:00, 32.75it/s] 96%|#########6| 25/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 28.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.52 (  0.50)	train_minacc   0.42 (  0.50)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6700 (4.6707)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.03it/s] 15%|#5        | 4/26 [00:00<00:01, 13.22it/s] 35%|###4      | 9/26 [00:00<00:00, 24.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 24.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.95it/s] 69%|######9   | 18/26 [00:00<00:00, 33.99it/s]                                                69%|######9   | 18/26 [00:00<00:00, 33.99it/s] 88%|########8 | 23/26 [00:00<00:00, 37.37it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.48 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.07 (  0.04)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.47 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.42 (  0.49)	test_majacc   0.55 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.42 (  0.49)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.06 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.40 (  0.40)	Loss_d 0.687 (0.687)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.46 ( -0.46)
Overall Timing[ 49/  1]	epoch_time 0.0479 (0.0442)	validation_time 0.0003 (0.0006)	train_time 0.0475 (0.0435)
record: (train_acc, test_acc) (0.800300024151802, 0.5720000267028809)
last accs (train_acc, test_acc) (0.5255000100731849, 0.6260000467300415)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.161 MB of 0.161 MB uploadedwandb: \ 0.161 MB of 0.161 MB uploadedwandb: | 0.161 MB of 0.161 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpzx7ao3cc'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_205055-fxfpdsxg
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/fxfpdsxg
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1189
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6013, 3, 32, 32) (5987, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:02<01:01,  2.44s/it] 19%|#9        | 5/26 [00:02<00:08,  2.60it/s] 38%|###8      | 10/26 [00:02<00:02,  5.99it/s] 54%|#####3    | 14/26 [00:02<00:01,  9.13it/s] 69%|######9   | 18/26 [00:02<00:00, 12.74it/s] 85%|########4 | 22/26 [00:02<00:00, 16.63it/s]100%|##########| 26/26 [00:03<00:00, 13.39it/s]100%|##########| 26/26 [00:03<00:00,  7.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.393 (0.578)	train_nll   0.39 (  0.58)	train_penalty   0.03 (  0.29)	weight_norm  20.82 ( 18.06)	train_acc   0.86 (  0.79)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 7.9747 (8.0609)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 23%|##3       | 6/26 [00:00<00:00, 26.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.67it/s] 46%|####6     | 12/26 [00:00<00:00, 38.53it/s] 65%|######5   | 17/26 [00:00<00:00, 40.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.07it/s] 88%|########8 | 23/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.446 (0.446)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.446 (0.446)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.420 (0.416)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.420 (0.416)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  20/  26]	Loss 0.405 (0.412)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.405 (0.412)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.388 (0.415)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.388 (0.415)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]100%|##########| 1/1 [00:00<00:00,  2.53it/s]
Test: [  0/  1]	Loss 1.656 (1.656)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.656 (1.656)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.656 (1.656)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.656 (1.656)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0896 (0.0896)	validation_time 0.0067 (0.0067)	train_time 0.0786 (0.0786)
record: (train_acc, test_acc) (0.8460000281333924, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8460000281333924, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.52it/s] 12%|#1        | 3/26 [00:00<00:01, 14.74it/s] 27%|##6       | 7/26 [00:00<00:00, 24.14it/s] 42%|####2     | 11/26 [00:00<00:00, 29.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.57it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.61it/s] 88%|########8 | 23/26 [00:00<00:00, 35.95it/s]100%|##########| 26/26 [00:00<00:00, 29.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.397 (0.411)	train_nll   0.40 (  0.41)	train_penalty   0.03 (  0.06)	weight_norm  21.94 ( 21.59)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.02)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 8.3853 (8.3555)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.96it/s] 23%|##3       | 6/26 [00:00<00:00, 25.75it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.75it/s] 42%|####2     | 11/26 [00:00<00:00, 34.99it/s] 65%|######5   | 17/26 [00:00<00:00, 39.44it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.44it/s] 88%|########8 | 23/26 [00:00<00:00, 44.50it/s]100%|##########| 26/26 [00:00<00:00, 35.64it/s]
Test: [   0/  26]	Loss 0.442 (0.442)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.442 (0.442)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.415 (0.411)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.415 (0.411)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.404 (0.405)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.404 (0.405)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.397 (0.408)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.397 (0.408)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.56it/s]
Test: [  0/  1]	Loss 1.458 (1.458)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.458 (1.458)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.458 (1.458)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 1.458 (1.458)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0388 (0.0642)	validation_time 0.0003 (0.0035)	train_time 0.0384 (0.0585)
record: (train_acc, test_acc) (0.8477000209689141, 0.14000000059604645)
last accs (train_acc, test_acc) (0.8477000209689141, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.17it/s] 19%|#9        | 5/26 [00:00<00:01, 17.01it/s] 38%|###8      | 10/26 [00:00<00:00, 26.35it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.74it/s] 92%|#########2| 24/26 [00:00<00:00, 36.62it/s]100%|##########| 26/26 [00:00<00:00, 28.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.383 (0.399)	train_nll   0.38 (  0.40)	train_penalty   0.03 (  0.05)	weight_norm  22.06 ( 22.02)	train_acc   0.84 (  0.85)	train_minacc   0.09 (  0.03)	train_majacc   0.95 (  0.99)	train_corr   0.00 (  0.00)	l1 8.4159 (8.4446)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 19%|#9        | 5/26 [00:00<00:01, 19.37it/s]                                               19%|#9        | 5/26 [00:00<00:01, 19.37it/s] 42%|####2     | 11/26 [00:00<00:00, 32.81it/s] 62%|######1   | 16/26 [00:00<00:00, 37.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.11it/s] 85%|########4 | 22/26 [00:00<00:00, 42.61it/s]100%|##########| 26/26 [00:00<00:00, 33.97it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.83 (  0.83)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.414 (0.414)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.381 (0.384)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.381 (0.384)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.378 (0.376)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.378 (0.376)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  26/  26]	Loss 0.368 (0.379)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.10)	test_majacc   0.97 (  0.98)	Loss_d 0.368 (0.379)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.10)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.55it/s]
Test: [  0/  1]	Loss 1.469 (1.469)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.469 (1.469)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.469 (1.469)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   1.00 (  1.00)	Loss_d 1.469 (1.469)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0415 (0.0566)	validation_time 0.0004 (0.0025)	train_time 0.0411 (0.0527)
record: (train_acc, test_acc) (0.8507000240683555, 0.1680000126361847)
last accs (train_acc, test_acc) (0.8507000240683555, 0.1680000126361847)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.07it/s] 19%|#9        | 5/26 [00:00<00:00, 22.25it/s] 35%|###4      | 9/26 [00:00<00:00, 29.46it/s] 50%|#####     | 13/26 [00:00<00:00, 33.10it/s] 65%|######5   | 17/26 [00:00<00:00, 35.12it/s] 81%|########  | 21/26 [00:00<00:00, 36.36it/s] 96%|#########6| 25/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 31.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.340 (0.377)	train_nll   0.34 (  0.38)	train_penalty   0.02 (  0.04)	weight_norm  22.10 ( 22.08)	train_acc   0.85 (  0.85)	train_minacc   0.24 (  0.07)	train_majacc   0.94 (  0.99)	train_corr   0.00 (  0.00)	l1 8.4622 (8.4419)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 34.20it/s] 35%|###4      | 9/26 [00:00<00:00, 37.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.64it/s] 92%|#########2| 24/26 [00:00<00:00, 43.43it/s]100%|##########| 26/26 [00:00<00:00, 37.06it/s]
Test: [   0/  26]	Loss 0.402 (0.402)	test_acc   0.81 (  0.81)	test_minacc   0.14 (  0.14)	test_majacc   0.94 (  0.94)	Loss_d 0.402 (0.402)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.350 (0.370)	test_acc   0.86 (  0.85)	test_minacc   0.23 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.350 (0.370)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.23 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.353 (0.356)	test_acc   0.86 (  0.85)	test_minacc   0.10 (  0.17)	test_majacc   0.99 (  0.97)	Loss_d 0.353 (0.356)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.10 (  0.17)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.336 (0.357)	test_acc   0.87 (  0.85)	test_minacc   0.21 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.336 (0.357)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.21 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.70it/s]
Test: [  0/  1]	Loss 1.393 (1.393)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.393 (1.393)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.393 (1.393)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.393 (1.393)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0398 (0.0524)	validation_time 0.0006 (0.0020)	train_time 0.0391 (0.0493)
record: (train_acc, test_acc) (0.8497000201940537, 0.2410000115633011)
last accs (train_acc, test_acc) (0.8497000201940537, 0.2410000115633011)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.22it/s] 23%|##3       | 6/26 [00:00<00:00, 25.86it/s] 38%|###8      | 10/26 [00:00<00:00, 30.54it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.66it/s] 69%|######9   | 18/26 [00:00<00:00, 34.17it/s] 85%|########4 | 22/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.314 (0.355)	train_nll   0.31 (  0.35)	train_penalty   0.01 (  0.03)	weight_norm  22.16 ( 22.13)	train_acc   0.86 (  0.85)	train_minacc   0.33 (  0.13)	train_majacc   0.94 (  0.98)	train_corr   0.00 (  0.00)	l1 8.6106 (8.5369)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 23%|##3       | 6/26 [00:00<00:00, 31.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.51it/s] 42%|####2     | 11/26 [00:00<00:00, 37.97it/s] 62%|######1   | 16/26 [00:00<00:00, 41.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.64it/s] 81%|########  | 21/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 36.48it/s]
Test: [   0/  26]	Loss 0.371 (0.371)	test_acc   0.82 (  0.82)	test_minacc   0.22 (  0.22)	test_majacc   0.94 (  0.94)	Loss_d 0.371 (0.371)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.326 (0.349)	test_acc   0.86 (  0.85)	test_minacc   0.36 (  0.27)	test_majacc   0.95 (  0.95)	Loss_d 0.326 (0.349)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.36 (  0.27)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.326 (0.332)	test_acc   0.87 (  0.86)	test_minacc   0.28 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.326 (0.332)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.28 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.88 (  0.87)
Test: [  26/  26]	Loss 0.310 (0.333)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.28)	test_majacc   0.95 (  0.96)	Loss_d 0.310 (0.333)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.28)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.34it/s]
Test: [  0/  1]	Loss 1.412 (1.412)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.412 (1.412)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.412 (1.412)	test_acc   0.31 (  0.31)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 1.412 (1.412)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0418 (0.0503)	validation_time 0.0005 (0.0017)	train_time 0.0413 (0.0477)
record: (train_acc, test_acc) (0.8565000250935555, 0.3110000193119049)
last accs (train_acc, test_acc) (0.8565000250935555, 0.3110000193119049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.15it/s] 19%|#9        | 5/26 [00:00<00:01, 16.52it/s] 35%|###4      | 9/26 [00:00<00:00, 23.32it/s] 50%|#####     | 13/26 [00:00<00:00, 27.53it/s] 65%|######5   | 17/26 [00:00<00:00, 30.06it/s] 81%|########  | 21/26 [00:00<00:00, 31.57it/s] 96%|#########6| 25/26 [00:00<00:00, 32.02it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.311 (0.341)	train_nll   0.31 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm  22.21 ( 22.19)	train_acc   0.85 (  0.85)	train_minacc   0.30 (  0.17)	train_majacc   0.93 (  0.97)	train_corr   0.00 (  0.00)	l1 8.6331 (8.6188)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 23%|##3       | 6/26 [00:00<00:00, 30.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.66it/s] 42%|####2     | 11/26 [00:00<00:00, 37.25it/s] 62%|######1   | 16/26 [00:00<00:00, 41.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.29it/s] 81%|########  | 21/26 [00:00<00:00, 38.88it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 35.37it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.83 (  0.83)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.346 (0.346)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.317 (0.331)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.317 (0.331)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.290 (0.314)	test_acc   0.87 (  0.86)	test_minacc   0.26 (  0.26)	test_majacc   0.98 (  0.97)	Loss_d 0.290 (0.314)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.285 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.27 (  0.25)	test_majacc   0.95 (  0.97)	Loss_d 0.285 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.27 (  0.25)	test_majacc_d   0.95 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 1.551 (1.551)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.551 (1.551)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.551 (1.551)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.551 (1.551)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Overall Timing[  5/  1]	epoch_time 0.0439 (0.0492)	validation_time 0.0003 (0.0015)	train_time 0.0436 (0.0470)
record: (train_acc, test_acc) (0.8565000250935555, 0.3110000193119049)
last accs (train_acc, test_acc) (0.8585000239014625, 0.27400001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 19%|#9        | 5/26 [00:00<00:00, 22.91it/s] 35%|###4      | 9/26 [00:00<00:00, 29.19it/s] 50%|#####     | 13/26 [00:00<00:00, 32.51it/s] 65%|######5   | 17/26 [00:00<00:00, 34.80it/s] 81%|########  | 21/26 [00:00<00:00, 35.89it/s]100%|##########| 26/26 [00:00<00:00, 37.77it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.301 (0.329)	train_nll   0.30 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm  22.28 ( 22.25)	train_acc   0.86 (  0.85)	train_minacc   0.24 (  0.25)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 8.3756 (8.4818)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.94it/s] 27%|##6       | 7/26 [00:00<00:00, 33.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.79it/s] 46%|####6     | 12/26 [00:00<00:00, 39.88it/s] 65%|######5   | 17/26 [00:00<00:00, 42.92it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.92it/s] 85%|########4 | 22/26 [00:00<00:00, 41.86it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.84 (  0.84)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.330 (0.330)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.324 (0.334)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.324 (0.334)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.296 (0.318)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.23)	test_majacc   0.97 (  0.97)	Loss_d 0.296 (0.318)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.23)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.285 (0.318)	test_acc   0.87 (  0.86)	test_minacc   0.27 (  0.23)	test_majacc   0.96 (  0.97)	Loss_d 0.285 (0.318)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.27 (  0.23)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.76it/s]
Test: [  0/  1]	Loss 1.662 (1.662)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 1.662 (1.662)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.662 (1.662)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 1.662 (1.662)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Overall Timing[  6/  1]	epoch_time 0.0371 (0.0475)	validation_time 0.0003 (0.0013)	train_time 0.0368 (0.0455)
record: (train_acc, test_acc) (0.8565000250935555, 0.3110000193119049)
last accs (train_acc, test_acc) (0.8586000264286995, 0.26200002431869507)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.86it/s] 23%|##3       | 6/26 [00:00<00:00, 24.55it/s] 38%|###8      | 10/26 [00:00<00:00, 29.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.85it/s] 69%|######9   | 18/26 [00:00<00:00, 33.27it/s] 85%|########4 | 22/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 34.94it/s]100%|##########| 26/26 [00:00<00:00, 29.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.009 (0.227)	train_nll   0.50 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm  22.38 ( 22.33)	train_acc   0.76 (  0.85)	train_minacc   0.70 (  0.37)	train_majacc   0.77 (  0.94)	train_corr   0.00 (  0.00)	l1 8.2411 (8.3759)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.98it/s] 27%|##6       | 7/26 [00:00<00:00, 34.37it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.37it/s] 50%|#####     | 13/26 [00:00<00:00, 39.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.62it/s] 96%|#########6| 25/26 [00:00<00:00, 44.37it/s]100%|##########| 26/26 [00:00<00:00, 38.99it/s]
Test: [   0/  26]	Loss 0.550 (0.550)	test_acc   0.75 (  0.75)	test_minacc   0.63 (  0.63)	test_majacc   0.78 (  0.78)	Loss_d 0.550 (0.550)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.50 (  0.50)
Test: [  10/  26]	Loss 0.448 (0.479)	test_acc   0.78 (  0.79)	test_minacc   0.79 (  0.72)	test_majacc   0.78 (  0.80)	Loss_d 0.448 (0.479)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.78 (  0.80)	test_corr_d   0.50 (  0.53)
Test: [  20/  26]	Loss 0.456 (0.456)	test_acc   0.80 (  0.80)	test_minacc   0.67 (  0.73)	test_majacc   0.82 (  0.81)	Loss_d 0.456 (0.456)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.67 (  0.73)	test_majacc_d   0.82 (  0.81)	test_corr_d   0.56 (  0.55)
Test: [  26/  26]	Loss 0.470 (0.456)	test_acc   0.77 (  0.80)	test_minacc   0.61 (  0.71)	test_majacc   0.80 (  0.81)	Loss_d 0.470 (0.456)	test_acc_d   0.77 (  0.80)	test_minacc_d   0.61 (  0.71)	test_majacc_d   0.80 (  0.81)	test_corr_d   0.54 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.76it/s]
Test: [  0/  1]	Loss 0.900 (0.900)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 0.900 (0.900)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.900 (0.900)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.82 (  0.82)	Loss_d 0.900 (0.900)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.82 (  0.82)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0388 (0.0464)	validation_time 0.0005 (0.0012)	train_time 0.0383 (0.0446)
record: (train_acc, test_acc) (0.7992000247836113, 0.6380000114440918)
last accs (train_acc, test_acc) (0.7992000247836113, 0.6380000114440918)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:00, 21.79it/s] 35%|###4      | 9/26 [00:00<00:00, 28.00it/s] 50%|#####     | 13/26 [00:00<00:00, 31.19it/s] 65%|######5   | 17/26 [00:00<00:00, 32.98it/s] 81%|########  | 21/26 [00:00<00:00, 34.28it/s] 96%|#########6| 25/26 [00:00<00:00, 34.94it/s]100%|##########| 26/26 [00:00<00:00, 29.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.005 (0.004)	train_nll   0.46 (  0.50)	train_penalty   0.01 (  0.00)	weight_norm  22.42 ( 22.41)	train_acc   0.78 (  0.76)	train_minacc   0.73 (  0.66)	train_majacc   0.78 (  0.78)	train_corr   0.00 (  0.00)	l1 7.1981 (7.5355)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.73it/s] 23%|##3       | 6/26 [00:00<00:00, 28.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.77it/s] 42%|####2     | 11/26 [00:00<00:00, 35.83it/s] 62%|######1   | 16/26 [00:00<00:00, 36.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.50it/s] 81%|########  | 21/26 [00:00<00:00, 39.36it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]100%|##########| 26/26 [00:00<00:00, 34.79it/s]
Test: [   0/  26]	Loss 0.490 (0.490)	test_acc   0.75 (  0.75)	test_minacc   0.75 (  0.75)	test_majacc   0.75 (  0.75)	Loss_d 0.490 (0.490)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.467 (0.489)	test_acc   0.79 (  0.77)	test_minacc   0.82 (  0.73)	test_majacc   0.79 (  0.77)	Loss_d 0.467 (0.489)	test_acc_d   0.79 (  0.77)	test_minacc_d   0.82 (  0.73)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.51 (  0.51)
Test: [  20/  26]	Loss 0.467 (0.473)	test_acc   0.79 (  0.78)	test_minacc   0.79 (  0.74)	test_majacc   0.79 (  0.78)	Loss_d 0.467 (0.473)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.79 (  0.78)	test_corr_d   0.52 (  0.53)
Test: [  26/  26]	Loss 0.466 (0.471)	test_acc   0.78 (  0.78)	test_minacc   0.76 (  0.74)	test_majacc   0.78 (  0.78)	Loss_d 0.466 (0.471)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.53 (  0.53)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.75 (  0.75)	Loss_d 0.721 (0.721)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.75 (  0.75)	Loss_d 0.721 (0.721)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.11 ( -0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0430 (0.0460)	validation_time 0.0004 (0.0011)	train_time 0.0426 (0.0444)
record: (train_acc, test_acc) (0.7782000264525414, 0.659000039100647)
last accs (train_acc, test_acc) (0.7782000264525414, 0.659000039100647)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.46it/s] 19%|#9        | 5/26 [00:00<00:01, 11.69it/s] 35%|###4      | 9/26 [00:00<00:00, 18.35it/s] 50%|#####     | 13/26 [00:00<00:00, 23.04it/s] 65%|######5   | 17/26 [00:00<00:00, 27.29it/s] 85%|########4 | 22/26 [00:00<00:00, 31.65it/s]100%|##########| 26/26 [00:01<00:00, 33.25it/s]100%|##########| 26/26 [00:01<00:00, 22.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.001 (0.002)	train_nll   0.50 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.43 ( 22.43)	train_acc   0.73 (  0.71)	train_minacc   0.82 (  0.80)	train_majacc   0.72 (  0.70)	train_corr   0.00 (  0.00)	l1 7.1031 (7.1997)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.08it/s] 38%|###8      | 10/26 [00:00<00:00, 30.72it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.10it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.10it/s] 96%|#########6| 25/26 [00:00<00:00, 40.23it/s]100%|##########| 26/26 [00:00<00:00, 32.27it/s]
Test: [   0/  26]	Loss 0.529 (0.529)	test_acc   0.72 (  0.72)	test_minacc   0.78 (  0.78)	test_majacc   0.71 (  0.71)	Loss_d 0.529 (0.529)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.504 (0.521)	test_acc   0.73 (  0.72)	test_minacc   0.85 (  0.78)	test_majacc   0.71 (  0.71)	Loss_d 0.504 (0.521)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.85 (  0.78)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.41 (  0.42)
Test: [  20/  26]	Loss 0.491 (0.504)	test_acc   0.75 (  0.74)	test_minacc   0.83 (  0.78)	test_majacc   0.74 (  0.73)	Loss_d 0.491 (0.504)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.83 (  0.78)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.45 (  0.44)
Test: [  26/  26]	Loss 0.499 (0.502)	test_acc   0.75 (  0.74)	test_minacc   0.79 (  0.78)	test_majacc   0.74 (  0.73)	Loss_d 0.499 (0.502)	test_acc_d   0.75 (  0.74)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.45 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.69 (  0.69)	Loss_d 0.687 (0.687)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.69 (  0.69)	Loss_d 0.687 (0.687)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.21 ( -0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0444 (0.0459)	validation_time 0.0005 (0.0011)	train_time 0.0439 (0.0444)
record: (train_acc, test_acc) (0.7387000297904015, 0.6910000443458557)
last accs (train_acc, test_acc) (0.7387000297904015, 0.6910000443458557)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.87it/s] 19%|#9        | 5/26 [00:00<00:01, 18.58it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 29.48it/s] 65%|######5   | 17/26 [00:00<00:00, 32.10it/s] 81%|########  | 21/26 [00:00<00:00, 34.33it/s] 96%|#########6| 25/26 [00:00<00:00, 35.33it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.001)	train_nll   0.51 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  22.44 ( 22.43)	train_acc   0.73 (  0.74)	train_minacc   0.79 (  0.72)	train_majacc   0.72 (  0.75)	train_corr   0.00 (  0.00)	l1 6.9313 (7.0158)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 12%|#1        | 3/26 [00:00<00:01, 12.38it/s] 31%|###       | 8/26 [00:00<00:00, 26.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 33.75it/s] 69%|######9   | 18/26 [00:00<00:00, 34.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.94it/s] 88%|########8 | 23/26 [00:00<00:00, 38.44it/s]100%|##########| 26/26 [00:00<00:00, 31.40it/s]
Test: [   0/  26]	Loss 0.521 (0.521)	test_acc   0.74 (  0.74)	test_minacc   0.80 (  0.80)	test_majacc   0.72 (  0.72)	Loss_d 0.521 (0.521)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.511 (0.517)	test_acc   0.76 (  0.73)	test_minacc   0.85 (  0.77)	test_majacc   0.74 (  0.72)	Loss_d 0.511 (0.517)	test_acc_d   0.76 (  0.73)	test_minacc_d   0.85 (  0.77)	test_majacc_d   0.74 (  0.72)	test_corr_d   0.41 (  0.43)
Test: [  20/  26]	Loss 0.481 (0.500)	test_acc   0.77 (  0.75)	test_minacc   0.83 (  0.77)	test_majacc   0.76 (  0.74)	Loss_d 0.481 (0.500)	test_acc_d   0.77 (  0.75)	test_minacc_d   0.83 (  0.77)	test_majacc_d   0.76 (  0.74)	test_corr_d   0.45 (  0.45)
Test: [  26/  26]	Loss 0.507 (0.499)	test_acc   0.74 (  0.75)	test_minacc   0.76 (  0.77)	test_majacc   0.73 (  0.74)	Loss_d 0.507 (0.499)	test_acc_d   0.74 (  0.75)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.73 (  0.74)	test_corr_d   0.45 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 0.672 (0.672)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.71 (  0.71)	Loss_d 0.672 (0.672)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.672 (0.672)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.71 (  0.71)	Loss_d 0.672 (0.672)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 10/  1]	epoch_time 0.0390 (0.0452)	validation_time 0.0003 (0.0010)	train_time 0.0387 (0.0438)
record: (train_acc, test_acc) (0.7387000297904015, 0.6910000443458557)
last accs (train_acc, test_acc) (0.7487000312209129, 0.6880000233650208)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 19%|#9        | 5/26 [00:00<00:00, 21.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.20it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.95it/s] 96%|#########6| 25/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.001 (0.001)	train_nll   0.54 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  22.44 ( 22.44)	train_acc   0.70 (  0.72)	train_minacc   0.82 (  0.79)	train_majacc   0.68 (  0.71)	train_corr   0.00 (  0.00)	l1 7.0744 (7.0177)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.20it/s] 31%|###       | 8/26 [00:00<00:00, 37.35it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.35it/s] 50%|#####     | 13/26 [00:00<00:00, 38.74it/s] 69%|######9   | 18/26 [00:00<00:00, 39.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.90it/s] 88%|########8 | 23/26 [00:00<00:00, 42.11it/s]100%|##########| 26/26 [00:00<00:00, 37.17it/s]
Test: [   0/  26]	Loss 0.561 (0.561)	test_acc   0.70 (  0.70)	test_minacc   0.80 (  0.80)	test_majacc   0.68 (  0.68)	Loss_d 0.561 (0.561)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.529 (0.544)	test_acc   0.71 (  0.70)	test_minacc   0.84 (  0.79)	test_majacc   0.69 (  0.68)	Loss_d 0.529 (0.544)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.504 (0.526)	test_acc   0.75 (  0.72)	test_minacc   0.86 (  0.79)	test_majacc   0.73 (  0.70)	Loss_d 0.504 (0.526)	test_acc_d   0.75 (  0.72)	test_minacc_d   0.86 (  0.79)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.39 (  0.39)
Test: [  26/  26]	Loss 0.528 (0.524)	test_acc   0.71 (  0.72)	test_minacc   0.82 (  0.79)	test_majacc   0.69 (  0.71)	Loss_d 0.528 (0.524)	test_acc_d   0.71 (  0.72)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.69 (  0.71)	test_corr_d   0.39 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.62it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.69 (  0.69)	Loss_d 0.677 (0.677)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.71 (  0.71)	test_minacc   0.71 (  0.71)	test_majacc   0.69 (  0.69)	Loss_d 0.677 (0.677)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.26 ( -0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0384 (0.0447)	validation_time 0.0005 (0.0010)	train_time 0.0379 (0.0433)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 15%|#5        | 4/26 [00:00<00:01, 14.77it/s] 31%|###       | 8/26 [00:00<00:00, 22.63it/s] 46%|####6     | 12/26 [00:00<00:00, 27.08it/s] 62%|######1   | 16/26 [00:00<00:00, 29.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.45it/s] 92%|#########2| 24/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:01<00:00, 25.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.003 (0.001)	train_nll   0.57 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.45 ( 22.44)	train_acc   0.69 (  0.74)	train_minacc   0.76 (  0.74)	train_majacc   0.68 (  0.74)	train_corr   0.00 (  0.00)	l1 6.9667 (6.9090)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.47it/s] 27%|##6       | 7/26 [00:00<00:00, 33.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.31it/s] 42%|####2     | 11/26 [00:00<00:00, 35.30it/s] 62%|######1   | 16/26 [00:00<00:00, 37.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.39it/s] 81%|########  | 21/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]100%|##########| 26/26 [00:00<00:00, 35.66it/s]
Test: [   0/  26]	Loss 0.545 (0.545)	test_acc   0.70 (  0.70)	test_minacc   0.78 (  0.78)	test_majacc   0.68 (  0.68)	Loss_d 0.545 (0.545)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.544 (0.555)	test_acc   0.74 (  0.71)	test_minacc   0.85 (  0.76)	test_majacc   0.71 (  0.70)	Loss_d 0.544 (0.555)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.85 (  0.76)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.36 (  0.38)
Test: [  20/  26]	Loss 0.501 (0.534)	test_acc   0.76 (  0.72)	test_minacc   0.84 (  0.77)	test_majacc   0.75 (  0.71)	Loss_d 0.501 (0.534)	test_acc_d   0.76 (  0.72)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.75 (  0.71)	test_corr_d   0.41 (  0.41)
Test: [  26/  26]	Loss 0.547 (0.531)	test_acc   0.70 (  0.72)	test_minacc   0.76 (  0.77)	test_majacc   0.69 (  0.72)	Loss_d 0.547 (0.531)	test_acc_d   0.70 (  0.72)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.69 (  0.72)	test_corr_d   0.41 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.60it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 0.697 (0.697)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 0.697 (0.697)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 12/  1]	epoch_time 0.0386 (0.0442)	validation_time 0.0004 (0.0009)	train_time 0.0383 (0.0430)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.7237000321149826, 0.6830000281333923)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 12%|#1        | 3/26 [00:00<00:02,  9.72it/s] 27%|##6       | 7/26 [00:00<00:01, 18.58it/s] 42%|####2     | 11/26 [00:00<00:00, 24.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.08it/s] 88%|########8 | 23/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.002 (0.001)	train_nll   0.49 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.45 ( 22.44)	train_acc   0.74 (  0.70)	train_minacc   0.76 (  0.76)	train_majacc   0.74 (  0.69)	train_corr   0.00 (  0.00)	l1 6.8048 (6.7965)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 23%|##3       | 6/26 [00:00<00:00, 21.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.46it/s] 42%|####2     | 11/26 [00:00<00:00, 30.34it/s] 62%|######1   | 16/26 [00:00<00:00, 35.94it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.94it/s] 81%|########  | 21/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 41.38it/s]100%|##########| 26/26 [00:00<00:00, 32.17it/s]
Test: [   0/  26]	Loss 0.548 (0.548)	test_acc   0.68 (  0.68)	test_minacc   0.74 (  0.74)	test_majacc   0.67 (  0.67)	Loss_d 0.548 (0.548)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.515 (0.534)	test_acc   0.69 (  0.70)	test_minacc   0.79 (  0.77)	test_majacc   0.68 (  0.69)	Loss_d 0.515 (0.534)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.40 (  0.41)
Test: [  20/  26]	Loss 0.499 (0.519)	test_acc   0.74 (  0.71)	test_minacc   0.86 (  0.77)	test_majacc   0.72 (  0.71)	Loss_d 0.499 (0.519)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.86 (  0.77)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.44 (  0.44)
Test: [  26/  26]	Loss 0.494 (0.516)	test_acc   0.74 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.74 (  0.71)	Loss_d 0.494 (0.516)	test_acc_d   0.74 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.74 (  0.71)	test_corr_d   0.47 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.728 (0.728)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 0.728 (0.728)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.728 (0.728)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.72 (  0.72)	Loss_d 0.728 (0.728)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 13/  1]	epoch_time 0.0400 (0.0439)	validation_time 0.0005 (0.0009)	train_time 0.0395 (0.0427)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.716200031876564, 0.6850000619888306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.20it/s] 23%|##3       | 6/26 [00:00<00:00, 25.97it/s] 38%|###8      | 10/26 [00:00<00:00, 29.42it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.71it/s] 69%|######9   | 18/26 [00:00<00:00, 33.06it/s] 85%|########4 | 22/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 34.65it/s]100%|##########| 26/26 [00:00<00:00, 30.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.51)	train_penalty   0.00 (  0.00)	weight_norm  22.45 ( 22.45)	train_acc   0.72 (  0.72)	train_minacc   0.79 (  0.77)	train_majacc   0.71 (  0.71)	train_corr   0.00 (  0.00)	l1 6.9787 (6.9234)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 15%|#5        | 4/26 [00:00<00:01, 17.27it/s] 31%|###       | 8/26 [00:00<00:00, 26.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.06it/s] 46%|####6     | 12/26 [00:00<00:00, 30.84it/s] 65%|######5   | 17/26 [00:00<00:00, 36.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.07it/s] 85%|########4 | 22/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 31.71it/s]
Test: [   0/  26]	Loss 0.530 (0.530)	test_acc   0.69 (  0.69)	test_minacc   0.78 (  0.78)	test_majacc   0.68 (  0.68)	Loss_d 0.530 (0.530)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.532 (0.537)	test_acc   0.71 (  0.70)	test_minacc   0.84 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.532 (0.537)	test_acc_d   0.71 (  0.70)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.37 (  0.40)
Test: [  20/  26]	Loss 0.482 (0.518)	test_acc   0.75 (  0.71)	test_minacc   0.86 (  0.78)	test_majacc   0.73 (  0.70)	Loss_d 0.482 (0.518)	test_acc_d   0.75 (  0.71)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.513 (0.515)	test_acc   0.72 (  0.72)	test_minacc   0.79 (  0.77)	test_majacc   0.71 (  0.71)	Loss_d 0.513 (0.515)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.44 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 52.93it/s]
Test: [  0/  1]	Loss 0.736 (0.736)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.70 (  0.70)	Loss_d 0.736 (0.736)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.736 (0.736)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.70 (  0.70)	Loss_d 0.736 (0.736)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 14/  1]	epoch_time 0.0404 (0.0437)	validation_time 0.0007 (0.0009)	train_time 0.0397 (0.0425)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.7164000288248062, 0.6930000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.80it/s] 27%|##6       | 7/26 [00:00<00:00, 29.73it/s] 42%|####2     | 11/26 [00:00<00:00, 32.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.11it/s] 88%|########8 | 23/26 [00:00<00:00, 35.76it/s]100%|##########| 26/26 [00:00<00:00, 31.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.001)	train_nll   0.53 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.45 ( 22.45)	train_acc   0.69 (  0.69)	train_minacc   0.79 (  0.77)	train_majacc   0.68 (  0.67)	train_corr   0.00 (  0.00)	l1 6.7135 (6.7284)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.56it/s] 31%|###       | 8/26 [00:00<00:00, 29.05it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.05it/s] 50%|#####     | 13/26 [00:00<00:00, 32.88it/s] 69%|######9   | 18/26 [00:00<00:00, 37.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.72it/s] 92%|#########2| 24/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 33.09it/s]
Test: [   0/  26]	Loss 0.570 (0.570)	test_acc   0.66 (  0.66)	test_minacc   0.75 (  0.75)	test_majacc   0.65 (  0.65)	Loss_d 0.570 (0.570)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.553 (0.566)	test_acc   0.66 (  0.67)	test_minacc   0.80 (  0.78)	test_majacc   0.63 (  0.65)	Loss_d 0.553 (0.566)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.63 (  0.65)	test_corr_d   0.35 (  0.36)
Test: [  20/  26]	Loss 0.530 (0.553)	test_acc   0.71 (  0.68)	test_minacc   0.86 (  0.78)	test_majacc   0.69 (  0.66)	Loss_d 0.530 (0.553)	test_acc_d   0.71 (  0.68)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.536 (0.551)	test_acc   0.69 (  0.68)	test_minacc   0.79 (  0.78)	test_majacc   0.67 (  0.66)	Loss_d 0.536 (0.551)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.40 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.73it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.706 (0.706)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.706 (0.706)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 15/  1]	epoch_time 0.0427 (0.0436)	validation_time 0.0003 (0.0008)	train_time 0.0424 (0.0425)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.681200035393238, 0.703000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.10it/s] 19%|#9        | 5/26 [00:00<00:01, 18.71it/s] 35%|###4      | 9/26 [00:00<00:00, 25.16it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 30.84it/s] 81%|########  | 21/26 [00:00<00:00, 31.90it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 26.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.003 (0.001)	train_nll   0.55 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.46 ( 22.46)	train_acc   0.69 (  0.70)	train_minacc   0.82 (  0.77)	train_majacc   0.67 (  0.69)	train_corr   0.00 (  0.00)	l1 7.0726 (6.8993)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 15%|#5        | 4/26 [00:00<00:01, 15.20it/s] 35%|###4      | 9/26 [00:00<00:00, 27.90it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.56it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.56it/s] 96%|#########6| 25/26 [00:00<00:00, 40.43it/s]100%|##########| 26/26 [00:00<00:00, 32.12it/s]
Test: [   0/  26]	Loss 0.533 (0.533)	test_acc   0.69 (  0.69)	test_minacc   0.77 (  0.77)	test_majacc   0.67 (  0.67)	Loss_d 0.533 (0.533)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.551 (0.551)	test_acc   0.69 (  0.69)	test_minacc   0.82 (  0.76)	test_majacc   0.67 (  0.67)	Loss_d 0.551 (0.551)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.82 (  0.76)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.36 (  0.39)
Test: [  20/  26]	Loss 0.486 (0.531)	test_acc   0.74 (  0.70)	test_minacc   0.84 (  0.77)	test_majacc   0.73 (  0.69)	Loss_d 0.486 (0.531)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.84 (  0.77)	test_majacc_d   0.73 (  0.69)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.530 (0.527)	test_acc   0.71 (  0.71)	test_minacc   0.82 (  0.77)	test_majacc   0.69 (  0.69)	Loss_d 0.530 (0.527)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.82 (  0.77)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.42 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 0.764 (0.764)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.66 (  0.66)	Loss_d 0.764 (0.764)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.764 (0.764)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.66 (  0.66)	Loss_d 0.764 (0.764)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 16/  1]	epoch_time 0.0409 (0.0435)	validation_time 0.0004 (0.0008)	train_time 0.0404 (0.0424)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.7054000300168991, 0.6960000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.81it/s] 50%|#####     | 13/26 [00:00<00:00, 30.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.42it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.46 ( 22.46)	train_acc   0.66 (  0.68)	train_minacc   0.76 (  0.76)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.5638 (6.6579)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.66it/s] 23%|##3       | 6/26 [00:00<00:01, 19.52it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.52it/s] 42%|####2     | 11/26 [00:00<00:00, 28.60it/s] 62%|######1   | 16/26 [00:00<00:00, 34.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.16it/s] 81%|########  | 21/26 [00:00<00:00, 35.35it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.617 (0.617)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.604 (0.614)	test_acc   0.64 (  0.63)	test_minacc   0.77 (  0.77)	test_majacc   0.62 (  0.60)	Loss_d 0.604 (0.614)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.27 (  0.29)
Test: [  20/  26]	Loss 0.585 (0.604)	test_acc   0.68 (  0.64)	test_minacc   0.90 (  0.78)	test_majacc   0.64 (  0.61)	Loss_d 0.585 (0.604)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.90 (  0.78)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.33 (  0.31)
Test: [  26/  26]	Loss 0.581 (0.602)	test_acc   0.66 (  0.64)	test_minacc   0.76 (  0.78)	test_majacc   0.65 (  0.61)	Loss_d 0.581 (0.602)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.33 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.05it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.25 ( -0.25)
Overall Timing[ 17/  1]	epoch_time 0.0471 (0.0437)	validation_time 0.0004 (0.0008)	train_time 0.0467 (0.0426)
record: (train_acc, test_acc) (0.7176000316143036, 0.706000030040741)
last accs (train_acc, test_acc) (0.6396000158190728, 0.7000000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 15%|#5        | 4/26 [00:00<00:01, 15.86it/s] 31%|###       | 8/26 [00:00<00:00, 23.57it/s] 46%|####6     | 12/26 [00:00<00:00, 27.76it/s] 62%|######1   | 16/26 [00:00<00:00, 30.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.78it/s] 92%|#########2| 24/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.001)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.47 ( 22.46)	train_acc   0.66 (  0.66)	train_minacc   0.76 (  0.79)	train_majacc   0.65 (  0.64)	train_corr   0.00 (  0.00)	l1 6.9648 (6.7619)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 23%|##3       | 6/26 [00:00<00:00, 31.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.32it/s] 42%|####2     | 11/26 [00:00<00:00, 37.74it/s] 62%|######1   | 16/26 [00:00<00:00, 41.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.08it/s] 81%|########  | 21/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 42.89it/s]100%|##########| 26/26 [00:00<00:00, 35.15it/s]
Test: [   0/  26]	Loss 0.543 (0.543)	test_acc   0.67 (  0.67)	test_minacc   0.75 (  0.75)	test_majacc   0.66 (  0.66)	Loss_d 0.543 (0.543)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.567 (0.566)	test_acc   0.66 (  0.66)	test_minacc   0.80 (  0.78)	test_majacc   0.64 (  0.64)	Loss_d 0.567 (0.566)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.508 (0.548)	test_acc   0.71 (  0.68)	test_minacc   0.88 (  0.79)	test_majacc   0.68 (  0.66)	Loss_d 0.508 (0.548)	test_acc_d   0.71 (  0.68)	test_minacc_d   0.88 (  0.79)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.39 (  0.38)
Test: [  26/  26]	Loss 0.537 (0.544)	test_acc   0.69 (  0.68)	test_minacc   0.76 (  0.79)	test_majacc   0.68 (  0.66)	Loss_d 0.537 (0.544)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.39 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.02it/s]
Test: [  0/  1]	Loss 0.746 (0.746)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.746 (0.746)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.746 (0.746)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.746 (0.746)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.18 ( -0.18)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[ 18/  1]	epoch_time 0.0388 (0.0434)	validation_time 0.0004 (0.0008)	train_time 0.0383 (0.0424)
record: (train_acc, test_acc) (0.6802000252008438, 0.7090000510215759)
last accs (train_acc, test_acc) (0.6802000252008438, 0.7090000510215759)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 15%|#5        | 4/26 [00:00<00:01, 19.44it/s] 31%|###       | 8/26 [00:00<00:00, 25.25it/s] 46%|####6     | 12/26 [00:00<00:00, 28.08it/s] 62%|######1   | 16/26 [00:00<00:00, 30.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.36it/s] 92%|#########2| 24/26 [00:00<00:00, 32.07it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.003 (0.001)	train_nll   0.58 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.48 ( 22.47)	train_acc   0.66 (  0.69)	train_minacc   0.85 (  0.77)	train_majacc   0.63 (  0.68)	train_corr   0.00 (  0.00)	l1 7.1004 (6.8430)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.49it/s] 27%|##6       | 7/26 [00:00<00:00, 33.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.82it/s] 46%|####6     | 12/26 [00:00<00:00, 38.70it/s] 65%|######5   | 17/26 [00:00<00:00, 38.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.70it/s] 85%|########4 | 22/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 36.54it/s]
Test: [   0/  26]	Loss 0.566 (0.566)	test_acc   0.67 (  0.67)	test_minacc   0.83 (  0.83)	test_majacc   0.64 (  0.64)	Loss_d 0.566 (0.566)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.597 (0.591)	test_acc   0.65 (  0.65)	test_minacc   0.82 (  0.79)	test_majacc   0.62 (  0.63)	Loss_d 0.597 (0.591)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.82 (  0.79)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.27 (  0.30)
Test: [  20/  26]	Loss 0.527 (0.572)	test_acc   0.69 (  0.66)	test_minacc   0.84 (  0.80)	test_majacc   0.67 (  0.64)	Loss_d 0.527 (0.572)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.34 (  0.32)
Test: [  26/  26]	Loss 0.557 (0.566)	test_acc   0.69 (  0.67)	test_minacc   0.82 (  0.80)	test_majacc   0.67 (  0.65)	Loss_d 0.557 (0.566)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.35 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.71it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.59 (  0.59)	Loss_d 0.716 (0.716)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.25 ( -0.25)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.72 (  0.72)	test_minacc   0.73 (  0.73)	test_majacc   0.59 (  0.59)	Loss_d 0.716 (0.716)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.25 ( -0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[ 19/  1]	epoch_time 0.0398 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0394 (0.0422)
record: (train_acc, test_acc) (0.6684000222086907, 0.7160000205039978)
last accs (train_acc, test_acc) (0.6684000222086907, 0.7160000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.85it/s] 19%|#9        | 5/26 [00:00<00:01, 15.27it/s] 35%|###4      | 9/26 [00:00<00:00, 21.29it/s] 50%|#####     | 13/26 [00:00<00:00, 24.77it/s] 65%|######5   | 17/26 [00:00<00:00, 27.41it/s] 81%|########  | 21/26 [00:00<00:00, 29.35it/s] 96%|#########6| 25/26 [00:01<00:00, 30.27it/s]100%|##########| 26/26 [00:01<00:00, 24.18it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.001)	train_nll   0.50 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.48 ( 22.48)	train_acc   0.74 (  0.70)	train_minacc   0.73 (  0.73)	train_majacc   0.74 (  0.69)	train_corr   0.00 (  0.00)	l1 6.6490 (6.6667)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.02it/s] 15%|#5        | 4/26 [00:00<00:01, 13.12it/s] 35%|###4      | 9/26 [00:00<00:00, 25.00it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.69it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.69it/s] 92%|#########2| 24/26 [00:00<00:00, 38.43it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
Test: [   0/  26]	Loss 0.552 (0.552)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 0.552 (0.552)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.558 (0.553)	test_acc   0.68 (  0.70)	test_minacc   0.70 (  0.73)	test_majacc   0.68 (  0.69)	Loss_d 0.558 (0.553)	test_acc_d   0.68 (  0.70)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.68 (  0.69)	test_corr_d   0.38 (  0.40)
Test: [  20/  26]	Loss 0.507 (0.539)	test_acc   0.73 (  0.70)	test_minacc   0.81 (  0.74)	test_majacc   0.72 (  0.70)	Loss_d 0.507 (0.539)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.81 (  0.74)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.43 (  0.41)
Test: [  26/  26]	Loss 0.500 (0.534)	test_acc   0.74 (  0.71)	test_minacc   0.73 (  0.74)	test_majacc   0.74 (  0.70)	Loss_d 0.500 (0.534)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.74 (  0.70)	test_corr_d   0.48 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.33it/s]
Test: [  0/  1]	Loss 0.739 (0.739)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.71 (  0.71)	Loss_d 0.739 (0.739)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.739 (0.739)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.71 (  0.71)	Loss_d 0.739 (0.739)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 20/  1]	epoch_time 0.0430 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0426 (0.0423)
record: (train_acc, test_acc) (0.6684000222086907, 0.7160000205039978)
last accs (train_acc, test_acc) (0.7064000278115272, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.79it/s] 19%|#9        | 5/26 [00:00<00:01, 17.95it/s] 35%|###4      | 9/26 [00:00<00:00, 24.41it/s] 50%|#####     | 13/26 [00:00<00:00, 28.03it/s] 65%|######5   | 17/26 [00:00<00:00, 30.54it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.003 (0.001)	train_nll   0.60 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.49 ( 22.49)	train_acc   0.62 (  0.68)	train_minacc   0.85 (  0.79)	train_majacc   0.59 (  0.67)	train_corr   0.00 (  0.00)	l1 7.0115 (6.6692)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.58it/s] 19%|#9        | 5/26 [00:00<00:01, 15.34it/s] 38%|###8      | 10/26 [00:00<00:00, 23.90it/s]                                                38%|###8      | 10/26 [00:00<00:00, 23.90it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.76it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.52it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.52it/s] 96%|#########6| 25/26 [00:00<00:00, 38.76it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
Test: [   0/  26]	Loss 0.586 (0.586)	test_acc   0.65 (  0.65)	test_minacc   0.88 (  0.88)	test_majacc   0.60 (  0.60)	Loss_d 0.586 (0.586)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.630 (0.621)	test_acc   0.61 (  0.61)	test_minacc   0.80 (  0.80)	test_majacc   0.57 (  0.57)	Loss_d 0.630 (0.621)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.564 (0.608)	test_acc   0.66 (  0.62)	test_minacc   0.90 (  0.81)	test_majacc   0.62 (  0.58)	Loss_d 0.564 (0.608)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.90 (  0.81)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.585 (0.601)	test_acc   0.63 (  0.62)	test_minacc   0.82 (  0.81)	test_majacc   0.60 (  0.59)	Loss_d 0.585 (0.601)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.82 (  0.81)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.32 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.58 (  0.58)	Loss_d 0.695 (0.695)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.26 ( -0.26)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.58 (  0.58)	Loss_d 0.695 (0.695)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.26 ( -0.26)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/162/checkpoints/model_best.pth
Overall Timing[ 21/  1]	epoch_time 0.0397 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0393 (0.0421)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.12it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 35%|###4      | 9/26 [00:00<00:00, 28.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.54it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.002 (0.001)	train_nll   0.52 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.49 ( 22.49)	train_acc   0.70 (  0.67)	train_minacc   0.73 (  0.75)	train_majacc   0.70 (  0.66)	train_corr   0.00 (  0.00)	l1 6.2695 (6.4988)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 23%|##3       | 6/26 [00:00<00:00, 28.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.63it/s] 42%|####2     | 11/26 [00:00<00:00, 35.65it/s] 62%|######1   | 16/26 [00:00<00:00, 40.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.72it/s] 81%|########  | 21/26 [00:00<00:00, 40.15it/s]100%|##########| 26/26 [00:00<00:00, 42.47it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.65 (  0.65)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.607 (0.607)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.598 (0.597)	test_acc   0.64 (  0.64)	test_minacc   0.79 (  0.74)	test_majacc   0.61 (  0.62)	Loss_d 0.598 (0.597)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.32 (  0.35)
Test: [  20/  26]	Loss 0.575 (0.592)	test_acc   0.66 (  0.64)	test_minacc   0.79 (  0.74)	test_majacc   0.64 (  0.62)	Loss_d 0.575 (0.592)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.38 (  0.37)
Test: [  26/  26]	Loss 0.542 (0.588)	test_acc   0.68 (  0.65)	test_minacc   0.70 (  0.74)	test_majacc   0.68 (  0.63)	Loss_d 0.542 (0.588)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.70 (  0.74)	test_majacc_d   0.68 (  0.63)	test_corr_d   0.43 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.730 (0.730)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.730 (0.730)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.730 (0.730)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.64 (  0.64)	Loss_d 0.730 (0.730)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 22/  1]	epoch_time 0.0398 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0394 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6469000172615051, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 19%|#9        | 5/26 [00:00<00:00, 23.59it/s] 35%|###4      | 9/26 [00:00<00:00, 29.21it/s] 50%|#####     | 13/26 [00:00<00:00, 32.07it/s] 65%|######5   | 17/26 [00:00<00:00, 33.56it/s] 81%|########  | 21/26 [00:00<00:00, 34.30it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 29.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.304710388183594
set z to 5.989474868774414
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.002 (0.001)	train_nll   0.54 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.72 (  0.70)	train_minacc   0.76 (  0.72)	train_majacc   0.71 (  0.70)	train_corr   0.00 (  0.00)	l1 6.6055 (6.4082)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.76it/s] 15%|#5        | 4/26 [00:00<00:01, 16.89it/s] 35%|###4      | 9/26 [00:00<00:00, 30.28it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.17it/s] 92%|#########2| 24/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 33.53it/s]
Test: [   0/  26]	Loss 0.509 (0.509)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.73 (  0.73)	Loss_d 0.509 (0.509)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.563 (0.546)	test_acc   0.72 (  0.70)	test_minacc   0.79 (  0.71)	test_majacc   0.70 (  0.70)	Loss_d 0.563 (0.546)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.79 (  0.71)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.41 (  0.43)
Test: [  20/  26]	Loss 0.488 (0.531)	test_acc   0.73 (  0.71)	test_minacc   0.81 (  0.72)	test_majacc   0.72 (  0.71)	Loss_d 0.488 (0.531)	test_acc_d   0.73 (  0.71)	test_minacc_d   0.81 (  0.72)	test_majacc_d   0.72 (  0.71)	test_corr_d   0.46 (  0.45)
Test: [  26/  26]	Loss 0.519 (0.525)	test_acc   0.74 (  0.71)	test_minacc   0.79 (  0.72)	test_majacc   0.73 (  0.71)	Loss_d 0.519 (0.525)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.47 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 0.786 (0.786)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.786 (0.786)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.786 (0.786)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.786 (0.786)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 23/  1]	epoch_time 0.0416 (0.0429)	validation_time 0.0003 (0.0007)	train_time 0.0412 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.7141000309586525, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.17it/s] 19%|#9        | 5/26 [00:00<00:01, 15.90it/s] 35%|###4      | 9/26 [00:00<00:00, 21.98it/s] 50%|#####     | 13/26 [00:00<00:00, 25.41it/s] 65%|######5   | 17/26 [00:00<00:00, 27.92it/s] 81%|########  | 21/26 [00:00<00:00, 30.32it/s] 96%|#########6| 25/26 [00:00<00:00, 31.81it/s]100%|##########| 26/26 [00:01<00:00, 25.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.002 (0.000)	train_nll   0.52 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.68 (  0.68)	train_minacc   0.76 (  0.77)	train_majacc   0.66 (  0.66)	train_corr   0.00 (  0.00)	l1 6.3104 (6.4038)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.99it/s] 31%|###       | 8/26 [00:00<00:00, 36.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.27it/s] 50%|#####     | 13/26 [00:00<00:00, 39.84it/s] 69%|######9   | 18/26 [00:00<00:00, 41.86it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.86it/s] 88%|########8 | 23/26 [00:00<00:00, 39.79it/s]100%|##########| 26/26 [00:00<00:00, 37.56it/s]
Test: [   0/  26]	Loss 0.575 (0.575)	test_acc   0.64 (  0.64)	test_minacc   0.72 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.575 (0.575)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.586 (0.584)	test_acc   0.62 (  0.63)	test_minacc   0.77 (  0.78)	test_majacc   0.60 (  0.61)	Loss_d 0.586 (0.584)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.77 (  0.78)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.555 (0.578)	test_acc   0.66 (  0.64)	test_minacc   0.86 (  0.78)	test_majacc   0.63 (  0.62)	Loss_d 0.555 (0.578)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.86 (  0.78)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.39 (  0.38)
Test: [  26/  26]	Loss 0.532 (0.574)	test_acc   0.68 (  0.65)	test_minacc   0.76 (  0.78)	test_majacc   0.66 (  0.62)	Loss_d 0.532 (0.574)	test_acc_d   0.68 (  0.65)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.43 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.17it/s]
Test: [  0/  1]	Loss 0.750 (0.750)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.750 (0.750)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.750 (0.750)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.750 (0.750)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 24/  1]	epoch_time 0.0415 (0.0428)	validation_time 0.0004 (0.0007)	train_time 0.0410 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6451000151634216, 0.7020000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 19%|#9        | 5/26 [00:00<00:01, 17.57it/s] 35%|###4      | 9/26 [00:00<00:00, 23.94it/s] 50%|#####     | 13/26 [00:00<00:00, 27.59it/s] 65%|######5   | 17/26 [00:00<00:00, 29.80it/s] 81%|########  | 21/26 [00:00<00:00, 31.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.002 (0.001)	train_nll   0.55 (  0.53)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.50)	train_acc   0.70 (  0.70)	train_minacc   0.79 (  0.72)	train_majacc   0.69 (  0.69)	train_corr   0.00 (  0.00)	l1 6.6929 (6.4681)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s]  8%|7         | 2/26 [00:00<00:02,  8.85it/s] 27%|##6       | 7/26 [00:00<00:00, 25.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.70it/s] 46%|####6     | 12/26 [00:00<00:00, 31.61it/s] 65%|######5   | 17/26 [00:00<00:00, 36.29it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.29it/s] 85%|########4 | 22/26 [00:00<00:00, 38.89it/s]100%|##########| 26/26 [00:00<00:00, 31.60it/s]
Test: [   0/  26]	Loss 0.525 (0.525)	test_acc   0.71 (  0.71)	test_minacc   0.80 (  0.80)	test_majacc   0.70 (  0.70)	Loss_d 0.525 (0.525)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.583 (0.564)	test_acc   0.71 (  0.69)	test_minacc   0.77 (  0.69)	test_majacc   0.69 (  0.69)	Loss_d 0.583 (0.564)	test_acc_d   0.71 (  0.69)	test_minacc_d   0.77 (  0.69)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.39 (  0.42)
Test: [  20/  26]	Loss 0.505 (0.548)	test_acc   0.73 (  0.70)	test_minacc   0.76 (  0.70)	test_majacc   0.73 (  0.70)	Loss_d 0.505 (0.548)	test_acc_d   0.73 (  0.70)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.73 (  0.70)	test_corr_d   0.44 (  0.43)
Test: [  26/  26]	Loss 0.529 (0.541)	test_acc   0.72 (  0.71)	test_minacc   0.79 (  0.70)	test_majacc   0.71 (  0.71)	Loss_d 0.529 (0.541)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.79 (  0.70)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.47 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.785 (0.785)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.785 (0.785)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.785 (0.785)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.785 (0.785)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 25/  1]	epoch_time 0.0449 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0445 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.7063000305891037, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 19%|#9        | 5/26 [00:00<00:00, 22.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.92it/s] 50%|#####     | 13/26 [00:00<00:00, 28.82it/s] 65%|######5   | 17/26 [00:00<00:00, 30.83it/s] 81%|########  | 21/26 [00:00<00:00, 31.73it/s] 96%|#########6| 25/26 [00:00<00:00, 31.99it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.002 (0.000)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.70 (  0.67)	train_minacc   0.76 (  0.77)	train_majacc   0.69 (  0.66)	train_corr   0.00 (  0.00)	l1 6.2245 (6.3769)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.80it/s] 27%|##6       | 7/26 [00:00<00:00, 32.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.76it/s] 46%|####6     | 12/26 [00:00<00:00, 38.32it/s] 65%|######5   | 17/26 [00:00<00:00, 41.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.40it/s] 85%|########4 | 22/26 [00:00<00:00, 39.95it/s]100%|##########| 26/26 [00:00<00:00, 36.43it/s]
Test: [   0/  26]	Loss 0.586 (0.586)	test_acc   0.63 (  0.63)	test_minacc   0.72 (  0.72)	test_majacc   0.61 (  0.61)	Loss_d 0.586 (0.586)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.592 (0.592)	test_acc   0.63 (  0.63)	test_minacc   0.77 (  0.76)	test_majacc   0.60 (  0.60)	Loss_d 0.592 (0.592)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.77 (  0.76)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.35 (  0.37)
Test: [  20/  26]	Loss 0.568 (0.588)	test_acc   0.65 (  0.63)	test_minacc   0.83 (  0.77)	test_majacc   0.61 (  0.61)	Loss_d 0.568 (0.588)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.83 (  0.77)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.39 (  0.38)
Test: [  26/  26]	Loss 0.543 (0.585)	test_acc   0.67 (  0.64)	test_minacc   0.73 (  0.76)	test_majacc   0.66 (  0.62)	Loss_d 0.543 (0.585)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.73 (  0.76)	test_majacc_d   0.66 (  0.62)	test_corr_d   0.42 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.01it/s]
Test: [  0/  1]	Loss 0.763 (0.763)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.763 (0.763)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.763 (0.763)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.65)	Loss_d 0.763 (0.763)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 26/  1]	epoch_time 0.0408 (0.0428)	validation_time 0.0003 (0.0007)	train_time 0.0405 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6379000188708306, 0.6790000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.27it/s] 50%|#####     | 13/26 [00:00<00:00, 30.15it/s] 65%|######5   | 17/26 [00:00<00:00, 32.16it/s] 81%|########  | 21/26 [00:00<00:00, 33.28it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.001)	train_nll   0.53 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.51)	train_acc   0.72 (  0.69)	train_minacc   0.82 (  0.74)	train_majacc   0.71 (  0.68)	train_corr   0.00 (  0.00)	l1 6.8509 (6.4967)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.75it/s] 23%|##3       | 6/26 [00:00<00:01, 19.62it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.62it/s] 42%|####2     | 11/26 [00:00<00:00, 28.23it/s] 62%|######1   | 16/26 [00:00<00:00, 34.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.24it/s] 81%|########  | 21/26 [00:00<00:00, 34.98it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]100%|##########| 26/26 [00:00<00:00, 29.07it/s]
Test: [   0/  26]	Loss 0.526 (0.526)	test_acc   0.72 (  0.72)	test_minacc   0.82 (  0.82)	test_majacc   0.70 (  0.70)	Loss_d 0.526 (0.526)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.593 (0.572)	test_acc   0.69 (  0.69)	test_minacc   0.77 (  0.72)	test_majacc   0.67 (  0.68)	Loss_d 0.593 (0.572)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.67 (  0.68)	test_corr_d   0.38 (  0.41)
Test: [  20/  26]	Loss 0.511 (0.555)	test_acc   0.75 (  0.70)	test_minacc   0.81 (  0.73)	test_majacc   0.73 (  0.69)	Loss_d 0.511 (0.555)	test_acc_d   0.75 (  0.70)	test_minacc_d   0.81 (  0.73)	test_majacc_d   0.73 (  0.69)	test_corr_d   0.43 (  0.42)
Test: [  26/  26]	Loss 0.523 (0.547)	test_acc   0.72 (  0.70)	test_minacc   0.82 (  0.73)	test_majacc   0.71 (  0.70)	Loss_d 0.523 (0.547)	test_acc_d   0.72 (  0.70)	test_minacc_d   0.82 (  0.73)	test_majacc_d   0.71 (  0.70)	test_corr_d   0.47 (  0.43)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.803 (0.803)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.67 (  0.67)	Loss_d 0.803 (0.803)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.803 (0.803)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.67 (  0.67)	Loss_d 0.803 (0.803)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 27/  1]	epoch_time 0.0424 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.70340003657341, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.02it/s] 19%|#9        | 5/26 [00:00<00:01, 20.14it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 28.55it/s] 65%|######5   | 17/26 [00:00<00:00, 30.32it/s] 81%|########  | 21/26 [00:00<00:00, 31.74it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.68 (  0.67)	train_minacc   0.76 (  0.76)	train_majacc   0.66 (  0.66)	train_corr   0.00 (  0.00)	l1 6.0610 (6.3736)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 27%|##6       | 7/26 [00:00<00:00, 29.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.58it/s] 46%|####6     | 12/26 [00:00<00:00, 35.98it/s] 65%|######5   | 17/26 [00:00<00:00, 36.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.08it/s] 85%|########4 | 22/26 [00:00<00:00, 39.67it/s]100%|##########| 26/26 [00:00<00:00, 33.77it/s]
Test: [   0/  26]	Loss 0.619 (0.619)	test_acc   0.58 (  0.58)	test_minacc   0.62 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.619 (0.619)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.632 (0.625)	test_acc   0.59 (  0.60)	test_minacc   0.77 (  0.73)	test_majacc   0.56 (  0.58)	Loss_d 0.632 (0.625)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.77 (  0.73)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.31 (  0.33)
Test: [  20/  26]	Loss 0.609 (0.623)	test_acc   0.62 (  0.61)	test_minacc   0.88 (  0.74)	test_majacc   0.58 (  0.58)	Loss_d 0.609 (0.623)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.88 (  0.74)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.35 (  0.34)
Test: [  26/  26]	Loss 0.587 (0.621)	test_acc   0.64 (  0.61)	test_minacc   0.70 (  0.73)	test_majacc   0.63 (  0.58)	Loss_d 0.587 (0.621)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.63 (  0.58)	test_corr_d   0.37 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.31it/s]
Test: [  0/  1]	Loss 0.758 (0.758)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.758 (0.758)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.758 (0.758)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.758 (0.758)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 28/  1]	epoch_time 0.0409 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0405 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.607200010061264, 0.6610000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.56it/s] 15%|#5        | 4/26 [00:00<00:01, 17.57it/s] 27%|##6       | 7/26 [00:00<00:00, 22.56it/s] 42%|####2     | 11/26 [00:00<00:00, 26.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.51it/s] 88%|########8 | 23/26 [00:00<00:00, 31.82it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.001 (0.000)	train_nll   0.56 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.52)	train_acc   0.62 (  0.62)	train_minacc   0.76 (  0.79)	train_majacc   0.59 (  0.59)	train_corr   0.00 (  0.00)	l1 6.2014 (6.1202)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 15%|#5        | 4/26 [00:00<00:01, 14.19it/s] 35%|###4      | 9/26 [00:00<00:00, 25.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 25.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.59it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.10it/s] 92%|#########2| 24/26 [00:00<00:00, 36.90it/s]100%|##########| 26/26 [00:00<00:00, 30.92it/s]
Test: [   0/  26]	Loss 0.582 (0.582)	test_acc   0.60 (  0.60)	test_minacc   0.78 (  0.78)	test_majacc   0.56 (  0.56)	Loss_d 0.582 (0.582)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.604 (0.599)	test_acc   0.59 (  0.60)	test_minacc   0.84 (  0.81)	test_majacc   0.54 (  0.56)	Loss_d 0.604 (0.599)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.84 (  0.81)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.33 (  0.35)
Test: [  20/  26]	Loss 0.570 (0.595)	test_acc   0.62 (  0.60)	test_minacc   0.90 (  0.81)	test_majacc   0.57 (  0.57)	Loss_d 0.570 (0.595)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.90 (  0.81)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.36 (  0.35)
Test: [  26/  26]	Loss 0.571 (0.593)	test_acc   0.62 (  0.61)	test_minacc   0.76 (  0.81)	test_majacc   0.59 (  0.57)	Loss_d 0.571 (0.593)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.37 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 0.752 (0.752)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.58 (  0.58)	Loss_d 0.752 (0.752)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.752 (0.752)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.58 (  0.58)	Loss_d 0.752 (0.752)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0430 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0425 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6065000138282776, 0.7260000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.64it/s] 12%|#1        | 3/26 [00:00<00:01, 13.10it/s] 27%|##6       | 7/26 [00:00<00:00, 22.85it/s] 42%|####2     | 11/26 [00:00<00:00, 27.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.95it/s] 88%|########8 | 23/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.001 (0.001)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.54 ( 22.53)	train_acc   0.64 (  0.66)	train_minacc   0.61 (  0.61)	train_majacc   0.65 (  0.67)	train_corr   0.00 (  0.00)	l1 6.7488 (6.4209)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.52it/s] 27%|##6       | 7/26 [00:00<00:00, 31.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.72it/s] 46%|####6     | 12/26 [00:00<00:00, 37.98it/s] 65%|######5   | 17/26 [00:00<00:00, 40.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.00it/s] 85%|########4 | 22/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 36.42it/s]
Test: [   0/  26]	Loss 0.543 (0.543)	test_acc   0.71 (  0.71)	test_minacc   0.77 (  0.77)	test_majacc   0.70 (  0.70)	Loss_d 0.543 (0.543)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.603 (0.588)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.62)	test_majacc   0.66 (  0.66)	Loss_d 0.603 (0.588)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.35 (  0.39)
Test: [  20/  26]	Loss 0.541 (0.576)	test_acc   0.69 (  0.66)	test_minacc   0.71 (  0.64)	test_majacc   0.69 (  0.67)	Loss_d 0.541 (0.576)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.71 (  0.64)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.40 (  0.40)
Test: [  26/  26]	Loss 0.560 (0.570)	test_acc   0.67 (  0.67)	test_minacc   0.70 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.560 (0.570)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.70 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.43 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.40it/s]
Test: [  0/  1]	Loss 0.780 (0.780)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.780 (0.780)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.780 (0.780)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.65 (  0.65)	Loss_d 0.780 (0.780)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 30/  1]	epoch_time 0.0426 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6670000252723693, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 24.16it/s] 35%|###4      | 9/26 [00:00<00:00, 29.67it/s] 50%|#####     | 13/26 [00:00<00:00, 31.91it/s] 65%|######5   | 17/26 [00:00<00:00, 32.92it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.97it/s]100%|##########| 26/26 [00:00<00:00, 29.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.53 ( 22.53)	train_acc   0.72 (  0.69)	train_minacc   0.70 (  0.71)	train_majacc   0.72 (  0.68)	train_corr   0.00 (  0.00)	l1 6.3819 (6.5266)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 27%|##6       | 7/26 [00:00<00:00, 28.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.61it/s] 46%|####6     | 12/26 [00:00<00:00, 35.18it/s] 65%|######5   | 17/26 [00:00<00:00, 35.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.61it/s] 85%|########4 | 22/26 [00:00<00:00, 39.05it/s]100%|##########| 26/26 [00:00<00:00, 32.99it/s]
Test: [   0/  26]	Loss 0.588 (0.588)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.588 (0.588)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.584 (0.583)	test_acc   0.65 (  0.65)	test_minacc   0.74 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.584 (0.583)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.74 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.38 (  0.41)
Test: [  20/  26]	Loss 0.563 (0.578)	test_acc   0.65 (  0.65)	test_minacc   0.72 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.563 (0.578)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.42 (  0.42)
Test: [  26/  26]	Loss 0.530 (0.576)	test_acc   0.72 (  0.66)	test_minacc   0.70 (  0.70)	test_majacc   0.72 (  0.65)	Loss_d 0.530 (0.576)	test_acc_d   0.72 (  0.66)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.72 (  0.65)	test_corr_d   0.48 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 0.797 (0.797)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.797 (0.797)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.797 (0.797)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.797 (0.797)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 31/  1]	epoch_time 0.0447 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6564000138044357, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.68it/s] 12%|#1        | 3/26 [00:00<00:01, 12.08it/s] 27%|##6       | 7/26 [00:00<00:00, 21.62it/s] 42%|####2     | 11/26 [00:00<00:00, 25.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.81it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.52it/s] 88%|########8 | 23/26 [00:00<00:00, 31.58it/s]100%|##########| 26/26 [00:01<00:00, 25.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.55 ( 22.54)	train_acc   0.60 (  0.64)	train_minacc   0.79 (  0.78)	train_majacc   0.58 (  0.61)	train_corr   0.00 (  0.00)	l1 6.9109 (6.5054)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 15%|#5        | 4/26 [00:00<00:01, 17.84it/s] 38%|###8      | 10/26 [00:00<00:00, 34.27it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.27it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.28it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.88it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.88it/s] 96%|#########6| 25/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 33.71it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.62 (  0.62)	test_minacc   0.80 (  0.80)	test_majacc   0.59 (  0.59)	Loss_d 0.571 (0.571)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.619 (0.606)	test_acc   0.56 (  0.58)	test_minacc   0.77 (  0.80)	test_majacc   0.52 (  0.54)	Loss_d 0.619 (0.606)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.77 (  0.80)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.26 (  0.28)
Test: [  20/  26]	Loss 0.568 (0.597)	test_acc   0.62 (  0.59)	test_minacc   0.88 (  0.81)	test_majacc   0.58 (  0.55)	Loss_d 0.568 (0.597)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.88 (  0.81)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.30 (  0.29)
Test: [  26/  26]	Loss 0.559 (0.592)	test_acc   0.60 (  0.59)	test_minacc   0.76 (  0.81)	test_majacc   0.58 (  0.55)	Loss_d 0.559 (0.592)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.35 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.40it/s]
Test: [  0/  1]	Loss 0.744 (0.744)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.55 (  0.55)	Loss_d 0.744 (0.744)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.744 (0.744)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.55 (  0.55)	Loss_d 0.744 (0.744)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 32/  1]	epoch_time 0.0402 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0397 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.5912000080943107, 0.7260000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 15%|#5        | 4/26 [00:00<00:01, 18.19it/s] 31%|###       | 8/26 [00:00<00:00, 24.34it/s] 46%|####6     | 12/26 [00:00<00:00, 27.87it/s] 62%|######1   | 16/26 [00:00<00:00, 28.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.07it/s] 92%|#########2| 24/26 [00:00<00:00, 31.47it/s]100%|##########| 26/26 [00:00<00:00, 26.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.001)	train_nll   0.50 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.55)	train_acc   0.70 (  0.68)	train_minacc   0.76 (  0.76)	train_majacc   0.69 (  0.67)	train_corr   0.00 (  0.00)	l1 6.8769 (6.7344)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.23it/s] 27%|##6       | 7/26 [00:00<00:00, 29.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.80it/s] 46%|####6     | 12/26 [00:00<00:00, 36.83it/s] 65%|######5   | 17/26 [00:00<00:00, 39.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.59it/s] 85%|########4 | 22/26 [00:00<00:00, 38.21it/s]100%|##########| 26/26 [00:00<00:00, 35.41it/s]
Test: [   0/  26]	Loss 0.525 (0.525)	test_acc   0.71 (  0.71)	test_minacc   0.78 (  0.78)	test_majacc   0.70 (  0.70)	Loss_d 0.525 (0.525)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.597 (0.564)	test_acc   0.65 (  0.67)	test_minacc   0.74 (  0.73)	test_majacc   0.64 (  0.66)	Loss_d 0.597 (0.564)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.64 (  0.66)	test_corr_d   0.33 (  0.38)
Test: [  20/  26]	Loss 0.528 (0.559)	test_acc   0.72 (  0.68)	test_minacc   0.86 (  0.75)	test_majacc   0.69 (  0.66)	Loss_d 0.528 (0.559)	test_acc_d   0.72 (  0.68)	test_minacc_d   0.86 (  0.75)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.39 (  0.39)
Test: [  26/  26]	Loss 0.500 (0.551)	test_acc   0.70 (  0.68)	test_minacc   0.73 (  0.74)	test_majacc   0.69 (  0.67)	Loss_d 0.500 (0.551)	test_acc_d   0.70 (  0.68)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.46 (  0.39)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.796 (0.796)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.796 (0.796)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.796 (0.796)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.796 (0.796)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 33/  1]	epoch_time 0.0442 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0437 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6790000266432762, 0.6690000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.58it/s] 27%|##6       | 7/26 [00:00<00:00, 26.38it/s] 42%|####2     | 11/26 [00:00<00:00, 29.79it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.46it/s] 88%|########8 | 23/26 [00:00<00:00, 33.02it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.001 (0.000)	train_nll   0.54 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.56)	train_acc   0.66 (  0.66)	train_minacc   0.70 (  0.75)	train_majacc   0.66 (  0.64)	train_corr   0.00 (  0.00)	l1 6.2120 (6.4711)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.12it/s]  8%|7         | 2/26 [00:00<00:04,  4.94it/s] 27%|##6       | 7/26 [00:00<00:01, 17.74it/s]                                               27%|##6       | 7/26 [00:00<00:01, 17.74it/s] 46%|####6     | 12/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 85%|########4 | 22/26 [00:00<00:00, 36.54it/s]100%|##########| 26/26 [00:00<00:00, 27.25it/s]
Test: [   0/  26]	Loss 0.587 (0.587)	test_acc   0.61 (  0.61)	test_minacc   0.66 (  0.66)	test_majacc   0.59 (  0.59)	Loss_d 0.587 (0.587)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.604 (0.591)	test_acc   0.61 (  0.62)	test_minacc   0.77 (  0.75)	test_majacc   0.58 (  0.59)	Loss_d 0.604 (0.591)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.34 (  0.37)
Test: [  20/  26]	Loss 0.577 (0.592)	test_acc   0.63 (  0.62)	test_minacc   0.84 (  0.75)	test_majacc   0.59 (  0.59)	Loss_d 0.577 (0.592)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.84 (  0.75)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.36 (  0.37)
Test: [  26/  26]	Loss 0.556 (0.589)	test_acc   0.66 (  0.62)	test_minacc   0.73 (  0.75)	test_majacc   0.65 (  0.60)	Loss_d 0.556 (0.589)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.73 (  0.75)	test_majacc_d   0.65 (  0.60)	test_corr_d   0.43 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.64it/s]
Test: [  0/  1]	Loss 0.799 (0.799)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.66 (  0.66)	Loss_d 0.799 (0.799)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.799 (0.799)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.66 (  0.66)	Loss_d 0.799 (0.799)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 34/  1]	epoch_time 0.0413 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.620900015771389, 0.6730000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.50it/s] 19%|#9        | 5/26 [00:00<00:01, 16.59it/s] 35%|###4      | 9/26 [00:00<00:00, 22.44it/s] 50%|#####     | 13/26 [00:00<00:00, 26.46it/s] 65%|######5   | 17/26 [00:00<00:00, 29.05it/s] 81%|########  | 21/26 [00:00<00:00, 31.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:01<00:00, 25.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.56)	train_acc   0.63 (  0.66)	train_minacc   0.58 (  0.64)	train_majacc   0.64 (  0.66)	train_corr   0.00 (  0.00)	l1 6.7073 (6.3626)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 27%|##6       | 7/26 [00:00<00:00, 33.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.67it/s] 46%|####6     | 12/26 [00:00<00:00, 38.54it/s] 65%|######5   | 17/26 [00:00<00:00, 38.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.23it/s] 85%|########4 | 22/26 [00:00<00:00, 40.99it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.585 (0.585)	test_acc   0.68 (  0.68)	test_minacc   0.60 (  0.60)	test_majacc   0.69 (  0.69)	Loss_d 0.585 (0.585)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.631 (0.619)	test_acc   0.61 (  0.63)	test_minacc   0.49 (  0.49)	test_majacc   0.64 (  0.65)	Loss_d 0.631 (0.619)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.30 (  0.34)
Test: [  20/  26]	Loss 0.593 (0.614)	test_acc   0.66 (  0.64)	test_minacc   0.59 (  0.50)	test_majacc   0.68 (  0.66)	Loss_d 0.593 (0.614)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.33 (  0.35)
Test: [  26/  26]	Loss 0.593 (0.609)	test_acc   0.62 (  0.64)	test_minacc   0.58 (  0.50)	test_majacc   0.62 (  0.66)	Loss_d 0.593 (0.609)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.58 (  0.50)	test_majacc_d   0.62 (  0.66)	test_corr_d   0.40 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.795 (0.795)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.68 (  0.68)	Loss_d 0.795 (0.795)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.795 (0.795)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.68 (  0.68)	Loss_d 0.795 (0.795)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 35/  1]	epoch_time 0.0423 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6366000131964683, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.11it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.58it/s] 50%|#####     | 13/26 [00:00<00:00, 30.45it/s] 65%|######5   | 17/26 [00:00<00:00, 32.02it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.003 (0.001)	train_nll   0.49 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.57)	train_acc   0.72 (  0.68)	train_minacc   0.64 (  0.68)	train_majacc   0.73 (  0.68)	train_corr   0.00 (  0.00)	l1 6.3253 (6.5041)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.78it/s] 27%|##6       | 7/26 [00:00<00:00, 32.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.71it/s] 46%|####6     | 12/26 [00:00<00:00, 38.42it/s] 65%|######5   | 17/26 [00:00<00:00, 41.63it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.63it/s] 85%|########4 | 22/26 [00:00<00:00, 39.94it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]
Test: [   0/  26]	Loss 0.544 (0.544)	test_acc   0.68 (  0.68)	test_minacc   0.65 (  0.65)	test_majacc   0.69 (  0.69)	Loss_d 0.544 (0.544)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.558 (0.552)	test_acc   0.67 (  0.67)	test_minacc   0.75 (  0.71)	test_majacc   0.65 (  0.66)	Loss_d 0.558 (0.552)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.75 (  0.71)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.41 (  0.44)
Test: [  20/  26]	Loss 0.544 (0.554)	test_acc   0.67 (  0.67)	test_minacc   0.74 (  0.72)	test_majacc   0.66 (  0.66)	Loss_d 0.544 (0.554)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.74 (  0.72)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.43 (  0.45)
Test: [  26/  26]	Loss 0.502 (0.551)	test_acc   0.72 (  0.67)	test_minacc   0.67 (  0.71)	test_majacc   0.72 (  0.66)	Loss_d 0.502 (0.551)	test_acc_d   0.72 (  0.67)	test_minacc_d   0.67 (  0.71)	test_majacc_d   0.72 (  0.66)	test_corr_d   0.51 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.60it/s]
Test: [  0/  1]	Loss 0.836 (0.836)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.68 (  0.68)	Loss_d 0.836 (0.836)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.836 (0.836)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.68 (  0.68)	Loss_d 0.836 (0.836)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 36/  1]	epoch_time 0.0432 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6689000291228294, 0.6180000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 35%|###4      | 9/26 [00:00<00:00, 29.16it/s] 50%|#####     | 13/26 [00:00<00:00, 31.80it/s] 65%|######5   | 17/26 [00:00<00:00, 32.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.14it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 29.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.001)	train_nll   0.55 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.66 (  0.69)	train_minacc   0.58 (  0.65)	train_majacc   0.68 (  0.70)	train_corr   0.00 (  0.00)	l1 6.4660 (6.3542)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.62it/s] 31%|###       | 8/26 [00:00<00:00, 38.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.96it/s] 50%|#####     | 13/26 [00:00<00:00, 37.97it/s] 69%|######9   | 18/26 [00:00<00:00, 41.55it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.55it/s] 88%|########8 | 23/26 [00:00<00:00, 42.65it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.538 (0.538)	test_acc   0.71 (  0.71)	test_minacc   0.55 (  0.55)	test_majacc   0.74 (  0.74)	Loss_d 0.538 (0.538)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.45 (  0.45)
Test: [  10/  26]	Loss 0.611 (0.582)	test_acc   0.68 (  0.68)	test_minacc   0.49 (  0.53)	test_majacc   0.72 (  0.70)	Loss_d 0.611 (0.582)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.40 (  0.44)
Test: [  20/  26]	Loss 0.550 (0.576)	test_acc   0.69 (  0.68)	test_minacc   0.62 (  0.54)	test_majacc   0.70 (  0.70)	Loss_d 0.550 (0.576)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.45 (  0.45)
Test: [  26/  26]	Loss 0.551 (0.570)	test_acc   0.66 (  0.68)	test_minacc   0.58 (  0.54)	test_majacc   0.68 (  0.70)	Loss_d 0.551 (0.570)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.68 (  0.70)	test_corr_d   0.48 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 0.812 (0.812)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.71 (  0.71)	Loss_d 0.812 (0.812)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.812 (0.812)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.71 (  0.71)	Loss_d 0.812 (0.812)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 37/  1]	epoch_time 0.0445 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0441 (0.0421)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6794000310897828, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 19%|#9        | 5/26 [00:00<00:00, 24.21it/s] 35%|###4      | 9/26 [00:00<00:00, 29.15it/s] 50%|#####     | 13/26 [00:00<00:00, 31.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.56it/s] 81%|########  | 21/26 [00:00<00:00, 33.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 29.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.000)	train_nll   0.50 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.68 (  0.68)	train_minacc   0.79 (  0.73)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.1320 (6.2909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.49it/s] 23%|##3       | 6/26 [00:00<00:00, 29.33it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.33it/s] 42%|####2     | 11/26 [00:00<00:00, 35.77it/s] 62%|######1   | 16/26 [00:00<00:00, 39.31it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.31it/s] 81%|########  | 21/26 [00:00<00:00, 38.52it/s]100%|##########| 26/26 [00:00<00:00, 41.94it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]
Test: [   0/  26]	Loss 0.547 (0.547)	test_acc   0.65 (  0.65)	test_minacc   0.75 (  0.75)	test_majacc   0.62 (  0.62)	Loss_d 0.547 (0.547)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.557 (0.540)	test_acc   0.64 (  0.66)	test_minacc   0.80 (  0.78)	test_majacc   0.61 (  0.64)	Loss_d 0.557 (0.540)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.40 (  0.45)
Test: [  20/  26]	Loss 0.536 (0.541)	test_acc   0.68 (  0.66)	test_minacc   0.86 (  0.77)	test_majacc   0.65 (  0.64)	Loss_d 0.536 (0.541)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.86 (  0.77)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.43 (  0.46)
Test: [  26/  26]	Loss 0.506 (0.539)	test_acc   0.68 (  0.66)	test_minacc   0.76 (  0.77)	test_majacc   0.66 (  0.65)	Loss_d 0.506 (0.539)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.50 (  0.46)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.823 (0.823)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.69 (  0.69)	Loss_d 0.823 (0.823)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.823 (0.823)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.69 (  0.69)	Loss_d 0.823 (0.823)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 38/  1]	epoch_time 0.0436 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0433 (0.0421)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.664800019800663, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 19%|#9        | 5/26 [00:00<00:01, 18.05it/s] 38%|###8      | 10/26 [00:00<00:00, 26.82it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.84it/s] 69%|######9   | 18/26 [00:00<00:00, 31.42it/s] 85%|########4 | 22/26 [00:00<00:00, 32.16it/s]100%|##########| 26/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 26.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.001)	train_nll   0.50 (  0.52)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.59)	train_acc   0.71 (  0.70)	train_minacc   0.73 (  0.68)	train_majacc   0.71 (  0.70)	train_corr   0.00 (  0.00)	l1 6.2626 (6.2000)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.20it/s] 27%|##6       | 7/26 [00:00<00:00, 31.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.08it/s] 46%|####6     | 12/26 [00:00<00:00, 37.95it/s] 65%|######5   | 17/26 [00:00<00:00, 41.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.59it/s] 85%|########4 | 22/26 [00:00<00:00, 39.89it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.506 (0.506)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.72 (  0.72)	Loss_d 0.506 (0.506)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.560 (0.535)	test_acc   0.70 (  0.70)	test_minacc   0.72 (  0.68)	test_majacc   0.70 (  0.71)	Loss_d 0.560 (0.535)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.70 (  0.71)	test_corr_d   0.41 (  0.45)
Test: [  20/  26]	Loss 0.506 (0.526)	test_acc   0.74 (  0.71)	test_minacc   0.78 (  0.69)	test_majacc   0.73 (  0.71)	Loss_d 0.506 (0.526)	test_acc_d   0.74 (  0.71)	test_minacc_d   0.78 (  0.69)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.46 (  0.46)
Test: [  26/  26]	Loss 0.504 (0.524)	test_acc   0.68 (  0.71)	test_minacc   0.73 (  0.69)	test_majacc   0.68 (  0.71)	Loss_d 0.504 (0.524)	test_acc_d   0.68 (  0.71)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.68 (  0.71)	test_corr_d   0.51 (  0.47)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.847 (0.847)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.70 (  0.70)	Loss_d 0.847 (0.847)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.847 (0.847)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.70 (  0.70)	Loss_d 0.847 (0.847)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 39/  1]	epoch_time 0.0385 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0380 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.708200034737587, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 30.38it/s] 65%|######5   | 17/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.001)	train_nll   0.54 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.67 (  0.66)	train_minacc   0.82 (  0.77)	train_majacc   0.65 (  0.64)	train_corr   0.00 (  0.00)	l1 5.9292 (6.0529)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.47it/s] 27%|##6       | 7/26 [00:00<00:00, 27.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.99it/s] 46%|####6     | 12/26 [00:00<00:00, 35.66it/s] 69%|######9   | 18/26 [00:00<00:00, 37.48it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.48it/s] 88%|########8 | 23/26 [00:00<00:00, 40.03it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.565 (0.565)	test_acc   0.64 (  0.64)	test_minacc   0.77 (  0.77)	test_majacc   0.61 (  0.61)	Loss_d 0.565 (0.565)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.577 (0.562)	test_acc   0.62 (  0.63)	test_minacc   0.79 (  0.78)	test_majacc   0.59 (  0.61)	Loss_d 0.577 (0.562)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.79 (  0.78)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.39 (  0.43)
Test: [  20/  26]	Loss 0.554 (0.561)	test_acc   0.65 (  0.64)	test_minacc   0.83 (  0.79)	test_majacc   0.62 (  0.61)	Loss_d 0.554 (0.561)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.83 (  0.79)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.43 (  0.43)
Test: [  26/  26]	Loss 0.541 (0.561)	test_acc   0.67 (  0.64)	test_minacc   0.82 (  0.78)	test_majacc   0.65 (  0.61)	Loss_d 0.541 (0.561)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.82 (  0.78)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.45 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.30it/s]
Test: [  0/  1]	Loss 0.821 (0.821)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.821 (0.821)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.821 (0.821)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.65)	Loss_d 0.821 (0.821)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 40/  1]	epoch_time 0.0406 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0402 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6382000176906586, 0.6690000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.31it/s] 19%|#9        | 5/26 [00:00<00:01, 11.24it/s] 35%|###4      | 9/26 [00:00<00:00, 17.89it/s] 50%|#####     | 13/26 [00:00<00:00, 22.91it/s] 65%|######5   | 17/26 [00:00<00:00, 26.67it/s] 81%|########  | 21/26 [00:00<00:00, 29.41it/s] 96%|#########6| 25/26 [00:01<00:00, 31.08it/s]100%|##########| 26/26 [00:01<00:00, 21.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.001 (0.001)	train_nll   0.52 (  0.55)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.61)	train_acc   0.66 (  0.64)	train_minacc   0.82 (  0.80)	train_majacc   0.64 (  0.61)	train_corr   0.00 (  0.00)	l1 6.2576 (6.0461)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.85it/s] 31%|###       | 8/26 [00:00<00:00, 32.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.40it/s] 50%|#####     | 13/26 [00:00<00:00, 37.98it/s] 69%|######9   | 18/26 [00:00<00:00, 41.23it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.23it/s] 88%|########8 | 23/26 [00:00<00:00, 42.65it/s]100%|##########| 26/26 [00:00<00:00, 37.31it/s]
Test: [   0/  26]	Loss 0.526 (0.526)	test_acc   0.69 (  0.69)	test_minacc   0.82 (  0.82)	test_majacc   0.66 (  0.66)	Loss_d 0.526 (0.526)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.41 (  0.41)
Test: [  10/  26]	Loss 0.571 (0.541)	test_acc   0.62 (  0.66)	test_minacc   0.79 (  0.81)	test_majacc   0.59 (  0.63)	Loss_d 0.571 (0.541)	test_acc_d   0.62 (  0.66)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.59 (  0.63)	test_corr_d   0.36 (  0.41)
Test: [  20/  26]	Loss 0.521 (0.540)	test_acc   0.67 (  0.65)	test_minacc   0.86 (  0.80)	test_majacc   0.64 (  0.63)	Loss_d 0.521 (0.540)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.86 (  0.80)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.41 (  0.41)
Test: [  26/  26]	Loss 0.513 (0.537)	test_acc   0.67 (  0.66)	test_minacc   0.82 (  0.80)	test_majacc   0.65 (  0.63)	Loss_d 0.513 (0.537)	test_acc_d   0.67 (  0.66)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.44 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.85it/s]
Test: [  0/  1]	Loss 0.804 (0.804)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.61 (  0.61)	Loss_d 0.804 (0.804)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.804 (0.804)	test_acc   0.73 (  0.73)	test_minacc   0.74 (  0.74)	test_majacc   0.61 (  0.61)	Loss_d 0.804 (0.804)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 41/  1]	epoch_time 0.0431 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6588000257611275, 0.7260000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 15%|#5        | 4/26 [00:00<00:01, 17.49it/s] 31%|###       | 8/26 [00:00<00:00, 24.86it/s] 46%|####6     | 12/26 [00:00<00:00, 28.09it/s] 62%|######1   | 16/26 [00:00<00:00, 30.65it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.92it/s] 92%|#########2| 24/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.001)	train_nll   0.60 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.62)	train_acc   0.55 (  0.64)	train_minacc   0.79 (  0.78)	train_majacc   0.51 (  0.61)	train_corr   0.00 (  0.00)	l1 6.0251 (6.1285)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.69it/s] 31%|###       | 8/26 [00:00<00:00, 37.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.66it/s] 50%|#####     | 13/26 [00:00<00:00, 40.55it/s] 69%|######9   | 18/26 [00:00<00:00, 41.34it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.34it/s] 88%|########8 | 23/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 37.68it/s]
Test: [   0/  26]	Loss 0.614 (0.614)	test_acc   0.54 (  0.54)	test_minacc   0.86 (  0.86)	test_majacc   0.48 (  0.48)	Loss_d 0.614 (0.614)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.610 (0.611)	test_acc   0.53 (  0.53)	test_minacc   0.85 (  0.84)	test_majacc   0.47 (  0.47)	Loss_d 0.610 (0.611)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.29 (  0.30)
Test: [  20/  26]	Loss 0.591 (0.610)	test_acc   0.54 (  0.52)	test_minacc   0.91 (  0.83)	test_majacc   0.48 (  0.47)	Loss_d 0.591 (0.610)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.91 (  0.83)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.29 (  0.30)
Test: [  26/  26]	Loss 0.593 (0.608)	test_acc   0.53 (  0.53)	test_minacc   0.76 (  0.83)	test_majacc   0.50 (  0.47)	Loss_d 0.593 (0.608)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.33 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.25it/s]
Test: [  0/  1]	Loss 0.790 (0.790)	test_acc   0.74 (  0.74)	test_minacc   0.77 (  0.77)	test_majacc   0.47 (  0.47)	Loss_d 0.790 (0.790)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.790 (0.790)	test_acc   0.74 (  0.74)	test_minacc   0.77 (  0.77)	test_majacc   0.47 (  0.47)	Loss_d 0.790 (0.790)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 42/  1]	epoch_time 0.0430 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0427 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.5288000147342682, 0.7440000176429749)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.73it/s] 19%|#9        | 5/26 [00:00<00:01, 12.92it/s] 35%|###4      | 9/26 [00:00<00:00, 20.52it/s] 50%|#####     | 13/26 [00:00<00:00, 25.08it/s] 65%|######5   | 17/26 [00:00<00:00, 27.82it/s] 81%|########  | 21/26 [00:00<00:00, 29.45it/s] 96%|#########6| 25/26 [00:01<00:00, 31.16it/s]100%|##########| 26/26 [00:01<00:00, 23.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.001 (0.000)	train_nll   0.62 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.61 (  0.61)	train_minacc   0.48 (  0.61)	train_majacc   0.63 (  0.61)	train_corr   0.00 (  0.00)	l1 6.0776 (5.9497)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.53it/s] 31%|###       | 8/26 [00:00<00:00, 34.63it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.63it/s] 50%|#####     | 13/26 [00:00<00:00, 38.80it/s] 69%|######9   | 18/26 [00:00<00:00, 42.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.05it/s] 88%|########8 | 23/26 [00:00<00:00, 40.88it/s]100%|##########| 26/26 [00:00<00:00, 36.81it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.64 (  0.64)	test_minacc   0.54 (  0.54)	test_majacc   0.66 (  0.66)	Loss_d 0.631 (0.631)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.644 (0.636)	test_acc   0.61 (  0.61)	test_minacc   0.43 (  0.44)	test_majacc   0.64 (  0.64)	Loss_d 0.644 (0.636)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.43 (  0.44)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.30 (  0.32)
Test: [  20/  26]	Loss 0.615 (0.634)	test_acc   0.64 (  0.62)	test_minacc   0.53 (  0.45)	test_majacc   0.66 (  0.65)	Loss_d 0.615 (0.634)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.53 (  0.45)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.28 (  0.32)
Test: [  26/  26]	Loss 0.619 (0.630)	test_acc   0.61 (  0.62)	test_minacc   0.48 (  0.46)	test_majacc   0.63 (  0.65)	Loss_d 0.619 (0.630)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.48 (  0.46)	test_majacc_d   0.63 (  0.65)	test_corr_d   0.37 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 0.805 (0.805)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.63 (  0.63)	Loss_d 0.805 (0.805)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.805 (0.805)	test_acc   0.45 (  0.45)	test_minacc   0.43 (  0.43)	test_majacc   0.63 (  0.63)	Loss_d 0.805 (0.805)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0393 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0389 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6218000090122223, 0.4520000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 35%|###4      | 9/26 [00:00<00:00, 25.77it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 33.35it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.001)	train_nll   0.54 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.64)	train_acc   0.65 (  0.62)	train_minacc   0.73 (  0.74)	train_majacc   0.64 (  0.61)	train_corr   0.00 (  0.00)	l1 5.9935 (5.8798)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.51it/s] 27%|##6       | 7/26 [00:00<00:00, 30.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.17it/s] 46%|####6     | 12/26 [00:00<00:00, 37.03it/s] 65%|######5   | 17/26 [00:00<00:00, 40.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.09it/s]100%|##########| 26/26 [00:00<00:00, 35.67it/s]
Test: [   0/  26]	Loss 0.595 (0.595)	test_acc   0.58 (  0.58)	test_minacc   0.74 (  0.74)	test_majacc   0.55 (  0.55)	Loss_d 0.595 (0.595)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.588 (0.583)	test_acc   0.59 (  0.60)	test_minacc   0.79 (  0.77)	test_majacc   0.56 (  0.57)	Loss_d 0.588 (0.583)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.33 (  0.35)
Test: [  20/  26]	Loss 0.583 (0.587)	test_acc   0.60 (  0.60)	test_minacc   0.81 (  0.76)	test_majacc   0.57 (  0.57)	Loss_d 0.583 (0.587)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.81 (  0.76)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.32 (  0.36)
Test: [  26/  26]	Loss 0.554 (0.585)	test_acc   0.63 (  0.60)	test_minacc   0.73 (  0.75)	test_majacc   0.61 (  0.58)	Loss_d 0.554 (0.585)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.73 (  0.75)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.41 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 0.848 (0.848)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.58 (  0.58)	Loss_d 0.848 (0.848)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.848 (0.848)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.58 (  0.58)	Loss_d 0.848 (0.848)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 44/  1]	epoch_time 0.0404 (0.0425)	validation_time 0.0003 (0.0005)	train_time 0.0401 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.60340000385046, 0.6640000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.55it/s] 19%|#9        | 5/26 [00:00<00:01, 17.14it/s] 35%|###4      | 9/26 [00:00<00:00, 23.95it/s] 50%|#####     | 13/26 [00:00<00:00, 27.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.001)	train_nll   0.55 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.65)	train_acc   0.67 (  0.66)	train_minacc   0.61 (  0.65)	train_majacc   0.68 (  0.66)	train_corr   0.00 (  0.00)	l1 5.8733 (5.9445)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 23%|##3       | 6/26 [00:00<00:00, 24.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.93it/s] 42%|####2     | 11/26 [00:00<00:00, 32.70it/s] 62%|######1   | 16/26 [00:00<00:00, 37.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.16it/s] 81%|########  | 21/26 [00:00<00:00, 37.23it/s]100%|##########| 26/26 [00:00<00:00, 32.49it/s]
Test: [   0/  26]	Loss 0.547 (0.547)	test_acc   0.71 (  0.71)	test_minacc   0.60 (  0.60)	test_majacc   0.73 (  0.73)	Loss_d 0.547 (0.547)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.42 (  0.42)
Test: [  10/  26]	Loss 0.585 (0.574)	test_acc   0.66 (  0.66)	test_minacc   0.49 (  0.50)	test_majacc   0.70 (  0.69)	Loss_d 0.585 (0.574)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.70 (  0.69)	test_corr_d   0.39 (  0.42)
Test: [  20/  26]	Loss 0.576 (0.578)	test_acc   0.67 (  0.67)	test_minacc   0.55 (  0.51)	test_majacc   0.69 (  0.69)	Loss_d 0.576 (0.578)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.40 (  0.42)
Test: [  26/  26]	Loss 0.563 (0.575)	test_acc   0.66 (  0.67)	test_minacc   0.58 (  0.52)	test_majacc   0.67 (  0.69)	Loss_d 0.563 (0.575)	test_acc_d   0.66 (  0.67)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.67 (  0.69)	test_corr_d   0.45 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.93it/s]
Test: [  0/  1]	Loss 0.821 (0.821)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.71 (  0.71)	Loss_d 0.821 (0.821)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.821 (0.821)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.71 (  0.71)	Loss_d 0.821 (0.821)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 45/  1]	epoch_time 0.0420 (0.0425)	validation_time 0.0007 (0.0005)	train_time 0.0414 (0.0419)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6667000302672386, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 19%|#9        | 5/26 [00:00<00:00, 23.81it/s] 35%|###4      | 9/26 [00:00<00:00, 29.50it/s] 50%|#####     | 13/26 [00:00<00:00, 32.35it/s] 65%|######5   | 17/26 [00:00<00:00, 33.45it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.72it/s]100%|##########| 26/26 [00:00<00:00, 29.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.54 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.66 (  0.64)	train_minacc   0.82 (  0.71)	train_majacc   0.64 (  0.62)	train_corr   0.00 (  0.00)	l1 5.7647 (5.8314)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.54it/s] 27%|##6       | 7/26 [00:00<00:00, 33.06it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.06it/s] 46%|####6     | 12/26 [00:00<00:00, 39.90it/s] 65%|######5   | 17/26 [00:00<00:00, 42.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.73it/s] 85%|########4 | 22/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 37.58it/s]
Test: [   0/  26]	Loss 0.582 (0.582)	test_acc   0.60 (  0.60)	test_minacc   0.75 (  0.75)	test_majacc   0.57 (  0.57)	Loss_d 0.582 (0.582)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.571 (0.563)	test_acc   0.62 (  0.62)	test_minacc   0.82 (  0.80)	test_majacc   0.58 (  0.59)	Loss_d 0.571 (0.563)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.82 (  0.80)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.36 (  0.40)
Test: [  20/  26]	Loss 0.572 (0.569)	test_acc   0.60 (  0.61)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.59)	Loss_d 0.572 (0.569)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.38 (  0.40)
Test: [  26/  26]	Loss 0.540 (0.568)	test_acc   0.66 (  0.62)	test_minacc   0.79 (  0.77)	test_majacc   0.64 (  0.59)	Loss_d 0.540 (0.568)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.43 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 0.838 (0.838)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.59 (  0.59)	Loss_d 0.838 (0.838)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.838 (0.838)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.59 (  0.59)	Loss_d 0.838 (0.838)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0403 (0.0425)	validation_time 0.0004 (0.0005)	train_time 0.0399 (0.0418)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6175000076293945, 0.6790000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 23.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.87it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.44it/s] 96%|#########6| 25/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.56 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.60 (  0.61)	train_minacc   0.85 (  0.80)	train_majacc   0.56 (  0.58)	train_corr   0.00 (  0.00)	l1 5.9210 (5.7266)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.63it/s] 27%|##6       | 7/26 [00:00<00:00, 22.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.41it/s] 46%|####6     | 12/26 [00:00<00:00, 30.76it/s] 65%|######5   | 17/26 [00:00<00:00, 35.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.76it/s] 85%|########4 | 22/26 [00:00<00:00, 39.32it/s]100%|##########| 26/26 [00:00<00:00, 31.51it/s]
Test: [   0/  26]	Loss 0.562 (0.562)	test_acc   0.65 (  0.65)	test_minacc   0.85 (  0.85)	test_majacc   0.61 (  0.61)	Loss_d 0.562 (0.562)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.34 (  0.34)
Test: [  10/  26]	Loss 0.587 (0.573)	test_acc   0.57 (  0.60)	test_minacc   0.75 (  0.81)	test_majacc   0.54 (  0.56)	Loss_d 0.587 (0.573)	test_acc_d   0.57 (  0.60)	test_minacc_d   0.75 (  0.81)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.31 (  0.35)
Test: [  20/  26]	Loss 0.586 (0.582)	test_acc   0.59 (  0.59)	test_minacc   0.86 (  0.80)	test_majacc   0.55 (  0.56)	Loss_d 0.586 (0.582)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.86 (  0.80)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.32 (  0.34)
Test: [  26/  26]	Loss 0.567 (0.580)	test_acc   0.60 (  0.59)	test_minacc   0.85 (  0.81)	test_majacc   0.56 (  0.56)	Loss_d 0.567 (0.580)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.85 (  0.81)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.37 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.83it/s]
Test: [  0/  1]	Loss 0.794 (0.794)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.56 (  0.56)	Loss_d 0.794 (0.794)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.794 (0.794)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.56 (  0.56)	Loss_d 0.794 (0.794)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 47/  1]	epoch_time 0.0419 (0.0425)	validation_time 0.0004 (0.0005)	train_time 0.0415 (0.0418)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.5936000065803528, 0.7190000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 19%|#9        | 5/26 [00:00<00:01, 17.31it/s] 35%|###4      | 9/26 [00:00<00:00, 23.80it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 65%|######5   | 17/26 [00:00<00:00, 29.62it/s] 81%|########  | 21/26 [00:00<00:00, 30.97it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:01<00:00, 25.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.001 (0.000)	train_nll   0.55 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.68 (  0.62)	train_minacc   0.76 (  0.78)	train_majacc   0.66 (  0.60)	train_corr   0.00 (  0.00)	l1 5.6239 (5.8834)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.40it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 42%|####2     | 11/26 [00:00<00:00, 35.65it/s] 62%|######1   | 16/26 [00:00<00:00, 39.49it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.49it/s] 81%|########  | 21/26 [00:00<00:00, 40.16it/s]100%|##########| 26/26 [00:00<00:00, 42.92it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.577 (0.577)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.577 (0.577)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.557 (0.557)	test_acc   0.64 (  0.64)	test_minacc   0.79 (  0.75)	test_majacc   0.61 (  0.62)	Loss_d 0.557 (0.557)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.79 (  0.75)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.39 (  0.42)
Test: [  20/  26]	Loss 0.578 (0.566)	test_acc   0.62 (  0.64)	test_minacc   0.74 (  0.74)	test_majacc   0.60 (  0.62)	Loss_d 0.578 (0.566)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.39 (  0.42)
Test: [  26/  26]	Loss 0.549 (0.566)	test_acc   0.66 (  0.64)	test_minacc   0.70 (  0.74)	test_majacc   0.65 (  0.62)	Loss_d 0.549 (0.566)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.70 (  0.74)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.46 (  0.42)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 0.821 (0.821)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.63 (  0.63)	Loss_d 0.821 (0.821)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.821 (0.821)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.63 (  0.63)	Loss_d 0.821 (0.821)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 48/  1]	epoch_time 0.0504 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0499 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6356000146865844, 0.6700000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.12it/s] 23%|##3       | 6/26 [00:00<00:01, 18.73it/s] 38%|###8      | 10/26 [00:00<00:00, 24.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 27.47it/s] 69%|######9   | 18/26 [00:00<00:00, 29.73it/s] 85%|########4 | 22/26 [00:00<00:00, 31.09it/s]100%|##########| 26/26 [00:00<00:00, 32.22it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.57 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.68)	train_acc   0.64 (  0.62)	train_minacc   0.61 (  0.71)	train_majacc   0.65 (  0.60)	train_corr   0.00 (  0.00)	l1 5.6391 (5.7280)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.20it/s] 27%|##6       | 7/26 [00:00<00:00, 33.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.73it/s] 46%|####6     | 12/26 [00:00<00:00, 39.53it/s] 65%|######5   | 17/26 [00:00<00:00, 42.07it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.07it/s] 85%|########4 | 22/26 [00:00<00:00, 39.97it/s]100%|##########| 26/26 [00:00<00:00, 37.23it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.69 (  0.69)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.571 (0.571)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.575 (0.571)	test_acc   0.66 (  0.66)	test_minacc   0.49 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.575 (0.571)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.40 (  0.41)
Test: [  20/  26]	Loss 0.594 (0.579)	test_acc   0.67 (  0.67)	test_minacc   0.57 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.594 (0.579)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.38 (  0.41)
Test: [  26/  26]	Loss 0.579 (0.579)	test_acc   0.64 (  0.66)	test_minacc   0.55 (  0.53)	test_majacc   0.65 (  0.69)	Loss_d 0.579 (0.579)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.65 (  0.69)	test_corr_d   0.43 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.43it/s]
Test: [  0/  1]	Loss 0.799 (0.799)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.799 (0.799)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.799 (0.799)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.799 (0.799)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 49/  1]	epoch_time 0.0429 (0.0426)	validation_time 0.0003 (0.0005)	train_time 0.0425 (0.0420)
record: (train_acc, test_acc) (0.6204000135064125, 0.7310000061988831)
last accs (train_acc, test_acc) (0.6649000263810158, 0.5380000472068787)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.167 MB of 0.167 MB uploadedwandb: \ 0.167 MB of 0.167 MB uploadedwandb: | 0.167 MB of 0.167 MB uploadedwandb: / 0.167 MB of 0.167 MB uploadedwandb: - 0.167 MB of 0.167 MB uploadedwandb: \ 0.167 MB of 0.167 MB uploadedwandb: | 0.167 MB of 0.167 MB uploadedwandb: / 0.167 MB of 0.167 MB uploadedwandb: - 0.167 MB of 0.167 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpjlvs2lvf'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_205350-0u9rnjnb
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/0u9rnjnb
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1196
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6018, 3, 32, 32) (5982, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.74s/it] 19%|#9        | 5/26 [00:01<00:05,  3.55it/s] 35%|###4      | 9/26 [00:01<00:02,  7.10it/s] 50%|#####     | 13/26 [00:02<00:01, 10.93it/s] 65%|######5   | 17/26 [00:02<00:00, 14.86it/s] 81%|########  | 21/26 [00:02<00:00, 18.63it/s] 96%|#########6| 25/26 [00:02<00:00, 22.18it/s]100%|##########| 26/26 [00:02<00:00,  9.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.398 (0.535)	train_nll   0.40 (  0.53)	train_penalty   0.06 (  0.17)	weight_norm  20.93 ( 18.12)	train_acc   0.86 (  0.80)	train_minacc   0.03 (  0.08)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 8.2447 (8.1427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 23%|##3       | 6/26 [00:00<00:00, 27.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.57it/s] 42%|####2     | 11/26 [00:00<00:00, 35.33it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.85it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.85it/s] 96%|#########6| 25/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 33.27it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.406 (0.406)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.445 (0.416)	test_acc   0.82 (  0.84)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.445 (0.416)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.403 (0.417)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.403 (0.417)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.394 (0.419)	test_acc   0.86 (  0.84)	test_minacc   0.03 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.394 (0.419)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.03 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]
Test: [  0/  1]	Loss 1.622 (1.622)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.622 (1.622)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.622 (1.622)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.622 (1.622)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0773 (0.0773)	validation_time 0.0068 (0.0068)	train_time 0.0689 (0.0689)
record: (train_acc, test_acc) (0.8441000233888626, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8441000233888626, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:00, 21.95it/s] 35%|###4      | 9/26 [00:00<00:00, 27.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.95it/s] 65%|######5   | 17/26 [00:00<00:00, 31.82it/s] 81%|########  | 21/26 [00:00<00:00, 32.78it/s] 96%|#########6| 25/26 [00:00<00:00, 33.35it/s]100%|##########| 26/26 [00:00<00:00, 28.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.387 (0.417)	train_nll   0.39 (  0.42)	train_penalty   0.07 (  0.06)	weight_norm  22.07 ( 21.72)	train_acc   0.86 (  0.84)	train_minacc   0.03 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.7725 (8.6151)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.11it/s] 23%|##3       | 6/26 [00:00<00:00, 26.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.51it/s] 42%|####2     | 11/26 [00:00<00:00, 35.63it/s] 65%|######5   | 17/26 [00:00<00:00, 41.73it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.73it/s] 85%|########4 | 22/26 [00:00<00:00, 42.69it/s]100%|##########| 26/26 [00:00<00:00, 35.05it/s]
Test: [   0/  26]	Loss 0.395 (0.395)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.395 (0.395)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.432 (0.404)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.432 (0.404)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.383 (0.404)	test_acc   0.86 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.383 (0.404)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
Test: [  26/  26]	Loss 0.383 (0.406)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.383 (0.406)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 1.756 (1.756)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.756 (1.756)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.756 (1.756)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.756 (1.756)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0396 (0.0585)	validation_time 0.0005 (0.0036)	train_time 0.0391 (0.0540)
record: (train_acc, test_acc) (0.8441000233888626, 0.11100000888109207)
last accs (train_acc, test_acc) (0.8465000232458114, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.54it/s] 19%|#9        | 5/26 [00:00<00:01, 19.53it/s] 35%|###4      | 9/26 [00:00<00:00, 26.13it/s] 50%|#####     | 13/26 [00:00<00:00, 29.98it/s] 65%|######5   | 17/26 [00:00<00:00, 32.23it/s] 81%|########  | 21/26 [00:00<00:00, 33.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.69it/s]100%|##########| 26/26 [00:00<00:00, 28.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.378 (0.405)	train_nll   0.38 (  0.40)	train_penalty   0.06 (  0.06)	weight_norm  22.19 ( 22.15)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.7990 (8.7584)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.81it/s] 31%|###       | 8/26 [00:00<00:00, 38.88it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.82it/s] 92%|#########2| 24/26 [00:00<00:00, 47.24it/s]100%|##########| 26/26 [00:00<00:00, 42.75it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.85 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.381 (0.381)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.420 (0.391)	test_acc   0.83 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.420 (0.391)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.351 (0.385)	test_acc   0.86 (  0.85)	test_minacc   0.07 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.351 (0.385)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.07 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.370 (0.388)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.370 (0.388)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.40it/s]
Test: [  0/  1]	Loss 1.716 (1.716)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.716 (1.716)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0401 (0.0523)	validation_time 0.0004 (0.0026)	train_time 0.0397 (0.0492)
record: (train_acc, test_acc) (0.8500000209212303, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8500000209212303, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:13,  1.83it/s] 19%|#9        | 5/26 [00:00<00:02,  9.49it/s] 35%|###4      | 9/26 [00:00<00:01, 15.96it/s] 50%|#####     | 13/26 [00:00<00:00, 21.03it/s] 65%|######5   | 17/26 [00:00<00:00, 25.01it/s] 81%|########  | 21/26 [00:01<00:00, 28.16it/s] 96%|#########6| 25/26 [00:01<00:00, 30.40it/s]100%|##########| 26/26 [00:01<00:00, 20.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.366 (0.385)	train_nll   0.37 (  0.39)	train_penalty   0.05 (  0.05)	weight_norm  22.24 ( 22.22)	train_acc   0.87 (  0.85)	train_minacc   0.14 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.8227 (8.7583)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.18it/s] 27%|##6       | 7/26 [00:00<00:00, 33.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.64it/s] 46%|####6     | 12/26 [00:00<00:00, 40.18it/s] 65%|######5   | 17/26 [00:00<00:00, 42.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.16it/s] 85%|########4 | 22/26 [00:00<00:00, 43.86it/s]100%|##########| 26/26 [00:00<00:00, 38.04it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 0.352 (0.352)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.392 (0.362)	test_acc   0.84 (  0.85)	test_minacc   0.20 (  0.17)	test_majacc   0.98 (  0.97)	Loss_d 0.392 (0.362)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.20 (  0.17)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.294 (0.351)	test_acc   0.88 (  0.86)	test_minacc   0.25 (  0.19)	test_majacc   0.99 (  0.98)	Loss_d 0.294 (0.351)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.25 (  0.19)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.351 (0.354)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.351 (0.354)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.67it/s]
Test: [  0/  1]	Loss 1.518 (1.518)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.518 (1.518)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.518 (1.518)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.518 (1.518)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0453 (0.0506)	validation_time 0.0003 (0.0020)	train_time 0.0450 (0.0482)
record: (train_acc, test_acc) (0.8555000240802765, 0.1850000023841858)
last accs (train_acc, test_acc) (0.8555000240802765, 0.1850000023841858)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.62it/s] 19%|#9        | 5/26 [00:00<00:01, 18.38it/s] 35%|###4      | 9/26 [00:00<00:00, 25.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.58it/s] 88%|########8 | 23/26 [00:00<00:00, 36.05it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.342 (0.359)	train_nll   0.34 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm  22.29 ( 22.27)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.16)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 8.7817 (8.7809)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.32it/s] 31%|###       | 8/26 [00:00<00:00, 39.37it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.37it/s] 50%|#####     | 13/26 [00:00<00:00, 42.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.26it/s] 96%|#########6| 25/26 [00:00<00:00, 45.06it/s]100%|##########| 26/26 [00:00<00:00, 39.98it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.86 (  0.86)	test_minacc   0.24 (  0.24)	test_majacc   0.96 (  0.96)	Loss_d 0.329 (0.329)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.363 (0.334)	test_acc   0.85 (  0.86)	test_minacc   0.23 (  0.21)	test_majacc   0.98 (  0.97)	Loss_d 0.363 (0.334)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.23 (  0.21)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.274 (0.324)	test_acc   0.88 (  0.86)	test_minacc   0.27 (  0.22)	test_majacc   0.99 (  0.97)	Loss_d 0.274 (0.324)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.27 (  0.22)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.320 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.22)	test_majacc   0.99 (  0.97)	Loss_d 0.320 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.22)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.95it/s]
Test: [  0/  1]	Loss 1.501 (1.501)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.501 (1.501)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.501 (1.501)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 1.501 (1.501)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0393 (0.0483)	validation_time 0.0004 (0.0017)	train_time 0.0388 (0.0463)
record: (train_acc, test_acc) (0.8595000215172768, 0.23800000548362732)
last accs (train_acc, test_acc) (0.8595000215172768, 0.23800000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 19%|#9        | 5/26 [00:00<00:00, 24.68it/s] 35%|###4      | 9/26 [00:00<00:00, 30.16it/s] 50%|#####     | 13/26 [00:00<00:00, 32.70it/s] 65%|######5   | 17/26 [00:00<00:00, 33.93it/s] 81%|########  | 21/26 [00:00<00:00, 34.89it/s] 96%|#########6| 25/26 [00:00<00:00, 35.53it/s]100%|##########| 26/26 [00:00<00:00, 30.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.328 (0.338)	train_nll   0.33 (  0.34)	train_penalty   0.04 (  0.03)	weight_norm  22.35 ( 22.32)	train_acc   0.86 (  0.86)	train_minacc   0.11 (  0.25)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 8.7509 (8.8112)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.06it/s] 27%|##6       | 7/26 [00:00<00:00, 33.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.88it/s] 50%|#####     | 13/26 [00:00<00:00, 38.03it/s] 69%|######9   | 18/26 [00:00<00:00, 41.19it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.19it/s] 88%|########8 | 23/26 [00:00<00:00, 42.41it/s]100%|##########| 26/26 [00:00<00:00, 37.28it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.88 (  0.88)	test_minacc   0.29 (  0.29)	test_majacc   0.98 (  0.98)	Loss_d 0.313 (0.313)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.361 (0.320)	test_acc   0.85 (  0.86)	test_minacc   0.28 (  0.23)	test_majacc   0.97 (  0.98)	Loss_d 0.361 (0.320)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.28 (  0.23)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.263 (0.311)	test_acc   0.89 (  0.87)	test_minacc   0.29 (  0.23)	test_majacc   0.99 (  0.98)	Loss_d 0.263 (0.311)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.29 (  0.23)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  26/  26]	Loss 0.303 (0.313)	test_acc   0.87 (  0.86)	test_minacc   0.19 (  0.23)	test_majacc   0.99 (  0.98)	Loss_d 0.303 (0.313)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.19 (  0.23)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 1.554 (1.554)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.554 (1.554)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.554 (1.554)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.554 (1.554)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.79 (  0.79)
Overall Timing[  5/  1]	epoch_time 0.0392 (0.0468)	validation_time 0.0004 (0.0015)	train_time 0.0387 (0.0450)
record: (train_acc, test_acc) (0.8595000215172768, 0.23800000548362732)
last accs (train_acc, test_acc) (0.8648000251054764, 0.23400001227855682)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 19%|#9        | 5/26 [00:00<00:01, 20.69it/s] 35%|###4      | 9/26 [00:00<00:00, 26.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.35it/s] 65%|######5   | 17/26 [00:00<00:00, 30.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 27.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.311 (0.318)	train_nll   0.31 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm  22.41 ( 22.38)	train_acc   0.88 (  0.86)	train_minacc   0.25 (  0.31)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 8.7802 (8.8330)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 23%|##3       | 6/26 [00:00<00:00, 29.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.13it/s] 42%|####2     | 11/26 [00:00<00:00, 37.57it/s] 62%|######1   | 16/26 [00:00<00:00, 41.52it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.52it/s] 81%|########  | 21/26 [00:00<00:00, 43.14it/s]100%|##########| 26/26 [00:00<00:00, 44.97it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.87 (  0.87)	test_minacc   0.40 (  0.40)	test_majacc   0.96 (  0.96)	Loss_d 0.295 (0.295)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.337 (0.302)	test_acc   0.86 (  0.87)	test_minacc   0.36 (  0.37)	test_majacc   0.97 (  0.96)	Loss_d 0.337 (0.302)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.36 (  0.37)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.86 (  0.87)
Test: [  20/  26]	Loss 0.233 (0.288)	test_acc   0.90 (  0.88)	test_minacc   0.45 (  0.40)	test_majacc   0.97 (  0.96)	Loss_d 0.233 (0.288)	test_acc_d   0.90 (  0.88)	test_minacc_d   0.45 (  0.40)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.287 (0.290)	test_acc   0.89 (  0.88)	test_minacc   0.33 (  0.41)	test_majacc   0.98 (  0.96)	Loss_d 0.287 (0.290)	test_acc_d   0.89 (  0.88)	test_minacc_d   0.33 (  0.41)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.35it/s]
Test: [  0/  1]	Loss 1.468 (1.468)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 1.468 (1.468)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.468 (1.468)	test_acc   0.36 (  0.36)	test_minacc   0.29 (  0.29)	test_majacc   0.95 (  0.95)	Loss_d 1.468 (1.468)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.29 (  0.29)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.61 (  0.61)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0423 (0.0462)	validation_time 0.0006 (0.0014)	train_time 0.0416 (0.0445)
record: (train_acc, test_acc) (0.8777000193595886, 0.36000001430511475)
last accs (train_acc, test_acc) (0.8777000193595886, 0.36000001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 19%|#9        | 5/26 [00:00<00:00, 23.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.51it/s] 50%|#####     | 13/26 [00:00<00:00, 29.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 35.40it/s]100%|##########| 26/26 [00:00<00:00, 29.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.010 (0.218)	train_nll   0.39 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm  22.50 ( 22.46)	train_acc   0.81 (  0.85)	train_minacc   0.39 (  0.41)	train_majacc   0.88 (  0.93)	train_corr   0.00 (  0.00)	l1 8.0465 (8.7181)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.35it/s] 15%|#5        | 4/26 [00:00<00:01, 15.38it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.91it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.91it/s] 96%|#########6| 25/26 [00:00<00:00, 40.38it/s]100%|##########| 26/26 [00:00<00:00, 32.68it/s]
Test: [   0/  26]	Loss 0.443 (0.443)	test_acc   0.80 (  0.80)	test_minacc   0.40 (  0.40)	test_majacc   0.87 (  0.87)	Loss_d 0.443 (0.443)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.69 (  0.69)
Test: [  10/  26]	Loss 0.431 (0.425)	test_acc   0.78 (  0.80)	test_minacc   0.39 (  0.43)	test_majacc   0.86 (  0.87)	Loss_d 0.431 (0.425)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.39 (  0.43)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.70 (  0.71)
Test: [  20/  26]	Loss 0.376 (0.408)	test_acc   0.84 (  0.82)	test_minacc   0.61 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 0.376 (0.408)	test_acc_d   0.84 (  0.82)	test_minacc_d   0.61 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.72 (  0.71)
Test: [  26/  26]	Loss 0.434 (0.410)	test_acc   0.81 (  0.81)	test_minacc   0.44 (  0.45)	test_majacc   0.87 (  0.88)	Loss_d 0.434 (0.410)	test_acc_d   0.81 (  0.81)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.70 (  0.71)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 0.959 (0.959)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.88 (  0.88)	Loss_d 0.959 (0.959)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.959 (0.959)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.88 (  0.88)	Loss_d 0.959 (0.959)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.28 (  0.28)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0408 (0.0455)	validation_time 0.0004 (0.0012)	train_time 0.0403 (0.0440)
record: (train_acc, test_acc) (0.8131000220179557, 0.4350000321865082)
last accs (train_acc, test_acc) (0.8131000220179557, 0.4350000321865082)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 19%|#9        | 5/26 [00:00<00:01, 19.00it/s] 35%|###4      | 9/26 [00:00<00:00, 25.38it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 32.61it/s] 81%|########  | 21/26 [00:00<00:00, 34.01it/s] 96%|#########6| 25/26 [00:00<00:00, 34.31it/s]100%|##########| 26/26 [00:00<00:00, 27.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.002 (0.005)	train_nll   0.58 (  0.57)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.54)	train_acc   0.68 (  0.69)	train_minacc   0.72 (  0.78)	train_majacc   0.67 (  0.67)	train_corr   0.00 (  0.00)	l1 7.1010 (7.4421)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 27%|##6       | 7/26 [00:00<00:00, 32.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.63it/s] 50%|#####     | 13/26 [00:00<00:00, 38.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.77it/s] 92%|#########2| 24/26 [00:00<00:00, 45.01it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.578 (0.578)	test_acc   0.69 (  0.69)	test_minacc   0.74 (  0.74)	test_majacc   0.68 (  0.68)	Loss_d 0.578 (0.578)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.36 (  0.36)
Test: [  10/  26]	Loss 0.567 (0.569)	test_acc   0.71 (  0.69)	test_minacc   0.70 (  0.73)	test_majacc   0.71 (  0.69)	Loss_d 0.567 (0.569)	test_acc_d   0.71 (  0.69)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.71 (  0.69)	test_corr_d   0.39 (  0.38)
Test: [  20/  26]	Loss 0.534 (0.559)	test_acc   0.74 (  0.70)	test_minacc   0.84 (  0.75)	test_majacc   0.72 (  0.70)	Loss_d 0.534 (0.559)	test_acc_d   0.74 (  0.70)	test_minacc_d   0.84 (  0.75)	test_majacc_d   0.72 (  0.70)	test_corr_d   0.40 (  0.38)
Test: [  26/  26]	Loss 0.577 (0.560)	test_acc   0.69 (  0.70)	test_minacc   0.72 (  0.75)	test_majacc   0.69 (  0.70)	Loss_d 0.577 (0.560)	test_acc_d   0.69 (  0.70)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.69 (  0.70)	test_corr_d   0.37 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.97it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.68 (  0.68)	Loss_d 0.685 (0.685)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.68 (  0.68)	test_minacc   0.68 (  0.68)	test_majacc   0.68 (  0.68)	Loss_d 0.685 (0.685)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.14 ( -0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0427 (0.0452)	validation_time 0.0004 (0.0011)	train_time 0.0423 (0.0438)
record: (train_acc, test_acc) (0.7040000307559967, 0.6760000586509705)
last accs (train_acc, test_acc) (0.7040000307559967, 0.6760000586509705)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s]  8%|7         | 2/26 [00:00<00:03,  6.95it/s] 23%|##3       | 6/26 [00:00<00:01, 18.13it/s] 38%|###8      | 10/26 [00:00<00:00, 24.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.48it/s] 69%|######9   | 18/26 [00:00<00:00, 30.53it/s] 85%|########4 | 22/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 34.91it/s]100%|##########| 26/26 [00:01<00:00, 25.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.001)	train_nll   0.60 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.57)	train_acc   0.63 (  0.69)	train_minacc   0.72 (  0.72)	train_majacc   0.62 (  0.68)	train_corr   0.00 (  0.00)	l1 6.9613 (7.0512)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.49it/s] 27%|##6       | 7/26 [00:00<00:00, 30.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.16it/s] 46%|####6     | 12/26 [00:00<00:00, 37.64it/s] 62%|######1   | 16/26 [00:00<00:00, 37.42it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.42it/s] 85%|########4 | 22/26 [00:00<00:00, 42.09it/s]100%|##########| 26/26 [00:00<00:00, 37.54it/s]
Test: [   0/  26]	Loss 0.594 (0.594)	test_acc   0.64 (  0.64)	test_minacc   0.76 (  0.76)	test_majacc   0.62 (  0.62)	Loss_d 0.594 (0.594)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.591 (0.590)	test_acc   0.65 (  0.64)	test_minacc   0.71 (  0.74)	test_majacc   0.64 (  0.63)	Loss_d 0.591 (0.590)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.71 (  0.74)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.34 (  0.33)
Test: [  20/  26]	Loss 0.568 (0.584)	test_acc   0.67 (  0.65)	test_minacc   0.79 (  0.76)	test_majacc   0.65 (  0.63)	Loss_d 0.568 (0.584)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.79 (  0.76)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.35 (  0.33)
Test: [  26/  26]	Loss 0.593 (0.586)	test_acc   0.64 (  0.65)	test_minacc   0.75 (  0.75)	test_majacc   0.62 (  0.63)	Loss_d 0.593 (0.586)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.33 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.13it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.14 ( -0.14)
Overall Timing[  9/  1]	epoch_time 0.0415 (0.0448)	validation_time 0.0005 (0.0011)	train_time 0.0410 (0.0435)
record: (train_acc, test_acc) (0.7040000307559967, 0.6760000586509705)
last accs (train_acc, test_acc) (0.6516000167131424, 0.6740000247955322)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.39it/s] 19%|#9        | 5/26 [00:00<00:01, 14.54it/s] 35%|###4      | 9/26 [00:00<00:00, 21.43it/s] 50%|#####     | 13/26 [00:00<00:00, 25.87it/s] 65%|######5   | 17/26 [00:00<00:00, 28.89it/s] 81%|########  | 21/26 [00:00<00:00, 31.53it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:01<00:00, 25.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.001)	train_nll   0.59 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.57)	train_acc   0.66 (  0.63)	train_minacc   0.75 (  0.75)	train_majacc   0.64 (  0.60)	train_corr   0.00 (  0.00)	l1 6.9297 (6.9517)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 23%|##3       | 6/26 [00:00<00:00, 25.43it/s] 38%|###8      | 10/26 [00:00<00:00, 30.45it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.45it/s] 65%|######5   | 17/26 [00:00<00:00, 42.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.27it/s] 85%|########4 | 22/26 [00:00<00:00, 39.96it/s]100%|##########| 26/26 [00:00<00:00, 34.51it/s]
Test: [   0/  26]	Loss 0.590 (0.590)	test_acc   0.67 (  0.67)	test_minacc   0.78 (  0.78)	test_majacc   0.65 (  0.65)	Loss_d 0.590 (0.590)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.579 (0.582)	test_acc   0.68 (  0.67)	test_minacc   0.65 (  0.68)	test_majacc   0.69 (  0.67)	Loss_d 0.579 (0.582)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.65 (  0.68)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.40 (  0.39)
Test: [  20/  26]	Loss 0.555 (0.573)	test_acc   0.69 (  0.68)	test_minacc   0.77 (  0.70)	test_majacc   0.68 (  0.68)	Loss_d 0.555 (0.573)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.77 (  0.70)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.40 (  0.39)
Test: [  26/  26]	Loss 0.584 (0.573)	test_acc   0.66 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.68)	Loss_d 0.584 (0.573)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.68)	test_corr_d   0.39 (  0.40)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.731 (0.731)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.70 (  0.70)	Loss_d 0.731 (0.731)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.731 (0.731)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.70 (  0.70)	Loss_d 0.731 (0.731)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 10/  1]	epoch_time 0.0452 (0.0448)	validation_time 0.0004 (0.0010)	train_time 0.0448 (0.0437)
record: (train_acc, test_acc) (0.7040000307559967, 0.6760000586509705)
last accs (train_acc, test_acc) (0.6796000334024429, 0.6440000534057617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.92it/s] 19%|#9        | 5/26 [00:00<00:00, 24.26it/s] 35%|###4      | 9/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 31.54it/s] 65%|######5   | 17/26 [00:00<00:00, 32.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.001)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.57)	train_acc   0.62 (  0.69)	train_minacc   0.75 (  0.65)	train_majacc   0.60 (  0.69)	train_corr   0.00 (  0.00)	l1 6.8384 (6.8930)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s]  8%|7         | 2/26 [00:00<00:03,  7.61it/s] 35%|###4      | 9/26 [00:00<00:00, 31.01it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.86it/s] 96%|#########6| 25/26 [00:00<00:00, 44.54it/s]100%|##########| 26/26 [00:00<00:00, 34.02it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.58 (  0.58)	Loss_d 0.629 (0.629)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.616 (0.621)	test_acc   0.62 (  0.62)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.59)	Loss_d 0.616 (0.621)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.23 (  0.23)
Test: [  20/  26]	Loss 0.602 (0.615)	test_acc   0.63 (  0.63)	test_minacc   0.80 (  0.78)	test_majacc   0.60 (  0.60)	Loss_d 0.602 (0.615)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.80 (  0.78)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.25 (  0.23)
Test: [  26/  26]	Loss 0.626 (0.616)	test_acc   0.61 (  0.63)	test_minacc   0.75 (  0.77)	test_majacc   0.59 (  0.60)	Loss_d 0.626 (0.616)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.23 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 0.650 (0.650)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.650 (0.650)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.650 (0.650)	test_acc   0.70 (  0.70)	test_minacc   0.71 (  0.71)	test_majacc   0.64 (  0.64)	Loss_d 0.650 (0.650)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.24 ( -0.24)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/164/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0427 (0.0447)	validation_time 0.0004 (0.0010)	train_time 0.0422 (0.0435)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.43it/s] 23%|##3       | 6/26 [00:00<00:00, 25.73it/s] 38%|###8      | 10/26 [00:00<00:00, 30.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.07it/s] 69%|######9   | 18/26 [00:00<00:00, 32.73it/s] 85%|########4 | 22/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 29.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.64 (  0.61)	train_minacc   0.75 (  0.77)	train_majacc   0.62 (  0.58)	train_corr   0.00 (  0.00)	l1 6.8052 (6.8119)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.34it/s] 27%|##6       | 7/26 [00:00<00:00, 33.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.98it/s] 46%|####6     | 12/26 [00:00<00:00, 40.09it/s] 65%|######5   | 17/26 [00:00<00:00, 41.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.04it/s] 85%|########4 | 22/26 [00:00<00:00, 41.12it/s]100%|##########| 26/26 [00:00<00:00, 37.86it/s]
Test: [   0/  26]	Loss 0.613 (0.613)	test_acc   0.65 (  0.65)	test_minacc   0.76 (  0.76)	test_majacc   0.63 (  0.63)	Loss_d 0.613 (0.613)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.597 (0.604)	test_acc   0.67 (  0.65)	test_minacc   0.71 (  0.69)	test_majacc   0.67 (  0.64)	Loss_d 0.597 (0.604)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.34 (  0.32)
Test: [  20/  26]	Loss 0.581 (0.596)	test_acc   0.67 (  0.66)	test_minacc   0.79 (  0.72)	test_majacc   0.65 (  0.65)	Loss_d 0.581 (0.596)	test_acc_d   0.67 (  0.66)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.34 (  0.33)
Test: [  26/  26]	Loss 0.608 (0.596)	test_acc   0.66 (  0.66)	test_minacc   0.72 (  0.71)	test_majacc   0.64 (  0.65)	Loss_d 0.608 (0.596)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.33 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.24it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.698 (0.698)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.698 (0.698)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 12/  1]	epoch_time 0.0395 (0.0443)	validation_time 0.0004 (0.0009)	train_time 0.0391 (0.0432)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6578000180125236, 0.6530000567436218)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 19%|#9        | 5/26 [00:00<00:00, 23.75it/s] 35%|###4      | 9/26 [00:00<00:00, 29.27it/s] 50%|#####     | 13/26 [00:00<00:00, 32.33it/s] 65%|######5   | 17/26 [00:00<00:00, 33.17it/s] 81%|########  | 21/26 [00:00<00:00, 34.07it/s] 96%|#########6| 25/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.64 (  0.68)	train_minacc   0.75 (  0.66)	train_majacc   0.62 (  0.68)	train_corr   0.00 (  0.00)	l1 6.7704 (6.8012)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.93it/s] 23%|##3       | 6/26 [00:00<00:01, 16.66it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.66it/s] 42%|####2     | 11/26 [00:00<00:00, 25.70it/s] 62%|######1   | 16/26 [00:00<00:00, 32.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.05it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
Test: [   0/  26]	Loss 0.627 (0.627)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.59 (  0.59)	Loss_d 0.627 (0.627)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.615 (0.621)	test_acc   0.64 (  0.62)	test_minacc   0.72 (  0.75)	test_majacc   0.62 (  0.60)	Loss_d 0.615 (0.621)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.25 (  0.24)
Test: [  20/  26]	Loss 0.602 (0.614)	test_acc   0.63 (  0.63)	test_minacc   0.80 (  0.77)	test_majacc   0.60 (  0.60)	Loss_d 0.602 (0.614)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.625 (0.615)	test_acc   0.62 (  0.63)	test_minacc   0.75 (  0.76)	test_majacc   0.59 (  0.60)	Loss_d 0.625 (0.615)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.25 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.91it/s]
Test: [  0/  1]	Loss 0.665 (0.665)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.65 (  0.65)	Loss_d 0.665 (0.665)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.665 (0.665)	test_acc   0.68 (  0.68)	test_minacc   0.69 (  0.69)	test_majacc   0.65 (  0.65)	Loss_d 0.665 (0.665)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 13/  1]	epoch_time 0.0415 (0.0441)	validation_time 0.0004 (0.0009)	train_time 0.0410 (0.0430)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6280000067353249, 0.6840000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:03,  7.66it/s] 23%|##3       | 6/26 [00:00<00:01, 18.08it/s] 38%|###8      | 10/26 [00:00<00:00, 24.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.16it/s] 69%|######9   | 18/26 [00:00<00:00, 30.81it/s] 85%|########4 | 22/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 32.27it/s]100%|##########| 26/26 [00:01<00:00, 25.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.64 (  0.61)	train_minacc   0.75 (  0.76)	train_majacc   0.62 (  0.59)	train_corr   0.00 (  0.00)	l1 6.7379 (6.7589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 27%|##6       | 7/26 [00:00<00:00, 28.03it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.03it/s] 46%|####6     | 12/26 [00:00<00:00, 35.20it/s] 65%|######5   | 17/26 [00:00<00:00, 36.29it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.29it/s] 85%|########4 | 22/26 [00:00<00:00, 39.95it/s]100%|##########| 26/26 [00:00<00:00, 32.56it/s]
Test: [   0/  26]	Loss 0.602 (0.602)	test_acc   0.64 (  0.64)	test_minacc   0.78 (  0.78)	test_majacc   0.61 (  0.61)	Loss_d 0.602 (0.602)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.33 (  0.33)
Test: [  10/  26]	Loss 0.595 (0.600)	test_acc   0.66 (  0.64)	test_minacc   0.68 (  0.70)	test_majacc   0.66 (  0.63)	Loss_d 0.595 (0.600)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.36 (  0.34)
Test: [  20/  26]	Loss 0.578 (0.592)	test_acc   0.66 (  0.65)	test_minacc   0.79 (  0.72)	test_majacc   0.64 (  0.64)	Loss_d 0.578 (0.592)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.36 (  0.35)
Test: [  26/  26]	Loss 0.601 (0.593)	test_acc   0.64 (  0.65)	test_minacc   0.75 (  0.72)	test_majacc   0.63 (  0.64)	Loss_d 0.601 (0.593)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.75 (  0.72)	test_majacc_d   0.63 (  0.64)	test_corr_d   0.35 (  0.35)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.76it/s]
Test: [  0/  1]	Loss 0.713 (0.713)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.713 (0.713)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.713 (0.713)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.713 (0.713)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 14/  1]	epoch_time 0.0410 (0.0439)	validation_time 0.0005 (0.0009)	train_time 0.0405 (0.0429)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6485000194311142, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 19%|#9        | 5/26 [00:00<00:01, 20.41it/s] 31%|###       | 8/26 [00:00<00:00, 23.37it/s] 46%|####6     | 12/26 [00:00<00:00, 27.61it/s] 62%|######1   | 16/26 [00:00<00:00, 29.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.89it/s] 92%|#########2| 24/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.61 (  0.65)	train_minacc   0.75 (  0.70)	train_majacc   0.58 (  0.64)	train_corr   0.00 (  0.00)	l1 6.6948 (6.7292)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.32it/s] 27%|##6       | 7/26 [00:00<00:00, 34.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.74it/s] 46%|####6     | 12/26 [00:00<00:00, 39.52it/s] 65%|######5   | 17/26 [00:00<00:00, 39.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.74it/s] 85%|########4 | 22/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.62 (  0.62)	test_minacc   0.78 (  0.78)	test_majacc   0.60 (  0.60)	Loss_d 0.617 (0.617)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.613 (0.617)	test_acc   0.63 (  0.61)	test_minacc   0.70 (  0.72)	test_majacc   0.61 (  0.59)	Loss_d 0.613 (0.617)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.70 (  0.72)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.29 (  0.27)
Test: [  20/  26]	Loss 0.599 (0.611)	test_acc   0.64 (  0.62)	test_minacc   0.80 (  0.75)	test_majacc   0.62 (  0.60)	Loss_d 0.599 (0.611)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.29 (  0.28)
Test: [  26/  26]	Loss 0.620 (0.612)	test_acc   0.60 (  0.62)	test_minacc   0.72 (  0.75)	test_majacc   0.58 (  0.60)	Loss_d 0.620 (0.612)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.693 (0.693)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 15/  1]	epoch_time 0.0411 (0.0437)	validation_time 0.0003 (0.0008)	train_time 0.0408 (0.0427)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6220000085830688, 0.6740000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 19%|#9        | 5/26 [00:00<00:00, 22.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.64it/s] 50%|#####     | 13/26 [00:00<00:00, 30.31it/s] 65%|######5   | 17/26 [00:00<00:00, 31.92it/s] 81%|########  | 21/26 [00:00<00:00, 32.77it/s] 96%|#########6| 25/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.63 (  0.62)	train_minacc   0.75 (  0.74)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 6.6781 (6.6952)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 23%|##3       | 6/26 [00:00<00:00, 30.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.86it/s] 42%|####2     | 11/26 [00:00<00:00, 37.81it/s] 62%|######1   | 16/26 [00:00<00:00, 40.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.72it/s] 81%|########  | 21/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 42.86it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.611 (0.611)	test_acc   0.63 (  0.63)	test_minacc   0.79 (  0.79)	test_majacc   0.60 (  0.60)	Loss_d 0.611 (0.611)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.605 (0.610)	test_acc   0.63 (  0.62)	test_minacc   0.65 (  0.72)	test_majacc   0.62 (  0.60)	Loss_d 0.605 (0.610)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.65 (  0.72)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.33 (  0.31)
Test: [  20/  26]	Loss 0.588 (0.603)	test_acc   0.65 (  0.63)	test_minacc   0.80 (  0.74)	test_majacc   0.63 (  0.61)	Loss_d 0.588 (0.603)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.32 (  0.31)
Test: [  26/  26]	Loss 0.612 (0.603)	test_acc   0.62 (  0.63)	test_minacc   0.75 (  0.74)	test_majacc   0.59 (  0.61)	Loss_d 0.612 (0.603)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.75 (  0.74)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.32 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.66 (  0.66)	Loss_d 0.708 (0.708)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.66 (  0.66)	Loss_d 0.708 (0.708)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 16/  1]	epoch_time 0.0375 (0.0433)	validation_time 0.0004 (0.0008)	train_time 0.0370 (0.0424)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6324000087976456, 0.6640000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 19%|#9        | 5/26 [00:00<00:01, 19.40it/s] 35%|###4      | 9/26 [00:00<00:00, 25.75it/s] 50%|#####     | 13/26 [00:00<00:00, 29.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.18it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.64 (  0.61)	train_minacc   0.75 (  0.75)	train_majacc   0.62 (  0.59)	train_corr   0.00 (  0.00)	l1 6.6616 (6.6672)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.87it/s] 23%|##3       | 6/26 [00:00<00:00, 32.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.88it/s] 42%|####2     | 11/26 [00:00<00:00, 38.78it/s] 62%|######1   | 16/26 [00:00<00:00, 42.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.08it/s] 81%|########  | 21/26 [00:00<00:00, 39.45it/s]100%|##########| 26/26 [00:00<00:00, 42.19it/s]100%|##########| 26/26 [00:00<00:00, 36.14it/s]
Test: [   0/  26]	Loss 0.611 (0.611)	test_acc   0.64 (  0.64)	test_minacc   0.76 (  0.76)	test_majacc   0.62 (  0.62)	Loss_d 0.611 (0.611)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.597 (0.608)	test_acc   0.67 (  0.64)	test_minacc   0.68 (  0.68)	test_majacc   0.66 (  0.63)	Loss_d 0.597 (0.608)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.36 (  0.33)
Test: [  20/  26]	Loss 0.581 (0.598)	test_acc   0.67 (  0.65)	test_minacc   0.79 (  0.71)	test_majacc   0.65 (  0.64)	Loss_d 0.581 (0.598)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.79 (  0.71)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.35 (  0.34)
Test: [  26/  26]	Loss 0.610 (0.598)	test_acc   0.65 (  0.65)	test_minacc   0.75 (  0.70)	test_majacc   0.63 (  0.64)	Loss_d 0.610 (0.598)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.63 (  0.64)	test_corr_d   0.34 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.56it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.718 (0.718)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.718 (0.718)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 17/  1]	epoch_time 0.0379 (0.0430)	validation_time 0.0004 (0.0008)	train_time 0.0374 (0.0421)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6499000215530395, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 19%|#9        | 5/26 [00:00<00:00, 21.59it/s] 35%|###4      | 9/26 [00:00<00:00, 27.82it/s] 50%|#####     | 13/26 [00:00<00:00, 30.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.21it/s] 81%|########  | 21/26 [00:00<00:00, 32.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.000)	train_nll   0.65 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.61 (  0.67)	train_minacc   0.75 (  0.63)	train_majacc   0.58 (  0.68)	train_corr   0.00 (  0.00)	l1 6.5942 (6.6149)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.93it/s] 27%|##6       | 7/26 [00:00<00:00, 32.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.55it/s] 46%|####6     | 12/26 [00:00<00:00, 38.52it/s] 65%|######5   | 17/26 [00:00<00:00, 41.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.65it/s] 85%|########4 | 22/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 36.93it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.59 (  0.59)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.643 (0.643)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.627 (0.638)	test_acc   0.63 (  0.60)	test_minacc   0.77 (  0.75)	test_majacc   0.60 (  0.57)	Loss_d 0.627 (0.638)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.21 (  0.19)
Test: [  20/  26]	Loss 0.619 (0.631)	test_acc   0.63 (  0.61)	test_minacc   0.80 (  0.77)	test_majacc   0.60 (  0.58)	Loss_d 0.619 (0.631)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.21 (  0.20)
Test: [  26/  26]	Loss 0.641 (0.631)	test_acc   0.60 (  0.61)	test_minacc   0.75 (  0.77)	test_majacc   0.57 (  0.58)	Loss_d 0.641 (0.631)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.75 (  0.77)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.21 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 0.656 (0.656)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.64 (  0.64)	Loss_d 0.656 (0.656)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.656 (0.656)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.64 (  0.64)	Loss_d 0.656 (0.656)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 18/  1]	epoch_time 0.0389 (0.0428)	validation_time 0.0003 (0.0008)	train_time 0.0386 (0.0419)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6103000104427337, 0.6970000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.34it/s] 19%|#9        | 5/26 [00:00<00:00, 22.54it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.75it/s] 65%|######5   | 17/26 [00:00<00:00, 32.08it/s] 81%|########  | 21/26 [00:00<00:00, 32.92it/s] 96%|#########6| 25/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.001)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.58)	train_acc   0.61 (  0.59)	train_minacc   0.75 (  0.73)	train_majacc   0.59 (  0.56)	train_corr   0.00 (  0.00)	l1 6.4963 (6.5095)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.55it/s] 27%|##6       | 7/26 [00:00<00:00, 31.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.98it/s] 46%|####6     | 12/26 [00:00<00:00, 38.56it/s] 65%|######5   | 17/26 [00:00<00:00, 38.48it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.48it/s] 85%|########4 | 22/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 35.55it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.60 (  0.60)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.631 (0.631)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.615 (0.627)	test_acc   0.64 (  0.61)	test_minacc   0.75 (  0.73)	test_majacc   0.62 (  0.59)	Loss_d 0.615 (0.627)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.27 (  0.25)
Test: [  20/  26]	Loss 0.610 (0.621)	test_acc   0.63 (  0.62)	test_minacc   0.80 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.610 (0.621)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.629 (0.621)	test_acc   0.61 (  0.62)	test_minacc   0.75 (  0.75)	test_majacc   0.59 (  0.60)	Loss_d 0.629 (0.621)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.26 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.10it/s]
Test: [  0/  1]	Loss 0.674 (0.674)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.674 (0.674)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.674 (0.674)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.674 (0.674)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 19/  1]	epoch_time 0.0400 (0.0427)	validation_time 0.0004 (0.0007)	train_time 0.0396 (0.0418)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6206000081300735, 0.6860000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 19%|#9        | 5/26 [00:00<00:01, 19.09it/s] 35%|###4      | 9/26 [00:00<00:00, 25.94it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.35it/s] 81%|########  | 21/26 [00:00<00:00, 33.95it/s] 96%|#########6| 25/26 [00:00<00:00, 34.87it/s]100%|##########| 26/26 [00:00<00:00, 28.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.001 (0.000)	train_nll   0.65 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.60 (  0.66)	train_minacc   0.75 (  0.63)	train_majacc   0.57 (  0.67)	train_corr   0.00 (  0.00)	l1 6.4869 (6.4895)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.60it/s] 27%|##6       | 7/26 [00:00<00:00, 30.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.76it/s] 46%|####6     | 12/26 [00:00<00:00, 38.18it/s] 65%|######5   | 17/26 [00:00<00:00, 41.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.08it/s] 85%|########4 | 22/26 [00:00<00:00, 40.74it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]
Test: [   0/  26]	Loss 0.650 (0.650)	test_acc   0.58 (  0.58)	test_minacc   0.81 (  0.81)	test_majacc   0.55 (  0.55)	Loss_d 0.650 (0.650)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.633 (0.647)	test_acc   0.63 (  0.59)	test_minacc   0.74 (  0.74)	test_majacc   0.61 (  0.56)	Loss_d 0.633 (0.647)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.20 (  0.17)
Test: [  20/  26]	Loss 0.630 (0.640)	test_acc   0.62 (  0.60)	test_minacc   0.80 (  0.77)	test_majacc   0.59 (  0.58)	Loss_d 0.630 (0.640)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.80 (  0.77)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.18 (  0.18)
Test: [  26/  26]	Loss 0.648 (0.640)	test_acc   0.59 (  0.61)	test_minacc   0.75 (  0.76)	test_majacc   0.56 (  0.58)	Loss_d 0.648 (0.640)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.19 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.87it/s]
Test: [  0/  1]	Loss 0.654 (0.654)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.63 (  0.63)	Loss_d 0.654 (0.654)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.654 (0.654)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.63 (  0.63)	Loss_d 0.654 (0.654)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 20/  1]	epoch_time 0.0390 (0.0425)	validation_time 0.0006 (0.0007)	train_time 0.0383 (0.0417)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6050000101327896, 0.6940000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.05it/s] 19%|#9        | 5/26 [00:00<00:01, 15.69it/s] 35%|###4      | 9/26 [00:00<00:00, 21.92it/s] 50%|#####     | 13/26 [00:00<00:00, 25.41it/s] 65%|######5   | 17/26 [00:00<00:00, 27.71it/s] 81%|########  | 21/26 [00:00<00:00, 30.06it/s] 96%|#########6| 25/26 [00:00<00:00, 31.62it/s]100%|##########| 26/26 [00:01<00:00, 24.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.61 (  0.58)	train_minacc   0.75 (  0.76)	train_majacc   0.59 (  0.55)	train_corr   0.00 (  0.00)	l1 6.4511 (6.4335)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 12%|#1        | 3/26 [00:00<00:01, 12.07it/s] 35%|###4      | 9/26 [00:00<00:00, 30.01it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.55it/s] 92%|#########2| 24/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 31.91it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.60 (  0.60)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.641 (0.641)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.624 (0.640)	test_acc   0.65 (  0.61)	test_minacc   0.72 (  0.71)	test_majacc   0.64 (  0.59)	Loss_d 0.624 (0.640)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.26 (  0.22)
Test: [  20/  26]	Loss 0.621 (0.632)	test_acc   0.64 (  0.62)	test_minacc   0.80 (  0.74)	test_majacc   0.61 (  0.59)	Loss_d 0.621 (0.632)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.23 (  0.23)
Test: [  26/  26]	Loss 0.639 (0.632)	test_acc   0.61 (  0.62)	test_minacc   0.75 (  0.73)	test_majacc   0.59 (  0.60)	Loss_d 0.639 (0.632)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.06it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.675 (0.675)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.675 (0.675)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 21/  1]	epoch_time 0.0410 (0.0424)	validation_time 0.0004 (0.0007)	train_time 0.0406 (0.0416)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6171000118255615, 0.6730000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 19%|#9        | 5/26 [00:00<00:01, 19.48it/s] 35%|###4      | 9/26 [00:00<00:00, 25.48it/s] 50%|#####     | 13/26 [00:00<00:00, 28.85it/s] 65%|######5   | 17/26 [00:00<00:00, 30.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.66 (  0.62)	train_minacc   0.58 (  0.69)	train_majacc   0.68 (  0.61)	train_corr   0.00 (  0.00)	l1 6.3935 (6.4264)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.17it/s] 27%|##6       | 7/26 [00:00<00:00, 34.10it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.10it/s] 46%|####6     | 12/26 [00:00<00:00, 38.92it/s] 65%|######5   | 17/26 [00:00<00:00, 41.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.79it/s] 85%|########4 | 22/26 [00:00<00:00, 40.07it/s]100%|##########| 26/26 [00:00<00:00, 37.85it/s]
Test: [   0/  26]	Loss 0.625 (0.625)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.65 (  0.65)	Loss_d 0.625 (0.625)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.609 (0.623)	test_acc   0.69 (  0.66)	test_minacc   0.61 (  0.59)	test_majacc   0.71 (  0.67)	Loss_d 0.609 (0.623)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.71 (  0.67)	test_corr_d   0.37 (  0.33)
Test: [  20/  26]	Loss 0.598 (0.613)	test_acc   0.69 (  0.68)	test_minacc   0.66 (  0.62)	test_majacc   0.69 (  0.69)	Loss_d 0.598 (0.613)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.34 (  0.34)
Test: [  26/  26]	Loss 0.619 (0.611)	test_acc   0.66 (  0.68)	test_minacc   0.58 (  0.61)	test_majacc   0.67 (  0.69)	Loss_d 0.619 (0.611)	test_acc_d   0.66 (  0.68)	test_minacc_d   0.58 (  0.61)	test_majacc_d   0.67 (  0.69)	test_corr_d   0.35 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.96it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.721 (0.721)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.721 (0.721)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 22/  1]	epoch_time 0.0403 (0.0423)	validation_time 0.0003 (0.0007)	train_time 0.0399 (0.0415)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6756000276207924, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.13it/s] 19%|#9        | 5/26 [00:00<00:01, 16.33it/s] 35%|###4      | 9/26 [00:00<00:00, 23.30it/s] 50%|#####     | 13/26 [00:00<00:00, 27.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.71it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 26.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.3613762855529785
set z to 6.043307471275329
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.60 (  0.62)	train_minacc   0.72 (  0.71)	train_majacc   0.58 (  0.61)	train_corr   0.00 (  0.00)	l1 6.3916 (6.3878)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.94it/s] 23%|##3       | 6/26 [00:00<00:00, 25.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.47it/s] 42%|####2     | 11/26 [00:00<00:00, 33.79it/s] 62%|######1   | 16/26 [00:00<00:00, 37.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.82it/s] 81%|########  | 21/26 [00:00<00:00, 37.42it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 32.72it/s]
Test: [   0/  26]	Loss 0.635 (0.635)	test_acc   0.61 (  0.61)	test_minacc   0.81 (  0.81)	test_majacc   0.57 (  0.57)	Loss_d 0.635 (0.635)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.628 (0.639)	test_acc   0.63 (  0.59)	test_minacc   0.68 (  0.71)	test_majacc   0.62 (  0.57)	Loss_d 0.628 (0.639)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.68 (  0.71)	test_majacc_d   0.62 (  0.57)	test_corr_d   0.27 (  0.23)
Test: [  20/  26]	Loss 0.619 (0.631)	test_acc   0.63 (  0.61)	test_minacc   0.79 (  0.74)	test_majacc   0.60 (  0.58)	Loss_d 0.619 (0.631)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.24 (  0.24)
Test: [  26/  26]	Loss 0.632 (0.630)	test_acc   0.60 (  0.61)	test_minacc   0.72 (  0.73)	test_majacc   0.58 (  0.59)	Loss_d 0.632 (0.630)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.26 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.62it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 23/  1]	epoch_time 0.0394 (0.0422)	validation_time 0.0005 (0.0007)	train_time 0.0389 (0.0414)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6075000096559524, 0.6600000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.10it/s] 12%|#1        | 3/26 [00:00<00:02,  8.08it/s] 27%|##6       | 7/26 [00:00<00:01, 17.31it/s] 42%|####2     | 11/26 [00:00<00:00, 23.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.85it/s] 88%|########8 | 23/26 [00:00<00:00, 31.84it/s]100%|##########| 26/26 [00:01<00:00, 23.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.61 (  0.61)	train_minacc   0.72 (  0.71)	train_majacc   0.59 (  0.59)	train_corr   0.00 (  0.00)	l1 6.3425 (6.3543)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.76it/s] 23%|##3       | 6/26 [00:00<00:00, 25.42it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.42it/s] 42%|####2     | 11/26 [00:00<00:00, 33.39it/s] 62%|######1   | 16/26 [00:00<00:00, 38.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.50it/s] 81%|########  | 21/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 32.75it/s]
Test: [   0/  26]	Loss 0.627 (0.627)	test_acc   0.61 (  0.61)	test_minacc   0.76 (  0.76)	test_majacc   0.58 (  0.58)	Loss_d 0.627 (0.627)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.620 (0.631)	test_acc   0.65 (  0.61)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.60)	Loss_d 0.620 (0.631)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.32 (  0.28)
Test: [  20/  26]	Loss 0.608 (0.621)	test_acc   0.64 (  0.62)	test_minacc   0.77 (  0.71)	test_majacc   0.62 (  0.61)	Loss_d 0.608 (0.621)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.29 (  0.28)
Test: [  26/  26]	Loss 0.623 (0.620)	test_acc   0.62 (  0.62)	test_minacc   0.72 (  0.71)	test_majacc   0.60 (  0.61)	Loss_d 0.623 (0.620)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.31 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.34it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.706 (0.706)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.706 (0.706)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 24/  1]	epoch_time 0.0427 (0.0422)	validation_time 0.0005 (0.0007)	train_time 0.0423 (0.0415)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6248000092506408, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 19%|#9        | 5/26 [00:00<00:01, 16.29it/s] 31%|###       | 8/26 [00:00<00:00, 20.59it/s] 46%|####6     | 12/26 [00:00<00:00, 24.29it/s] 62%|######1   | 16/26 [00:00<00:00, 28.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.05it/s] 92%|#########2| 24/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:01<00:00, 25.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.62 (  0.61)	train_minacc   0.69 (  0.72)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 6.3395 (6.3415)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.99it/s] 27%|##6       | 7/26 [00:00<00:00, 31.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.70it/s] 46%|####6     | 12/26 [00:00<00:00, 37.58it/s] 65%|######5   | 17/26 [00:00<00:00, 40.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.52it/s] 85%|########4 | 22/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 36.76it/s]
Test: [   0/  26]	Loss 0.625 (0.625)	test_acc   0.61 (  0.61)	test_minacc   0.76 (  0.76)	test_majacc   0.59 (  0.59)	Loss_d 0.625 (0.625)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.616 (0.627)	test_acc   0.66 (  0.61)	test_minacc   0.67 (  0.67)	test_majacc   0.65 (  0.61)	Loss_d 0.616 (0.627)	test_acc_d   0.66 (  0.61)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.33 (  0.29)
Test: [  20/  26]	Loss 0.602 (0.617)	test_acc   0.65 (  0.63)	test_minacc   0.77 (  0.71)	test_majacc   0.63 (  0.62)	Loss_d 0.602 (0.617)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.31 (  0.30)
Test: [  26/  26]	Loss 0.620 (0.616)	test_acc   0.62 (  0.63)	test_minacc   0.72 (  0.70)	test_majacc   0.61 (  0.62)	Loss_d 0.620 (0.616)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.32 (  0.31)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.78it/s]
Test: [  0/  1]	Loss 0.711 (0.711)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.711 (0.711)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.711 (0.711)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.711 (0.711)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 25/  1]	epoch_time 0.0404 (0.0422)	validation_time 0.0003 (0.0007)	train_time 0.0400 (0.0414)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6324000100493431, 0.64000004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 19%|#9        | 5/26 [00:00<00:00, 23.08it/s] 35%|###4      | 9/26 [00:00<00:00, 27.78it/s] 50%|#####     | 13/26 [00:00<00:00, 30.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.61 (  0.59)	train_minacc   0.75 (  0.74)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 6.3185 (6.3022)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.18it/s] 23%|##3       | 6/26 [00:00<00:00, 29.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.57it/s] 42%|####2     | 11/26 [00:00<00:00, 37.27it/s] 62%|######1   | 16/26 [00:00<00:00, 36.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.82it/s] 81%|########  | 21/26 [00:00<00:00, 39.73it/s]100%|##########| 26/26 [00:00<00:00, 36.10it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.61 (  0.61)	test_minacc   0.78 (  0.78)	test_majacc   0.58 (  0.58)	Loss_d 0.629 (0.629)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.618 (0.632)	test_acc   0.65 (  0.61)	test_minacc   0.70 (  0.71)	test_majacc   0.64 (  0.59)	Loss_d 0.618 (0.632)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.30 (  0.26)
Test: [  20/  26]	Loss 0.608 (0.623)	test_acc   0.64 (  0.62)	test_minacc   0.79 (  0.73)	test_majacc   0.61 (  0.60)	Loss_d 0.608 (0.623)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.79 (  0.73)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.27 (  0.26)
Test: [  26/  26]	Loss 0.626 (0.622)	test_acc   0.62 (  0.62)	test_minacc   0.72 (  0.73)	test_majacc   0.60 (  0.60)	Loss_d 0.626 (0.622)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.29 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.696 (0.696)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.696 (0.696)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 26/  1]	epoch_time 0.0396 (0.0421)	validation_time 0.0004 (0.0007)	train_time 0.0391 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6207000060081482, 0.6610000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 15%|#5        | 4/26 [00:00<00:01, 20.19it/s] 31%|###       | 8/26 [00:00<00:00, 26.71it/s] 46%|####6     | 12/26 [00:00<00:00, 29.86it/s] 62%|######1   | 16/26 [00:00<00:00, 31.25it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.45it/s] 92%|#########2| 24/26 [00:00<00:00, 33.82it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.60 (  0.64)	train_minacc   0.75 (  0.69)	train_majacc   0.57 (  0.63)	train_corr   0.00 (  0.00)	l1 6.3486 (6.3255)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 15%|#5        | 4/26 [00:00<00:01, 18.42it/s] 35%|###4      | 9/26 [00:00<00:00, 30.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.51it/s] 96%|#########6| 25/26 [00:00<00:00, 43.99it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.60 (  0.60)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.643 (0.643)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.635 (0.647)	test_acc   0.62 (  0.59)	test_minacc   0.70 (  0.73)	test_majacc   0.61 (  0.56)	Loss_d 0.635 (0.647)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.24 (  0.19)
Test: [  20/  26]	Loss 0.626 (0.639)	test_acc   0.63 (  0.60)	test_minacc   0.80 (  0.76)	test_majacc   0.60 (  0.57)	Loss_d 0.626 (0.639)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.640 (0.638)	test_acc   0.60 (  0.60)	test_minacc   0.75 (  0.75)	test_majacc   0.58 (  0.57)	Loss_d 0.640 (0.638)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.73it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.60 (  0.60)	Loss_d 0.679 (0.679)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.60 (  0.60)	Loss_d 0.679 (0.679)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 27/  1]	epoch_time 0.0438 (0.0421)	validation_time 0.0006 (0.0007)	train_time 0.0432 (0.0414)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6001000100970268, 0.6740000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 12%|#1        | 3/26 [00:00<00:01, 12.96it/s] 27%|##6       | 7/26 [00:00<00:00, 21.59it/s] 42%|####2     | 11/26 [00:00<00:00, 25.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.43it/s] 88%|########8 | 23/26 [00:00<00:00, 31.14it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.66 (  0.62)	train_minacc   0.58 (  0.70)	train_majacc   0.68 (  0.60)	train_corr   0.00 (  0.00)	l1 6.2695 (6.2869)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 23%|##3       | 6/26 [00:00<00:00, 26.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.24it/s] 42%|####2     | 11/26 [00:00<00:00, 34.28it/s] 62%|######1   | 16/26 [00:00<00:00, 38.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.87it/s] 81%|########  | 21/26 [00:00<00:00, 41.20it/s]100%|##########| 26/26 [00:00<00:00, 43.72it/s]100%|##########| 26/26 [00:00<00:00, 34.75it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.63 (  0.63)	Loss_d 0.631 (0.631)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.619 (0.632)	test_acc   0.68 (  0.66)	test_minacc   0.59 (  0.60)	test_majacc   0.70 (  0.67)	Loss_d 0.619 (0.632)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.59 (  0.60)	test_majacc_d   0.70 (  0.67)	test_corr_d   0.36 (  0.31)
Test: [  20/  26]	Loss 0.604 (0.620)	test_acc   0.69 (  0.67)	test_minacc   0.66 (  0.62)	test_majacc   0.69 (  0.68)	Loss_d 0.604 (0.620)	test_acc_d   0.69 (  0.67)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.69 (  0.68)	test_corr_d   0.33 (  0.32)
Test: [  26/  26]	Loss 0.622 (0.618)	test_acc   0.65 (  0.67)	test_minacc   0.58 (  0.62)	test_majacc   0.66 (  0.68)	Loss_d 0.622 (0.618)	test_acc_d   0.65 (  0.67)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.66 (  0.68)	test_corr_d   0.35 (  0.33)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.29it/s]
Test: [  0/  1]	Loss 0.720 (0.720)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.720 (0.720)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.720 (0.720)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.720 (0.720)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 28/  1]	epoch_time 0.0403 (0.0421)	validation_time 0.0005 (0.0007)	train_time 0.0398 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6695000287294388, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 15%|#5        | 4/26 [00:00<00:01, 17.42it/s] 31%|###       | 8/26 [00:00<00:00, 24.85it/s] 46%|####6     | 12/26 [00:00<00:00, 28.54it/s] 62%|######1   | 16/26 [00:00<00:00, 31.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.77it/s] 92%|#########2| 24/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.62 (  0.62)	train_minacc   0.67 (  0.70)	train_majacc   0.61 (  0.60)	train_corr   0.00 (  0.00)	l1 6.2568 (6.2551)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.78it/s] 27%|##6       | 7/26 [00:00<00:00, 34.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.93it/s] 46%|####6     | 12/26 [00:00<00:00, 39.60it/s] 65%|######5   | 17/26 [00:00<00:00, 37.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.90it/s] 85%|########4 | 22/26 [00:00<00:00, 40.61it/s]100%|##########| 26/26 [00:00<00:00, 36.35it/s]
Test: [   0/  26]	Loss 0.626 (0.626)	test_acc   0.61 (  0.61)	test_minacc   0.72 (  0.72)	test_majacc   0.58 (  0.58)	Loss_d 0.626 (0.626)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.618 (0.631)	test_acc   0.66 (  0.62)	test_minacc   0.64 (  0.66)	test_majacc   0.66 (  0.61)	Loss_d 0.618 (0.631)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.64 (  0.66)	test_majacc_d   0.66 (  0.61)	test_corr_d   0.33 (  0.28)
Test: [  20/  26]	Loss 0.602 (0.620)	test_acc   0.66 (  0.63)	test_minacc   0.77 (  0.70)	test_majacc   0.64 (  0.62)	Loss_d 0.602 (0.620)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.77 (  0.70)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.30 (  0.29)
Test: [  26/  26]	Loss 0.620 (0.618)	test_acc   0.62 (  0.63)	test_minacc   0.69 (  0.69)	test_majacc   0.61 (  0.62)	Loss_d 0.620 (0.618)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.32 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.81it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.707 (0.707)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.65 (  0.65)	Loss_d 0.707 (0.707)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.65 (  0.65)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 29/  1]	epoch_time 0.0417 (0.0420)	validation_time 0.0003 (0.0006)	train_time 0.0413 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6349000180363655, 0.6410000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.17it/s] 23%|##3       | 6/26 [00:00<00:00, 22.97it/s] 38%|###8      | 10/26 [00:00<00:00, 28.32it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.47it/s] 69%|######9   | 18/26 [00:00<00:00, 33.09it/s] 85%|########4 | 22/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 29.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.61 (  0.60)	train_minacc   0.69 (  0.74)	train_majacc   0.60 (  0.58)	train_corr   0.00 (  0.00)	l1 6.2536 (6.2244)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 12%|#1        | 3/26 [00:00<00:02, 10.64it/s] 31%|###       | 8/26 [00:00<00:00, 24.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.23it/s] 50%|#####     | 13/26 [00:00<00:00, 31.75it/s] 69%|######9   | 18/26 [00:00<00:00, 36.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.69it/s] 88%|########8 | 23/26 [00:00<00:00, 36.44it/s]100%|##########| 26/26 [00:00<00:00, 29.91it/s]
Test: [   0/  26]	Loss 0.630 (0.630)	test_acc   0.59 (  0.59)	test_minacc   0.74 (  0.74)	test_majacc   0.56 (  0.56)	Loss_d 0.630 (0.630)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.620 (0.635)	test_acc   0.66 (  0.61)	test_minacc   0.68 (  0.69)	test_majacc   0.66 (  0.59)	Loss_d 0.620 (0.635)	test_acc_d   0.66 (  0.61)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.66 (  0.59)	test_corr_d   0.31 (  0.26)
Test: [  20/  26]	Loss 0.607 (0.624)	test_acc   0.64 (  0.62)	test_minacc   0.77 (  0.72)	test_majacc   0.62 (  0.61)	Loss_d 0.607 (0.624)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.625 (0.622)	test_acc   0.62 (  0.62)	test_minacc   0.69 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.625 (0.622)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.69 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.30 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.32it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.700 (0.700)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.700 (0.700)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 30/  1]	epoch_time 0.0434 (0.0421)	validation_time 0.0006 (0.0006)	train_time 0.0428 (0.0414)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6246000114679336, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.36it/s] 23%|##3       | 6/26 [00:00<00:00, 25.82it/s] 38%|###8      | 10/26 [00:00<00:00, 29.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.76it/s] 69%|######9   | 18/26 [00:00<00:00, 31.27it/s] 85%|########4 | 22/26 [00:00<00:00, 32.56it/s]100%|##########| 26/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.001 (0.000)	train_nll   0.61 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.62 (  0.62)	train_minacc   0.72 (  0.70)	train_majacc   0.61 (  0.61)	train_corr   0.00 (  0.00)	l1 6.1767 (6.2380)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.99it/s] 15%|#5        | 4/26 [00:00<00:01, 18.78it/s] 35%|###4      | 9/26 [00:00<00:00, 30.43it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.86it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.86it/s] 92%|#########2| 24/26 [00:00<00:00, 38.17it/s]100%|##########| 26/26 [00:00<00:00, 33.17it/s]
Test: [   0/  26]	Loss 0.613 (0.613)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.59 (  0.59)	Loss_d 0.613 (0.613)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.609 (0.620)	test_acc   0.66 (  0.62)	test_minacc   0.68 (  0.70)	test_majacc   0.65 (  0.60)	Loss_d 0.609 (0.620)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.65 (  0.60)	test_corr_d   0.35 (  0.30)
Test: [  20/  26]	Loss 0.594 (0.610)	test_acc   0.65 (  0.63)	test_minacc   0.77 (  0.73)	test_majacc   0.63 (  0.62)	Loss_d 0.594 (0.610)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.77 (  0.73)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.32 (  0.31)
Test: [  26/  26]	Loss 0.613 (0.610)	test_acc   0.64 (  0.64)	test_minacc   0.72 (  0.73)	test_majacc   0.62 (  0.62)	Loss_d 0.613 (0.610)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.33 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.58it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.701 (0.701)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.701 (0.701)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 31/  1]	epoch_time 0.0450 (0.0422)	validation_time 0.0005 (0.0006)	train_time 0.0445 (0.0415)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.636900010406971, 0.6610000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.74it/s] 23%|##3       | 6/26 [00:00<00:00, 26.25it/s] 38%|###8      | 10/26 [00:00<00:00, 30.20it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.31it/s] 69%|######9   | 18/26 [00:00<00:00, 33.09it/s] 85%|########4 | 22/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 34.62it/s]100%|##########| 26/26 [00:00<00:00, 29.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.62 (  0.63)	train_minacc   0.72 (  0.72)	train_majacc   0.60 (  0.61)	train_corr   0.00 (  0.00)	l1 6.1883 (6.2333)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.02it/s] 27%|##6       | 7/26 [00:00<00:00, 26.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.28it/s] 46%|####6     | 12/26 [00:00<00:00, 33.77it/s] 65%|######5   | 17/26 [00:00<00:00, 35.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.97it/s] 85%|########4 | 22/26 [00:00<00:00, 37.98it/s]100%|##########| 26/26 [00:00<00:00, 32.27it/s]
Test: [   0/  26]	Loss 0.623 (0.623)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.58 (  0.58)	Loss_d 0.623 (0.623)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.626 (0.631)	test_acc   0.64 (  0.60)	test_minacc   0.71 (  0.72)	test_majacc   0.63 (  0.58)	Loss_d 0.626 (0.631)	test_acc_d   0.64 (  0.60)	test_minacc_d   0.71 (  0.72)	test_majacc_d   0.63 (  0.58)	test_corr_d   0.30 (  0.25)
Test: [  20/  26]	Loss 0.609 (0.623)	test_acc   0.66 (  0.62)	test_minacc   0.80 (  0.74)	test_majacc   0.64 (  0.59)	Loss_d 0.609 (0.623)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.28 (  0.27)
Test: [  26/  26]	Loss 0.626 (0.623)	test_acc   0.62 (  0.62)	test_minacc   0.72 (  0.73)	test_majacc   0.60 (  0.60)	Loss_d 0.626 (0.623)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.28 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.60 (  0.60)	Loss_d 0.698 (0.698)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.67 (  0.67)	test_minacc   0.67 (  0.67)	test_majacc   0.60 (  0.60)	Loss_d 0.698 (0.698)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 32/  1]	epoch_time 0.0395 (0.0421)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0414)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.617500006198883, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.98it/s] 19%|#9        | 5/26 [00:00<00:00, 24.87it/s] 35%|###4      | 9/26 [00:00<00:00, 29.76it/s] 50%|#####     | 13/26 [00:00<00:00, 32.34it/s] 65%|######5   | 17/26 [00:00<00:00, 33.38it/s] 81%|########  | 21/26 [00:00<00:00, 34.18it/s] 96%|#########6| 25/26 [00:00<00:00, 34.94it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.60 (  0.61)	train_minacc   0.69 (  0.74)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 6.2541 (6.2284)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 23%|##3       | 6/26 [00:00<00:00, 30.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.04it/s] 42%|####2     | 11/26 [00:00<00:00, 37.45it/s] 62%|######1   | 16/26 [00:00<00:00, 41.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.87it/s] 81%|########  | 21/26 [00:00<00:00, 42.36it/s]100%|##########| 26/26 [00:00<00:00, 37.16it/s]
Test: [   0/  26]	Loss 0.630 (0.630)	test_acc   0.60 (  0.60)	test_minacc   0.74 (  0.74)	test_majacc   0.57 (  0.57)	Loss_d 0.630 (0.630)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.626 (0.634)	test_acc   0.65 (  0.61)	test_minacc   0.67 (  0.68)	test_majacc   0.64 (  0.60)	Loss_d 0.626 (0.634)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.67 (  0.68)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.31 (  0.27)
Test: [  20/  26]	Loss 0.604 (0.622)	test_acc   0.65 (  0.63)	test_minacc   0.77 (  0.71)	test_majacc   0.63 (  0.61)	Loss_d 0.604 (0.622)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.29 (  0.28)
Test: [  26/  26]	Loss 0.625 (0.620)	test_acc   0.60 (  0.63)	test_minacc   0.69 (  0.70)	test_majacc   0.59 (  0.62)	Loss_d 0.625 (0.620)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.30 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.65it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.715 (0.715)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.715 (0.715)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 33/  1]	epoch_time 0.0379 (0.0420)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6308000094294548, 0.6500000357627869)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.36it/s] 23%|##3       | 6/26 [00:00<00:00, 28.87it/s] 38%|###8      | 10/26 [00:00<00:00, 32.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.49it/s] 69%|######9   | 18/26 [00:00<00:00, 33.40it/s] 85%|########4 | 22/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 30.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.63 (  0.60)	train_minacc   0.78 (  0.74)	train_majacc   0.61 (  0.58)	train_corr   0.00 (  0.00)	l1 6.1390 (6.1420)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.54it/s] 27%|##6       | 7/26 [00:00<00:00, 35.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.47it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.80it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.80it/s] 85%|########4 | 22/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 37.71it/s]
Test: [   0/  26]	Loss 0.628 (0.628)	test_acc   0.62 (  0.62)	test_minacc   0.79 (  0.79)	test_majacc   0.58 (  0.58)	Loss_d 0.628 (0.628)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.626 (0.635)	test_acc   0.65 (  0.60)	test_minacc   0.72 (  0.73)	test_majacc   0.63 (  0.58)	Loss_d 0.626 (0.635)	test_acc_d   0.65 (  0.60)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.63 (  0.58)	test_corr_d   0.28 (  0.24)
Test: [  20/  26]	Loss 0.612 (0.626)	test_acc   0.66 (  0.62)	test_minacc   0.80 (  0.75)	test_majacc   0.63 (  0.59)	Loss_d 0.612 (0.626)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.63 (  0.59)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.631 (0.625)	test_acc   0.62 (  0.62)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.631 (0.625)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.75it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.690 (0.690)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.690 (0.690)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 34/  1]	epoch_time 0.0397 (0.0419)	validation_time 0.0003 (0.0006)	train_time 0.0393 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.618300009727478, 0.6720000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.96it/s] 19%|#9        | 5/26 [00:00<00:01, 15.88it/s] 35%|###4      | 9/26 [00:00<00:00, 22.45it/s] 50%|#####     | 13/26 [00:00<00:00, 26.50it/s] 65%|######5   | 17/26 [00:00<00:00, 29.07it/s] 81%|########  | 21/26 [00:00<00:00, 31.08it/s] 96%|#########6| 25/26 [00:00<00:00, 32.08it/s]100%|##########| 26/26 [00:01<00:00, 25.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.60)	train_acc   0.60 (  0.63)	train_minacc   0.75 (  0.69)	train_majacc   0.57 (  0.62)	train_corr   0.00 (  0.00)	l1 6.2142 (6.1844)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.20it/s] 23%|##3       | 6/26 [00:00<00:00, 21.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.22it/s] 42%|####2     | 11/26 [00:00<00:00, 30.67it/s] 65%|######5   | 17/26 [00:00<00:00, 35.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.46it/s] 85%|########4 | 22/26 [00:00<00:00, 39.10it/s]100%|##########| 26/26 [00:00<00:00, 31.33it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.58 (  0.58)	test_minacc   0.79 (  0.79)	test_majacc   0.54 (  0.54)	Loss_d 0.648 (0.648)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.643 (0.652)	test_acc   0.63 (  0.58)	test_minacc   0.72 (  0.74)	test_majacc   0.61 (  0.55)	Loss_d 0.643 (0.652)	test_acc_d   0.63 (  0.58)	test_minacc_d   0.72 (  0.74)	test_majacc_d   0.61 (  0.55)	test_corr_d   0.21 (  0.17)
Test: [  20/  26]	Loss 0.631 (0.643)	test_acc   0.63 (  0.60)	test_minacc   0.80 (  0.76)	test_majacc   0.60 (  0.57)	Loss_d 0.631 (0.643)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.19 (  0.18)
Test: [  26/  26]	Loss 0.646 (0.642)	test_acc   0.60 (  0.60)	test_minacc   0.75 (  0.76)	test_majacc   0.57 (  0.57)	Loss_d 0.646 (0.642)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.75 (  0.76)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.19 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.15it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.676 (0.676)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.676 (0.676)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 35/  1]	epoch_time 0.0454 (0.0420)	validation_time 0.0006 (0.0006)	train_time 0.0448 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.600900004029274, 0.687000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.46it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.37it/s] 65%|######5   | 17/26 [00:00<00:00, 32.22it/s] 81%|########  | 21/26 [00:00<00:00, 33.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.001 (0.000)	train_nll   0.65 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.64 (  0.66)	train_minacc   0.58 (  0.59)	train_majacc   0.64 (  0.67)	train_corr   0.00 (  0.00)	l1 6.0773 (6.1055)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.87it/s] 23%|##3       | 6/26 [00:00<00:00, 30.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.03it/s] 42%|####2     | 11/26 [00:00<00:00, 36.98it/s] 62%|######1   | 16/26 [00:00<00:00, 40.18it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.18it/s] 81%|########  | 21/26 [00:00<00:00, 40.24it/s]100%|##########| 26/26 [00:00<00:00, 36.21it/s]
Test: [   0/  26]	Loss 0.640 (0.640)	test_acc   0.60 (  0.60)	test_minacc   0.72 (  0.72)	test_majacc   0.58 (  0.58)	Loss_d 0.640 (0.640)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.627 (0.638)	test_acc   0.66 (  0.63)	test_minacc   0.71 (  0.69)	test_majacc   0.65 (  0.62)	Loss_d 0.627 (0.638)	test_acc_d   0.66 (  0.63)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.26 (  0.23)
Test: [  20/  26]	Loss 0.613 (0.628)	test_acc   0.67 (  0.64)	test_minacc   0.79 (  0.72)	test_majacc   0.65 (  0.63)	Loss_d 0.613 (0.628)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.79 (  0.72)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.25 (  0.24)
Test: [  26/  26]	Loss 0.634 (0.627)	test_acc   0.61 (  0.64)	test_minacc   0.69 (  0.71)	test_majacc   0.60 (  0.63)	Loss_d 0.634 (0.627)	test_acc_d   0.61 (  0.64)	test_minacc_d   0.69 (  0.71)	test_majacc_d   0.60 (  0.63)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.68it/s]
Test: [  0/  1]	Loss 0.660 (0.660)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.66 (  0.66)	Loss_d 0.660 (0.660)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.660 (0.660)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.66 (  0.66)	Loss_d 0.660 (0.660)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 36/  1]	epoch_time 0.0391 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0387 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6414000185132027, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.48it/s] 19%|#9        | 5/26 [00:00<00:00, 21.16it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 50%|#####     | 13/26 [00:00<00:00, 30.41it/s] 65%|######5   | 17/26 [00:00<00:00, 32.41it/s] 81%|########  | 21/26 [00:00<00:00, 33.97it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.001 (0.001)	train_nll   0.65 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.63 (  0.64)	train_minacc   0.61 (  0.61)	train_majacc   0.63 (  0.64)	train_corr   0.00 (  0.00)	l1 6.0743 (6.0393)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.82it/s] 23%|##3       | 6/26 [00:00<00:00, 20.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.01it/s] 42%|####2     | 11/26 [00:00<00:00, 29.50it/s] 62%|######1   | 16/26 [00:00<00:00, 35.87it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.87it/s] 81%|########  | 21/26 [00:00<00:00, 36.48it/s]100%|##########| 26/26 [00:00<00:00, 39.93it/s]100%|##########| 26/26 [00:00<00:00, 30.27it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.61 (  0.61)	test_minacc   0.76 (  0.76)	test_majacc   0.58 (  0.58)	Loss_d 0.637 (0.637)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.631 (0.640)	test_acc   0.63 (  0.61)	test_minacc   0.68 (  0.70)	test_majacc   0.62 (  0.59)	Loss_d 0.631 (0.640)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.25 (  0.22)
Test: [  20/  26]	Loss 0.619 (0.631)	test_acc   0.66 (  0.62)	test_minacc   0.79 (  0.73)	test_majacc   0.64 (  0.60)	Loss_d 0.619 (0.631)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.79 (  0.73)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.23 (  0.23)
Test: [  26/  26]	Loss 0.632 (0.630)	test_acc   0.62 (  0.63)	test_minacc   0.72 (  0.72)	test_majacc   0.60 (  0.61)	Loss_d 0.632 (0.630)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.25 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 0.669 (0.669)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.669 (0.669)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.669 (0.669)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.669 (0.669)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 37/  1]	epoch_time 0.0418 (0.0419)	validation_time 0.0005 (0.0006)	train_time 0.0413 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6254000067710876, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.86it/s] 19%|#9        | 5/26 [00:00<00:01, 12.91it/s] 35%|###4      | 9/26 [00:00<00:00, 19.39it/s] 50%|#####     | 13/26 [00:00<00:00, 23.84it/s] 65%|######5   | 17/26 [00:00<00:00, 26.66it/s] 81%|########  | 21/26 [00:00<00:00, 29.11it/s] 96%|#########6| 25/26 [00:01<00:00, 31.18it/s]100%|##########| 26/26 [00:01<00:00, 22.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.58 (  0.62)	train_minacc   0.72 (  0.65)	train_majacc   0.56 (  0.62)	train_corr   0.00 (  0.00)	l1 6.1404 (6.0490)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.15it/s] 23%|##3       | 6/26 [00:00<00:00, 28.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.65it/s] 42%|####2     | 11/26 [00:00<00:00, 36.78it/s] 62%|######1   | 16/26 [00:00<00:00, 40.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.08it/s] 85%|########4 | 22/26 [00:00<00:00, 44.19it/s]100%|##########| 26/26 [00:00<00:00, 38.61it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.57 (  0.57)	test_minacc   0.79 (  0.79)	test_majacc   0.53 (  0.53)	Loss_d 0.660 (0.660)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.663 (0.665)	test_acc   0.59 (  0.57)	test_minacc   0.64 (  0.71)	test_majacc   0.58 (  0.55)	Loss_d 0.663 (0.665)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.64 (  0.71)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.19 (  0.15)
Test: [  20/  26]	Loss 0.652 (0.656)	test_acc   0.62 (  0.59)	test_minacc   0.80 (  0.74)	test_majacc   0.59 (  0.56)	Loss_d 0.652 (0.656)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.59 (  0.56)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.654 (0.655)	test_acc   0.58 (  0.59)	test_minacc   0.75 (  0.73)	test_majacc   0.55 (  0.57)	Loss_d 0.654 (0.655)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.18 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 38/  1]	epoch_time 0.0425 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0421 (0.0413)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5916000096797943, 0.6620000600814819)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 19%|#9        | 5/26 [00:00<00:01, 18.09it/s] 35%|###4      | 9/26 [00:00<00:00, 24.28it/s] 50%|#####     | 13/26 [00:00<00:00, 28.23it/s] 65%|######5   | 17/26 [00:00<00:00, 29.94it/s] 81%|########  | 21/26 [00:00<00:00, 31.56it/s] 96%|#########6| 25/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:00<00:00, 26.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.001 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.59 (  0.56)	train_minacc   0.69 (  0.73)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 5.8703 (5.9341)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.50it/s] 12%|#1        | 3/26 [00:00<00:02, 10.40it/s] 31%|###       | 8/26 [00:00<00:00, 23.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.90it/s] 50%|#####     | 13/26 [00:00<00:00, 31.73it/s] 69%|######9   | 18/26 [00:00<00:00, 36.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.33it/s] 88%|########8 | 23/26 [00:00<00:00, 36.86it/s]100%|##########| 26/26 [00:00<00:00, 29.47it/s]
Test: [   0/  26]	Loss 0.633 (0.633)	test_acc   0.59 (  0.59)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.633 (0.633)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.649 (0.645)	test_acc   0.56 (  0.54)	test_minacc   0.72 (  0.73)	test_majacc   0.53 (  0.50)	Loss_d 0.649 (0.645)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.30 (  0.26)
Test: [  20/  26]	Loss 0.638 (0.643)	test_acc   0.55 (  0.54)	test_minacc   0.82 (  0.76)	test_majacc   0.51 (  0.51)	Loss_d 0.638 (0.643)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.82 (  0.76)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.26 (  0.27)
Test: [  26/  26]	Loss 0.636 (0.643)	test_acc   0.57 (  0.55)	test_minacc   0.69 (  0.75)	test_majacc   0.55 (  0.51)	Loss_d 0.636 (0.643)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.69 (  0.75)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.29 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.89it/s]
Test: [  0/  1]	Loss 0.711 (0.711)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.42 (  0.42)	Loss_d 0.711 (0.711)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.711 (0.711)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.42 (  0.42)	Loss_d 0.711 (0.711)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 39/  1]	epoch_time 0.0396 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0392 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5450000120401383, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.60it/s] 27%|##6       | 7/26 [00:00<00:00, 30.57it/s] 42%|####2     | 11/26 [00:00<00:00, 33.08it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.06it/s] 88%|########8 | 23/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 31.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.58 (  0.58)	train_minacc   0.72 (  0.75)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 6.0622 (5.9499)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.75it/s] 23%|##3       | 6/26 [00:00<00:00, 31.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.29it/s] 42%|####2     | 11/26 [00:00<00:00, 37.69it/s] 62%|######1   | 16/26 [00:00<00:00, 41.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.28it/s] 81%|########  | 21/26 [00:00<00:00, 39.69it/s]100%|##########| 26/26 [00:00<00:00, 42.62it/s]100%|##########| 26/26 [00:00<00:00, 35.95it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.57 (  0.57)	test_minacc   0.78 (  0.78)	test_majacc   0.53 (  0.53)	Loss_d 0.664 (0.664)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.660 (0.666)	test_acc   0.61 (  0.58)	test_minacc   0.68 (  0.70)	test_majacc   0.60 (  0.56)	Loss_d 0.660 (0.666)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.60 (  0.56)	test_corr_d   0.19 (  0.15)
Test: [  20/  26]	Loss 0.652 (0.658)	test_acc   0.62 (  0.59)	test_minacc   0.77 (  0.73)	test_majacc   0.60 (  0.57)	Loss_d 0.652 (0.658)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.77 (  0.73)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.15 (  0.16)
Test: [  26/  26]	Loss 0.654 (0.656)	test_acc   0.59 (  0.60)	test_minacc   0.72 (  0.72)	test_majacc   0.57 (  0.58)	Loss_d 0.654 (0.656)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.18 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.44it/s]
Test: [  0/  1]	Loss 0.683 (0.683)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.683 (0.683)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.683 (0.683)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.683 (0.683)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 40/  1]	epoch_time 0.0423 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5978000082373619, 0.656000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.98it/s] 65%|######5   | 17/26 [00:00<00:00, 32.36it/s] 81%|########  | 21/26 [00:00<00:00, 33.18it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.62 (  0.57)	train_minacc   0.64 (  0.73)	train_majacc   0.62 (  0.54)	train_corr   0.00 (  0.00)	l1 5.9497 (5.9108)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 27%|##6       | 7/26 [00:00<00:00, 28.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.22it/s] 46%|####6     | 12/26 [00:00<00:00, 35.09it/s] 65%|######5   | 17/26 [00:00<00:00, 37.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.25it/s] 85%|########4 | 22/26 [00:00<00:00, 40.00it/s]100%|##########| 26/26 [00:00<00:00, 33.77it/s]
Test: [   0/  26]	Loss 0.659 (0.659)	test_acc   0.62 (  0.62)	test_minacc   0.57 (  0.57)	test_majacc   0.63 (  0.63)	Loss_d 0.659 (0.659)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.652 (0.657)	test_acc   0.65 (  0.63)	test_minacc   0.59 (  0.57)	test_majacc   0.67 (  0.64)	Loss_d 0.652 (0.657)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.27 (  0.23)
Test: [  20/  26]	Loss 0.642 (0.648)	test_acc   0.65 (  0.65)	test_minacc   0.68 (  0.60)	test_majacc   0.64 (  0.65)	Loss_d 0.642 (0.648)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.68 (  0.60)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.22 (  0.23)
Test: [  26/  26]	Loss 0.647 (0.646)	test_acc   0.64 (  0.65)	test_minacc   0.53 (  0.59)	test_majacc   0.65 (  0.66)	Loss_d 0.647 (0.646)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.84it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.70 (  0.70)	Loss_d 0.697 (0.697)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.70 (  0.70)	Loss_d 0.697 (0.697)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 41/  1]	epoch_time 0.0407 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6487000190019607, 0.5800000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.63it/s] 19%|#9        | 5/26 [00:00<00:01, 20.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 28.73it/s] 65%|######5   | 17/26 [00:00<00:00, 29.92it/s] 81%|########  | 21/26 [00:00<00:00, 31.80it/s] 96%|#########6| 25/26 [00:00<00:00, 32.90it/s]100%|##########| 26/26 [00:00<00:00, 27.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.001 (0.000)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.61 (  0.53)	train_minacc   0.72 (  0.74)	train_majacc   0.59 (  0.50)	train_corr   0.00 (  0.00)	l1 5.8398 (5.8925)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 18.84it/s]                                               19%|#9        | 5/26 [00:00<00:01, 18.84it/s] 42%|####2     | 11/26 [00:00<00:00, 26.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 32.27it/s] 92%|#########2| 24/26 [00:00<00:00, 35.96it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.62 (  0.62)	test_minacc   0.78 (  0.78)	test_majacc   0.59 (  0.59)	Loss_d 0.644 (0.644)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.655 (0.651)	test_acc   0.59 (  0.57)	test_minacc   0.64 (  0.71)	test_majacc   0.58 (  0.55)	Loss_d 0.655 (0.651)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.64 (  0.71)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.25 (  0.22)
Test: [  20/  26]	Loss 0.648 (0.649)	test_acc   0.60 (  0.58)	test_minacc   0.80 (  0.74)	test_majacc   0.57 (  0.56)	Loss_d 0.648 (0.649)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.20 (  0.22)
Test: [  26/  26]	Loss 0.649 (0.649)	test_acc   0.62 (  0.59)	test_minacc   0.75 (  0.73)	test_majacc   0.60 (  0.56)	Loss_d 0.649 (0.649)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.75 (  0.73)	test_majacc_d   0.60 (  0.56)	test_corr_d   0.22 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.23it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.55 (  0.55)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 42/  1]	epoch_time 0.0408 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0405 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5882000089883804, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.41it/s] 35%|###4      | 9/26 [00:00<00:00, 26.90it/s] 50%|#####     | 13/26 [00:00<00:00, 29.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.61)	train_acc   0.57 (  0.59)	train_minacc   0.78 (  0.66)	train_majacc   0.54 (  0.58)	train_corr   0.00 (  0.00)	l1 5.9424 (5.8985)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.81it/s] 31%|###       | 8/26 [00:00<00:00, 36.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.41it/s] 50%|#####     | 13/26 [00:00<00:00, 40.60it/s] 69%|######9   | 18/26 [00:00<00:00, 42.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.17it/s] 88%|########8 | 23/26 [00:00<00:00, 43.36it/s]100%|##########| 26/26 [00:00<00:00, 38.23it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.56 (  0.56)	test_minacc   0.79 (  0.79)	test_majacc   0.52 (  0.52)	Loss_d 0.668 (0.668)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.675 (0.672)	test_acc   0.58 (  0.55)	test_minacc   0.68 (  0.73)	test_majacc   0.56 (  0.52)	Loss_d 0.675 (0.672)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.68 (  0.73)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.13 (  0.10)
Test: [  20/  26]	Loss 0.670 (0.669)	test_acc   0.59 (  0.56)	test_minacc   0.80 (  0.76)	test_majacc   0.55 (  0.53)	Loss_d 0.670 (0.669)	test_acc_d   0.59 (  0.56)	test_minacc_d   0.80 (  0.76)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.08 (  0.10)
Test: [  26/  26]	Loss 0.672 (0.668)	test_acc   0.56 (  0.56)	test_minacc   0.78 (  0.75)	test_majacc   0.53 (  0.53)	Loss_d 0.672 (0.668)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.02it/s]
Test: [  0/  1]	Loss 0.677 (0.677)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.52 (  0.52)	Loss_d 0.677 (0.677)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.677 (0.677)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.52 (  0.52)	Loss_d 0.677 (0.677)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 43/  1]	epoch_time 0.0381 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0376 (0.0411)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5632000128626824, 0.687000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 19%|#9        | 5/26 [00:00<00:00, 24.06it/s] 35%|###4      | 9/26 [00:00<00:00, 30.35it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.16it/s] 69%|######9   | 18/26 [00:00<00:00, 36.75it/s] 88%|########8 | 23/26 [00:00<00:00, 38.40it/s]100%|##########| 26/26 [00:00<00:00, 32.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.62 (  0.60)	train_minacc   0.78 (  0.68)	train_majacc   0.60 (  0.59)	train_corr   0.00 (  0.00)	l1 5.8561 (5.9026)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 15%|#5        | 4/26 [00:00<00:01, 20.09it/s] 35%|###4      | 9/26 [00:00<00:00, 32.18it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.03it/s] 92%|#########2| 24/26 [00:00<00:00, 38.31it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.60 (  0.60)	test_minacc   0.78 (  0.78)	test_majacc   0.57 (  0.57)	Loss_d 0.642 (0.642)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.651 (0.648)	test_acc   0.63 (  0.59)	test_minacc   0.65 (  0.68)	test_majacc   0.62 (  0.58)	Loss_d 0.651 (0.648)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.65 (  0.68)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.24 (  0.21)
Test: [  20/  26]	Loss 0.642 (0.644)	test_acc   0.62 (  0.60)	test_minacc   0.73 (  0.71)	test_majacc   0.60 (  0.58)	Loss_d 0.642 (0.644)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.645 (0.644)	test_acc   0.60 (  0.61)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.59)	Loss_d 0.645 (0.644)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.21 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.62 (  0.62)	Loss_d 0.692 (0.692)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 44/  1]	epoch_time 0.0456 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0453 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6058000058531762, 0.6390000581741333)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.68it/s] 19%|#9        | 5/26 [00:00<00:01, 17.17it/s] 35%|###4      | 9/26 [00:00<00:00, 23.65it/s] 50%|#####     | 13/26 [00:00<00:00, 27.64it/s] 65%|######5   | 17/26 [00:00<00:00, 30.06it/s] 81%|########  | 21/26 [00:00<00:00, 32.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.05it/s]100%|##########| 26/26 [00:00<00:00, 26.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.60 (  0.60)	train_minacc   0.78 (  0.72)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 5.8762 (5.8551)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.14it/s] 23%|##3       | 6/26 [00:00<00:00, 20.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.17it/s] 42%|####2     | 11/26 [00:00<00:00, 28.45it/s] 62%|######1   | 16/26 [00:00<00:00, 33.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.98it/s] 81%|########  | 21/26 [00:00<00:00, 34.86it/s]100%|##########| 26/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 29.40it/s]
Test: [   0/  26]	Loss 0.649 (0.649)	test_acc   0.59 (  0.59)	test_minacc   0.79 (  0.79)	test_majacc   0.55 (  0.55)	Loss_d 0.649 (0.649)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.662 (0.655)	test_acc   0.59 (  0.57)	test_minacc   0.68 (  0.72)	test_majacc   0.58 (  0.54)	Loss_d 0.662 (0.655)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.68 (  0.72)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.21 (  0.18)
Test: [  20/  26]	Loss 0.653 (0.653)	test_acc   0.60 (  0.58)	test_minacc   0.79 (  0.75)	test_majacc   0.57 (  0.55)	Loss_d 0.653 (0.653)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.79 (  0.75)	test_majacc_d   0.57 (  0.55)	test_corr_d   0.17 (  0.19)
Test: [  26/  26]	Loss 0.654 (0.653)	test_acc   0.61 (  0.58)	test_minacc   0.78 (  0.74)	test_majacc   0.58 (  0.55)	Loss_d 0.654 (0.653)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.58 (  0.55)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.56 (  0.56)	Loss_d 0.699 (0.699)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.56 (  0.56)	Loss_d 0.699 (0.699)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 45/  1]	epoch_time 0.0403 (0.0418)	validation_time 0.0005 (0.0006)	train_time 0.0398 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.58150001257658, 0.6670000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.91it/s] 23%|##3       | 6/26 [00:00<00:00, 28.83it/s] 38%|###8      | 10/26 [00:00<00:00, 31.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.12it/s] 69%|######9   | 18/26 [00:00<00:00, 34.15it/s] 85%|########4 | 22/26 [00:00<00:00, 34.96it/s]100%|##########| 26/26 [00:00<00:00, 35.48it/s]100%|##########| 26/26 [00:00<00:00, 31.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.60 (  0.61)	train_minacc   0.75 (  0.69)	train_majacc   0.58 (  0.60)	train_corr   0.00 (  0.00)	l1 5.8864 (5.9000)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.25it/s] 23%|##3       | 6/26 [00:00<00:00, 21.09it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.09it/s] 42%|####2     | 11/26 [00:00<00:00, 29.44it/s] 62%|######1   | 16/26 [00:00<00:00, 35.12it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.12it/s] 81%|########  | 21/26 [00:00<00:00, 35.84it/s]100%|##########| 26/26 [00:00<00:00, 39.32it/s]100%|##########| 26/26 [00:00<00:00, 30.40it/s]
Test: [   0/  26]	Loss 0.646 (0.646)	test_acc   0.60 (  0.60)	test_minacc   0.81 (  0.81)	test_majacc   0.56 (  0.56)	Loss_d 0.646 (0.646)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.664 (0.656)	test_acc   0.58 (  0.56)	test_minacc   0.70 (  0.73)	test_majacc   0.56 (  0.53)	Loss_d 0.664 (0.656)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.22 (  0.19)
Test: [  20/  26]	Loss 0.653 (0.653)	test_acc   0.59 (  0.57)	test_minacc   0.80 (  0.75)	test_majacc   0.55 (  0.54)	Loss_d 0.653 (0.653)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.17 (  0.19)
Test: [  26/  26]	Loss 0.652 (0.653)	test_acc   0.62 (  0.57)	test_minacc   0.78 (  0.75)	test_majacc   0.59 (  0.54)	Loss_d 0.652 (0.653)	test_acc_d   0.62 (  0.57)	test_minacc_d   0.78 (  0.75)	test_majacc_d   0.59 (  0.54)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.69it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.707 (0.707)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.707 (0.707)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 46/  1]	epoch_time 0.0444 (0.0419)	validation_time 0.0008 (0.0006)	train_time 0.0436 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5743000110983849, 0.6630000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 15%|#5        | 4/26 [00:00<00:01, 15.04it/s] 27%|##6       | 7/26 [00:00<00:00, 20.53it/s] 42%|####2     | 11/26 [00:00<00:00, 26.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.48it/s] 88%|########8 | 23/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 26.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.60 (  0.61)	train_minacc   0.72 (  0.70)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 5.8720 (5.8843)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.67it/s] 23%|##3       | 6/26 [00:00<00:00, 22.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.44it/s] 42%|####2     | 11/26 [00:00<00:00, 31.94it/s] 65%|######5   | 17/26 [00:00<00:00, 37.13it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.13it/s] 85%|########4 | 22/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 32.72it/s]
Test: [   0/  26]	Loss 0.640 (0.640)	test_acc   0.60 (  0.60)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.640 (0.640)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.660 (0.653)	test_acc   0.59 (  0.57)	test_minacc   0.71 (  0.72)	test_majacc   0.57 (  0.54)	Loss_d 0.660 (0.653)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.71 (  0.72)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.24 (  0.20)
Test: [  20/  26]	Loss 0.647 (0.649)	test_acc   0.59 (  0.58)	test_minacc   0.80 (  0.74)	test_majacc   0.56 (  0.55)	Loss_d 0.647 (0.649)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.80 (  0.74)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.19 (  0.21)
Test: [  26/  26]	Loss 0.646 (0.649)	test_acc   0.62 (  0.58)	test_minacc   0.72 (  0.74)	test_majacc   0.60 (  0.55)	Loss_d 0.646 (0.649)	test_acc_d   0.62 (  0.58)	test_minacc_d   0.72 (  0.74)	test_majacc_d   0.60 (  0.55)	test_corr_d   0.21 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.62it/s]
Test: [  0/  1]	Loss 0.710 (0.710)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.55 (  0.55)	Loss_d 0.710 (0.710)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.710 (0.710)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.55 (  0.55)	Loss_d 0.710 (0.710)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 47/  1]	epoch_time 0.0401 (0.0418)	validation_time 0.0003 (0.0006)	train_time 0.0397 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5796000096201896, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.42it/s] 38%|###8      | 10/26 [00:00<00:00, 32.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.15it/s] 69%|######9   | 18/26 [00:00<00:00, 34.80it/s] 85%|########4 | 22/26 [00:00<00:00, 35.33it/s]100%|##########| 26/26 [00:00<00:00, 36.20it/s]100%|##########| 26/26 [00:00<00:00, 31.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.60 (  0.61)	train_minacc   0.72 (  0.70)	train_majacc   0.58 (  0.60)	train_corr   0.00 (  0.00)	l1 5.8914 (5.8832)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.45it/s] 15%|#5        | 4/26 [00:00<00:01, 19.32it/s] 35%|###4      | 9/26 [00:00<00:00, 31.50it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.90it/s] 92%|#########2| 24/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.59 (  0.59)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.642 (0.642)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.662 (0.655)	test_acc   0.60 (  0.56)	test_minacc   0.74 (  0.73)	test_majacc   0.57 (  0.53)	Loss_d 0.662 (0.655)	test_acc_d   0.60 (  0.56)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.57 (  0.53)	test_corr_d   0.22 (  0.19)
Test: [  20/  26]	Loss 0.648 (0.652)	test_acc   0.58 (  0.57)	test_minacc   0.80 (  0.75)	test_majacc   0.54 (  0.54)	Loss_d 0.648 (0.652)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.19)
Test: [  26/  26]	Loss 0.647 (0.651)	test_acc   0.60 (  0.57)	test_minacc   0.72 (  0.75)	test_majacc   0.58 (  0.54)	Loss_d 0.647 (0.651)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.72 (  0.75)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.21it/s]
Test: [  0/  1]	Loss 0.710 (0.710)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.710 (0.710)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.710 (0.710)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.53 (  0.53)	Loss_d 0.710 (0.710)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 48/  1]	epoch_time 0.0406 (0.0418)	validation_time 0.0005 (0.0006)	train_time 0.0401 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.5728000105619431, 0.6660000085830688)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.18it/s] 19%|#9        | 5/26 [00:00<00:00, 21.33it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 50%|#####     | 13/26 [00:00<00:00, 30.65it/s] 65%|######5   | 17/26 [00:00<00:00, 32.92it/s] 81%|########  | 21/26 [00:00<00:00, 34.35it/s] 96%|#########6| 25/26 [00:00<00:00, 34.86it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.001 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.58 (  0.63)	train_minacc   0.72 (  0.66)	train_majacc   0.56 (  0.63)	train_corr   0.00 (  0.00)	l1 5.9238 (5.8663)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.82it/s] 27%|##6       | 7/26 [00:00<00:00, 32.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.41it/s] 46%|####6     | 12/26 [00:00<00:00, 35.06it/s] 65%|######5   | 17/26 [00:00<00:00, 39.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.10it/s] 85%|########4 | 22/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 35.89it/s]
Test: [   0/  26]	Loss 0.656 (0.656)	test_acc   0.57 (  0.57)	test_minacc   0.72 (  0.72)	test_majacc   0.55 (  0.55)	Loss_d 0.656 (0.656)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.656 (0.658)	test_acc   0.62 (  0.59)	test_minacc   0.68 (  0.68)	test_majacc   0.60 (  0.58)	Loss_d 0.656 (0.658)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.21 (  0.17)
Test: [  20/  26]	Loss 0.646 (0.651)	test_acc   0.63 (  0.60)	test_minacc   0.77 (  0.71)	test_majacc   0.61 (  0.58)	Loss_d 0.646 (0.651)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.61 (  0.58)	test_corr_d   0.17 (  0.18)
Test: [  26/  26]	Loss 0.650 (0.649)	test_acc   0.56 (  0.61)	test_minacc   0.75 (  0.70)	test_majacc   0.53 (  0.59)	Loss_d 0.650 (0.649)	test_acc_d   0.56 (  0.61)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.53 (  0.59)	test_corr_d   0.18 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.62 (  0.62)	Loss_d 0.679 (0.679)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.16 ( -0.16)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.62 (  0.62)	Loss_d 0.679 (0.679)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.16 ( -0.16)
Overall Timing[ 49/  1]	epoch_time 0.0434 (0.0418)	validation_time 0.0005 (0.0006)	train_time 0.0429 (0.0412)
record: (train_acc, test_acc) (0.6292000076174736, 0.7040000557899475)
last accs (train_acc, test_acc) (0.6064000079631805, 0.6430000066757202)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.170 MB of 0.170 MB uploadedwandb: \ 0.170 MB of 0.170 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpjr9bxmak'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_205632-gygusemi
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/gygusemi
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1166
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6028, 3, 32, 32) (5972, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.60s/it] 19%|#9        | 5/26 [00:01<00:05,  3.85it/s] 35%|###4      | 9/26 [00:01<00:02,  7.56it/s] 50%|#####     | 13/26 [00:01<00:01, 11.49it/s] 65%|######5   | 17/26 [00:02<00:00, 15.47it/s] 81%|########  | 21/26 [00:02<00:00, 19.10it/s] 96%|#########6| 25/26 [00:02<00:00, 22.26it/s]100%|##########| 26/26 [00:03<00:00,  7.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.417 (0.554)	train_nll   0.42 (  0.55)	train_penalty   0.09 (  0.25)	weight_norm  20.95 ( 18.16)	train_acc   0.84 (  0.80)	train_minacc   0.00 (  0.09)	train_majacc   0.99 (  0.93)	train_corr   0.00 (  0.00)	l1 8.3077 (8.3808)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.01it/s] 42%|####2     | 11/26 [00:00<00:00, 32.78it/s] 62%|######1   | 16/26 [00:00<00:00, 35.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.66it/s] 81%|########  | 21/26 [00:00<00:00, 38.30it/s]100%|##########| 26/26 [00:00<00:00, 41.13it/s]100%|##########| 26/26 [00:00<00:00, 32.73it/s]
Test: [   0/  26]	Loss 0.447 (0.447)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.447 (0.447)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.392 (0.406)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.392 (0.406)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.408 (0.415)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.408 (0.415)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.413 (0.416)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.413 (0.416)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]100%|##########| 1/1 [00:00<00:00,  2.48it/s]
Test: [  0/  1]	Loss 1.772 (1.772)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.772 (1.772)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.772 (1.772)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.772 (1.772)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0941 (0.0941)	validation_time 0.0069 (0.0069)	train_time 0.0829 (0.0829)
record: (train_acc, test_acc) (0.84490002399683, 0.11000000685453415)
last accs (train_acc, test_acc) (0.84490002399683, 0.11000000685453415)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 23.05it/s] 35%|###4      | 9/26 [00:00<00:00, 28.17it/s] 50%|#####     | 13/26 [00:00<00:00, 31.20it/s] 65%|######5   | 17/26 [00:00<00:00, 32.85it/s] 81%|########  | 21/26 [00:00<00:00, 34.24it/s] 96%|#########6| 25/26 [00:00<00:00, 34.71it/s]100%|##########| 26/26 [00:00<00:00, 29.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.391 (0.408)	train_nll   0.39 (  0.41)	train_penalty   0.08 (  0.05)	weight_norm  22.09 ( 21.74)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5772 (8.4392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.80it/s] 23%|##3       | 6/26 [00:00<00:00, 27.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.70it/s] 42%|####2     | 11/26 [00:00<00:00, 35.11it/s] 62%|######1   | 16/26 [00:00<00:00, 39.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.86it/s] 81%|########  | 21/26 [00:00<00:00, 36.67it/s]100%|##########| 26/26 [00:00<00:00, 34.03it/s]
Test: [   0/  26]	Loss 0.434 (0.434)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.434 (0.434)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.391 (0.390)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.390)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.391 (0.398)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.398)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.390 (0.399)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.390 (0.399)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.26it/s]
Test: [  0/  1]	Loss 1.775 (1.775)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.775 (1.775)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.775 (1.775)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.775 (1.775)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Overall Timing[  1/  1]	epoch_time 0.0398 (0.0670)	validation_time 0.0005 (0.0037)	train_time 0.0393 (0.0611)
record: (train_acc, test_acc) (0.84490002399683, 0.11000000685453415)
last accs (train_acc, test_acc) (0.8477000284790993, 0.1080000028014183)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s] 19%|#9        | 5/26 [00:00<00:00, 21.92it/s] 35%|###4      | 9/26 [00:00<00:00, 27.70it/s] 50%|#####     | 13/26 [00:00<00:00, 30.72it/s] 65%|######5   | 17/26 [00:00<00:00, 32.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.32it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.357 (0.388)	train_nll   0.36 (  0.39)	train_penalty   0.05 (  0.04)	weight_norm  22.21 ( 22.17)	train_acc   0.84 (  0.85)	train_minacc   0.03 (  0.04)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5377 (8.4487)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.36it/s] 31%|###       | 8/26 [00:00<00:00, 26.90it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 42.18it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 47.08it/s]100%|##########| 26/26 [00:00<00:00, 35.34it/s]
Test: [   0/  26]	Loss 0.411 (0.411)	test_acc   0.83 (  0.83)	test_minacc   0.17 (  0.17)	test_majacc   0.96 (  0.96)	Loss_d 0.411 (0.411)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.369 (0.362)	test_acc   0.83 (  0.85)	test_minacc   0.06 (  0.12)	test_majacc   0.96 (  0.98)	Loss_d 0.369 (0.362)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.06 (  0.12)	test_majacc_d   0.96 (  0.98)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.353 (0.369)	test_acc   0.84 (  0.85)	test_minacc   0.12 (  0.13)	test_majacc   0.97 (  0.98)	Loss_d 0.353 (0.369)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.12 (  0.13)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.352 (0.368)	test_acc   0.85 (  0.85)	test_minacc   0.16 (  0.13)	test_majacc   0.97 (  0.98)	Loss_d 0.352 (0.368)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.16 (  0.13)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.99it/s]
Test: [  0/  1]	Loss 1.576 (1.576)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.576 (1.576)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
Test: [  1/  1]	Loss 1.576 (1.576)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 1.576 (1.576)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.83 (  0.83)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0405 (0.0582)	validation_time 0.0004 (0.0026)	train_time 0.0401 (0.0541)
record: (train_acc, test_acc) (0.8489000274538994, 0.20600001513957977)
last accs (train_acc, test_acc) (0.8489000274538994, 0.20600001513957977)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.35it/s] 23%|##3       | 6/26 [00:00<00:00, 28.24it/s] 42%|####2     | 11/26 [00:00<00:00, 33.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.54it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.38it/s] 88%|########8 | 23/26 [00:00<00:00, 36.55it/s]100%|##########| 26/26 [00:00<00:00, 31.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.336 (0.375)	train_nll   0.34 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm  22.27 ( 22.24)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 8.5535 (8.4686)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 19%|#9        | 5/26 [00:00<00:00, 25.84it/s] 38%|###8      | 10/26 [00:00<00:00, 35.31it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.31it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.95it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.95it/s] 96%|#########6| 25/26 [00:00<00:00, 41.45it/s]100%|##########| 26/26 [00:00<00:00, 34.54it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.82 (  0.82)	test_minacc   0.23 (  0.23)	test_majacc   0.94 (  0.94)	Loss_d 0.408 (0.408)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.369 (0.349)	test_acc   0.83 (  0.86)	test_minacc   0.09 (  0.19)	test_majacc   0.94 (  0.97)	Loss_d 0.369 (0.349)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.09 (  0.19)	test_majacc_d   0.94 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.349 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.21 (  0.18)	test_majacc   0.96 (  0.97)	Loss_d 0.349 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.21 (  0.18)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  26/  26]	Loss 0.331 (0.359)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.331 (0.359)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 1.613 (1.613)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.613 (1.613)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.613 (1.613)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 1.613 (1.613)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0405 (0.0538)	validation_time 0.0004 (0.0020)	train_time 0.0401 (0.0506)
record: (train_acc, test_acc) (0.8491000255346298, 0.23400001227855682)
last accs (train_acc, test_acc) (0.8491000255346298, 0.23400001227855682)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.37it/s] 65%|######5   | 17/26 [00:00<00:00, 33.11it/s] 81%|########  | 21/26 [00:00<00:00, 34.60it/s] 96%|#########6| 25/26 [00:00<00:00, 35.44it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.342 (0.359)	train_nll   0.34 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm  22.33 ( 22.30)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.16)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.5388 (8.4771)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.18it/s] 31%|###       | 8/26 [00:00<00:00, 41.14it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.37it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.37it/s]100%|##########| 26/26 [00:00<00:00, 50.78it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.385 (0.385)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.340 (0.323)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.12)	test_majacc   0.97 (  0.99)	Loss_d 0.340 (0.323)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.12)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.327 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.327 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.317 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.08 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.317 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.08 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.76it/s]
Test: [  0/  1]	Loss 1.616 (1.616)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.616 (1.616)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.616 (1.616)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.616 (1.616)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[  4/  1]	epoch_time 0.0394 (0.0509)	validation_time 0.0004 (0.0017)	train_time 0.0389 (0.0483)
record: (train_acc, test_acc) (0.8491000255346298, 0.23400001227855682)
last accs (train_acc, test_acc) (0.8568000202178955, 0.1990000158548355)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.30it/s] 35%|###4      | 9/26 [00:00<00:00, 26.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.21it/s] 65%|######5   | 17/26 [00:00<00:00, 32.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.86it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.327 (0.339)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm  22.40 ( 22.37)	train_acc   0.85 (  0.85)	train_minacc   0.11 (  0.22)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.4359 (8.4376)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 23%|##3       | 6/26 [00:00<00:00, 30.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.01it/s] 42%|####2     | 11/26 [00:00<00:00, 36.53it/s] 65%|######5   | 17/26 [00:00<00:00, 38.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.37it/s] 85%|########4 | 22/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.84 (  0.84)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.352 (0.352)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.308)	test_acc   0.86 (  0.87)	test_minacc   0.19 (  0.16)	test_majacc   0.97 (  0.99)	Loss_d 0.321 (0.308)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.19 (  0.16)	test_majacc_d   0.97 (  0.99)	test_corr_d   0.90 (  0.92)
Test: [  20/  26]	Loss 0.303 (0.316)	test_acc   0.85 (  0.86)	test_minacc   0.12 (  0.16)	test_majacc   0.98 (  0.98)	Loss_d 0.303 (0.316)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.12 (  0.16)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.303 (0.314)	test_acc   0.85 (  0.86)	test_minacc   0.08 (  0.16)	test_majacc   0.98 (  0.99)	Loss_d 0.303 (0.314)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.08 (  0.16)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 1.607 (1.607)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.607 (1.607)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.607 (1.607)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.607 (1.607)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Overall Timing[  5/  1]	epoch_time 0.0396 (0.0490)	validation_time 0.0004 (0.0015)	train_time 0.0392 (0.0468)
record: (train_acc, test_acc) (0.8491000255346298, 0.23400001227855682)
last accs (train_acc, test_acc) (0.8605000221133232, 0.21800000965595245)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.75it/s] 19%|#9        | 5/26 [00:00<00:01, 20.61it/s] 35%|###4      | 9/26 [00:00<00:00, 25.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.37it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.30it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.317 (0.329)	train_nll   0.32 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.48 ( 22.44)	train_acc   0.86 (  0.86)	train_minacc   0.30 (  0.28)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 8.4083 (8.4277)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.40it/s] 15%|#5        | 4/26 [00:00<00:01, 15.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.29it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.29it/s] 96%|#########6| 25/26 [00:00<00:00, 40.54it/s]100%|##########| 26/26 [00:00<00:00, 31.30it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.83 (  0.83)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 0.351 (0.351)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.321 (0.304)	test_acc   0.87 (  0.87)	test_minacc   0.26 (  0.22)	test_majacc   0.97 (  0.98)	Loss_d 0.321 (0.304)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.26 (  0.22)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.88 (  0.91)
Test: [  20/  26]	Loss 0.290 (0.309)	test_acc   0.86 (  0.86)	test_minacc   0.28 (  0.23)	test_majacc   0.97 (  0.98)	Loss_d 0.290 (0.309)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.28 (  0.23)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.291 (0.307)	test_acc   0.86 (  0.86)	test_minacc   0.22 (  0.23)	test_majacc   0.98 (  0.98)	Loss_d 0.291 (0.307)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.22 (  0.23)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 1.644 (1.644)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0405 (0.0478)	validation_time 0.0005 (0.0014)	train_time 0.0400 (0.0458)
record: (train_acc, test_acc) (0.8646000177264214, 0.2540000081062317)
last accs (train_acc, test_acc) (0.8646000177264214, 0.2540000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 19%|#9        | 5/26 [00:00<00:01, 18.22it/s] 35%|###4      | 9/26 [00:00<00:00, 24.02it/s] 50%|#####     | 13/26 [00:00<00:00, 26.89it/s] 65%|######5   | 17/26 [00:00<00:00, 28.85it/s] 81%|########  | 21/26 [00:00<00:00, 30.05it/s] 96%|#########6| 25/26 [00:00<00:00, 30.82it/s]100%|##########| 26/26 [00:01<00:00, 25.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.005 (0.218)	train_nll   0.37 (  0.33)	train_penalty   0.00 (  0.01)	weight_norm  22.57 ( 22.52)	train_acc   0.80 (  0.84)	train_minacc   0.68 (  0.39)	train_majacc   0.83 (  0.92)	train_corr   0.00 (  0.00)	l1 7.9402 (8.3367)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.09it/s] 23%|##3       | 6/26 [00:00<00:00, 30.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.11it/s] 42%|####2     | 11/26 [00:00<00:00, 37.20it/s] 62%|######1   | 16/26 [00:00<00:00, 40.47it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.47it/s] 81%|########  | 21/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 34.56it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.78 (  0.78)	test_minacc   0.71 (  0.71)	test_majacc   0.79 (  0.79)	Loss_d 0.427 (0.427)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.62 (  0.62)
Test: [  10/  26]	Loss 0.460 (0.406)	test_acc   0.75 (  0.79)	test_minacc   0.72 (  0.74)	test_majacc   0.76 (  0.80)	Loss_d 0.460 (0.406)	test_acc_d   0.75 (  0.79)	test_minacc_d   0.72 (  0.74)	test_majacc_d   0.76 (  0.80)	test_corr_d   0.56 (  0.62)
Test: [  20/  26]	Loss 0.398 (0.412)	test_acc   0.79 (  0.79)	test_minacc   0.74 (  0.73)	test_majacc   0.80 (  0.80)	Loss_d 0.398 (0.412)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.58 (  0.61)
Test: [  26/  26]	Loss 0.383 (0.411)	test_acc   0.80 (  0.78)	test_minacc   0.70 (  0.73)	test_majacc   0.81 (  0.79)	Loss_d 0.383 (0.411)	test_acc_d   0.80 (  0.78)	test_minacc_d   0.70 (  0.73)	test_majacc_d   0.81 (  0.79)	test_corr_d   0.66 (  0.61)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 0.916 (0.916)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.82 (  0.82)	Loss_d 0.916 (0.916)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.916 (0.916)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.82 (  0.82)	Loss_d 0.916 (0.916)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.82 (  0.82)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0431 (0.0472)	validation_time 0.0003 (0.0012)	train_time 0.0427 (0.0454)
record: (train_acc, test_acc) (0.7848000292181969, 0.5990000367164612)
last accs (train_acc, test_acc) (0.7848000292181969, 0.5990000367164612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.75it/s] 23%|##3       | 6/26 [00:00<00:00, 28.80it/s] 38%|###8      | 10/26 [00:00<00:00, 32.60it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.03it/s] 69%|######9   | 18/26 [00:00<00:00, 35.54it/s] 85%|########4 | 22/26 [00:00<00:00, 35.64it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]100%|##########| 26/26 [00:00<00:00, 31.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.001 (0.002)	train_nll   0.62 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.60)	train_acc   0.58 (  0.69)	train_minacc   0.81 (  0.79)	train_majacc   0.54 (  0.68)	train_corr   0.00 (  0.00)	l1 7.2034 (7.4356)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.88it/s] 27%|##6       | 7/26 [00:00<00:00, 34.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.25it/s] 50%|#####     | 13/26 [00:00<00:00, 42.94it/s] 69%|######9   | 18/26 [00:00<00:00, 41.57it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.57it/s] 88%|########8 | 23/26 [00:00<00:00, 42.86it/s]100%|##########| 26/26 [00:00<00:00, 38.40it/s]
Test: [   0/  26]	Loss 0.656 (0.656)	test_acc   0.57 (  0.57)	test_minacc   0.77 (  0.77)	test_majacc   0.52 (  0.52)	Loss_d 0.656 (0.656)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.692 (0.658)	test_acc   0.52 (  0.57)	test_minacc   0.79 (  0.81)	test_majacc   0.47 (  0.53)	Loss_d 0.692 (0.658)	test_acc_d   0.52 (  0.57)	test_minacc_d   0.79 (  0.81)	test_majacc_d   0.47 (  0.53)	test_corr_d   0.12 (  0.14)
Test: [  20/  26]	Loss 0.658 (0.661)	test_acc   0.55 (  0.56)	test_minacc   0.83 (  0.81)	test_majacc   0.50 (  0.52)	Loss_d 0.658 (0.661)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.83 (  0.81)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.10 (  0.14)
Test: [  26/  26]	Loss 0.638 (0.661)	test_acc   0.57 (  0.56)	test_minacc   0.78 (  0.81)	test_majacc   0.54 (  0.52)	Loss_d 0.638 (0.661)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.78 (  0.81)	test_majacc_d   0.54 (  0.52)	test_corr_d   0.18 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.59it/s]
Test: [  0/  1]	Loss 0.668 (0.668)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.55 (  0.55)	Loss_d 0.668 (0.668)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.668 (0.668)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.55 (  0.55)	Loss_d 0.668 (0.668)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.30 ( -0.30)
Overall Timing[  8/  1]	epoch_time 0.0408 (0.0465)	validation_time 0.0004 (0.0011)	train_time 0.0403 (0.0448)
record: (train_acc, test_acc) (0.7848000292181969, 0.5990000367164612)
last accs (train_acc, test_acc) (0.56030001693964, 0.6680000424385071)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.98it/s] 19%|#9        | 5/26 [00:00<00:01, 18.35it/s] 35%|###4      | 9/26 [00:00<00:00, 24.95it/s] 50%|#####     | 13/26 [00:00<00:00, 28.72it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.84it/s] 96%|#########6| 25/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 27.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.002 (0.002)	train_nll   0.55 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.69 (  0.64)	train_minacc   0.73 (  0.76)	train_majacc   0.68 (  0.61)	train_corr   0.00 (  0.00)	l1 6.9413 (7.0597)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 23%|##3       | 6/26 [00:00<00:00, 26.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.77it/s] 42%|####2     | 11/26 [00:00<00:00, 35.32it/s] 62%|######1   | 16/26 [00:00<00:00, 39.78it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.78it/s] 81%|########  | 21/26 [00:00<00:00, 40.06it/s]100%|##########| 26/26 [00:00<00:00, 43.01it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]
Test: [   0/  26]	Loss 0.563 (0.563)	test_acc   0.64 (  0.64)	test_minacc   0.74 (  0.74)	test_majacc   0.62 (  0.62)	Loss_d 0.563 (0.563)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.40 (  0.40)
Test: [  10/  26]	Loss 0.586 (0.572)	test_acc   0.59 (  0.63)	test_minacc   0.72 (  0.74)	test_majacc   0.57 (  0.61)	Loss_d 0.586 (0.572)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.72 (  0.74)	test_majacc_d   0.57 (  0.61)	test_corr_d   0.36 (  0.38)
Test: [  20/  26]	Loss 0.562 (0.573)	test_acc   0.65 (  0.63)	test_minacc   0.81 (  0.74)	test_majacc   0.62 (  0.61)	Loss_d 0.562 (0.573)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.81 (  0.74)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.37 (  0.38)
Test: [  26/  26]	Loss 0.552 (0.572)	test_acc   0.68 (  0.63)	test_minacc   0.76 (  0.74)	test_majacc   0.67 (  0.61)	Loss_d 0.552 (0.572)	test_acc_d   0.68 (  0.63)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.67 (  0.61)	test_corr_d   0.44 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.22it/s]
Test: [  0/  1]	Loss 0.750 (0.750)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.750 (0.750)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.750 (0.750)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.750 (0.750)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.06 (  0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/166/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0405 (0.0459)	validation_time 0.0004 (0.0011)	train_time 0.0400 (0.0444)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 19%|#9        | 5/26 [00:00<00:01, 20.43it/s] 35%|###4      | 9/26 [00:00<00:00, 25.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 34.23it/s]100%|##########| 26/26 [00:00<00:00, 27.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.59 (  0.60)	train_minacc   0.76 (  0.77)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 6.8209 (6.8921)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.73it/s] 23%|##3       | 6/26 [00:00<00:00, 31.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.04it/s] 42%|####2     | 11/26 [00:00<00:00, 38.19it/s] 62%|######1   | 16/26 [00:00<00:00, 41.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.71it/s] 81%|########  | 21/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 41.91it/s]100%|##########| 26/26 [00:00<00:00, 35.65it/s]
Test: [   0/  26]	Loss 0.593 (0.593)	test_acc   0.60 (  0.60)	test_minacc   0.79 (  0.79)	test_majacc   0.56 (  0.56)	Loss_d 0.593 (0.593)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.619 (0.601)	test_acc   0.52 (  0.58)	test_minacc   0.74 (  0.79)	test_majacc   0.49 (  0.54)	Loss_d 0.619 (0.601)	test_acc_d   0.52 (  0.58)	test_minacc_d   0.74 (  0.79)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.30 (  0.32)
Test: [  20/  26]	Loss 0.594 (0.603)	test_acc   0.60 (  0.58)	test_minacc   0.81 (  0.78)	test_majacc   0.56 (  0.55)	Loss_d 0.594 (0.603)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.30 (  0.32)
Test: [  26/  26]	Loss 0.591 (0.602)	test_acc   0.59 (  0.58)	test_minacc   0.76 (  0.78)	test_majacc   0.56 (  0.55)	Loss_d 0.591 (0.602)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.37 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.734 (0.734)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.59 (  0.59)	Loss_d 0.734 (0.734)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.734 (0.734)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.59 (  0.59)	Loss_d 0.734 (0.734)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.03 (  0.03)
Overall Timing[ 10/  1]	epoch_time 0.0391 (0.0453)	validation_time 0.0004 (0.0010)	train_time 0.0386 (0.0438)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.581300008058548, 0.6550000309944153)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:01, 19.81it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 29.43it/s] 65%|######5   | 17/26 [00:00<00:00, 30.86it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.40it/s]100%|##########| 26/26 [00:00<00:00, 27.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.61 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.57 (  0.55)	train_minacc   0.78 (  0.80)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 6.7501 (6.7895)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.37it/s] 23%|##3       | 6/26 [00:00<00:00, 32.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.40it/s] 42%|####2     | 11/26 [00:00<00:00, 39.05it/s] 62%|######1   | 16/26 [00:00<00:00, 41.78it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.78it/s] 81%|########  | 21/26 [00:00<00:00, 39.92it/s]100%|##########| 26/26 [00:00<00:00, 42.82it/s]100%|##########| 26/26 [00:00<00:00, 36.08it/s]
Test: [   0/  26]	Loss 0.607 (0.607)	test_acc   0.58 (  0.58)	test_minacc   0.82 (  0.82)	test_majacc   0.54 (  0.54)	Loss_d 0.607 (0.607)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.629 (0.616)	test_acc   0.51 (  0.55)	test_minacc   0.75 (  0.80)	test_majacc   0.47 (  0.50)	Loss_d 0.629 (0.616)	test_acc_d   0.51 (  0.55)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.27 (  0.29)
Test: [  20/  26]	Loss 0.610 (0.617)	test_acc   0.57 (  0.55)	test_minacc   0.84 (  0.79)	test_majacc   0.52 (  0.51)	Loss_d 0.610 (0.617)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.26 (  0.29)
Test: [  26/  26]	Loss 0.610 (0.617)	test_acc   0.58 (  0.55)	test_minacc   0.78 (  0.79)	test_majacc   0.54 (  0.51)	Loss_d 0.610 (0.617)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.33 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.51it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.55 (  0.55)	Loss_d 0.723 (0.723)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.67 (  0.67)	test_minacc   0.68 (  0.68)	test_majacc   0.55 (  0.55)	Loss_d 0.723 (0.723)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Overall Timing[ 11/  1]	epoch_time 0.0420 (0.0450)	validation_time 0.0003 (0.0010)	train_time 0.0417 (0.0436)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5492000154852867, 0.6710000038146973)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.55it/s] 19%|#9        | 5/26 [00:00<00:01, 17.16it/s] 35%|###4      | 9/26 [00:00<00:00, 24.07it/s] 50%|#####     | 13/26 [00:00<00:00, 28.15it/s] 65%|######5   | 17/26 [00:00<00:00, 29.90it/s] 81%|########  | 21/26 [00:00<00:00, 31.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 26.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.55 (  0.53)	train_minacc   0.76 (  0.79)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 6.6997 (6.7344)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.56it/s] 23%|##3       | 6/26 [00:00<00:01, 19.01it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.01it/s] 42%|####2     | 11/26 [00:00<00:00, 28.11it/s] 62%|######1   | 16/26 [00:00<00:00, 34.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.48it/s] 81%|########  | 21/26 [00:00<00:00, 35.10it/s]100%|##########| 26/26 [00:00<00:00, 38.70it/s]100%|##########| 26/26 [00:00<00:00, 28.78it/s]
Test: [   0/  26]	Loss 0.612 (0.612)	test_acc   0.56 (  0.56)	test_minacc   0.82 (  0.82)	test_majacc   0.50 (  0.50)	Loss_d 0.612 (0.612)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.632 (0.620)	test_acc   0.51 (  0.53)	test_minacc   0.77 (  0.79)	test_majacc   0.47 (  0.49)	Loss_d 0.632 (0.620)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.47 (  0.49)	test_corr_d   0.27 (  0.29)
Test: [  20/  26]	Loss 0.614 (0.621)	test_acc   0.55 (  0.53)	test_minacc   0.81 (  0.78)	test_majacc   0.51 (  0.49)	Loss_d 0.614 (0.621)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.81 (  0.78)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.27 (  0.29)
Test: [  26/  26]	Loss 0.616 (0.621)	test_acc   0.56 (  0.54)	test_minacc   0.76 (  0.78)	test_majacc   0.53 (  0.49)	Loss_d 0.616 (0.621)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.76 (  0.78)	test_majacc_d   0.53 (  0.49)	test_corr_d   0.33 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.41it/s]
Test: [  0/  1]	Loss 0.730 (0.730)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.54 (  0.54)	Loss_d 0.730 (0.730)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.730 (0.730)	test_acc   0.66 (  0.66)	test_minacc   0.68 (  0.68)	test_majacc   0.54 (  0.54)	Loss_d 0.730 (0.730)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Overall Timing[ 12/  1]	epoch_time 0.0487 (0.0453)	validation_time 0.0004 (0.0009)	train_time 0.0482 (0.0440)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5354000143110752, 0.6620000600814819)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.59it/s] 81%|########  | 21/26 [00:00<00:00, 33.17it/s] 96%|#########6| 25/26 [00:00<00:00, 34.49it/s]100%|##########| 26/26 [00:00<00:00, 28.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.52 (  0.52)	train_minacc   0.76 (  0.78)	train_majacc   0.48 (  0.48)	train_corr   0.00 (  0.00)	l1 6.6418 (6.6776)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 23%|##3       | 6/26 [00:00<00:00, 24.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.10it/s] 42%|####2     | 11/26 [00:00<00:00, 32.83it/s] 62%|######1   | 16/26 [00:00<00:00, 37.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.93it/s] 81%|########  | 21/26 [00:00<00:00, 36.97it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]100%|##########| 26/26 [00:00<00:00, 32.15it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.54 (  0.54)	test_minacc   0.83 (  0.83)	test_majacc   0.48 (  0.48)	Loss_d 0.617 (0.617)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.635 (0.624)	test_acc   0.48 (  0.52)	test_minacc   0.72 (  0.78)	test_majacc   0.45 (  0.47)	Loss_d 0.635 (0.624)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.72 (  0.78)	test_majacc_d   0.45 (  0.47)	test_corr_d   0.27 (  0.29)
Test: [  20/  26]	Loss 0.618 (0.625)	test_acc   0.54 (  0.52)	test_minacc   0.83 (  0.77)	test_majacc   0.49 (  0.47)	Loss_d 0.618 (0.625)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.83 (  0.77)	test_majacc_d   0.49 (  0.47)	test_corr_d   0.27 (  0.29)
Test: [  26/  26]	Loss 0.621 (0.625)	test_acc   0.54 (  0.52)	test_minacc   0.73 (  0.78)	test_majacc   0.50 (  0.47)	Loss_d 0.621 (0.625)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.50 (  0.47)	test_corr_d   0.32 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.49it/s]
Test: [  0/  1]	Loss 0.731 (0.731)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.731 (0.731)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.731 (0.731)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.50 (  0.50)	Loss_d 0.731 (0.731)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.07 (  0.07)
Overall Timing[ 13/  1]	epoch_time 0.0390 (0.0448)	validation_time 0.0003 (0.0009)	train_time 0.0387 (0.0436)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5193000178337097, 0.6550000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 23.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.03it/s] 50%|#####     | 13/26 [00:00<00:00, 31.50it/s] 65%|######5   | 17/26 [00:00<00:00, 33.14it/s] 81%|########  | 21/26 [00:00<00:00, 34.08it/s] 96%|#########6| 25/26 [00:00<00:00, 34.98it/s]100%|##########| 26/26 [00:00<00:00, 29.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.50 (  0.51)	train_minacc   0.76 (  0.78)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 6.5962 (6.6229)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s]  8%|7         | 2/26 [00:00<00:03,  7.43it/s] 27%|##6       | 7/26 [00:00<00:00, 22.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.88it/s] 46%|####6     | 12/26 [00:00<00:00, 31.07it/s] 65%|######5   | 17/26 [00:00<00:00, 36.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.28it/s] 85%|########4 | 22/26 [00:00<00:00, 36.06it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
Test: [   0/  26]	Loss 0.622 (0.622)	test_acc   0.53 (  0.53)	test_minacc   0.83 (  0.83)	test_majacc   0.47 (  0.47)	Loss_d 0.622 (0.622)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.640 (0.628)	test_acc   0.47 (  0.50)	test_minacc   0.72 (  0.79)	test_majacc   0.43 (  0.45)	Loss_d 0.640 (0.628)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.72 (  0.79)	test_majacc_d   0.43 (  0.45)	test_corr_d   0.26 (  0.28)
Test: [  20/  26]	Loss 0.623 (0.630)	test_acc   0.53 (  0.50)	test_minacc   0.83 (  0.78)	test_majacc   0.47 (  0.45)	Loss_d 0.623 (0.630)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.83 (  0.78)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.26 (  0.27)
Test: [  26/  26]	Loss 0.626 (0.629)	test_acc   0.51 (  0.50)	test_minacc   0.73 (  0.78)	test_majacc   0.47 (  0.45)	Loss_d 0.626 (0.629)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.73 (  0.78)	test_majacc_d   0.47 (  0.45)	test_corr_d   0.31 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.44it/s]
Test: [  0/  1]	Loss 0.729 (0.729)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.49 (  0.49)	Loss_d 0.729 (0.729)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.729 (0.729)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.49 (  0.49)	Loss_d 0.729 (0.729)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.07 (  0.07)
Overall Timing[ 14/  1]	epoch_time 0.0434 (0.0447)	validation_time 0.0005 (0.0008)	train_time 0.0429 (0.0436)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.501300017774105, 0.6690000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.11it/s] 65%|######5   | 17/26 [00:00<00:00, 31.85it/s] 81%|########  | 21/26 [00:00<00:00, 33.46it/s] 96%|#########6| 25/26 [00:00<00:00, 34.70it/s]100%|##########| 26/26 [00:00<00:00, 27.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.50 (  0.50)	train_minacc   0.76 (  0.78)	train_majacc   0.46 (  0.44)	train_corr   0.00 (  0.00)	l1 6.5435 (6.5755)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.72it/s] 23%|##3       | 6/26 [00:00<00:00, 22.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.78it/s] 42%|####2     | 11/26 [00:00<00:00, 31.61it/s] 62%|######1   | 16/26 [00:00<00:00, 37.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.28it/s] 81%|########  | 21/26 [00:00<00:00, 37.86it/s]100%|##########| 26/26 [00:00<00:00, 32.26it/s]
Test: [   0/  26]	Loss 0.625 (0.625)	test_acc   0.52 (  0.52)	test_minacc   0.83 (  0.83)	test_majacc   0.45 (  0.45)	Loss_d 0.625 (0.625)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.641 (0.631)	test_acc   0.46 (  0.49)	test_minacc   0.72 (  0.79)	test_majacc   0.42 (  0.44)	Loss_d 0.641 (0.631)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.72 (  0.79)	test_majacc_d   0.42 (  0.44)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.625 (0.633)	test_acc   0.50 (  0.49)	test_minacc   0.83 (  0.78)	test_majacc   0.45 (  0.44)	Loss_d 0.625 (0.633)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.83 (  0.78)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.628 (0.632)	test_acc   0.50 (  0.49)	test_minacc   0.70 (  0.78)	test_majacc   0.46 (  0.44)	Loss_d 0.628 (0.632)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.70 (  0.78)	test_majacc_d   0.46 (  0.44)	test_corr_d   0.31 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.726 (0.726)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.46 (  0.46)	Loss_d 0.726 (0.726)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.726 (0.726)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.46 (  0.46)	Loss_d 0.726 (0.726)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.06 (  0.06)
Overall Timing[ 15/  1]	epoch_time 0.0418 (0.0445)	validation_time 0.0003 (0.0008)	train_time 0.0415 (0.0434)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49130000865459444, 0.6700000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.81it/s] 12%|#1        | 3/26 [00:00<00:02,  9.43it/s] 27%|##6       | 7/26 [00:00<00:01, 18.87it/s] 42%|####2     | 11/26 [00:00<00:00, 24.05it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.84it/s] 88%|########8 | 23/26 [00:00<00:00, 30.31it/s]100%|##########| 26/26 [00:01<00:00, 23.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.49 (  0.53)	train_minacc   0.76 (  0.76)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 6.5108 (6.5242)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s] 12%|#1        | 3/26 [00:00<00:01, 14.45it/s] 31%|###       | 8/26 [00:00<00:00, 29.05it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.05it/s] 50%|#####     | 13/26 [00:00<00:00, 35.71it/s] 69%|######9   | 18/26 [00:00<00:00, 38.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 38.61it/s] 88%|########8 | 23/26 [00:00<00:00, 42.17it/s]100%|##########| 26/26 [00:00<00:00, 33.28it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.51 (  0.51)	test_minacc   0.82 (  0.82)	test_majacc   0.44 (  0.44)	Loss_d 0.631 (0.631)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.648 (0.635)	test_acc   0.45 (  0.47)	test_minacc   0.74 (  0.79)	test_majacc   0.40 (  0.42)	Loss_d 0.648 (0.635)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.74 (  0.79)	test_majacc_d   0.40 (  0.42)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.629 (0.637)	test_acc   0.48 (  0.47)	test_minacc   0.84 (  0.79)	test_majacc   0.42 (  0.42)	Loss_d 0.629 (0.637)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.24 (  0.25)
Test: [  26/  26]	Loss 0.632 (0.636)	test_acc   0.49 (  0.48)	test_minacc   0.76 (  0.79)	test_majacc   0.45 (  0.42)	Loss_d 0.632 (0.636)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.76 (  0.79)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.29 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.03it/s]
Test: [  0/  1]	Loss 0.725 (0.725)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.52 (  0.52)	Loss_d 0.725 (0.725)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.725 (0.725)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.52 (  0.52)	Loss_d 0.725 (0.725)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 16/  1]	epoch_time 0.0435 (0.0445)	validation_time 0.0004 (0.0008)	train_time 0.0431 (0.0434)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4755000064373016, 0.6910000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.63it/s] 19%|#9        | 5/26 [00:00<00:00, 22.57it/s] 35%|###4      | 9/26 [00:00<00:00, 28.33it/s] 50%|#####     | 13/26 [00:00<00:00, 30.93it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.74it/s] 96%|#########6| 25/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.45 (  0.49)	train_minacc   0.70 (  0.78)	train_majacc   0.41 (  0.44)	train_corr   0.00 (  0.00)	l1 6.4611 (6.4906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 23%|##3       | 6/26 [00:00<00:00, 29.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.00it/s] 42%|####2     | 11/26 [00:00<00:00, 36.62it/s] 65%|######5   | 17/26 [00:00<00:00, 40.06it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.06it/s] 88%|########8 | 23/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 36.69it/s]
Test: [   0/  26]	Loss 0.630 (0.630)	test_acc   0.50 (  0.50)	test_minacc   0.85 (  0.85)	test_majacc   0.43 (  0.43)	Loss_d 0.630 (0.630)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.644 (0.636)	test_acc   0.45 (  0.47)	test_minacc   0.72 (  0.80)	test_majacc   0.41 (  0.42)	Loss_d 0.644 (0.636)	test_acc_d   0.45 (  0.47)	test_minacc_d   0.72 (  0.80)	test_majacc_d   0.41 (  0.42)	test_corr_d   0.23 (  0.25)
Test: [  20/  26]	Loss 0.628 (0.637)	test_acc   0.50 (  0.48)	test_minacc   0.84 (  0.79)	test_majacc   0.44 (  0.42)	Loss_d 0.628 (0.637)	test_acc_d   0.50 (  0.48)	test_minacc_d   0.84 (  0.79)	test_majacc_d   0.44 (  0.42)	test_corr_d   0.24 (  0.25)
Test: [  26/  26]	Loss 0.633 (0.636)	test_acc   0.47 (  0.48)	test_minacc   0.70 (  0.80)	test_majacc   0.43 (  0.42)	Loss_d 0.633 (0.636)	test_acc_d   0.47 (  0.48)	test_minacc_d   0.70 (  0.80)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.29 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.14it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.43 (  0.43)	Loss_d 0.723 (0.723)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.68 (  0.68)	test_minacc   0.71 (  0.71)	test_majacc   0.43 (  0.43)	Loss_d 0.723 (0.723)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.05 (  0.05)
Overall Timing[ 17/  1]	epoch_time 0.0414 (0.0443)	validation_time 0.0004 (0.0008)	train_time 0.0409 (0.0433)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4771000044643879, 0.6810000538825989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.88it/s] 19%|#9        | 5/26 [00:00<00:01, 13.00it/s] 35%|###4      | 9/26 [00:00<00:00, 19.50it/s] 50%|#####     | 13/26 [00:00<00:00, 23.87it/s] 65%|######5   | 17/26 [00:00<00:00, 26.92it/s] 81%|########  | 21/26 [00:00<00:00, 29.36it/s] 96%|#########6| 25/26 [00:01<00:00, 31.87it/s]100%|##########| 26/26 [00:01<00:00, 23.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.59 (  0.55)	train_minacc   0.65 (  0.71)	train_majacc   0.58 (  0.53)	train_corr   0.00 (  0.00)	l1 6.3862 (6.4196)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.98it/s] 15%|#5        | 4/26 [00:00<00:01, 11.01it/s] 35%|###4      | 9/26 [00:00<00:00, 22.06it/s]                                               35%|###4      | 9/26 [00:00<00:00, 22.06it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.89it/s] 92%|#########2| 24/26 [00:00<00:00, 37.44it/s]100%|##########| 26/26 [00:00<00:00, 27.21it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.57 (  0.57)	test_minacc   0.71 (  0.71)	test_majacc   0.54 (  0.54)	Loss_d 0.642 (0.642)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.652 (0.651)	test_acc   0.54 (  0.55)	test_minacc   0.74 (  0.73)	test_majacc   0.51 (  0.52)	Loss_d 0.652 (0.651)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.641 (0.651)	test_acc   0.58 (  0.55)	test_minacc   0.78 (  0.73)	test_majacc   0.55 (  0.52)	Loss_d 0.641 (0.651)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.78 (  0.73)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.18 (  0.19)
Test: [  26/  26]	Loss 0.647 (0.650)	test_acc   0.57 (  0.56)	test_minacc   0.65 (  0.73)	test_majacc   0.56 (  0.53)	Loss_d 0.647 (0.650)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.65 (  0.73)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.25 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 0.709 (0.709)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.709 (0.709)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.709 (0.709)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.709 (0.709)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 18/  1]	epoch_time 0.0422 (0.0442)	validation_time 0.0004 (0.0008)	train_time 0.0418 (0.0432)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5557000148892403, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.14it/s] 19%|#9        | 5/26 [00:00<00:01, 18.50it/s] 35%|###4      | 9/26 [00:00<00:00, 24.88it/s] 50%|#####     | 13/26 [00:00<00:00, 28.66it/s] 65%|######5   | 17/26 [00:00<00:00, 30.87it/s] 81%|########  | 21/26 [00:00<00:00, 32.48it/s] 96%|#########6| 25/26 [00:00<00:00, 33.45it/s]100%|##########| 26/26 [00:00<00:00, 27.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.47 (  0.51)	train_minacc   0.70 (  0.72)	train_majacc   0.43 (  0.47)	train_corr   0.00 (  0.00)	l1 6.3349 (6.3626)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 23%|##3       | 6/26 [00:00<00:00, 32.92it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.92it/s] 42%|####2     | 11/26 [00:00<00:00, 39.67it/s] 62%|######1   | 16/26 [00:00<00:00, 41.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.69it/s] 81%|########  | 21/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 35.74it/s]
Test: [   0/  26]	Loss 0.636 (0.636)	test_acc   0.50 (  0.50)	test_minacc   0.83 (  0.83)	test_majacc   0.43 (  0.43)	Loss_d 0.636 (0.636)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.646 (0.642)	test_acc   0.47 (  0.47)	test_minacc   0.79 (  0.80)	test_majacc   0.42 (  0.42)	Loss_d 0.646 (0.642)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.633 (0.643)	test_acc   0.49 (  0.48)	test_minacc   0.86 (  0.79)	test_majacc   0.43 (  0.42)	Loss_d 0.633 (0.643)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.86 (  0.79)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.22 (  0.23)
Test: [  26/  26]	Loss 0.636 (0.641)	test_acc   0.49 (  0.48)	test_minacc   0.70 (  0.79)	test_majacc   0.45 (  0.42)	Loss_d 0.636 (0.641)	test_acc_d   0.49 (  0.48)	test_minacc_d   0.70 (  0.79)	test_majacc_d   0.45 (  0.42)	test_corr_d   0.28 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.34it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.45 (  0.45)	Loss_d 0.716 (0.716)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.45 (  0.45)	Loss_d 0.716 (0.716)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.03 (  0.03)
Overall Timing[ 19/  1]	epoch_time 0.0489 (0.0444)	validation_time 0.0004 (0.0007)	train_time 0.0484 (0.0435)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.47690000689029693, 0.6770000457763672)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.70it/s] 15%|#5        | 4/26 [00:00<00:01, 18.12it/s] 31%|###       | 8/26 [00:00<00:00, 25.76it/s] 46%|####6     | 12/26 [00:00<00:00, 29.60it/s] 62%|######1   | 16/26 [00:00<00:00, 31.69it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.03it/s] 92%|#########2| 24/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.46 (  0.57)	train_minacc   0.70 (  0.67)	train_majacc   0.42 (  0.55)	train_corr   0.00 (  0.00)	l1 6.3141 (6.3205)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.67it/s] 27%|##6       | 7/26 [00:00<00:00, 29.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.18it/s] 46%|####6     | 12/26 [00:00<00:00, 35.56it/s] 65%|######5   | 17/26 [00:00<00:00, 39.52it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.52it/s] 85%|########4 | 22/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 35.59it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.47 (  0.47)	test_minacc   0.83 (  0.83)	test_majacc   0.40 (  0.40)	Loss_d 0.641 (0.641)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.653 (0.644)	test_acc   0.43 (  0.45)	test_minacc   0.74 (  0.80)	test_majacc   0.38 (  0.39)	Loss_d 0.653 (0.644)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.74 (  0.80)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.636 (0.646)	test_acc   0.48 (  0.45)	test_minacc   0.86 (  0.80)	test_majacc   0.41 (  0.39)	Loss_d 0.636 (0.646)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.86 (  0.80)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.21 (  0.22)
Test: [  26/  26]	Loss 0.639 (0.645)	test_acc   0.47 (  0.46)	test_minacc   0.76 (  0.80)	test_majacc   0.42 (  0.39)	Loss_d 0.639 (0.645)	test_acc_d   0.47 (  0.46)	test_minacc_d   0.76 (  0.80)	test_majacc_d   0.42 (  0.39)	test_corr_d   0.27 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.40 (  0.40)	Loss_d 0.715 (0.715)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.40 (  0.40)	Loss_d 0.715 (0.715)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.02 (  0.02)
Overall Timing[ 20/  1]	epoch_time 0.0425 (0.0443)	validation_time 0.0004 (0.0007)	train_time 0.0420 (0.0434)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.45500000461935997, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.54it/s] 19%|#9        | 5/26 [00:00<00:01, 11.60it/s] 35%|###4      | 9/26 [00:00<00:00, 18.35it/s] 50%|#####     | 13/26 [00:00<00:00, 23.83it/s] 65%|######5   | 17/26 [00:00<00:00, 27.62it/s] 81%|########  | 21/26 [00:00<00:00, 30.08it/s] 96%|#########6| 25/26 [00:01<00:00, 31.86it/s]100%|##########| 26/26 [00:01<00:00, 22.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.54)	train_minacc   0.65 (  0.72)	train_majacc   0.59 (  0.51)	train_corr   0.00 (  0.00)	l1 6.2858 (6.3016)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.41it/s]  8%|7         | 2/26 [00:00<00:04,  5.16it/s] 27%|##6       | 7/26 [00:00<00:01, 18.32it/s]                                               27%|##6       | 7/26 [00:00<00:01, 18.32it/s] 46%|####6     | 12/26 [00:00<00:00, 27.09it/s] 65%|######5   | 17/26 [00:00<00:00, 33.13it/s]                                                65%|######5   | 17/26 [00:00<00:00, 33.13it/s] 85%|########4 | 22/26 [00:00<00:00, 34.58it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.60 (  0.60)	test_minacc   0.68 (  0.68)	test_majacc   0.58 (  0.58)	Loss_d 0.632 (0.632)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.637 (0.638)	test_acc   0.57 (  0.57)	test_minacc   0.72 (  0.70)	test_majacc   0.55 (  0.55)	Loss_d 0.637 (0.638)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.628 (0.639)	test_acc   0.61 (  0.57)	test_minacc   0.72 (  0.70)	test_majacc   0.59 (  0.55)	Loss_d 0.628 (0.639)	test_acc_d   0.61 (  0.57)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.25 (  0.25)
Test: [  26/  26]	Loss 0.634 (0.637)	test_acc   0.60 (  0.58)	test_minacc   0.65 (  0.70)	test_majacc   0.60 (  0.56)	Loss_d 0.634 (0.637)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.65 (  0.70)	test_majacc_d   0.60 (  0.56)	test_corr_d   0.30 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.98it/s]
Test: [  0/  1]	Loss 0.725 (0.725)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.63 (  0.63)	Loss_d 0.725 (0.725)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.725 (0.725)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.63 (  0.63)	Loss_d 0.725 (0.725)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.06 (  0.06)
Overall Timing[ 21/  1]	epoch_time 0.0476 (0.0445)	validation_time 0.0003 (0.0007)	train_time 0.0472 (0.0436)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.5790000101923942, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 23.79it/s] 35%|###4      | 9/26 [00:00<00:00, 29.05it/s] 50%|#####     | 13/26 [00:00<00:00, 31.83it/s] 65%|######5   | 17/26 [00:00<00:00, 32.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.82it/s] 96%|#########6| 25/26 [00:00<00:00, 34.63it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.47 (  0.50)	train_minacc   0.76 (  0.75)	train_majacc   0.42 (  0.46)	train_corr   0.00 (  0.00)	l1 6.2962 (6.2903)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 23%|##3       | 6/26 [00:00<00:00, 30.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.58it/s] 46%|####6     | 12/26 [00:00<00:00, 41.44it/s] 65%|######5   | 17/26 [00:00<00:00, 43.26it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.26it/s] 85%|########4 | 22/26 [00:00<00:00, 44.86it/s]100%|##########| 26/26 [00:00<00:00, 37.11it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.48 (  0.48)	test_minacc   0.83 (  0.83)	test_majacc   0.41 (  0.41)	Loss_d 0.639 (0.639)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.649 (0.641)	test_acc   0.43 (  0.45)	test_minacc   0.75 (  0.80)	test_majacc   0.38 (  0.39)	Loss_d 0.649 (0.641)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.22 (  0.23)
Test: [  20/  26]	Loss 0.633 (0.643)	test_acc   0.48 (  0.45)	test_minacc   0.86 (  0.80)	test_majacc   0.41 (  0.39)	Loss_d 0.633 (0.643)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.86 (  0.80)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.23 (  0.23)
Test: [  26/  26]	Loss 0.636 (0.642)	test_acc   0.47 (  0.45)	test_minacc   0.76 (  0.81)	test_majacc   0.42 (  0.39)	Loss_d 0.636 (0.642)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.42 (  0.39)	test_corr_d   0.28 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.42 (  0.42)	Loss_d 0.723 (0.723)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.42 (  0.42)	Loss_d 0.723 (0.723)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.04 (  0.04)
Overall Timing[ 22/  1]	epoch_time 0.0398 (0.0443)	validation_time 0.0004 (0.0007)	train_time 0.0394 (0.0434)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.45420000445842745, 0.6960000395774841)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 19%|#9        | 5/26 [00:00<00:01, 19.96it/s] 35%|###4      | 9/26 [00:00<00:00, 25.64it/s] 50%|#####     | 13/26 [00:00<00:00, 29.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.47it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.29it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.279864311218262
set z to 5.965871095657349
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.64)	train_acc   0.46 (  0.50)	train_minacc   0.76 (  0.76)	train_majacc   0.41 (  0.46)	train_corr   0.00 (  0.00)	l1 6.2966 (6.2857)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.59it/s] 27%|##6       | 7/26 [00:00<00:00, 33.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.53it/s] 46%|####6     | 12/26 [00:00<00:00, 39.93it/s] 65%|######5   | 17/26 [00:00<00:00, 42.37it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.37it/s] 85%|########4 | 22/26 [00:00<00:00, 41.78it/s]100%|##########| 26/26 [00:00<00:00, 37.32it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.47 (  0.47)	test_minacc   0.83 (  0.83)	test_majacc   0.40 (  0.40)	Loss_d 0.642 (0.642)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.652 (0.644)	test_acc   0.43 (  0.45)	test_minacc   0.75 (  0.80)	test_majacc   0.38 (  0.39)	Loss_d 0.652 (0.644)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.635 (0.646)	test_acc   0.47 (  0.45)	test_minacc   0.84 (  0.80)	test_majacc   0.41 (  0.39)	Loss_d 0.635 (0.646)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.21 (  0.22)
Test: [  26/  26]	Loss 0.637 (0.644)	test_acc   0.47 (  0.45)	test_minacc   0.76 (  0.81)	test_majacc   0.42 (  0.39)	Loss_d 0.637 (0.644)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.42 (  0.39)	test_corr_d   0.27 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.87it/s]
Test: [  0/  1]	Loss 0.720 (0.720)	test_acc   0.70 (  0.70)	test_minacc   0.74 (  0.74)	test_majacc   0.39 (  0.39)	Loss_d 0.720 (0.720)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.720 (0.720)	test_acc   0.70 (  0.70)	test_minacc   0.74 (  0.74)	test_majacc   0.39 (  0.39)	Loss_d 0.720 (0.720)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.01 (  0.01)
Overall Timing[ 23/  1]	epoch_time 0.0408 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0404 (0.0433)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.45190000343322756, 0.7010000348091125)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:12,  2.03it/s] 19%|#9        | 5/26 [00:00<00:02, 10.28it/s] 35%|###4      | 9/26 [00:00<00:00, 17.16it/s] 50%|#####     | 13/26 [00:00<00:00, 22.84it/s] 65%|######5   | 17/26 [00:00<00:00, 26.95it/s] 81%|########  | 21/26 [00:01<00:00, 29.11it/s] 96%|#########6| 25/26 [00:01<00:00, 30.38it/s]100%|##########| 26/26 [00:01<00:00, 20.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.001)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.65)	train_acc   0.46 (  0.49)	train_minacc   0.70 (  0.77)	train_majacc   0.42 (  0.44)	train_corr   0.00 (  0.00)	l1 6.2310 (6.2619)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.79it/s] 23%|##3       | 6/26 [00:00<00:00, 22.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.58it/s] 42%|####2     | 11/26 [00:00<00:00, 31.51it/s] 62%|######1   | 16/26 [00:00<00:00, 37.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.33it/s] 81%|########  | 21/26 [00:00<00:00, 38.70it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.633 (0.633)	test_acc   0.48 (  0.48)	test_minacc   0.85 (  0.85)	test_majacc   0.41 (  0.41)	Loss_d 0.633 (0.633)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.641 (0.636)	test_acc   0.43 (  0.45)	test_minacc   0.74 (  0.81)	test_majacc   0.39 (  0.39)	Loss_d 0.641 (0.636)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.74 (  0.81)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.627 (0.638)	test_acc   0.48 (  0.46)	test_minacc   0.88 (  0.81)	test_majacc   0.41 (  0.39)	Loss_d 0.627 (0.638)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.88 (  0.81)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.25 (  0.25)
Test: [  26/  26]	Loss 0.630 (0.636)	test_acc   0.48 (  0.46)	test_minacc   0.73 (  0.81)	test_majacc   0.43 (  0.40)	Loss_d 0.630 (0.636)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.73 (  0.81)	test_majacc_d   0.43 (  0.40)	test_corr_d   0.30 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.52it/s]
Test: [  0/  1]	Loss 0.726 (0.726)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.41 (  0.41)	Loss_d 0.726 (0.726)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.726 (0.726)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.41 (  0.41)	Loss_d 0.726 (0.726)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.06 (  0.06)
Overall Timing[ 24/  1]	epoch_time 0.0421 (0.0441)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0432)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4593000038266182, 0.7050000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.58it/s] 19%|#9        | 5/26 [00:00<00:00, 25.30it/s] 35%|###4      | 9/26 [00:00<00:00, 30.36it/s] 50%|#####     | 13/26 [00:00<00:00, 32.68it/s] 65%|######5   | 17/26 [00:00<00:00, 33.99it/s] 81%|########  | 21/26 [00:00<00:00, 34.78it/s] 96%|#########6| 25/26 [00:00<00:00, 35.23it/s]100%|##########| 26/26 [00:00<00:00, 30.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.65)	train_acc   0.63 (  0.56)	train_minacc   0.62 (  0.67)	train_majacc   0.63 (  0.54)	train_corr   0.00 (  0.00)	l1 6.1438 (6.1698)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.84it/s] 23%|##3       | 6/26 [00:00<00:00, 31.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.02it/s] 42%|####2     | 11/26 [00:00<00:00, 38.20it/s] 62%|######1   | 16/26 [00:00<00:00, 42.51it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.51it/s] 81%|########  | 21/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 41.98it/s]100%|##########| 26/26 [00:00<00:00, 35.50it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.64 (  0.64)	Loss_d 0.631 (0.631)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.634 (0.637)	test_acc   0.61 (  0.61)	test_minacc   0.70 (  0.69)	test_majacc   0.60 (  0.59)	Loss_d 0.634 (0.637)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.23 (  0.24)
Test: [  20/  26]	Loss 0.627 (0.638)	test_acc   0.65 (  0.61)	test_minacc   0.72 (  0.70)	test_majacc   0.64 (  0.59)	Loss_d 0.627 (0.638)	test_acc_d   0.65 (  0.61)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.64 (  0.59)	test_corr_d   0.23 (  0.24)
Test: [  26/  26]	Loss 0.630 (0.635)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.70)	test_majacc   0.61 (  0.60)	Loss_d 0.630 (0.635)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.70)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.29 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.83it/s]
Test: [  0/  1]	Loss 0.714 (0.714)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.714 (0.714)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.714 (0.714)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.64 (  0.64)	Loss_d 0.714 (0.714)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.01 (  0.01)
Overall Timing[ 25/  1]	epoch_time 0.0389 (0.0439)	validation_time 0.0005 (0.0007)	train_time 0.0384 (0.0430)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.6138000085353851, 0.5770000219345093)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.58it/s] 27%|##6       | 7/26 [00:00<00:00, 31.88it/s] 42%|####2     | 11/26 [00:00<00:00, 33.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.33it/s] 88%|########8 | 23/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 30.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.65)	train_acc   0.49 (  0.52)	train_minacc   0.76 (  0.74)	train_majacc   0.44 (  0.48)	train_corr   0.00 (  0.00)	l1 6.0898 (6.1162)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.82it/s] 27%|##6       | 7/26 [00:00<00:00, 35.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.48it/s] 46%|####6     | 12/26 [00:00<00:00, 40.82it/s] 65%|######5   | 17/26 [00:00<00:00, 39.93it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.93it/s] 85%|########4 | 22/26 [00:00<00:00, 41.68it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.48 (  0.48)	test_minacc   0.83 (  0.83)	test_majacc   0.41 (  0.41)	Loss_d 0.629 (0.629)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.633 (0.630)	test_acc   0.45 (  0.46)	test_minacc   0.75 (  0.80)	test_majacc   0.40 (  0.40)	Loss_d 0.633 (0.630)	test_acc_d   0.45 (  0.46)	test_minacc_d   0.75 (  0.80)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.621 (0.632)	test_acc   0.49 (  0.46)	test_minacc   0.88 (  0.80)	test_majacc   0.42 (  0.40)	Loss_d 0.621 (0.632)	test_acc_d   0.49 (  0.46)	test_minacc_d   0.88 (  0.80)	test_majacc_d   0.42 (  0.40)	test_corr_d   0.27 (  0.27)
Test: [  26/  26]	Loss 0.622 (0.629)	test_acc   0.49 (  0.47)	test_minacc   0.76 (  0.81)	test_majacc   0.44 (  0.41)	Loss_d 0.622 (0.629)	test_acc_d   0.49 (  0.47)	test_minacc_d   0.76 (  0.81)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.32 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.45it/s]
Test: [  0/  1]	Loss 0.732 (0.732)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.39 (  0.39)	Loss_d 0.732 (0.732)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.732 (0.732)	test_acc   0.70 (  0.70)	test_minacc   0.73 (  0.73)	test_majacc   0.39 (  0.39)	Loss_d 0.732 (0.732)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.08 (  0.08)
Overall Timing[ 26/  1]	epoch_time 0.0424 (0.0438)	validation_time 0.0005 (0.0007)	train_time 0.0419 (0.0430)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.46730000630021096, 0.6990000605583191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.05it/s] 27%|##6       | 7/26 [00:00<00:00, 29.87it/s] 42%|####2     | 11/26 [00:00<00:00, 31.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.00it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.18it/s] 88%|########8 | 23/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 30.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.001 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.65 ( 22.65)	train_acc   0.45 (  0.48)	train_minacc   0.76 (  0.78)	train_majacc   0.39 (  0.43)	train_corr   0.00 (  0.00)	l1 6.1287 (6.1034)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 23%|##3       | 6/26 [00:00<00:00, 22.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.08it/s] 42%|####2     | 11/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 35.20it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.20it/s] 85%|########4 | 22/26 [00:00<00:00, 38.12it/s]100%|##########| 26/26 [00:00<00:00, 30.50it/s]
Test: [   0/  26]	Loss 0.656 (0.656)	test_acc   0.45 (  0.45)	test_minacc   0.83 (  0.83)	test_majacc   0.37 (  0.37)	Loss_d 0.656 (0.656)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.662 (0.658)	test_acc   0.42 (  0.43)	test_minacc   0.79 (  0.83)	test_majacc   0.36 (  0.36)	Loss_d 0.662 (0.658)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.79 (  0.83)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.14 (  0.16)
Test: [  20/  26]	Loss 0.649 (0.660)	test_acc   0.45 (  0.43)	test_minacc   0.88 (  0.83)	test_majacc   0.38 (  0.36)	Loss_d 0.649 (0.660)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.88 (  0.83)	test_majacc_d   0.38 (  0.36)	test_corr_d   0.15 (  0.15)
Test: [  26/  26]	Loss 0.650 (0.657)	test_acc   0.46 (  0.43)	test_minacc   0.76 (  0.83)	test_majacc   0.40 (  0.36)	Loss_d 0.650 (0.657)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.76 (  0.83)	test_majacc_d   0.40 (  0.36)	test_corr_d   0.21 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.55it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.71 (  0.71)	test_minacc   0.75 (  0.75)	test_majacc   0.35 (  0.35)	Loss_d 0.703 (0.703)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.71 (  0.71)	test_minacc   0.75 (  0.75)	test_majacc   0.35 (  0.35)	Loss_d 0.703 (0.703)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 27/  1]	epoch_time 0.0438 (0.0438)	validation_time 0.0003 (0.0006)	train_time 0.0435 (0.0430)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4335000046491623, 0.7130000591278076)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 19%|#9        | 5/26 [00:00<00:01, 18.70it/s] 35%|###4      | 9/26 [00:00<00:00, 24.89it/s] 50%|#####     | 13/26 [00:00<00:00, 27.97it/s] 65%|######5   | 17/26 [00:00<00:00, 29.19it/s] 81%|########  | 21/26 [00:00<00:00, 30.60it/s] 96%|#########6| 25/26 [00:00<00:00, 31.85it/s]100%|##########| 26/26 [00:00<00:00, 26.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.001 (0.001)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.49 (  0.51)	train_minacc   0.70 (  0.75)	train_majacc   0.46 (  0.46)	train_corr   0.00 (  0.00)	l1 6.0368 (6.0550)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 23%|##3       | 6/26 [00:00<00:00, 25.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.57it/s] 46%|####6     | 12/26 [00:00<00:00, 38.50it/s] 65%|######5   | 17/26 [00:00<00:00, 40.50it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.50it/s] 85%|########4 | 22/26 [00:00<00:00, 40.18it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.46 (  0.46)	test_minacc   0.86 (  0.86)	test_majacc   0.38 (  0.38)	Loss_d 0.648 (0.648)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.652 (0.654)	test_acc   0.44 (  0.44)	test_minacc   0.81 (  0.83)	test_majacc   0.38 (  0.37)	Loss_d 0.652 (0.654)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.38 (  0.37)	test_corr_d   0.17 (  0.18)
Test: [  20/  26]	Loss 0.646 (0.655)	test_acc   0.45 (  0.44)	test_minacc   0.90 (  0.83)	test_majacc   0.37 (  0.37)	Loss_d 0.646 (0.655)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.90 (  0.83)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.17 (  0.18)
Test: [  26/  26]	Loss 0.646 (0.652)	test_acc   0.47 (  0.44)	test_minacc   0.73 (  0.84)	test_majacc   0.42 (  0.37)	Loss_d 0.646 (0.652)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.73 (  0.84)	test_majacc_d   0.42 (  0.37)	test_corr_d   0.24 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.04it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.35 (  0.35)	Loss_d 0.705 (0.705)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.35 (  0.35)	Loss_d 0.705 (0.705)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 28/  1]	epoch_time 0.0408 (0.0437)	validation_time 0.0004 (0.0006)	train_time 0.0403 (0.0429)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4439000039100647, 0.7200000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.45it/s] 23%|##3       | 6/26 [00:00<00:00, 23.95it/s] 38%|###8      | 10/26 [00:00<00:00, 28.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.24it/s] 69%|######9   | 18/26 [00:00<00:00, 32.85it/s] 85%|########4 | 22/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 34.75it/s]100%|##########| 26/26 [00:00<00:00, 29.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.44 (  0.52)	train_minacc   0.78 (  0.69)	train_majacc   0.38 (  0.49)	train_corr   0.00 (  0.00)	l1 5.8793 (5.9081)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 23%|##3       | 6/26 [00:00<00:00, 30.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.76it/s] 42%|####2     | 11/26 [00:00<00:00, 37.93it/s] 62%|######1   | 16/26 [00:00<00:00, 40.88it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.88it/s] 81%|########  | 21/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 41.23it/s]100%|##########| 26/26 [00:00<00:00, 34.86it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.45 (  0.45)	test_minacc   0.86 (  0.86)	test_majacc   0.37 (  0.37)	Loss_d 0.653 (0.653)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.659 (0.656)	test_acc   0.42 (  0.43)	test_minacc   0.87 (  0.86)	test_majacc   0.34 (  0.36)	Loss_d 0.659 (0.656)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.87 (  0.86)	test_majacc_d   0.34 (  0.36)	test_corr_d   0.14 (  0.15)
Test: [  20/  26]	Loss 0.651 (0.657)	test_acc   0.45 (  0.43)	test_minacc   0.90 (  0.86)	test_majacc   0.37 (  0.35)	Loss_d 0.651 (0.657)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.90 (  0.86)	test_majacc_d   0.37 (  0.35)	test_corr_d   0.12 (  0.14)
Test: [  26/  26]	Loss 0.643 (0.655)	test_acc   0.46 (  0.43)	test_minacc   0.78 (  0.86)	test_majacc   0.40 (  0.36)	Loss_d 0.643 (0.655)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.78 (  0.86)	test_majacc_d   0.40 (  0.36)	test_corr_d   0.20 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.18it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.35 (  0.35)	Loss_d 0.686 (0.686)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.35 (  0.35)	Loss_d 0.686 (0.686)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 29/  1]	epoch_time 0.0426 (0.0437)	validation_time 0.0003 (0.0006)	train_time 0.0423 (0.0429)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4336000046432018, 0.7400000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.01it/s] 19%|#9        | 5/26 [00:00<00:01, 17.92it/s] 35%|###4      | 9/26 [00:00<00:00, 24.70it/s] 50%|#####     | 13/26 [00:00<00:00, 28.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 27.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.44 (  0.55)	train_minacc   0.78 (  0.70)	train_majacc   0.38 (  0.52)	train_corr   0.00 (  0.00)	l1 5.8834 (5.8584)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 23%|##3       | 6/26 [00:00<00:00, 25.71it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.71it/s] 42%|####2     | 11/26 [00:00<00:00, 34.46it/s] 62%|######1   | 16/26 [00:00<00:00, 38.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.74it/s] 81%|########  | 21/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 40.88it/s]100%|##########| 26/26 [00:00<00:00, 33.00it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.44 (  0.44)	test_minacc   0.85 (  0.85)	test_majacc   0.35 (  0.35)	Loss_d 0.664 (0.664)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.670 (0.667)	test_acc   0.40 (  0.41)	test_minacc   0.85 (  0.85)	test_majacc   0.33 (  0.34)	Loss_d 0.670 (0.667)	test_acc_d   0.40 (  0.41)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.10 (  0.12)
Test: [  20/  26]	Loss 0.661 (0.668)	test_acc   0.43 (  0.41)	test_minacc   0.91 (  0.85)	test_majacc   0.34 (  0.34)	Loss_d 0.661 (0.668)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.10 (  0.11)
Test: [  26/  26]	Loss 0.654 (0.665)	test_acc   0.45 (  0.42)	test_minacc   0.78 (  0.85)	test_majacc   0.39 (  0.34)	Loss_d 0.654 (0.665)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.39 (  0.34)	test_corr_d   0.19 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.34 (  0.34)	Loss_d 0.686 (0.686)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.34 (  0.34)	Loss_d 0.686 (0.686)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 30/  1]	epoch_time 0.0427 (0.0436)	validation_time 0.0004 (0.0006)	train_time 0.0422 (0.0429)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.41820000514388084, 0.7390000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 12%|#1        | 3/26 [00:00<00:02,  8.75it/s] 27%|##6       | 7/26 [00:00<00:01, 17.41it/s] 42%|####2     | 11/26 [00:00<00:00, 22.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.58it/s] 88%|########8 | 23/26 [00:00<00:00, 30.38it/s]100%|##########| 26/26 [00:01<00:00, 23.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.66 ( 22.66)	train_acc   0.51 (  0.49)	train_minacc   0.73 (  0.74)	train_majacc   0.47 (  0.45)	train_corr   0.00 (  0.00)	l1 5.8116 (5.8388)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.89it/s] 27%|##6       | 7/26 [00:00<00:00, 30.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.53it/s] 46%|####6     | 12/26 [00:00<00:00, 36.80it/s] 65%|######5   | 17/26 [00:00<00:00, 38.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.87it/s] 85%|########4 | 22/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 34.35it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.47 (  0.47)	test_minacc   0.79 (  0.79)	test_majacc   0.41 (  0.41)	Loss_d 0.639 (0.639)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.79 (  0.79)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.646 (0.639)	test_acc   0.44 (  0.46)	test_minacc   0.74 (  0.79)	test_majacc   0.39 (  0.41)	Loss_d 0.646 (0.639)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.74 (  0.79)	test_majacc_d   0.39 (  0.41)	test_corr_d   0.26 (  0.27)
Test: [  20/  26]	Loss 0.633 (0.641)	test_acc   0.48 (  0.47)	test_minacc   0.90 (  0.79)	test_majacc   0.41 (  0.41)	Loss_d 0.633 (0.641)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.90 (  0.79)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.27 (  0.27)
Test: [  26/  26]	Loss 0.625 (0.639)	test_acc   0.50 (  0.47)	test_minacc   0.73 (  0.80)	test_majacc   0.46 (  0.41)	Loss_d 0.625 (0.639)	test_acc_d   0.50 (  0.47)	test_minacc_d   0.73 (  0.80)	test_majacc_d   0.46 (  0.41)	test_corr_d   0.33 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.738 (0.738)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.45 (  0.45)	Loss_d 0.738 (0.738)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.738 (0.738)	test_acc   0.64 (  0.64)	test_minacc   0.66 (  0.66)	test_majacc   0.45 (  0.45)	Loss_d 0.738 (0.738)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.45 (  0.45)	test_corr_d   0.08 (  0.08)
Overall Timing[ 31/  1]	epoch_time 0.0432 (0.0436)	validation_time 0.0007 (0.0006)	train_time 0.0425 (0.0428)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4712000052034855, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 15%|#5        | 4/26 [00:00<00:01, 16.63it/s] 31%|###       | 8/26 [00:00<00:00, 25.02it/s] 46%|####6     | 12/26 [00:00<00:00, 28.73it/s] 62%|######1   | 16/26 [00:00<00:00, 29.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.18it/s] 92%|#########2| 24/26 [00:00<00:00, 32.19it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.001 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.46 (  0.46)	train_minacc   0.70 (  0.81)	train_majacc   0.42 (  0.39)	train_corr   0.00 (  0.00)	l1 5.8739 (5.8292)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.93it/s] 19%|#9        | 5/26 [00:00<00:01, 13.83it/s] 38%|###8      | 10/26 [00:00<00:00, 24.17it/s]                                                38%|###8      | 10/26 [00:00<00:00, 24.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.19it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.19it/s] 96%|#########6| 25/26 [00:00<00:00, 36.17it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.45 (  0.45)	test_minacc   0.85 (  0.85)	test_majacc   0.36 (  0.36)	Loss_d 0.662 (0.662)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.666 (0.670)	test_acc   0.44 (  0.42)	test_minacc   0.87 (  0.82)	test_majacc   0.38 (  0.36)	Loss_d 0.666 (0.670)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.87 (  0.82)	test_majacc_d   0.38 (  0.36)	test_corr_d   0.11 (  0.12)
Test: [  20/  26]	Loss 0.662 (0.670)	test_acc   0.43 (  0.43)	test_minacc   0.86 (  0.82)	test_majacc   0.35 (  0.36)	Loss_d 0.662 (0.670)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.86 (  0.82)	test_majacc_d   0.35 (  0.36)	test_corr_d   0.11 (  0.12)
Test: [  26/  26]	Loss 0.654 (0.667)	test_acc   0.46 (  0.43)	test_minacc   0.73 (  0.83)	test_majacc   0.41 (  0.36)	Loss_d 0.654 (0.667)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.73 (  0.83)	test_majacc_d   0.41 (  0.36)	test_corr_d   0.19 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.36 (  0.36)	Loss_d 0.694 (0.694)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 32/  1]	epoch_time 0.0412 (0.0436)	validation_time 0.0003 (0.0006)	train_time 0.0409 (0.0428)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.43060000428557393, 0.7300000190734863)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.24it/s] 23%|##3       | 6/26 [00:00<00:00, 25.29it/s] 38%|###8      | 10/26 [00:00<00:00, 30.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.94it/s] 69%|######9   | 18/26 [00:00<00:00, 34.86it/s] 85%|########4 | 22/26 [00:00<00:00, 35.53it/s]100%|##########| 26/26 [00:00<00:00, 35.70it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.44 (  0.48)	train_minacc   0.76 (  0.78)	train_majacc   0.38 (  0.42)	train_corr   0.00 (  0.00)	l1 5.8195 (5.7914)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.64it/s] 27%|##6       | 7/26 [00:00<00:00, 32.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.67it/s] 46%|####6     | 12/26 [00:00<00:00, 39.51it/s] 65%|######5   | 17/26 [00:00<00:00, 41.31it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.31it/s] 85%|########4 | 22/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 36.82it/s]
Test: [   0/  26]	Loss 0.661 (0.661)	test_acc   0.44 (  0.44)	test_minacc   0.86 (  0.86)	test_majacc   0.35 (  0.35)	Loss_d 0.661 (0.661)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.665 (0.668)	test_acc   0.42 (  0.41)	test_minacc   0.91 (  0.86)	test_majacc   0.35 (  0.34)	Loss_d 0.665 (0.668)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.35 (  0.34)	test_corr_d   0.11 (  0.12)
Test: [  20/  26]	Loss 0.662 (0.668)	test_acc   0.42 (  0.42)	test_minacc   0.90 (  0.85)	test_majacc   0.34 (  0.34)	Loss_d 0.662 (0.668)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.90 (  0.85)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.11 (  0.12)
Test: [  26/  26]	Loss 0.652 (0.666)	test_acc   0.44 (  0.42)	test_minacc   0.76 (  0.85)	test_majacc   0.39 (  0.34)	Loss_d 0.652 (0.666)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.76 (  0.85)	test_majacc_d   0.39 (  0.34)	test_corr_d   0.19 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.32 (  0.32)	Loss_d 0.691 (0.691)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.13 ( -0.13)
Overall Timing[ 33/  1]	epoch_time 0.0383 (0.0434)	validation_time 0.0005 (0.0006)	train_time 0.0378 (0.0426)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4186000056564808, 0.737000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:00, 22.11it/s] 35%|###4      | 9/26 [00:00<00:00, 29.24it/s] 50%|#####     | 13/26 [00:00<00:00, 32.64it/s] 65%|######5   | 17/26 [00:00<00:00, 34.62it/s] 81%|########  | 21/26 [00:00<00:00, 36.23it/s] 96%|#########6| 25/26 [00:00<00:00, 36.78it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.48 (  0.46)	train_minacc   0.78 (  0.80)	train_majacc   0.43 (  0.40)	train_corr   0.00 (  0.00)	l1 5.7489 (5.7625)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 23%|##3       | 6/26 [00:00<00:00, 29.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.21it/s] 42%|####2     | 11/26 [00:00<00:00, 36.30it/s] 62%|######1   | 16/26 [00:00<00:00, 40.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.56it/s] 81%|########  | 21/26 [00:00<00:00, 39.18it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 34.89it/s]
Test: [   0/  26]	Loss 0.658 (0.658)	test_acc   0.44 (  0.44)	test_minacc   0.85 (  0.85)	test_majacc   0.36 (  0.36)	Loss_d 0.658 (0.658)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.666 (0.664)	test_acc   0.40 (  0.42)	test_minacc   0.85 (  0.85)	test_majacc   0.33 (  0.34)	Loss_d 0.666 (0.664)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.13 (  0.14)
Test: [  20/  26]	Loss 0.660 (0.665)	test_acc   0.43 (  0.42)	test_minacc   0.91 (  0.85)	test_majacc   0.34 (  0.34)	Loss_d 0.660 (0.665)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.12 (  0.14)
Test: [  26/  26]	Loss 0.647 (0.663)	test_acc   0.47 (  0.42)	test_minacc   0.78 (  0.85)	test_majacc   0.42 (  0.35)	Loss_d 0.647 (0.663)	test_acc_d   0.47 (  0.42)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.42 (  0.35)	test_corr_d   0.21 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.03it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.34 (  0.34)	Loss_d 0.704 (0.704)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.34 (  0.34)	Loss_d 0.704 (0.704)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.34 (  0.34)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 34/  1]	epoch_time 0.0406 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0401 (0.0426)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4210000054836273, 0.7280000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:00, 21.30it/s] 35%|###4      | 9/26 [00:00<00:00, 27.07it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 31.78it/s] 81%|########  | 21/26 [00:00<00:00, 32.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.67 ( 22.67)	train_acc   0.46 (  0.53)	train_minacc   0.76 (  0.68)	train_majacc   0.41 (  0.51)	train_corr   0.00 (  0.00)	l1 5.6895 (5.7027)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.07it/s] 27%|##6       | 7/26 [00:00<00:00, 24.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.17it/s] 46%|####6     | 12/26 [00:00<00:00, 32.54it/s] 65%|######5   | 17/26 [00:00<00:00, 37.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.89it/s] 85%|########4 | 22/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 33.36it/s]
Test: [   0/  26]	Loss 0.659 (0.659)	test_acc   0.45 (  0.45)	test_minacc   0.83 (  0.83)	test_majacc   0.37 (  0.37)	Loss_d 0.659 (0.659)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.670 (0.665)	test_acc   0.38 (  0.41)	test_minacc   0.85 (  0.85)	test_majacc   0.31 (  0.34)	Loss_d 0.670 (0.665)	test_acc_d   0.38 (  0.41)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.31 (  0.34)	test_corr_d   0.11 (  0.13)
Test: [  20/  26]	Loss 0.662 (0.666)	test_acc   0.42 (  0.42)	test_minacc   0.90 (  0.85)	test_majacc   0.34 (  0.34)	Loss_d 0.662 (0.666)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.90 (  0.85)	test_majacc_d   0.34 (  0.34)	test_corr_d   0.11 (  0.13)
Test: [  26/  26]	Loss 0.646 (0.664)	test_acc   0.46 (  0.42)	test_minacc   0.76 (  0.85)	test_majacc   0.41 (  0.34)	Loss_d 0.646 (0.664)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.76 (  0.85)	test_majacc_d   0.41 (  0.34)	test_corr_d   0.20 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.73it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.35 (  0.35)	Loss_d 0.698 (0.698)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.35 (  0.35)	Loss_d 0.698 (0.698)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 35/  1]	epoch_time 0.0425 (0.0433)	validation_time 0.0003 (0.0006)	train_time 0.0421 (0.0426)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.41900000497698786, 0.7400000095367432)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s]  8%|7         | 2/26 [00:00<00:02,  8.90it/s] 19%|#9        | 5/26 [00:00<00:01, 17.68it/s] 31%|###       | 8/26 [00:00<00:00, 22.30it/s] 46%|####6     | 12/26 [00:00<00:00, 26.55it/s] 62%|######1   | 16/26 [00:00<00:00, 28.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.56it/s] 92%|#########2| 24/26 [00:00<00:00, 32.01it/s]100%|##########| 26/26 [00:01<00:00, 25.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.67)	train_acc   0.48 (  0.51)	train_minacc   0.76 (  0.73)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 5.6519 (5.6564)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.13it/s] 27%|##6       | 7/26 [00:00<00:00, 32.65it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.65it/s] 46%|####6     | 12/26 [00:00<00:00, 37.33it/s] 65%|######5   | 17/26 [00:00<00:00, 40.36it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.36it/s] 85%|########4 | 22/26 [00:00<00:00, 40.65it/s]100%|##########| 26/26 [00:00<00:00, 36.85it/s]
Test: [   0/  26]	Loss 0.655 (0.655)	test_acc   0.45 (  0.45)	test_minacc   0.83 (  0.83)	test_majacc   0.38 (  0.38)	Loss_d 0.655 (0.655)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.668 (0.662)	test_acc   0.38 (  0.42)	test_minacc   0.83 (  0.83)	test_majacc   0.31 (  0.35)	Loss_d 0.668 (0.662)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.31 (  0.35)	test_corr_d   0.14 (  0.16)
Test: [  20/  26]	Loss 0.659 (0.663)	test_acc   0.41 (  0.42)	test_minacc   0.90 (  0.83)	test_majacc   0.33 (  0.34)	Loss_d 0.659 (0.663)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.90 (  0.83)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.13 (  0.16)
Test: [  26/  26]	Loss 0.642 (0.661)	test_acc   0.47 (  0.42)	test_minacc   0.76 (  0.84)	test_majacc   0.42 (  0.35)	Loss_d 0.642 (0.661)	test_acc_d   0.47 (  0.42)	test_minacc_d   0.76 (  0.84)	test_majacc_d   0.42 (  0.35)	test_corr_d   0.23 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.21it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.38 (  0.38)	Loss_d 0.708 (0.708)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.73 (  0.73)	test_minacc   0.77 (  0.77)	test_majacc   0.38 (  0.38)	Loss_d 0.708 (0.708)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 36/  1]	epoch_time 0.0429 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0424 (0.0426)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4218000054359436, 0.734000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 15%|#5        | 4/26 [00:00<00:01, 17.81it/s] 31%|###       | 8/26 [00:00<00:00, 25.36it/s] 46%|####6     | 12/26 [00:00<00:00, 29.11it/s] 62%|######1   | 16/26 [00:00<00:00, 31.30it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.53it/s] 92%|#########2| 24/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 28.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.48 (  0.51)	train_minacc   0.78 (  0.72)	train_majacc   0.43 (  0.48)	train_corr   0.00 (  0.00)	l1 5.6053 (5.6258)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.35it/s] 42%|####2     | 11/26 [00:00<00:00, 33.70it/s] 62%|######1   | 16/26 [00:00<00:00, 38.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.73it/s] 81%|########  | 21/26 [00:00<00:00, 38.37it/s]100%|##########| 26/26 [00:00<00:00, 33.65it/s]
Test: [   0/  26]	Loss 0.655 (0.655)	test_acc   0.46 (  0.46)	test_minacc   0.83 (  0.83)	test_majacc   0.38 (  0.38)	Loss_d 0.655 (0.655)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.671 (0.660)	test_acc   0.41 (  0.43)	test_minacc   0.83 (  0.83)	test_majacc   0.34 (  0.37)	Loss_d 0.671 (0.660)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.34 (  0.37)	test_corr_d   0.15 (  0.18)
Test: [  20/  26]	Loss 0.659 (0.662)	test_acc   0.44 (  0.43)	test_minacc   0.90 (  0.83)	test_majacc   0.36 (  0.36)	Loss_d 0.659 (0.662)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.90 (  0.83)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.15 (  0.17)
Test: [  26/  26]	Loss 0.639 (0.660)	test_acc   0.47 (  0.44)	test_minacc   0.78 (  0.83)	test_majacc   0.42 (  0.37)	Loss_d 0.639 (0.660)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.78 (  0.83)	test_majacc_d   0.42 (  0.37)	test_corr_d   0.24 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 0.714 (0.714)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.39 (  0.39)	Loss_d 0.714 (0.714)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.714 (0.714)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.39 (  0.39)	Loss_d 0.714 (0.714)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 37/  1]	epoch_time 0.0411 (0.0432)	validation_time 0.0003 (0.0006)	train_time 0.0408 (0.0425)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4351000046432018, 0.7070000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.36it/s] 50%|#####     | 13/26 [00:00<00:00, 28.70it/s] 65%|######5   | 17/26 [00:00<00:00, 30.58it/s] 81%|########  | 21/26 [00:00<00:00, 31.92it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 27.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.49 (  0.53)	train_minacc   0.78 (  0.68)	train_majacc   0.44 (  0.51)	train_corr   0.00 (  0.00)	l1 5.5857 (5.5904)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 19%|#9        | 5/26 [00:00<00:00, 22.26it/s] 38%|###8      | 10/26 [00:00<00:00, 32.62it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.27it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.97it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.97it/s] 96%|#########6| 25/26 [00:00<00:00, 40.41it/s]100%|##########| 26/26 [00:00<00:00, 32.89it/s]
Test: [   0/  26]	Loss 0.652 (0.652)	test_acc   0.45 (  0.45)	test_minacc   0.88 (  0.88)	test_majacc   0.36 (  0.36)	Loss_d 0.652 (0.652)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.667 (0.662)	test_acc   0.38 (  0.42)	test_minacc   0.83 (  0.84)	test_majacc   0.31 (  0.34)	Loss_d 0.667 (0.662)	test_acc_d   0.38 (  0.42)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.31 (  0.34)	test_corr_d   0.12 (  0.15)
Test: [  20/  26]	Loss 0.661 (0.662)	test_acc   0.41 (  0.42)	test_minacc   0.90 (  0.84)	test_majacc   0.32 (  0.34)	Loss_d 0.661 (0.662)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.32 (  0.34)	test_corr_d   0.12 (  0.15)
Test: [  26/  26]	Loss 0.643 (0.660)	test_acc   0.48 (  0.42)	test_minacc   0.81 (  0.84)	test_majacc   0.43 (  0.34)	Loss_d 0.643 (0.660)	test_acc_d   0.48 (  0.42)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.43 (  0.34)	test_corr_d   0.22 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.699 (0.699)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.37 (  0.37)	Loss_d 0.699 (0.699)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 38/  1]	epoch_time 0.0397 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0424)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.41970000544190406, 0.737000048160553)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.29it/s] 23%|##3       | 6/26 [00:00<00:00, 25.20it/s] 38%|###8      | 10/26 [00:00<00:00, 29.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.41it/s] 69%|######9   | 18/26 [00:00<00:00, 32.71it/s] 85%|########4 | 22/26 [00:00<00:00, 32.92it/s]100%|##########| 26/26 [00:00<00:00, 33.93it/s]100%|##########| 26/26 [00:00<00:00, 29.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.47 (  0.45)	train_minacc   0.78 (  0.80)	train_majacc   0.41 (  0.39)	train_corr   0.00 (  0.00)	l1 5.5501 (5.5424)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.18it/s] 31%|###       | 8/26 [00:00<00:00, 29.75it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.75it/s] 50%|#####     | 13/26 [00:00<00:00, 35.78it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.72it/s] 92%|#########2| 24/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 35.14it/s]
Test: [   0/  26]	Loss 0.651 (0.651)	test_acc   0.46 (  0.46)	test_minacc   0.86 (  0.86)	test_majacc   0.38 (  0.38)	Loss_d 0.651 (0.651)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.670 (0.658)	test_acc   0.37 (  0.42)	test_minacc   0.83 (  0.85)	test_majacc   0.30 (  0.35)	Loss_d 0.670 (0.658)	test_acc_d   0.37 (  0.42)	test_minacc_d   0.83 (  0.85)	test_majacc_d   0.30 (  0.35)	test_corr_d   0.14 (  0.17)
Test: [  20/  26]	Loss 0.659 (0.660)	test_acc   0.41 (  0.42)	test_minacc   0.90 (  0.84)	test_majacc   0.33 (  0.34)	Loss_d 0.659 (0.660)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.13 (  0.16)
Test: [  26/  26]	Loss 0.640 (0.659)	test_acc   0.46 (  0.42)	test_minacc   0.78 (  0.84)	test_majacc   0.40 (  0.35)	Loss_d 0.640 (0.659)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.78 (  0.84)	test_majacc_d   0.40 (  0.35)	test_corr_d   0.23 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.74 (  0.74)	test_minacc   0.77 (  0.77)	test_majacc   0.38 (  0.38)	Loss_d 0.707 (0.707)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.74 (  0.74)	test_minacc   0.77 (  0.77)	test_majacc   0.38 (  0.38)	Loss_d 0.707 (0.707)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 39/  1]	epoch_time 0.0413 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0409 (0.0424)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4206000054180622, 0.7350000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.09it/s] 23%|##3       | 6/26 [00:00<00:00, 26.90it/s] 38%|###8      | 10/26 [00:00<00:00, 30.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.66it/s] 69%|######9   | 18/26 [00:00<00:00, 33.84it/s] 85%|########4 | 22/26 [00:00<00:00, 34.83it/s]100%|##########| 26/26 [00:00<00:00, 34.98it/s]100%|##########| 26/26 [00:00<00:00, 30.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.49 (  0.48)	train_minacc   0.78 (  0.78)	train_majacc   0.44 (  0.43)	train_corr   0.00 (  0.00)	l1 5.5302 (5.5422)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.51it/s] 31%|###       | 8/26 [00:00<00:00, 28.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.69it/s] 50%|#####     | 13/26 [00:00<00:00, 32.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.04it/s] 92%|#########2| 24/26 [00:00<00:00, 40.76it/s]100%|##########| 26/26 [00:00<00:00, 33.15it/s]
Test: [   0/  26]	Loss 0.638 (0.638)	test_acc   0.46 (  0.46)	test_minacc   0.86 (  0.86)	test_majacc   0.38 (  0.38)	Loss_d 0.638 (0.638)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.657 (0.646)	test_acc   0.39 (  0.43)	test_minacc   0.81 (  0.83)	test_majacc   0.32 (  0.36)	Loss_d 0.657 (0.646)	test_acc_d   0.39 (  0.43)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.32 (  0.36)	test_corr_d   0.20 (  0.23)
Test: [  20/  26]	Loss 0.647 (0.648)	test_acc   0.42 (  0.43)	test_minacc   0.88 (  0.82)	test_majacc   0.34 (  0.36)	Loss_d 0.647 (0.648)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.88 (  0.82)	test_majacc_d   0.34 (  0.36)	test_corr_d   0.19 (  0.22)
Test: [  26/  26]	Loss 0.628 (0.647)	test_acc   0.48 (  0.43)	test_minacc   0.78 (  0.82)	test_majacc   0.43 (  0.36)	Loss_d 0.628 (0.647)	test_acc_d   0.48 (  0.43)	test_minacc_d   0.78 (  0.82)	test_majacc_d   0.43 (  0.36)	test_corr_d   0.29 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.64it/s]
Test: [  0/  1]	Loss 0.727 (0.727)	test_acc   0.72 (  0.72)	test_minacc   0.75 (  0.75)	test_majacc   0.41 (  0.41)	Loss_d 0.727 (0.727)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.727 (0.727)	test_acc   0.72 (  0.72)	test_minacc   0.75 (  0.75)	test_majacc   0.41 (  0.41)	Loss_d 0.727 (0.727)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.02 (  0.02)
Overall Timing[ 40/  1]	epoch_time 0.0405 (0.0430)	validation_time 0.0005 (0.0006)	train_time 0.0400 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.42920000466704367, 0.7150000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 19%|#9        | 5/26 [00:00<00:01, 17.69it/s] 35%|###4      | 9/26 [00:00<00:00, 24.17it/s] 50%|#####     | 13/26 [00:00<00:00, 27.46it/s] 65%|######5   | 17/26 [00:00<00:00, 29.44it/s] 81%|########  | 21/26 [00:00<00:00, 30.79it/s] 96%|#########6| 25/26 [00:00<00:00, 32.08it/s]100%|##########| 26/26 [00:01<00:00, 25.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.49 (  0.48)	train_minacc   0.81 (  0.76)	train_majacc   0.44 (  0.43)	train_corr   0.00 (  0.00)	l1 5.5197 (5.5278)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 23%|##3       | 6/26 [00:00<00:00, 29.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.69it/s] 42%|####2     | 11/26 [00:00<00:00, 36.57it/s] 62%|######1   | 16/26 [00:00<00:00, 39.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.32it/s] 81%|########  | 21/26 [00:00<00:00, 38.53it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 34.48it/s]
Test: [   0/  26]	Loss 0.640 (0.640)	test_acc   0.46 (  0.46)	test_minacc   0.86 (  0.86)	test_majacc   0.38 (  0.38)	Loss_d 0.640 (0.640)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.658 (0.648)	test_acc   0.39 (  0.43)	test_minacc   0.81 (  0.82)	test_majacc   0.33 (  0.37)	Loss_d 0.658 (0.648)	test_acc_d   0.39 (  0.43)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.33 (  0.37)	test_corr_d   0.19 (  0.22)
Test: [  20/  26]	Loss 0.649 (0.650)	test_acc   0.41 (  0.43)	test_minacc   0.86 (  0.81)	test_majacc   0.33 (  0.36)	Loss_d 0.649 (0.650)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.86 (  0.81)	test_majacc_d   0.33 (  0.36)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.633 (0.649)	test_acc   0.49 (  0.43)	test_minacc   0.81 (  0.81)	test_majacc   0.43 (  0.36)	Loss_d 0.633 (0.649)	test_acc_d   0.49 (  0.43)	test_minacc_d   0.81 (  0.81)	test_majacc_d   0.43 (  0.36)	test_corr_d   0.27 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.02it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.71 (  0.71)	test_minacc   0.75 (  0.75)	test_majacc   0.39 (  0.39)	Loss_d 0.723 (0.723)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.71 (  0.71)	test_minacc   0.75 (  0.75)	test_majacc   0.39 (  0.39)	Loss_d 0.723 (0.723)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.03 (  0.03)
Overall Timing[ 41/  1]	epoch_time 0.0424 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0420 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4283000051379204, 0.7100000381469727)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.92it/s] 19%|#9        | 5/26 [00:00<00:01, 13.57it/s] 35%|###4      | 9/26 [00:00<00:00, 20.66it/s] 50%|#####     | 13/26 [00:00<00:00, 25.25it/s] 65%|######5   | 17/26 [00:00<00:00, 28.08it/s] 81%|########  | 21/26 [00:00<00:00, 30.06it/s] 96%|#########6| 25/26 [00:01<00:00, 31.54it/s]100%|##########| 26/26 [00:01<00:00, 23.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.68 ( 22.68)	train_acc   0.48 (  0.44)	train_minacc   0.81 (  0.81)	train_majacc   0.42 (  0.37)	train_corr   0.00 (  0.00)	l1 5.5123 (5.5053)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 23%|##3       | 6/26 [00:00<00:00, 26.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.45it/s] 42%|####2     | 11/26 [00:00<00:00, 34.36it/s] 62%|######1   | 16/26 [00:00<00:00, 39.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.08it/s] 81%|########  | 21/26 [00:00<00:00, 40.78it/s]100%|##########| 26/26 [00:00<00:00, 43.08it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.45 (  0.45)	test_minacc   0.85 (  0.85)	test_majacc   0.37 (  0.37)	Loss_d 0.643 (0.643)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.661 (0.650)	test_acc   0.39 (  0.42)	test_minacc   0.81 (  0.82)	test_majacc   0.32 (  0.36)	Loss_d 0.661 (0.650)	test_acc_d   0.39 (  0.42)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.32 (  0.36)	test_corr_d   0.18 (  0.21)
Test: [  20/  26]	Loss 0.651 (0.653)	test_acc   0.41 (  0.42)	test_minacc   0.86 (  0.81)	test_majacc   0.33 (  0.35)	Loss_d 0.651 (0.653)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.86 (  0.81)	test_majacc_d   0.33 (  0.35)	test_corr_d   0.17 (  0.20)
Test: [  26/  26]	Loss 0.637 (0.652)	test_acc   0.48 (  0.42)	test_minacc   0.81 (  0.82)	test_majacc   0.43 (  0.35)	Loss_d 0.637 (0.652)	test_acc_d   0.48 (  0.42)	test_minacc_d   0.81 (  0.82)	test_majacc_d   0.43 (  0.35)	test_corr_d   0.26 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.72 (  0.72)	test_minacc   0.75 (  0.75)	test_majacc   0.38 (  0.38)	Loss_d 0.723 (0.723)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.72 (  0.72)	test_minacc   0.75 (  0.75)	test_majacc   0.38 (  0.38)	Loss_d 0.723 (0.723)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.01 (  0.01)
Overall Timing[ 42/  1]	epoch_time 0.0405 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0401 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.42140000534057614, 0.7150000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.67it/s] 19%|#9        | 5/26 [00:00<00:01, 15.42it/s] 35%|###4      | 9/26 [00:00<00:00, 22.54it/s] 50%|#####     | 13/26 [00:00<00:00, 26.85it/s] 65%|######5   | 17/26 [00:00<00:00, 29.34it/s] 81%|########  | 21/26 [00:00<00:00, 31.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:01<00:00, 24.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.68)	train_acc   0.46 (  0.43)	train_minacc   0.81 (  0.81)	train_majacc   0.39 (  0.36)	train_corr   0.00 (  0.00)	l1 5.5144 (5.4891)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s]  8%|7         | 2/26 [00:00<00:03,  7.57it/s] 27%|##6       | 7/26 [00:00<00:00, 22.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.85it/s] 46%|####6     | 12/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 36.05it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.05it/s] 85%|########4 | 22/26 [00:00<00:00, 37.17it/s]100%|##########| 26/26 [00:00<00:00, 30.49it/s]
Test: [   0/  26]	Loss 0.651 (0.651)	test_acc   0.44 (  0.44)	test_minacc   0.86 (  0.86)	test_majacc   0.35 (  0.35)	Loss_d 0.651 (0.651)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.669 (0.657)	test_acc   0.36 (  0.42)	test_minacc   0.85 (  0.85)	test_majacc   0.29 (  0.35)	Loss_d 0.669 (0.657)	test_acc_d   0.36 (  0.42)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.29 (  0.35)	test_corr_d   0.15 (  0.18)
Test: [  20/  26]	Loss 0.658 (0.660)	test_acc   0.41 (  0.41)	test_minacc   0.88 (  0.84)	test_majacc   0.32 (  0.34)	Loss_d 0.658 (0.660)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.88 (  0.84)	test_majacc_d   0.32 (  0.34)	test_corr_d   0.14 (  0.17)
Test: [  26/  26]	Loss 0.643 (0.659)	test_acc   0.46 (  0.41)	test_minacc   0.81 (  0.84)	test_majacc   0.39 (  0.34)	Loss_d 0.643 (0.659)	test_acc_d   0.46 (  0.41)	test_minacc_d   0.81 (  0.84)	test_majacc_d   0.39 (  0.34)	test_corr_d   0.23 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.08it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.36 (  0.36)	Loss_d 0.715 (0.715)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.36 (  0.36)	Loss_d 0.715 (0.715)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 43/  1]	epoch_time 0.0440 (0.0430)	validation_time 0.0007 (0.0006)	train_time 0.0433 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4147000057697296, 0.7230000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.14it/s] 23%|##3       | 6/26 [00:00<00:00, 27.30it/s] 38%|###8      | 10/26 [00:00<00:00, 30.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.27it/s] 69%|######9   | 18/26 [00:00<00:00, 32.50it/s] 85%|########4 | 22/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 31.66it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.52 (  0.45)	train_minacc   0.78 (  0.80)	train_majacc   0.48 (  0.38)	train_corr   0.00 (  0.00)	l1 5.5400 (5.5028)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.27it/s] 27%|##6       | 7/26 [00:00<00:00, 35.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.71it/s] 42%|####2     | 11/26 [00:00<00:00, 37.13it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.03it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.03it/s] 81%|########  | 21/26 [00:00<00:00, 38.86it/s]100%|##########| 26/26 [00:00<00:00, 42.01it/s]100%|##########| 26/26 [00:00<00:00, 35.19it/s]
Test: [   0/  26]	Loss 0.640 (0.640)	test_acc   0.49 (  0.49)	test_minacc   0.86 (  0.86)	test_majacc   0.42 (  0.42)	Loss_d 0.640 (0.640)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.86 (  0.86)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.658 (0.651)	test_acc   0.44 (  0.46)	test_minacc   0.77 (  0.79)	test_majacc   0.39 (  0.40)	Loss_d 0.658 (0.651)	test_acc_d   0.44 (  0.46)	test_minacc_d   0.77 (  0.79)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.651 (0.654)	test_acc   0.43 (  0.45)	test_minacc   0.83 (  0.79)	test_majacc   0.36 (  0.39)	Loss_d 0.651 (0.654)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.83 (  0.79)	test_majacc_d   0.36 (  0.39)	test_corr_d   0.17 (  0.20)
Test: [  26/  26]	Loss 0.636 (0.652)	test_acc   0.52 (  0.45)	test_minacc   0.78 (  0.79)	test_majacc   0.47 (  0.39)	Loss_d 0.636 (0.652)	test_acc_d   0.52 (  0.45)	test_minacc_d   0.78 (  0.79)	test_majacc_d   0.47 (  0.39)	test_corr_d   0.27 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.33it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.721 (0.721)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.71 (  0.71)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.721 (0.721)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0431 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0427 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4537000049650669, 0.7120000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 15%|#5        | 4/26 [00:00<00:01, 17.65it/s] 31%|###       | 8/26 [00:00<00:00, 25.28it/s] 46%|####6     | 12/26 [00:00<00:00, 29.37it/s] 62%|######1   | 16/26 [00:00<00:00, 31.72it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.68it/s] 92%|#########2| 24/26 [00:00<00:00, 33.24it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.44 (  0.44)	train_minacc   0.76 (  0.81)	train_majacc   0.39 (  0.38)	train_corr   0.00 (  0.00)	l1 5.5177 (5.5038)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 23%|##3       | 6/26 [00:00<00:00, 24.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.11it/s] 42%|####2     | 11/26 [00:00<00:00, 33.12it/s] 65%|######5   | 17/26 [00:00<00:00, 38.70it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.70it/s] 85%|########4 | 22/26 [00:00<00:00, 39.83it/s]100%|##########| 26/26 [00:00<00:00, 33.77it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.46 (  0.46)	test_minacc   0.85 (  0.85)	test_majacc   0.38 (  0.38)	Loss_d 0.647 (0.647)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.669 (0.651)	test_acc   0.38 (  0.43)	test_minacc   0.83 (  0.85)	test_majacc   0.31 (  0.36)	Loss_d 0.669 (0.651)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.83 (  0.85)	test_majacc_d   0.31 (  0.36)	test_corr_d   0.18 (  0.21)
Test: [  20/  26]	Loss 0.653 (0.656)	test_acc   0.43 (  0.42)	test_minacc   0.90 (  0.84)	test_majacc   0.34 (  0.35)	Loss_d 0.653 (0.656)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.34 (  0.35)	test_corr_d   0.17 (  0.20)
Test: [  26/  26]	Loss 0.634 (0.654)	test_acc   0.44 (  0.43)	test_minacc   0.76 (  0.84)	test_majacc   0.38 (  0.35)	Loss_d 0.634 (0.654)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.76 (  0.84)	test_majacc_d   0.38 (  0.35)	test_corr_d   0.26 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 0.728 (0.728)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.38 (  0.38)	Loss_d 0.728 (0.728)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.728 (0.728)	test_acc   0.72 (  0.72)	test_minacc   0.76 (  0.76)	test_majacc   0.38 (  0.38)	Loss_d 0.728 (0.728)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 45/  1]	epoch_time 0.0393 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0388 (0.0422)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4253000050485134, 0.7230000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.66it/s] 35%|###4      | 9/26 [00:00<00:00, 27.93it/s] 50%|#####     | 13/26 [00:00<00:00, 30.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.69it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.56 (  0.49)	train_minacc   0.76 (  0.79)	train_majacc   0.52 (  0.44)	train_corr   0.00 (  0.00)	l1 5.5535 (5.5213)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 23%|##3       | 6/26 [00:00<00:00, 28.02it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.02it/s] 42%|####2     | 11/26 [00:00<00:00, 35.80it/s] 62%|######1   | 16/26 [00:00<00:00, 40.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.65it/s] 81%|########  | 21/26 [00:00<00:00, 41.28it/s]100%|##########| 26/26 [00:00<00:00, 35.46it/s]
Test: [   0/  26]	Loss 0.634 (0.634)	test_acc   0.53 (  0.53)	test_minacc   0.82 (  0.82)	test_majacc   0.48 (  0.48)	Loss_d 0.634 (0.634)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.654 (0.647)	test_acc   0.49 (  0.50)	test_minacc   0.72 (  0.76)	test_majacc   0.45 (  0.46)	Loss_d 0.654 (0.647)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.72 (  0.76)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.18 (  0.22)
Test: [  20/  26]	Loss 0.650 (0.651)	test_acc   0.48 (  0.49)	test_minacc   0.81 (  0.76)	test_majacc   0.42 (  0.45)	Loss_d 0.650 (0.651)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.81 (  0.76)	test_majacc_d   0.42 (  0.45)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.631 (0.649)	test_acc   0.55 (  0.49)	test_minacc   0.76 (  0.76)	test_majacc   0.52 (  0.45)	Loss_d 0.631 (0.649)	test_acc_d   0.55 (  0.49)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.52 (  0.45)	test_corr_d   0.29 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 0.722 (0.722)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.50 (  0.50)	Loss_d 0.722 (0.722)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.722 (0.722)	test_acc   0.69 (  0.69)	test_minacc   0.71 (  0.71)	test_majacc   0.50 (  0.50)	Loss_d 0.722 (0.722)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 46/  1]	epoch_time 0.0382 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0379 (0.0421)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.49460000967979434, 0.6890000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.23it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 28.78it/s] 50%|#####     | 13/26 [00:00<00:00, 31.68it/s] 65%|######5   | 17/26 [00:00<00:00, 32.40it/s] 81%|########  | 21/26 [00:00<00:00, 33.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.96it/s]100%|##########| 26/26 [00:00<00:00, 29.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.44 (  0.45)	train_minacc   0.78 (  0.81)	train_majacc   0.38 (  0.39)	train_corr   0.00 (  0.00)	l1 5.5389 (5.5158)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 23%|##3       | 6/26 [00:00<00:00, 24.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.37it/s] 42%|####2     | 11/26 [00:00<00:00, 32.90it/s] 62%|######1   | 16/26 [00:00<00:00, 37.05it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.05it/s] 81%|########  | 21/26 [00:00<00:00, 36.95it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 31.82it/s]
Test: [   0/  26]	Loss 0.650 (0.650)	test_acc   0.46 (  0.46)	test_minacc   0.88 (  0.88)	test_majacc   0.38 (  0.38)	Loss_d 0.650 (0.650)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.88 (  0.88)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.672 (0.655)	test_acc   0.38 (  0.43)	test_minacc   0.83 (  0.87)	test_majacc   0.31 (  0.35)	Loss_d 0.672 (0.655)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.31 (  0.35)	test_corr_d   0.16 (  0.19)
Test: [  20/  26]	Loss 0.658 (0.660)	test_acc   0.42 (  0.42)	test_minacc   0.91 (  0.85)	test_majacc   0.33 (  0.34)	Loss_d 0.658 (0.660)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.91 (  0.85)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.14 (  0.18)
Test: [  26/  26]	Loss 0.638 (0.659)	test_acc   0.44 (  0.42)	test_minacc   0.78 (  0.85)	test_majacc   0.38 (  0.34)	Loss_d 0.638 (0.659)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.78 (  0.85)	test_majacc_d   0.38 (  0.34)	test_corr_d   0.24 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.38it/s]
Test: [  0/  1]	Loss 0.722 (0.722)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.722 (0.722)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.722 (0.722)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.722 (0.722)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 47/  1]	epoch_time 0.0419 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0414 (0.0421)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.41990000516176224, 0.7380000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 19%|#9        | 5/26 [00:00<00:00, 21.26it/s] 35%|###4      | 9/26 [00:00<00:00, 27.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.26it/s] 81%|########  | 21/26 [00:00<00:00, 32.02it/s] 96%|#########6| 25/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 27.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.56 (  0.52)	train_minacc   0.76 (  0.75)	train_majacc   0.53 (  0.48)	train_corr   0.00 (  0.00)	l1 5.5528 (5.5338)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 19%|#9        | 5/26 [00:00<00:00, 22.06it/s] 38%|###8      | 10/26 [00:00<00:00, 32.64it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.24it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.24it/s] 96%|#########6| 25/26 [00:00<00:00, 40.22it/s]100%|##########| 26/26 [00:00<00:00, 32.77it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.53 (  0.53)	test_minacc   0.82 (  0.82)	test_majacc   0.47 (  0.47)	Loss_d 0.632 (0.632)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.82 (  0.82)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.654 (0.646)	test_acc   0.49 (  0.50)	test_minacc   0.72 (  0.77)	test_majacc   0.45 (  0.46)	Loss_d 0.654 (0.646)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.72 (  0.77)	test_majacc_d   0.45 (  0.46)	test_corr_d   0.18 (  0.21)
Test: [  20/  26]	Loss 0.651 (0.651)	test_acc   0.48 (  0.49)	test_minacc   0.83 (  0.77)	test_majacc   0.42 (  0.44)	Loss_d 0.651 (0.651)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.83 (  0.77)	test_majacc_d   0.42 (  0.44)	test_corr_d   0.18 (  0.20)
Test: [  26/  26]	Loss 0.629 (0.649)	test_acc   0.56 (  0.49)	test_minacc   0.76 (  0.77)	test_majacc   0.52 (  0.45)	Loss_d 0.629 (0.649)	test_acc_d   0.56 (  0.49)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.52 (  0.45)	test_corr_d   0.29 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.35it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.70 (  0.70)	test_minacc   0.72 (  0.72)	test_majacc   0.51 (  0.51)	Loss_d 0.721 (0.721)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.70 (  0.70)	test_minacc   0.72 (  0.72)	test_majacc   0.51 (  0.51)	Loss_d 0.721 (0.721)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 48/  1]	epoch_time 0.0534 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0529 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4946000122129917, 0.6980000138282776)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 19%|#9        | 5/26 [00:00<00:00, 21.04it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.51it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.82it/s] 96%|#########6| 25/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:00<00:00, 27.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.69)	train_acc   0.46 (  0.45)	train_minacc   0.81 (  0.81)	train_majacc   0.39 (  0.39)	train_corr   0.00 (  0.00)	l1 5.5470 (5.5185)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.59it/s] 12%|#1        | 3/26 [00:00<00:01, 14.97it/s] 31%|###       | 8/26 [00:00<00:00, 29.07it/s]                                               31%|###       | 8/26 [00:00<00:00, 29.07it/s] 50%|#####     | 13/26 [00:00<00:00, 35.20it/s] 69%|######9   | 18/26 [00:00<00:00, 37.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 37.04it/s] 88%|########8 | 23/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 33.24it/s]
Test: [   0/  26]	Loss 0.650 (0.650)	test_acc   0.46 (  0.46)	test_minacc   0.89 (  0.89)	test_majacc   0.37 (  0.37)	Loss_d 0.650 (0.650)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.672 (0.656)	test_acc   0.38 (  0.43)	test_minacc   0.83 (  0.87)	test_majacc   0.31 (  0.35)	Loss_d 0.672 (0.656)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.83 (  0.87)	test_majacc_d   0.31 (  0.35)	test_corr_d   0.14 (  0.18)
Test: [  20/  26]	Loss 0.660 (0.662)	test_acc   0.41 (  0.42)	test_minacc   0.91 (  0.86)	test_majacc   0.33 (  0.34)	Loss_d 0.660 (0.662)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.91 (  0.86)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.13 (  0.16)
Test: [  26/  26]	Loss 0.640 (0.660)	test_acc   0.45 (  0.42)	test_minacc   0.81 (  0.86)	test_majacc   0.38 (  0.34)	Loss_d 0.640 (0.660)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.81 (  0.86)	test_majacc_d   0.38 (  0.34)	test_corr_d   0.23 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.77it/s]
Test: [  0/  1]	Loss 0.714 (0.714)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.714 (0.714)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.714 (0.714)	test_acc   0.74 (  0.74)	test_minacc   0.78 (  0.78)	test_majacc   0.38 (  0.38)	Loss_d 0.714 (0.714)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 49/  1]	epoch_time 0.0428 (0.0430)	validation_time 0.0003 (0.0005)	train_time 0.0424 (0.0423)
record: (train_acc, test_acc) (0.6339000110626221, 0.6290000081062317)
last accs (train_acc, test_acc) (0.4189000051021576, 0.7440000176429749)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpmhkx1tuc'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_205919-zqagorls
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/zqagorls
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1226
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5994, 3, 32, 32) (6006, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.75s/it] 23%|##3       | 6/26 [00:01<00:04,  4.25it/s] 42%|####2     | 11/26 [00:01<00:01,  8.53it/s] 62%|######1   | 16/26 [00:02<00:00, 13.20it/s] 81%|########  | 21/26 [00:02<00:00, 17.97it/s] 96%|#########6| 25/26 [00:02<00:00, 21.39it/s]100%|##########| 26/26 [00:02<00:00,  9.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.468 (0.524)	train_nll   0.47 (  0.52)	train_penalty   0.09 (  0.22)	weight_norm  20.84 ( 18.11)	train_acc   0.82 (  0.81)	train_minacc   0.02 (  0.06)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 7.4872 (8.4958)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.98it/s] 23%|##3       | 6/26 [00:00<00:00, 26.38it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.38it/s] 42%|####2     | 11/26 [00:00<00:00, 34.91it/s] 62%|######1   | 16/26 [00:00<00:00, 39.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.61it/s] 81%|########  | 21/26 [00:00<00:00, 42.46it/s]100%|##########| 26/26 [00:00<00:00, 44.22it/s]100%|##########| 26/26 [00:00<00:00, 36.13it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   0.98 (  0.98)	Loss_d 0.419 (0.419)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.506 (0.422)	test_acc   0.80 (  0.84)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.506 (0.422)	test_acc_d   0.80 (  0.84)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.365 (0.414)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.414)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.460 (0.411)	test_acc   0.82 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.460 (0.411)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.687 (1.687)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.687 (1.687)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.687 (1.687)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.687 (1.687)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0797 (0.0797)	validation_time 0.0066 (0.0066)	train_time 0.0697 (0.0697)
record: (train_acc, test_acc) (0.8473000240921974, 0.10900000482797623)
last accs (train_acc, test_acc) (0.8473000240921974, 0.10900000482797623)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.28it/s] 19%|#9        | 5/26 [00:00<00:01, 14.54it/s] 35%|###4      | 9/26 [00:00<00:00, 21.62it/s] 50%|#####     | 13/26 [00:00<00:00, 26.40it/s] 65%|######5   | 17/26 [00:00<00:00, 29.23it/s] 81%|########  | 21/26 [00:00<00:00, 30.84it/s] 96%|#########6| 25/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:01<00:00, 24.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.426 (0.408)	train_nll   0.43 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm  21.94 ( 21.60)	train_acc   0.82 (  0.85)	train_minacc   0.02 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 7.3760 (7.3752)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.52it/s] 27%|##6       | 7/26 [00:00<00:00, 34.14it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.14it/s] 46%|####6     | 12/26 [00:00<00:00, 39.64it/s] 65%|######5   | 17/26 [00:00<00:00, 42.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.87it/s] 85%|########4 | 22/26 [00:00<00:00, 41.19it/s]100%|##########| 26/26 [00:00<00:00, 39.20it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.396)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.482 (0.409)	test_acc   0.81 (  0.84)	test_minacc   0.01 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.482 (0.409)	test_acc_d   0.81 (  0.84)	test_minacc_d   0.01 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.335 (0.400)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.335 (0.400)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.418 (0.396)	test_acc   0.82 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.418 (0.396)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.09it/s]
Test: [  0/  1]	Loss 1.792 (1.792)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.792 (1.792)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.792 (1.792)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.792 (1.792)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0414 (0.0606)	validation_time 0.0007 (0.0037)	train_time 0.0407 (0.0552)
record: (train_acc, test_acc) (0.8491000183820725, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8491000183820725, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.18it/s] 69%|######9   | 18/26 [00:00<00:00, 35.29it/s] 85%|########4 | 22/26 [00:00<00:00, 34.71it/s]100%|##########| 26/26 [00:00<00:00, 35.17it/s]100%|##########| 26/26 [00:00<00:00, 29.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.371 (0.392)	train_nll   0.37 (  0.39)	train_penalty   0.05 (  0.05)	weight_norm  22.06 ( 22.02)	train_acc   0.84 (  0.85)	train_minacc   0.13 (  0.02)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.3892 (7.2691)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.41it/s] 27%|##6       | 7/26 [00:00<00:00, 24.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.27it/s] 46%|####6     | 12/26 [00:00<00:00, 32.46it/s] 65%|######5   | 17/26 [00:00<00:00, 34.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.43it/s] 85%|########4 | 22/26 [00:00<00:00, 38.49it/s]100%|##########| 26/26 [00:00<00:00, 31.20it/s]
Test: [   0/  26]	Loss 0.380 (0.380)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.15)	test_majacc   0.97 (  0.97)	Loss_d 0.380 (0.380)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.456 (0.389)	test_acc   0.81 (  0.85)	test_minacc   0.13 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.456 (0.389)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.13 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.91)
Test: [  20/  26]	Loss 0.308 (0.378)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.308 (0.378)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.355 (0.373)	test_acc   0.86 (  0.85)	test_minacc   0.24 (  0.18)	test_majacc   0.99 (  0.97)	Loss_d 0.355 (0.373)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.24 (  0.18)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.61it/s]
Test: [  0/  1]	Loss 1.787 (1.787)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.787 (1.787)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.787 (1.787)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.787 (1.787)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0418 (0.0543)	validation_time 0.0003 (0.0026)	train_time 0.0414 (0.0506)
record: (train_acc, test_acc) (0.8517000207304954, 0.17900000512599945)
last accs (train_acc, test_acc) (0.8517000207304954, 0.17900000512599945)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.40it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 33.53it/s] 96%|#########6| 25/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.348 (0.379)	train_nll   0.35 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm  22.13 ( 22.10)	train_acc   0.85 (  0.85)	train_minacc   0.22 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 7.4906 (7.2699)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.10it/s] 23%|##3       | 6/26 [00:00<00:00, 30.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.30it/s] 42%|####2     | 11/26 [00:00<00:00, 37.27it/s] 65%|######5   | 17/26 [00:00<00:00, 39.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.79it/s] 85%|########4 | 22/26 [00:00<00:00, 42.61it/s]100%|##########| 26/26 [00:00<00:00, 37.02it/s]
Test: [   0/  26]	Loss 0.362 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.95 (  0.95)	Loss_d 0.362 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.432 (0.370)	test_acc   0.81 (  0.85)	test_minacc   0.21 (  0.25)	test_majacc   0.95 (  0.96)	Loss_d 0.432 (0.370)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.21 (  0.25)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  20/  26]	Loss 0.286 (0.363)	test_acc   0.88 (  0.85)	test_minacc   0.31 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.286 (0.363)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.31 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  26/  26]	Loss 0.324 (0.355)	test_acc   0.86 (  0.85)	test_minacc   0.31 (  0.26)	test_majacc   0.98 (  0.96)	Loss_d 0.324 (0.355)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.31 (  0.26)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.87 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 46.14it/s]
Test: [  0/  1]	Loss 1.803 (1.803)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.803 (1.803)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.803 (1.803)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.96 (  0.96)	Loss_d 1.803 (1.803)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0375 (0.0501)	validation_time 0.0005 (0.0021)	train_time 0.0369 (0.0472)
record: (train_acc, test_acc) (0.8539000251293183, 0.20900000631809235)
last accs (train_acc, test_acc) (0.8539000251293183, 0.20900000631809235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s] 15%|#5        | 4/26 [00:00<00:01, 15.22it/s] 31%|###       | 8/26 [00:00<00:00, 23.16it/s] 46%|####6     | 12/26 [00:00<00:00, 27.67it/s] 62%|######1   | 16/26 [00:00<00:00, 29.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.21it/s] 92%|#########2| 24/26 [00:00<00:00, 32.67it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.306 (0.355)	train_nll   0.31 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm  22.20 ( 22.16)	train_acc   0.86 (  0.85)	train_minacc   0.22 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.2345 (7.2916)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.73it/s] 35%|###4      | 9/26 [00:00<00:00, 32.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 32.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.78it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.98it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.98it/s]100%|##########| 26/26 [00:00<00:00, 46.90it/s]100%|##########| 26/26 [00:00<00:00, 37.37it/s]
Test: [   0/  26]	Loss 0.325 (0.325)	test_acc   0.86 (  0.86)	test_minacc   0.32 (  0.32)	test_majacc   0.95 (  0.95)	Loss_d 0.325 (0.325)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.401 (0.341)	test_acc   0.81 (  0.86)	test_minacc   0.27 (  0.31)	test_majacc   0.94 (  0.96)	Loss_d 0.401 (0.341)	test_acc_d   0.81 (  0.86)	test_minacc_d   0.27 (  0.31)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.86 (  0.88)
Test: [  20/  26]	Loss 0.279 (0.332)	test_acc   0.89 (  0.86)	test_minacc   0.39 (  0.31)	test_majacc   0.96 (  0.96)	Loss_d 0.279 (0.332)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.39 (  0.31)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.283 (0.324)	test_acc   0.87 (  0.87)	test_minacc   0.40 (  0.32)	test_majacc   0.98 (  0.96)	Loss_d 0.283 (0.324)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.40 (  0.32)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.87 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.07it/s]
Test: [  0/  1]	Loss 1.744 (1.744)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 1.744 (1.744)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.744 (1.744)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 1.744 (1.744)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0448 (0.0490)	validation_time 0.0005 (0.0017)	train_time 0.0443 (0.0466)
record: (train_acc, test_acc) (0.8655000215768814, 0.23000000417232513)
last accs (train_acc, test_acc) (0.8655000215768814, 0.23000000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.92it/s] 23%|##3       | 6/26 [00:00<00:00, 27.28it/s] 38%|###8      | 10/26 [00:00<00:00, 29.71it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 32.88it/s] 81%|########  | 21/26 [00:00<00:00, 34.81it/s] 96%|#########6| 25/26 [00:00<00:00, 35.65it/s]100%|##########| 26/26 [00:00<00:00, 31.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.290 (0.334)	train_nll   0.29 (  0.33)	train_penalty   0.02 (  0.03)	weight_norm  22.28 ( 22.24)	train_acc   0.86 (  0.85)	train_minacc   0.27 (  0.24)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 7.3857 (7.2102)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.57it/s] 31%|###       | 8/26 [00:00<00:00, 37.89it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.89it/s] 50%|#####     | 13/26 [00:00<00:00, 41.28it/s] 69%|######9   | 18/26 [00:00<00:00, 43.47it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.47it/s] 88%|########8 | 23/26 [00:00<00:00, 44.17it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.316 (0.316)	test_acc   0.86 (  0.86)	test_minacc   0.43 (  0.43)	test_majacc   0.94 (  0.94)	Loss_d 0.316 (0.316)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.382 (0.331)	test_acc   0.81 (  0.86)	test_minacc   0.31 (  0.41)	test_majacc   0.93 (  0.94)	Loss_d 0.382 (0.331)	test_acc_d   0.81 (  0.86)	test_minacc_d   0.31 (  0.41)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.83 (  0.85)
Test: [  20/  26]	Loss 0.280 (0.322)	test_acc   0.87 (  0.86)	test_minacc   0.47 (  0.41)	test_majacc   0.93 (  0.94)	Loss_d 0.280 (0.322)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.47 (  0.41)	test_majacc_d   0.93 (  0.94)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.259 (0.312)	test_acc   0.90 (  0.87)	test_minacc   0.56 (  0.42)	test_majacc   0.97 (  0.95)	Loss_d 0.259 (0.312)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.56 (  0.42)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.84 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.20it/s]
Test: [  0/  1]	Loss 1.859 (1.859)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.93 (  0.93)	Loss_d 1.859 (1.859)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.859 (1.859)	test_acc   0.30 (  0.30)	test_minacc   0.23 (  0.23)	test_majacc   0.93 (  0.93)	Loss_d 1.859 (1.859)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0399 (0.0475)	validation_time 0.0004 (0.0015)	train_time 0.0394 (0.0454)
record: (train_acc, test_acc) (0.8667000259160995, 0.2980000078678131)
last accs (train_acc, test_acc) (0.8667000259160995, 0.2980000078678131)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.03it/s] 23%|##3       | 6/26 [00:00<00:00, 27.47it/s] 38%|###8      | 10/26 [00:00<00:00, 31.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.71it/s] 96%|#########6| 25/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 32.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.271 (0.323)	train_nll   0.27 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm  22.38 ( 22.33)	train_acc   0.88 (  0.86)	train_minacc   0.44 (  0.32)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 7.1563 (7.2465)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 23%|##3       | 6/26 [00:00<00:00, 24.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.89it/s] 42%|####2     | 11/26 [00:00<00:00, 33.01it/s] 62%|######1   | 16/26 [00:00<00:00, 38.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.28it/s] 81%|########  | 21/26 [00:00<00:00, 37.46it/s]100%|##########| 26/26 [00:00<00:00, 40.74it/s]100%|##########| 26/26 [00:00<00:00, 33.20it/s]
Test: [   0/  26]	Loss 0.318 (0.318)	test_acc   0.84 (  0.84)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 0.318 (0.318)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.367 (0.328)	test_acc   0.83 (  0.86)	test_minacc   0.44 (  0.47)	test_majacc   0.92 (  0.93)	Loss_d 0.367 (0.328)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.44 (  0.47)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.81 (  0.83)
Test: [  20/  26]	Loss 0.277 (0.322)	test_acc   0.88 (  0.86)	test_minacc   0.59 (  0.48)	test_majacc   0.93 (  0.93)	Loss_d 0.277 (0.322)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.59 (  0.48)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.83 (  0.84)
Test: [  26/  26]	Loss 0.255 (0.313)	test_acc   0.90 (  0.87)	test_minacc   0.64 (  0.49)	test_majacc   0.96 (  0.93)	Loss_d 0.255 (0.313)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.64 (  0.49)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.81 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.72it/s]
Test: [  0/  1]	Loss 1.719 (1.719)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.91 (  0.91)	Loss_d 1.719 (1.719)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.719 (1.719)	test_acc   0.36 (  0.36)	test_minacc   0.30 (  0.30)	test_majacc   0.91 (  0.91)	Loss_d 1.719 (1.719)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.64 (  0.64)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0416 (0.0467)	validation_time 0.0003 (0.0013)	train_time 0.0412 (0.0448)
record: (train_acc, test_acc) (0.866500022649765, 0.3570000231266022)
last accs (train_acc, test_acc) (0.866500022649765, 0.3570000231266022)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.34it/s] 19%|#9        | 5/26 [00:00<00:00, 24.22it/s] 35%|###4      | 9/26 [00:00<00:00, 29.81it/s] 50%|#####     | 13/26 [00:00<00:00, 32.48it/s] 65%|######5   | 17/26 [00:00<00:00, 34.20it/s] 81%|########  | 21/26 [00:00<00:00, 35.15it/s] 96%|#########6| 25/26 [00:00<00:00, 36.05it/s]100%|##########| 26/26 [00:00<00:00, 30.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.004 (0.228)	train_nll   0.49 (  0.34)	train_penalty   0.00 (  0.02)	weight_norm  22.51 ( 22.44)	train_acc   0.75 (  0.85)	train_minacc   0.71 (  0.42)	train_majacc   0.76 (  0.92)	train_corr   0.00 (  0.00)	l1 6.4209 (7.0452)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 23%|##3       | 6/26 [00:00<00:00, 25.17it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.17it/s] 42%|####2     | 11/26 [00:00<00:00, 33.60it/s] 62%|######1   | 16/26 [00:00<00:00, 35.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.44it/s] 81%|########  | 21/26 [00:00<00:00, 38.64it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]100%|##########| 26/26 [00:00<00:00, 33.52it/s]
Test: [   0/  26]	Loss 0.490 (0.490)	test_acc   0.74 (  0.74)	test_minacc   0.83 (  0.83)	test_majacc   0.72 (  0.72)	Loss_d 0.490 (0.490)	test_acc_d   0.74 (  0.74)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.44 (  0.44)
Test: [  10/  26]	Loss 0.533 (0.512)	test_acc   0.72 (  0.73)	test_minacc   0.79 (  0.80)	test_majacc   0.70 (  0.71)	Loss_d 0.533 (0.512)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.79 (  0.80)	test_majacc_d   0.70 (  0.71)	test_corr_d   0.40 (  0.43)
Test: [  20/  26]	Loss 0.522 (0.504)	test_acc   0.72 (  0.73)	test_minacc   0.84 (  0.80)	test_majacc   0.70 (  0.72)	Loss_d 0.522 (0.504)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.84 (  0.80)	test_majacc_d   0.70 (  0.72)	test_corr_d   0.43 (  0.43)
Test: [  26/  26]	Loss 0.475 (0.500)	test_acc   0.77 (  0.73)	test_minacc   0.80 (  0.80)	test_majacc   0.76 (  0.72)	Loss_d 0.475 (0.500)	test_acc_d   0.77 (  0.73)	test_minacc_d   0.80 (  0.80)	test_majacc_d   0.76 (  0.72)	test_corr_d   0.41 (  0.44)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.891 (0.891)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.71 (  0.71)	Loss_d 0.891 (0.891)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.891 (0.891)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.71 (  0.71)	Loss_d 0.891 (0.891)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.12 ( -0.12)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/168/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0420 (0.0461)	validation_time 0.0005 (0.0012)	train_time 0.0415 (0.0444)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.18it/s] 19%|#9        | 5/26 [00:00<00:01, 16.29it/s] 35%|###4      | 9/26 [00:00<00:00, 22.53it/s] 50%|#####     | 13/26 [00:00<00:00, 26.81it/s] 65%|######5   | 17/26 [00:00<00:00, 29.53it/s] 81%|########  | 21/26 [00:00<00:00, 31.67it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:01<00:00, 25.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.003)	train_nll   0.63 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.54)	train_acc   0.56 (  0.68)	train_minacc   0.89 (  0.73)	train_majacc   0.49 (  0.68)	train_corr   0.00 (  0.00)	l1 5.1729 (5.5100)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.76it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 38%|###8      | 10/26 [00:00<00:00, 30.91it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.36it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.89it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.89it/s] 96%|#########6| 25/26 [00:00<00:00, 42.07it/s]100%|##########| 26/26 [00:00<00:00, 34.12it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.45 (  0.45)	test_minacc   0.85 (  0.85)	test_majacc   0.38 (  0.38)	Loss_d 0.676 (0.676)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.679 (0.679)	test_acc   0.47 (  0.44)	test_minacc   0.84 (  0.82)	test_majacc   0.38 (  0.38)	Loss_d 0.679 (0.679)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.84 (  0.82)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.12)
Test: [  20/  26]	Loss 0.681 (0.678)	test_acc   0.43 (  0.45)	test_minacc   0.82 (  0.83)	test_majacc   0.37 (  0.38)	Loss_d 0.681 (0.678)	test_acc_d   0.43 (  0.45)	test_minacc_d   0.82 (  0.83)	test_majacc_d   0.37 (  0.38)	test_corr_d   0.11 (  0.12)
Test: [  26/  26]	Loss 0.665 (0.678)	test_acc   0.50 (  0.45)	test_minacc   0.84 (  0.83)	test_majacc   0.42 (  0.38)	Loss_d 0.665 (0.678)	test_acc_d   0.50 (  0.45)	test_minacc_d   0.84 (  0.83)	test_majacc_d   0.42 (  0.38)	test_corr_d   0.09 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.51it/s]
Test: [  0/  1]	Loss 0.732 (0.732)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.732 (0.732)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.732 (0.732)	test_acc   0.72 (  0.72)	test_minacc   0.74 (  0.74)	test_majacc   0.45 (  0.45)	Loss_d 0.732 (0.732)	test_acc_d   0.72 (  0.72)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.11 ( -0.11)
Overall Timing[  8/  1]	epoch_time 0.0405 (0.0455)	validation_time 0.0004 (0.0011)	train_time 0.0400 (0.0439)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4516000040471554, 0.7150000333786011)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.99it/s] 15%|#5        | 4/26 [00:00<00:01, 12.45it/s] 31%|###       | 8/26 [00:00<00:00, 20.04it/s] 46%|####6     | 12/26 [00:00<00:00, 24.48it/s] 62%|######1   | 16/26 [00:00<00:00, 28.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.04it/s] 92%|#########2| 24/26 [00:00<00:00, 32.01it/s]100%|##########| 26/26 [00:01<00:00, 24.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.002 (0.001)	train_nll   0.62 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.57)	train_acc   0.71 (  0.58)	train_minacc   0.67 (  0.65)	train_majacc   0.72 (  0.56)	train_corr   0.00 (  0.00)	l1 4.9563 (5.0559)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.26it/s] 31%|###       | 8/26 [00:00<00:00, 38.92it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.92it/s] 50%|#####     | 13/26 [00:00<00:00, 40.96it/s] 69%|######9   | 18/26 [00:00<00:00, 40.67it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.67it/s] 88%|########8 | 23/26 [00:00<00:00, 42.25it/s]100%|##########| 26/26 [00:00<00:00, 38.68it/s]
Test: [   0/  26]	Loss 0.631 (0.631)	test_acc   0.65 (  0.65)	test_minacc   0.67 (  0.67)	test_majacc   0.64 (  0.64)	Loss_d 0.631 (0.631)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.638 (0.641)	test_acc   0.66 (  0.64)	test_minacc   0.57 (  0.58)	test_majacc   0.68 (  0.66)	Loss_d 0.638 (0.641)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.57 (  0.58)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.23 (  0.24)
Test: [  20/  26]	Loss 0.636 (0.641)	test_acc   0.66 (  0.64)	test_minacc   0.67 (  0.58)	test_majacc   0.65 (  0.65)	Loss_d 0.636 (0.641)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.26 (  0.25)
Test: [  26/  26]	Loss 0.624 (0.641)	test_acc   0.68 (  0.64)	test_minacc   0.80 (  0.58)	test_majacc   0.66 (  0.65)	Loss_d 0.624 (0.641)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.80 (  0.58)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.24 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.58it/s]
Test: [  0/  1]	Loss 0.727 (0.727)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.65 (  0.65)	Loss_d 0.727 (0.727)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.727 (0.727)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.65 (  0.65)	Loss_d 0.727 (0.727)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.02 (  0.02)
Overall Timing[  9/  1]	epoch_time 0.0429 (0.0452)	validation_time 0.0004 (0.0011)	train_time 0.0424 (0.0438)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.63620001578331, 0.5040000081062317)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 19%|#9        | 5/26 [00:00<00:00, 23.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.90it/s] 50%|#####     | 13/26 [00:00<00:00, 31.54it/s] 65%|######5   | 17/26 [00:00<00:00, 31.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.85it/s] 96%|#########6| 25/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 29.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.60 (  0.58)	train_minacc   0.73 (  0.61)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.8730 (4.9125)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s] 27%|##6       | 7/26 [00:00<00:00, 36.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.89it/s] 50%|#####     | 13/26 [00:00<00:00, 43.04it/s] 69%|######9   | 18/26 [00:00<00:00, 45.29it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.29it/s] 92%|#########2| 24/26 [00:00<00:00, 49.20it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.51 (  0.51)	test_minacc   0.70 (  0.70)	test_majacc   0.48 (  0.48)	Loss_d 0.660 (0.660)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.666 (0.662)	test_acc   0.51 (  0.53)	test_minacc   0.65 (  0.64)	test_majacc   0.48 (  0.51)	Loss_d 0.666 (0.662)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.15 (  0.17)
Test: [  20/  26]	Loss 0.656 (0.661)	test_acc   0.54 (  0.53)	test_minacc   0.71 (  0.65)	test_majacc   0.51 (  0.51)	Loss_d 0.656 (0.661)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.71 (  0.65)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.21 (  0.18)
Test: [  26/  26]	Loss 0.653 (0.661)	test_acc   0.55 (  0.53)	test_minacc   0.76 (  0.65)	test_majacc   0.51 (  0.50)	Loss_d 0.653 (0.661)	test_acc_d   0.55 (  0.53)	test_minacc_d   0.76 (  0.65)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.17 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.701 (0.701)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.46 (  0.46)	Loss_d 0.701 (0.701)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 10/  1]	epoch_time 0.0407 (0.0448)	validation_time 0.0003 (0.0010)	train_time 0.0403 (0.0435)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5258000078201294, 0.578000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.12it/s] 12%|#1        | 3/26 [00:00<00:03,  7.39it/s] 27%|##6       | 7/26 [00:00<00:01, 16.01it/s] 42%|####2     | 11/26 [00:00<00:00, 21.96it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.28it/s] 88%|########8 | 23/26 [00:01<00:00, 32.05it/s]100%|##########| 26/26 [00:01<00:00, 23.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.54 (  0.49)	train_minacc   0.71 (  0.64)	train_majacc   0.50 (  0.47)	train_corr   0.00 (  0.00)	l1 4.8552 (4.8706)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 26.77it/s] 38%|###8      | 10/26 [00:00<00:00, 41.16it/s]                                                38%|###8      | 10/26 [00:00<00:00, 41.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 42.96it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.06it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.06it/s] 96%|#########6| 25/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 39.31it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.55 (  0.55)	test_minacc   0.67 (  0.67)	test_majacc   0.53 (  0.53)	Loss_d 0.668 (0.668)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.671 (0.669)	test_acc   0.55 (  0.55)	test_minacc   0.63 (  0.60)	test_majacc   0.54 (  0.54)	Loss_d 0.671 (0.669)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.15)
Test: [  20/  26]	Loss 0.664 (0.668)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.664 (0.668)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.16)
Test: [  26/  26]	Loss 0.667 (0.669)	test_acc   0.55 (  0.55)	test_minacc   0.69 (  0.61)	test_majacc   0.52 (  0.54)	Loss_d 0.667 (0.669)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.14 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.15it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.702 (0.702)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 11/  1]	epoch_time 0.0420 (0.0446)	validation_time 0.0004 (0.0010)	train_time 0.0415 (0.0433)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5476000121235848, 0.5440000295639038)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 19%|#9        | 5/26 [00:00<00:01, 18.74it/s] 35%|###4      | 9/26 [00:00<00:00, 24.76it/s] 50%|#####     | 13/26 [00:00<00:00, 28.57it/s] 65%|######5   | 17/26 [00:00<00:00, 30.12it/s] 81%|########  | 21/26 [00:00<00:00, 32.50it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.48 (  0.47)	train_minacc   0.71 (  0.61)	train_majacc   0.43 (  0.44)	train_corr   0.00 (  0.00)	l1 4.8433 (4.8509)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.43it/s] 23%|##3       | 6/26 [00:00<00:00, 25.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.50it/s] 46%|####6     | 12/26 [00:00<00:00, 37.09it/s] 65%|######5   | 17/26 [00:00<00:00, 37.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.61it/s] 85%|########4 | 22/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 35.58it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.47 (  0.47)	test_minacc   0.68 (  0.68)	test_majacc   0.43 (  0.43)	Loss_d 0.677 (0.677)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.679 (0.676)	test_acc   0.47 (  0.47)	test_minacc   0.68 (  0.63)	test_majacc   0.42 (  0.44)	Loss_d 0.679 (0.676)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.42 (  0.44)	test_corr_d   0.10 (  0.11)
Test: [  20/  26]	Loss 0.672 (0.676)	test_acc   0.47 (  0.47)	test_minacc   0.61 (  0.62)	test_majacc   0.45 (  0.44)	Loss_d 0.672 (0.676)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.45 (  0.44)	test_corr_d   0.16 (  0.12)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.48 (  0.47)	test_minacc   0.69 (  0.62)	test_majacc   0.44 (  0.44)	Loss_d 0.675 (0.676)	test_acc_d   0.48 (  0.47)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.10 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.699 (0.699)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.46 (  0.46)	Loss_d 0.699 (0.699)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 12/  1]	epoch_time 0.0413 (0.0443)	validation_time 0.0003 (0.0009)	train_time 0.0410 (0.0431)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.46580000269412997, 0.5990000367164612)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 19%|#9        | 5/26 [00:00<00:00, 24.56it/s] 35%|###4      | 9/26 [00:00<00:00, 29.70it/s] 50%|#####     | 13/26 [00:00<00:00, 31.71it/s] 65%|######5   | 17/26 [00:00<00:00, 32.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.92it/s] 96%|#########6| 25/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 30.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.48 (  0.45)	train_minacc   0.69 (  0.61)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 4.8334 (4.8377)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.17it/s] 27%|##6       | 7/26 [00:00<00:00, 32.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.88it/s] 46%|####6     | 12/26 [00:00<00:00, 36.57it/s] 65%|######5   | 17/26 [00:00<00:00, 40.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.35it/s] 85%|########4 | 22/26 [00:00<00:00, 41.55it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.44 (  0.44)	test_minacc   0.68 (  0.68)	test_majacc   0.40 (  0.40)	Loss_d 0.675 (0.675)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.677 (0.675)	test_acc   0.47 (  0.45)	test_minacc   0.69 (  0.63)	test_majacc   0.42 (  0.42)	Loss_d 0.677 (0.675)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.671 (0.674)	test_acc   0.45 (  0.45)	test_minacc   0.61 (  0.62)	test_majacc   0.43 (  0.42)	Loss_d 0.671 (0.674)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.673 (0.674)	test_acc   0.48 (  0.45)	test_minacc   0.69 (  0.62)	test_majacc   0.43 (  0.42)	Loss_d 0.673 (0.674)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.43 (  0.42)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.20it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.43 (  0.43)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 13/  1]	epoch_time 0.0384 (0.0439)	validation_time 0.0004 (0.0009)	train_time 0.0380 (0.0427)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4500000034272671, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 23%|##3       | 6/26 [00:00<00:00, 29.87it/s] 38%|###8      | 10/26 [00:00<00:00, 32.68it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.33it/s] 69%|######9   | 18/26 [00:00<00:00, 35.19it/s] 85%|########4 | 22/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 35.35it/s]100%|##########| 26/26 [00:00<00:00, 31.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.46 (  0.44)	train_minacc   0.69 (  0.62)	train_majacc   0.41 (  0.41)	train_corr   0.00 (  0.00)	l1 4.8288 (4.8316)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 25.90it/s] 35%|###4      | 9/26 [00:00<00:00, 36.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 41.11it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.56it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.56it/s]100%|##########| 26/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.676 (0.676)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.676 (0.675)	test_acc   0.47 (  0.45)	test_minacc   0.68 (  0.63)	test_majacc   0.42 (  0.41)	Loss_d 0.676 (0.675)	test_acc_d   0.47 (  0.45)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.672 (0.675)	test_acc   0.45 (  0.44)	test_minacc   0.61 (  0.62)	test_majacc   0.43 (  0.41)	Loss_d 0.672 (0.675)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.674 (0.675)	test_acc   0.47 (  0.44)	test_minacc   0.71 (  0.62)	test_majacc   0.42 (  0.41)	Loss_d 0.674 (0.675)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.71 (  0.62)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.07it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.61 (  0.61)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 14/  1]	epoch_time 0.0403 (0.0437)	validation_time 0.0003 (0.0008)	train_time 0.0399 (0.0426)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.44410000410676004, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 19%|#9        | 5/26 [00:00<00:00, 25.09it/s] 35%|###4      | 9/26 [00:00<00:00, 30.99it/s] 50%|#####     | 13/26 [00:00<00:00, 33.44it/s] 65%|######5   | 17/26 [00:00<00:00, 34.60it/s] 81%|########  | 21/26 [00:00<00:00, 35.34it/s] 96%|#########6| 25/26 [00:00<00:00, 35.09it/s]100%|##########| 26/26 [00:00<00:00, 31.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.46 (  0.44)	train_minacc   0.69 (  0.62)	train_majacc   0.41 (  0.41)	train_corr   0.00 (  0.00)	l1 4.8257 (4.8272)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.98it/s] 27%|##6       | 7/26 [00:00<00:00, 36.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.08it/s] 46%|####6     | 12/26 [00:00<00:00, 40.74it/s] 65%|######5   | 17/26 [00:00<00:00, 42.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.49it/s] 85%|########4 | 22/26 [00:00<00:00, 43.98it/s]100%|##########| 26/26 [00:00<00:00, 37.88it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.42 (  0.42)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.677 (0.677)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.677 (0.676)	test_acc   0.47 (  0.44)	test_minacc   0.68 (  0.62)	test_majacc   0.42 (  0.41)	Loss_d 0.677 (0.676)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.676)	test_acc   0.44 (  0.44)	test_minacc   0.61 (  0.61)	test_majacc   0.42 (  0.41)	Loss_d 0.673 (0.676)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.675 (0.676)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.11 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.90it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 15/  1]	epoch_time 0.0367 (0.0432)	validation_time 0.0005 (0.0008)	train_time 0.0363 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4391000039875507, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.17it/s]  8%|7         | 2/26 [00:00<00:05,  4.77it/s] 12%|#1        | 3/26 [00:00<00:03,  6.12it/s] 27%|##6       | 7/26 [00:00<00:01, 15.29it/s] 42%|####2     | 11/26 [00:00<00:00, 21.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 26.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.68it/s] 88%|########8 | 23/26 [00:01<00:00, 32.09it/s]100%|##########| 26/26 [00:01<00:00, 22.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.44)	train_minacc   0.69 (  0.61)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8241 (4.8247)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 27%|##6       | 7/26 [00:00<00:00, 30.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.97it/s] 42%|####2     | 11/26 [00:00<00:00, 33.92it/s] 62%|######1   | 16/26 [00:00<00:00, 38.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.82it/s] 81%|########  | 21/26 [00:00<00:00, 38.64it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 34.55it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.42 (  0.42)	test_minacc   0.68 (  0.68)	test_majacc   0.37 (  0.37)	Loss_d 0.677 (0.677)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.676 (0.676)	test_acc   0.47 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.676 (0.676)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.676)	test_acc   0.43 (  0.44)	test_minacc   0.61 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.673 (0.676)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 16/  1]	epoch_time 0.0442 (0.0433)	validation_time 0.0007 (0.0008)	train_time 0.0435 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.436400003939867, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.79it/s] 23%|##3       | 6/26 [00:00<00:00, 28.15it/s] 38%|###8      | 10/26 [00:00<00:00, 32.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.02it/s] 69%|######9   | 18/26 [00:00<00:00, 35.09it/s] 85%|########4 | 22/26 [00:00<00:00, 35.89it/s]100%|##########| 26/26 [00:00<00:00, 36.23it/s]100%|##########| 26/26 [00:00<00:00, 32.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8238 (4.8238)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 27%|##6       | 7/26 [00:00<00:00, 29.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.31it/s] 50%|#####     | 13/26 [00:00<00:00, 37.14it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.36it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.36it/s] 92%|#########2| 24/26 [00:00<00:00, 41.88it/s]100%|##########| 26/26 [00:00<00:00, 35.93it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.42 (  0.42)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.676 (0.676)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.676 (0.676)	test_acc   0.47 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.42 (  0.40)	Loss_d 0.676 (0.676)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.42 (  0.40)	test_corr_d   0.12 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.676)	test_acc   0.43 (  0.44)	test_minacc   0.61 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.676)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 17/  1]	epoch_time 0.0416 (0.0432)	validation_time 0.0003 (0.0008)	train_time 0.0413 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43600000417232515, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.64it/s] 23%|##3       | 6/26 [00:00<00:00, 26.03it/s] 38%|###8      | 10/26 [00:00<00:00, 31.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.34it/s] 92%|#########2| 24/26 [00:00<00:00, 37.01it/s]100%|##########| 26/26 [00:00<00:00, 31.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.46 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8243 (4.8240)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 23%|##3       | 6/26 [00:00<00:00, 27.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.70it/s] 42%|####2     | 11/26 [00:00<00:00, 35.61it/s] 62%|######1   | 16/26 [00:00<00:00, 39.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.82it/s] 81%|########  | 21/26 [00:00<00:00, 38.50it/s]100%|##########| 26/26 [00:00<00:00, 34.18it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.42 (  0.42)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.676 (0.676)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.676 (0.676)	test_acc   0.47 (  0.44)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.676 (0.676)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.676)	test_acc   0.42 (  0.44)	test_minacc   0.61 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.676)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.69it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 18/  1]	epoch_time 0.0452 (0.0433)	validation_time 0.0005 (0.0008)	train_time 0.0448 (0.0423)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4350000040233135, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 19%|#9        | 5/26 [00:00<00:00, 21.95it/s] 35%|###4      | 9/26 [00:00<00:00, 28.02it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 32.18it/s] 81%|########  | 21/26 [00:00<00:00, 33.54it/s] 96%|#########6| 25/26 [00:00<00:00, 34.19it/s]100%|##########| 26/26 [00:00<00:00, 29.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8254 (4.8248)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.81it/s]  8%|7         | 2/26 [00:00<00:04,  4.99it/s] 31%|###       | 8/26 [00:00<00:00, 20.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 20.70it/s] 50%|#####     | 13/26 [00:00<00:00, 28.62it/s] 69%|######9   | 18/26 [00:00<00:00, 34.57it/s]                                                69%|######9   | 18/26 [00:00<00:00, 34.57it/s] 88%|########8 | 23/26 [00:00<00:00, 35.74it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.42 (  0.42)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.676 (0.676)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.675 (0.676)	test_acc   0.47 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.676)	test_acc   0.42 (  0.43)	test_minacc   0.59 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.673 (0.676)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.676)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 19/  1]	epoch_time 0.0454 (0.0434)	validation_time 0.0004 (0.0008)	train_time 0.0449 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4341000040769577, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.97it/s] 35%|###4      | 9/26 [00:00<00:00, 26.51it/s] 50%|#####     | 13/26 [00:00<00:00, 28.87it/s] 65%|######5   | 17/26 [00:00<00:00, 30.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.13it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8269 (4.8261)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:12,  1.95it/s] 27%|##6       | 7/26 [00:00<00:01, 13.84it/s]                                               27%|##6       | 7/26 [00:00<00:01, 13.84it/s] 46%|####6     | 12/26 [00:00<00:00, 21.72it/s] 65%|######5   | 17/26 [00:00<00:00, 27.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 27.51it/s] 85%|########4 | 22/26 [00:00<00:00, 32.62it/s]100%|##########| 26/26 [00:01<00:00, 23.43it/s]
Test: [   0/  26]	Loss 0.676 (0.676)	test_acc   0.42 (  0.42)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.676 (0.676)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.675 (0.676)	test_acc   0.47 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.42 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.42 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.675)	test_acc   0.42 (  0.43)	test_minacc   0.59 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.673 (0.675)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.675 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.74it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 20/  1]	epoch_time 0.0481 (0.0436)	validation_time 0.0004 (0.0007)	train_time 0.0477 (0.0427)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43290000468492507, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.51it/s] 19%|#9        | 5/26 [00:00<00:01, 17.01it/s] 35%|###4      | 9/26 [00:00<00:00, 23.75it/s] 50%|#####     | 13/26 [00:00<00:00, 27.49it/s] 65%|######5   | 17/26 [00:00<00:00, 30.01it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 26.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8286 (4.8277)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.59it/s] 27%|##6       | 7/26 [00:00<00:00, 32.64it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.64it/s] 46%|####6     | 12/26 [00:00<00:00, 39.23it/s] 65%|######5   | 17/26 [00:00<00:00, 41.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.74it/s] 85%|########4 | 22/26 [00:00<00:00, 42.79it/s]100%|##########| 26/26 [00:00<00:00, 37.52it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.42 (  0.42)	test_minacc   0.70 (  0.70)	test_majacc   0.37 (  0.37)	Loss_d 0.675 (0.675)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.675 (0.676)	test_acc   0.47 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.676)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.675)	test_acc   0.42 (  0.43)	test_minacc   0.59 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.673 (0.675)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.675 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.675 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.63it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.59 (  0.59)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.59 (  0.59)	test_minacc   0.62 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 21/  1]	epoch_time 0.0423 (0.0436)	validation_time 0.0005 (0.0007)	train_time 0.0419 (0.0427)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.432700004696846, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 15%|#5        | 4/26 [00:00<00:01, 14.19it/s] 31%|###       | 8/26 [00:00<00:00, 22.22it/s] 46%|####6     | 12/26 [00:00<00:00, 26.57it/s] 62%|######1   | 16/26 [00:00<00:00, 29.22it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.79it/s] 92%|#########2| 24/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 26.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.43)	train_minacc   0.67 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8304 (4.8295)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 24.85it/s] 38%|###8      | 10/26 [00:00<00:00, 30.70it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.02it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.02it/s] 96%|#########6| 25/26 [00:00<00:00, 42.49it/s]100%|##########| 26/26 [00:00<00:00, 35.13it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.42 (  0.42)	test_minacc   0.68 (  0.68)	test_majacc   0.37 (  0.37)	Loss_d 0.675 (0.675)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.675 (0.675)	test_acc   0.47 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.675)	test_acc_d   0.47 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.675)	test_acc   0.41 (  0.43)	test_minacc   0.57 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.673 (0.675)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.674 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.67 (  0.62)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.67 (  0.62)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.12 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 22/  1]	epoch_time 0.0397 (0.0434)	validation_time 0.0004 (0.0007)	train_time 0.0393 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4325000047087669, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.82it/s] 23%|##3       | 6/26 [00:00<00:00, 25.23it/s] 38%|###8      | 10/26 [00:00<00:00, 29.53it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.55it/s] 69%|######9   | 18/26 [00:00<00:00, 33.15it/s] 85%|########4 | 22/26 [00:00<00:00, 34.24it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 4.829919338226318
set z to 4.588423371315002
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.67 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8323 (4.8315)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 15%|#5        | 4/26 [00:00<00:01, 19.27it/s] 35%|###4      | 9/26 [00:00<00:00, 31.59it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 38.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.45it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.45it/s] 92%|#########2| 24/26 [00:00<00:00, 42.59it/s]100%|##########| 26/26 [00:00<00:00, 35.43it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.42 (  0.42)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.675 (0.675)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.675 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.675 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.675)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.675)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.674 (0.675)	test_acc   0.45 (  0.43)	test_minacc   0.67 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.675)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.67 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.46it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 23/  1]	epoch_time 0.0398 (0.0432)	validation_time 0.0003 (0.0007)	train_time 0.0394 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43290000426769254, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.16it/s] 23%|##3       | 6/26 [00:00<00:00, 23.06it/s] 38%|###8      | 10/26 [00:00<00:00, 28.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.18it/s] 69%|######9   | 18/26 [00:00<00:00, 32.53it/s] 85%|########4 | 22/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:00<00:00, 29.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.43)	train_minacc   0.67 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8342 (4.8335)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.75it/s] 15%|#5        | 4/26 [00:00<00:01, 15.63it/s] 38%|###8      | 10/26 [00:00<00:00, 31.41it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.41it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.58it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 37.58it/s] 81%|########  | 21/26 [00:00<00:00, 42.26it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.675 (0.675)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.675 (0.675)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.71 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.71 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.673 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.59 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.674 (0.674)	test_acc   0.45 (  0.43)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.22it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 24/  1]	epoch_time 0.0446 (0.0433)	validation_time 0.0006 (0.0007)	train_time 0.0440 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4339000044167042, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 12%|#1        | 3/26 [00:00<00:02, 11.28it/s] 27%|##6       | 7/26 [00:00<00:00, 20.46it/s] 42%|####2     | 11/26 [00:00<00:00, 25.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.55it/s] 88%|########8 | 23/26 [00:00<00:00, 31.06it/s]100%|##########| 26/26 [00:01<00:00, 25.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8361 (4.8354)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 15%|#5        | 4/26 [00:00<00:01, 18.64it/s] 38%|###8      | 10/26 [00:00<00:00, 35.89it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.89it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.93it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.70it/s] 96%|#########6| 25/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 34.82it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.42 (  0.42)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.673 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.59 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.673 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.59 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.674 (0.674)	test_acc   0.45 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.701 (0.701)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 25/  1]	epoch_time 0.0434 (0.0433)	validation_time 0.0008 (0.0007)	train_time 0.0426 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43530000433325766, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 19%|#9        | 5/26 [00:00<00:00, 22.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.76it/s] 50%|#####     | 13/26 [00:00<00:00, 31.58it/s] 65%|######5   | 17/26 [00:00<00:00, 33.42it/s] 81%|########  | 21/26 [00:00<00:00, 34.35it/s] 96%|#########6| 25/26 [00:00<00:00, 34.47it/s]100%|##########| 26/26 [00:00<00:00, 29.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8380 (4.8373)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.85it/s] 27%|##6       | 7/26 [00:00<00:00, 25.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.74it/s] 46%|####6     | 12/26 [00:00<00:00, 33.65it/s] 65%|######5   | 17/26 [00:00<00:00, 38.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.94it/s] 85%|########4 | 22/26 [00:00<00:00, 37.82it/s]100%|##########| 26/26 [00:00<00:00, 33.72it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.68 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.09it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0421 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0417 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43640000447630883, 0.5990000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.95it/s] 19%|#9        | 5/26 [00:00<00:00, 22.51it/s] 35%|###4      | 9/26 [00:00<00:00, 28.65it/s] 50%|#####     | 13/26 [00:00<00:00, 31.54it/s] 65%|######5   | 17/26 [00:00<00:00, 33.31it/s] 81%|########  | 21/26 [00:00<00:00, 34.69it/s] 96%|#########6| 25/26 [00:00<00:00, 35.23it/s]100%|##########| 26/26 [00:00<00:00, 29.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8398 (4.8392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s]  8%|7         | 2/26 [00:00<00:02,  8.09it/s] 23%|##3       | 6/26 [00:00<00:00, 20.60it/s] 38%|###8      | 10/26 [00:00<00:00, 27.57it/s]                                                38%|###8      | 10/26 [00:00<00:00, 27.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.86it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.86it/s] 96%|#########6| 25/26 [00:00<00:00, 39.07it/s]100%|##########| 26/26 [00:00<00:00, 30.12it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.68 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.62)	test_majacc   0.39 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.673 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 47.12it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.42 (  0.42)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 27/  1]	epoch_time 0.0439 (0.0433)	validation_time 0.0005 (0.0007)	train_time 0.0433 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4370000039041042, 0.5980000495910645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.46it/s] 23%|##3       | 6/26 [00:00<00:00, 26.23it/s] 38%|###8      | 10/26 [00:00<00:00, 29.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.88it/s] 69%|######9   | 18/26 [00:00<00:00, 32.92it/s] 85%|########4 | 22/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 30.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.63)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8417 (4.8410)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.17it/s] 27%|##6       | 7/26 [00:00<00:00, 33.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.33it/s] 46%|####6     | 12/26 [00:00<00:00, 39.53it/s] 65%|######5   | 17/26 [00:00<00:00, 42.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.14it/s] 85%|########4 | 22/26 [00:00<00:00, 43.64it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.68 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.44)	test_minacc   0.57 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.41 (  0.41)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 28/  1]	epoch_time 0.0412 (0.0432)	validation_time 0.0005 (0.0007)	train_time 0.0408 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4371000044345856, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.44it/s] 23%|##3       | 6/26 [00:00<00:00, 25.49it/s] 38%|###8      | 10/26 [00:00<00:00, 29.18it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.73it/s] 69%|######9   | 18/26 [00:00<00:00, 33.19it/s] 85%|########4 | 22/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 34.66it/s]100%|##########| 26/26 [00:00<00:00, 29.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.43)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8436 (4.8427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.04it/s] 23%|##3       | 6/26 [00:00<00:00, 23.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.64it/s] 42%|####2     | 11/26 [00:00<00:00, 32.06it/s] 62%|######1   | 16/26 [00:00<00:00, 36.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.64it/s] 81%|########  | 21/26 [00:00<00:00, 37.14it/s]100%|##########| 26/26 [00:00<00:00, 32.45it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.68 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.673)	test_acc   0.42 (  0.44)	test_minacc   0.57 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.673)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.673)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.673 (0.673)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 29/  1]	epoch_time 0.0446 (0.0433)	validation_time 0.0003 (0.0007)	train_time 0.0443 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43710000389814374, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.71it/s] 19%|#9        | 5/26 [00:00<00:00, 22.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.48it/s] 81%|########  | 21/26 [00:00<00:00, 33.59it/s] 96%|#########6| 25/26 [00:00<00:00, 34.54it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.43)	train_minacc   0.69 (  0.63)	train_majacc   0.39 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8456 (4.8444)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.06it/s] 19%|#9        | 5/26 [00:00<00:00, 24.28it/s] 38%|###8      | 10/26 [00:00<00:00, 30.71it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.71it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.83it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.83it/s] 96%|#########6| 25/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 34.35it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.44)	test_minacc   0.68 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.673)	test_acc   0.43 (  0.43)	test_minacc   0.57 (  0.62)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.673)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.673)	test_acc   0.46 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.673)	test_acc_d   0.46 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.50it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 30/  1]	epoch_time 0.0403 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0398 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4363000044822693, 0.593000054359436)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 21.46it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.15it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.57it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 28.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.44)	train_minacc   0.69 (  0.63)	train_majacc   0.39 (  0.40)	train_corr   0.00 (  0.00)	l1 4.8476 (4.8460)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 23%|##3       | 6/26 [00:00<00:00, 23.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.32it/s] 42%|####2     | 11/26 [00:00<00:00, 32.50it/s] 62%|######1   | 16/26 [00:00<00:00, 37.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.79it/s]100%|##########| 26/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.68 (  0.68)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.674)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.64)	test_majacc   0.40 (  0.40)	Loss_d 0.674 (0.674)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.673)	test_acc   0.45 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.673)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.36it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 31/  1]	epoch_time 0.0477 (0.0433)	validation_time 0.0004 (0.0006)	train_time 0.0473 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4351000043451786, 0.5920000076293945)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.02it/s] 19%|#9        | 5/26 [00:00<00:01, 16.06it/s] 35%|###4      | 9/26 [00:00<00:00, 22.87it/s] 50%|#####     | 13/26 [00:00<00:00, 27.24it/s] 65%|######5   | 17/26 [00:00<00:00, 30.14it/s] 81%|########  | 21/26 [00:00<00:00, 32.14it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.44)	train_minacc   0.69 (  0.62)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 4.8494 (4.8475)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.99it/s] 27%|##6       | 7/26 [00:00<00:00, 36.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.43it/s] 46%|####6     | 12/26 [00:00<00:00, 41.37it/s] 65%|######5   | 17/26 [00:00<00:00, 43.74it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.74it/s] 85%|########4 | 22/26 [00:00<00:00, 41.70it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.70 (  0.70)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.64)	test_majacc   0.40 (  0.39)	Loss_d 0.674 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.14 (  0.12)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.673)	test_acc   0.45 (  0.43)	test_minacc   0.69 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.673)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.95it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 32/  1]	epoch_time 0.0404 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0399 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4332000042498112, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.45it/s] 19%|#9        | 5/26 [00:00<00:01, 17.08it/s] 35%|###4      | 9/26 [00:00<00:00, 22.95it/s] 50%|#####     | 13/26 [00:00<00:00, 26.78it/s] 65%|######5   | 17/26 [00:00<00:00, 28.84it/s] 81%|########  | 21/26 [00:00<00:00, 30.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.28it/s]100%|##########| 26/26 [00:01<00:00, 25.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.45 (  0.44)	train_minacc   0.69 (  0.62)	train_majacc   0.40 (  0.41)	train_corr   0.00 (  0.00)	l1 4.8510 (4.8488)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 23%|##3       | 6/26 [00:00<00:00, 22.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.79it/s] 42%|####2     | 11/26 [00:00<00:00, 32.03it/s] 62%|######1   | 16/26 [00:00<00:00, 37.43it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.43it/s] 81%|########  | 21/26 [00:00<00:00, 37.89it/s]100%|##########| 26/26 [00:00<00:00, 41.08it/s]100%|##########| 26/26 [00:00<00:00, 32.63it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.43 (  0.43)	test_minacc   0.70 (  0.70)	test_majacc   0.38 (  0.38)	Loss_d 0.674 (0.674)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.674 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.64)	test_majacc   0.40 (  0.39)	Loss_d 0.674 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.63)	test_majacc   0.40 (  0.39)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.672 (0.674)	test_acc   0.45 (  0.43)	test_minacc   0.69 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.45 (  0.43)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.39 (  0.39)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 33/  1]	epoch_time 0.0428 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4322000045180321, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.57it/s] 23%|##3       | 6/26 [00:00<00:00, 24.06it/s] 38%|###8      | 10/26 [00:00<00:00, 29.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.82it/s] 69%|######9   | 18/26 [00:00<00:00, 31.90it/s] 85%|########4 | 22/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 29.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.47 (  0.45)	train_minacc   0.69 (  0.62)	train_majacc   0.42 (  0.42)	train_corr   0.00 (  0.00)	l1 4.8517 (4.8499)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 12%|#1        | 3/26 [00:00<00:02, 10.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 35.80it/s] 92%|#########2| 24/26 [00:00<00:00, 39.20it/s]100%|##########| 26/26 [00:00<00:00, 30.80it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.44 (  0.44)	test_minacc   0.70 (  0.70)	test_majacc   0.39 (  0.39)	Loss_d 0.674 (0.674)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.675 (0.675)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.64)	test_majacc   0.40 (  0.39)	Loss_d 0.675 (0.675)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.64)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.672 (0.674)	test_acc   0.42 (  0.43)	test_minacc   0.57 (  0.63)	test_majacc   0.40 (  0.40)	Loss_d 0.672 (0.674)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.17 (  0.13)
Test: [  26/  26]	Loss 0.672 (0.673)	test_acc   0.46 (  0.43)	test_minacc   0.69 (  0.63)	test_majacc   0.41 (  0.40)	Loss_d 0.672 (0.673)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.13 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.25it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.38 (  0.38)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 34/  1]	epoch_time 0.0433 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0429 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.43370000410079956, 0.597000002861023)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.47it/s] 27%|##6       | 7/26 [00:00<00:00, 30.03it/s] 42%|####2     | 11/26 [00:00<00:00, 32.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.61it/s] 88%|########8 | 23/26 [00:00<00:00, 34.79it/s]100%|##########| 26/26 [00:00<00:00, 31.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.48 (  0.45)	train_minacc   0.71 (  0.62)	train_majacc   0.43 (  0.42)	train_corr   0.00 (  0.00)	l1 4.8511 (4.8506)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 23%|##3       | 6/26 [00:00<00:00, 27.69it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.69it/s] 42%|####2     | 11/26 [00:00<00:00, 35.27it/s] 62%|######1   | 16/26 [00:00<00:00, 39.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.60it/s] 81%|########  | 21/26 [00:00<00:00, 38.61it/s]100%|##########| 26/26 [00:00<00:00, 34.58it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.45 (  0.45)	test_minacc   0.70 (  0.70)	test_majacc   0.40 (  0.40)	Loss_d 0.673 (0.673)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.675 (0.674)	test_acc   0.45 (  0.44)	test_minacc   0.68 (  0.64)	test_majacc   0.40 (  0.40)	Loss_d 0.675 (0.674)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.68 (  0.64)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.672 (0.673)	test_acc   0.44 (  0.44)	test_minacc   0.57 (  0.63)	test_majacc   0.42 (  0.41)	Loss_d 0.672 (0.673)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.672 (0.673)	test_acc   0.48 (  0.44)	test_minacc   0.69 (  0.63)	test_majacc   0.43 (  0.41)	Loss_d 0.672 (0.673)	test_acc_d   0.48 (  0.44)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.43 (  0.41)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.88it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.702 (0.702)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 35/  1]	epoch_time 0.0401 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0397 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.44190000370144844, 0.5960000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 12%|#1        | 3/26 [00:00<00:01, 11.62it/s] 27%|##6       | 7/26 [00:00<00:00, 20.87it/s] 42%|####2     | 11/26 [00:00<00:00, 25.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.75it/s] 88%|########8 | 23/26 [00:00<00:00, 31.95it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.52 (  0.46)	train_minacc   0.69 (  0.62)	train_majacc   0.48 (  0.43)	train_corr   0.00 (  0.00)	l1 4.8483 (4.8508)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.70it/s] 27%|##6       | 7/26 [00:00<00:00, 28.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.92it/s] 46%|####6     | 12/26 [00:00<00:00, 35.58it/s] 65%|######5   | 17/26 [00:00<00:00, 36.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.54it/s] 81%|########  | 21/26 [00:00<00:00, 35.83it/s]100%|##########| 26/26 [00:00<00:00, 32.66it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.47 (  0.47)	test_minacc   0.70 (  0.70)	test_majacc   0.43 (  0.43)	Loss_d 0.671 (0.671)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.674 (0.673)	test_acc   0.48 (  0.46)	test_minacc   0.68 (  0.63)	test_majacc   0.43 (  0.43)	Loss_d 0.674 (0.673)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.68 (  0.63)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.670 (0.672)	test_acc   0.48 (  0.46)	test_minacc   0.59 (  0.63)	test_majacc   0.46 (  0.43)	Loss_d 0.670 (0.672)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.59 (  0.63)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.18 (  0.14)
Test: [  26/  26]	Loss 0.670 (0.671)	test_acc   0.50 (  0.46)	test_minacc   0.69 (  0.63)	test_majacc   0.46 (  0.43)	Loss_d 0.670 (0.671)	test_acc_d   0.50 (  0.46)	test_minacc_d   0.69 (  0.63)	test_majacc_d   0.46 (  0.43)	test_corr_d   0.14 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.06it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.40 (  0.40)	Loss_d 0.701 (0.701)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 36/  1]	epoch_time 0.0427 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.4636000035405159, 0.5890000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.94it/s] 23%|##3       | 6/26 [00:00<00:00, 25.81it/s] 38%|###8      | 10/26 [00:00<00:00, 29.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.60it/s] 69%|######9   | 18/26 [00:00<00:00, 32.79it/s] 85%|########4 | 22/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.55 (  0.47)	train_minacc   0.69 (  0.62)	train_majacc   0.52 (  0.44)	train_corr   0.00 (  0.00)	l1 4.8423 (4.8496)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.70it/s] 15%|#5        | 4/26 [00:00<00:01, 12.75it/s] 38%|###8      | 10/26 [00:00<00:00, 28.07it/s]                                                38%|###8      | 10/26 [00:00<00:00, 28.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.63it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.63it/s] 96%|#########6| 25/26 [00:00<00:00, 39.53it/s]100%|##########| 26/26 [00:00<00:00, 31.90it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.51 (  0.51)	test_minacc   0.67 (  0.67)	test_majacc   0.48 (  0.48)	Loss_d 0.668 (0.668)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.672 (0.670)	test_acc   0.52 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.49)	Loss_d 0.672 (0.670)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.15 (  0.15)
Test: [  20/  26]	Loss 0.666 (0.669)	test_acc   0.53 (  0.51)	test_minacc   0.61 (  0.62)	test_majacc   0.52 (  0.49)	Loss_d 0.666 (0.669)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.61 (  0.62)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.19 (  0.16)
Test: [  26/  26]	Loss 0.668 (0.669)	test_acc   0.55 (  0.51)	test_minacc   0.71 (  0.62)	test_majacc   0.51 (  0.49)	Loss_d 0.668 (0.669)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.71 (  0.62)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.16 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.05it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.702 (0.702)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.45 (  0.45)	Loss_d 0.702 (0.702)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 37/  1]	epoch_time 0.0440 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0435 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5127000130414963, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.09it/s] 15%|#5        | 4/26 [00:00<00:02,  8.60it/s] 31%|###       | 8/26 [00:00<00:01, 16.07it/s] 46%|####6     | 12/26 [00:00<00:00, 21.84it/s] 62%|######1   | 16/26 [00:00<00:00, 25.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 28.34it/s] 92%|#########2| 24/26 [00:01<00:00, 29.95it/s]100%|##########| 26/26 [00:01<00:00, 22.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.56 (  0.48)	train_minacc   0.67 (  0.61)	train_majacc   0.54 (  0.46)	train_corr   0.00 (  0.00)	l1 4.8336 (4.8457)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 19%|#9        | 5/26 [00:00<00:00, 21.47it/s] 38%|###8      | 10/26 [00:00<00:00, 32.57it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.42it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 35.42it/s] 81%|########  | 21/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 42.18it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]
Test: [   0/  26]	Loss 0.665 (0.665)	test_acc   0.58 (  0.58)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.57)	Loss_d 0.665 (0.665)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.669 (0.666)	test_acc   0.58 (  0.57)	test_minacc   0.57 (  0.59)	test_majacc   0.58 (  0.57)	Loss_d 0.669 (0.666)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.16 (  0.16)
Test: [  20/  26]	Loss 0.662 (0.665)	test_acc   0.58 (  0.57)	test_minacc   0.65 (  0.61)	test_majacc   0.58 (  0.57)	Loss_d 0.662 (0.665)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.21 (  0.18)
Test: [  26/  26]	Loss 0.666 (0.665)	test_acc   0.58 (  0.57)	test_minacc   0.67 (  0.60)	test_majacc   0.57 (  0.57)	Loss_d 0.666 (0.665)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.67 (  0.60)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.17 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.77it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.703 (0.703)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.703 (0.703)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 38/  1]	epoch_time 0.0444 (0.0432)	validation_time 0.0003 (0.0006)	train_time 0.0441 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5741000179052352, 0.5420000553131104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.68it/s] 27%|##6       | 7/26 [00:00<00:00, 28.72it/s] 42%|####2     | 11/26 [00:00<00:00, 30.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.85it/s] 88%|########8 | 23/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 30.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.51 (  0.53)	train_minacc   0.62 (  0.62)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 4.8289 (4.8349)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 27%|##6       | 7/26 [00:00<00:00, 35.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.94it/s] 46%|####6     | 12/26 [00:00<00:00, 41.24it/s] 65%|######5   | 17/26 [00:00<00:00, 42.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.69it/s] 85%|########4 | 22/26 [00:00<00:00, 41.39it/s]100%|##########| 26/26 [00:00<00:00, 38.28it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.51 (  0.51)	test_minacc   0.68 (  0.68)	test_majacc   0.48 (  0.48)	Loss_d 0.673 (0.673)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.673 (0.672)	test_acc   0.53 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.49)	Loss_d 0.673 (0.672)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.14 (  0.13)
Test: [  20/  26]	Loss 0.665 (0.671)	test_acc   0.53 (  0.51)	test_minacc   0.63 (  0.62)	test_majacc   0.52 (  0.49)	Loss_d 0.665 (0.671)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.63 (  0.62)	test_majacc_d   0.52 (  0.49)	test_corr_d   0.19 (  0.15)
Test: [  26/  26]	Loss 0.672 (0.671)	test_acc   0.53 (  0.51)	test_minacc   0.67 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.672 (0.671)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.67 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.15 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.84it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.700 (0.700)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.48)	Loss_d 0.700 (0.700)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 39/  1]	epoch_time 0.0437 (0.0432)	validation_time 0.0005 (0.0006)	train_time 0.0432 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5147000130414963, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.94it/s] 23%|##3       | 6/26 [00:00<00:00, 27.26it/s] 38%|###8      | 10/26 [00:00<00:00, 30.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.80it/s] 69%|######9   | 18/26 [00:00<00:00, 33.61it/s] 85%|########4 | 22/26 [00:00<00:00, 34.39it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]100%|##########| 26/26 [00:00<00:00, 31.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.65 (  0.55)	train_minacc   0.64 (  0.59)	train_majacc   0.65 (  0.55)	train_corr   0.00 (  0.00)	l1 4.8064 (4.8082)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.48it/s] 27%|##6       | 7/26 [00:00<00:00, 34.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.22it/s] 46%|####6     | 12/26 [00:00<00:00, 38.87it/s] 62%|######1   | 16/26 [00:00<00:00, 35.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.73it/s] 81%|########  | 21/26 [00:00<00:00, 39.13it/s]100%|##########| 26/26 [00:00<00:00, 42.16it/s]100%|##########| 26/26 [00:00<00:00, 35.66it/s]
Test: [   0/  26]	Loss 0.672 (0.672)	test_acc   0.64 (  0.64)	test_minacc   0.60 (  0.60)	test_majacc   0.65 (  0.65)	Loss_d 0.672 (0.672)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.665 (0.675)	test_acc   0.65 (  0.62)	test_minacc   0.51 (  0.54)	test_majacc   0.68 (  0.64)	Loss_d 0.665 (0.675)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.68 (  0.64)	test_corr_d   0.16 (  0.13)
Test: [  20/  26]	Loss 0.668 (0.674)	test_acc   0.64 (  0.62)	test_minacc   0.53 (  0.55)	test_majacc   0.66 (  0.64)	Loss_d 0.668 (0.674)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.53 (  0.55)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.19 (  0.14)
Test: [  26/  26]	Loss 0.669 (0.674)	test_acc   0.65 (  0.62)	test_minacc   0.64 (  0.54)	test_majacc   0.65 (  0.64)	Loss_d 0.669 (0.674)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.64 (  0.54)	test_majacc_d   0.65 (  0.64)	test_corr_d   0.16 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.30it/s]
Test: [  0/  1]	Loss 0.712 (0.712)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.63 (  0.63)	Loss_d 0.712 (0.712)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.712 (0.712)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.63 (  0.63)	Loss_d 0.712 (0.712)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0450 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0446 (0.0425)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6225000045895577, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 19%|#9        | 5/26 [00:00<00:00, 24.27it/s] 35%|###4      | 9/26 [00:00<00:00, 29.19it/s] 50%|#####     | 13/26 [00:00<00:00, 31.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.55it/s] 81%|########  | 21/26 [00:00<00:00, 33.25it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.44 (  0.48)	train_minacc   0.64 (  0.60)	train_majacc   0.39 (  0.46)	train_corr   0.00 (  0.00)	l1 4.7821 (4.7939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.59it/s] 27%|##6       | 7/26 [00:00<00:00, 26.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.35it/s] 46%|####6     | 12/26 [00:00<00:00, 33.16it/s] 65%|######5   | 17/26 [00:00<00:00, 38.72it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.72it/s] 85%|########4 | 22/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 33.64it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.44 (  0.44)	test_minacc   0.68 (  0.68)	test_majacc   0.39 (  0.39)	Loss_d 0.681 (0.681)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.676 (0.681)	test_acc   0.51 (  0.44)	test_minacc   0.71 (  0.64)	test_majacc   0.46 (  0.41)	Loss_d 0.676 (0.681)	test_acc_d   0.51 (  0.44)	test_minacc_d   0.71 (  0.64)	test_majacc_d   0.46 (  0.41)	test_corr_d   0.12 (  0.08)
Test: [  20/  26]	Loss 0.673 (0.680)	test_acc   0.46 (  0.45)	test_minacc   0.59 (  0.63)	test_majacc   0.44 (  0.41)	Loss_d 0.673 (0.680)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.59 (  0.63)	test_majacc_d   0.44 (  0.41)	test_corr_d   0.16 (  0.09)
Test: [  26/  26]	Loss 0.677 (0.678)	test_acc   0.51 (  0.45)	test_minacc   0.71 (  0.64)	test_majacc   0.46 (  0.42)	Loss_d 0.677 (0.678)	test_acc_d   0.51 (  0.45)	test_minacc_d   0.71 (  0.64)	test_majacc_d   0.46 (  0.42)	test_corr_d   0.10 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.60 (  0.60)	test_minacc   0.62 (  0.62)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 41/  1]	epoch_time 0.0397 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.45110000449419024, 0.6030000448226929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.73it/s] 23%|##3       | 6/26 [00:00<00:00, 28.71it/s] 38%|###8      | 10/26 [00:00<00:00, 31.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.04it/s] 69%|######9   | 18/26 [00:00<00:00, 33.40it/s] 85%|########4 | 22/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 35.43it/s]100%|##########| 26/26 [00:00<00:00, 30.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.61 (  0.60)	train_minacc   0.67 (  0.59)	train_majacc   0.60 (  0.60)	train_corr   0.00 (  0.00)	l1 4.6975 (4.7137)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 23%|##3       | 6/26 [00:00<00:00, 26.85it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.85it/s] 42%|####2     | 11/26 [00:00<00:00, 35.05it/s] 62%|######1   | 16/26 [00:00<00:00, 39.68it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.68it/s] 81%|########  | 21/26 [00:00<00:00, 38.25it/s]100%|##########| 26/26 [00:00<00:00, 41.54it/s]100%|##########| 26/26 [00:00<00:00, 34.24it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.660 (0.660)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.672 (0.679)	test_acc   0.59 (  0.57)	test_minacc   0.55 (  0.59)	test_majacc   0.61 (  0.57)	Loss_d 0.672 (0.679)	test_acc_d   0.59 (  0.57)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.61 (  0.57)	test_corr_d   0.09 (  0.08)
Test: [  20/  26]	Loss 0.685 (0.678)	test_acc   0.56 (  0.58)	test_minacc   0.63 (  0.61)	test_majacc   0.55 (  0.57)	Loss_d 0.685 (0.678)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.63 (  0.61)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.08 (  0.09)
Test: [  26/  26]	Loss 0.664 (0.678)	test_acc   0.61 (  0.58)	test_minacc   0.69 (  0.61)	test_majacc   0.59 (  0.57)	Loss_d 0.664 (0.678)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.11 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.13it/s]
Test: [  0/  1]	Loss 0.675 (0.675)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.675 (0.675)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.675 (0.675)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.675 (0.675)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 42/  1]	epoch_time 0.0395 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.575800011754036, 0.5580000281333923)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 19%|#9        | 5/26 [00:00<00:01, 18.29it/s] 35%|###4      | 9/26 [00:00<00:00, 25.19it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 34.45it/s]100%|##########| 26/26 [00:00<00:00, 27.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.62 (  0.50)	train_minacc   0.58 (  0.63)	train_majacc   0.63 (  0.47)	train_corr   0.00 (  0.00)	l1 4.5816 (4.6404)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.62it/s] 38%|###8      | 10/26 [00:00<00:00, 34.47it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.47it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.60it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.60it/s] 96%|#########6| 25/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 35.20it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.65 (  0.65)	test_minacc   0.55 (  0.55)	test_majacc   0.67 (  0.67)	Loss_d 0.683 (0.683)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.680 (0.687)	test_acc   0.64 (  0.62)	test_minacc   0.49 (  0.50)	test_majacc   0.67 (  0.65)	Loss_d 0.680 (0.687)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.67 (  0.65)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.688 (0.690)	test_acc   0.62 (  0.62)	test_minacc   0.53 (  0.50)	test_majacc   0.64 (  0.64)	Loss_d 0.688 (0.690)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.06 (  0.04)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.61 (  0.61)	test_minacc   0.58 (  0.49)	test_majacc   0.62 (  0.64)	Loss_d 0.685 (0.691)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.58 (  0.49)	test_majacc_d   0.62 (  0.64)	test_corr_d   0.02 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.21it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.43)	test_majacc   0.64 (  0.64)	Loss_d 0.700 (0.700)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.46 (  0.46)	test_minacc   0.43 (  0.43)	test_majacc   0.64 (  0.64)	Loss_d 0.700 (0.700)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.02 (  0.02)
Overall Timing[ 43/  1]	epoch_time 0.0404 (0.0430)	validation_time 0.0007 (0.0006)	train_time 0.0397 (0.0423)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6148000061511993, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 19%|#9        | 5/26 [00:00<00:01, 17.54it/s] 35%|###4      | 9/26 [00:00<00:00, 23.95it/s] 46%|####6     | 12/26 [00:00<00:00, 25.23it/s] 62%|######1   | 16/26 [00:00<00:00, 28.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.38it/s] 92%|#########2| 24/26 [00:00<00:00, 32.02it/s]100%|##########| 26/26 [00:01<00:00, 25.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.58)	train_acc   0.61 (  0.53)	train_minacc   0.62 (  0.59)	train_majacc   0.61 (  0.52)	train_corr   0.00 (  0.00)	l1 4.5062 (4.5630)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.17it/s] 27%|##6       | 7/26 [00:00<00:00, 33.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.45it/s] 46%|####6     | 12/26 [00:00<00:00, 39.58it/s] 65%|######5   | 17/26 [00:00<00:00, 42.78it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.78it/s] 85%|########4 | 22/26 [00:00<00:00, 43.48it/s]100%|##########| 26/26 [00:00<00:00, 38.55it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.62 (  0.62)	test_minacc   0.57 (  0.57)	test_majacc   0.63 (  0.63)	Loss_d 0.660 (0.660)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.669 (0.678)	test_acc   0.60 (  0.59)	test_minacc   0.51 (  0.54)	test_majacc   0.63 (  0.60)	Loss_d 0.669 (0.678)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.16 (  0.17)
Test: [  20/  26]	Loss 0.684 (0.681)	test_acc   0.59 (  0.59)	test_minacc   0.53 (  0.53)	test_majacc   0.60 (  0.60)	Loss_d 0.684 (0.681)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.21 (  0.18)
Test: [  26/  26]	Loss 0.667 (0.682)	test_acc   0.61 (  0.58)	test_minacc   0.62 (  0.53)	test_majacc   0.61 (  0.59)	Loss_d 0.667 (0.682)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.62 (  0.53)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.22 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.61it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.718 (0.718)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.718 (0.718)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.01 (  0.01)
Overall Timing[ 44/  1]	epoch_time 0.0467 (0.0431)	validation_time 0.0005 (0.0006)	train_time 0.0462 (0.0424)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5847000091075897, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 35%|###4      | 9/26 [00:00<00:00, 26.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.91it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.52it/s] 96%|#########6| 25/26 [00:00<00:00, 34.61it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.001 (0.001)	train_nll   0.63 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.64 (  0.58)	train_minacc   0.60 (  0.56)	train_majacc   0.65 (  0.58)	train_corr   0.00 (  0.00)	l1 4.3465 (4.4547)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 19%|#9        | 5/26 [00:00<00:00, 24.63it/s] 38%|###8      | 10/26 [00:00<00:00, 34.54it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.21it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.70it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.70it/s] 96%|#########6| 25/26 [00:00<00:00, 41.31it/s]100%|##########| 26/26 [00:00<00:00, 34.70it/s]
Test: [   0/  26]	Loss 0.633 (0.633)	test_acc   0.68 (  0.68)	test_minacc   0.70 (  0.70)	test_majacc   0.68 (  0.68)	Loss_d 0.633 (0.633)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.642 (0.642)	test_acc   0.68 (  0.66)	test_minacc   0.67 (  0.64)	test_majacc   0.69 (  0.66)	Loss_d 0.642 (0.642)	test_acc_d   0.68 (  0.66)	test_minacc_d   0.67 (  0.64)	test_majacc_d   0.69 (  0.66)	test_corr_d   0.25 (  0.26)
Test: [  20/  26]	Loss 0.648 (0.643)	test_acc   0.64 (  0.66)	test_minacc   0.61 (  0.65)	test_majacc   0.65 (  0.66)	Loss_d 0.648 (0.643)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.61 (  0.65)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.30 (  0.26)
Test: [  26/  26]	Loss 0.633 (0.642)	test_acc   0.71 (  0.66)	test_minacc   0.67 (  0.65)	test_majacc   0.72 (  0.67)	Loss_d 0.633 (0.642)	test_acc_d   0.71 (  0.66)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.72 (  0.67)	test_corr_d   0.30 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.99it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.702 (0.702)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.702 (0.702)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0392 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0389 (0.0423)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6625000221133233, 0.5720000267028809)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.22it/s] 23%|##3       | 6/26 [00:00<00:00, 27.44it/s] 38%|###8      | 10/26 [00:00<00:00, 30.88it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.18it/s] 69%|######9   | 18/26 [00:00<00:00, 33.03it/s] 85%|########4 | 22/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 35.18it/s]100%|##########| 26/26 [00:00<00:00, 30.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.50 (  0.56)	train_minacc   0.58 (  0.62)	train_majacc   0.48 (  0.54)	train_corr   0.00 (  0.00)	l1 4.2496 (4.2838)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.21it/s] 27%|##6       | 7/26 [00:00<00:00, 27.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.55it/s] 46%|####6     | 12/26 [00:00<00:00, 34.90it/s] 65%|######5   | 17/26 [00:00<00:00, 36.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.25it/s] 85%|########4 | 22/26 [00:00<00:00, 39.29it/s]100%|##########| 26/26 [00:00<00:00, 33.36it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.688 (0.688)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.55)	test_minacc   0.57 (  0.56)	test_majacc   0.57 (  0.55)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.57 (  0.56)	test_majacc_d   0.57 (  0.55)	test_corr_d  -0.01 (  0.03)
Test: [  20/  26]	Loss 0.694 (0.690)	test_acc   0.54 (  0.55)	test_minacc   0.53 (  0.56)	test_majacc   0.54 (  0.55)	Loss_d 0.694 (0.690)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.53 (  0.56)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.695 (0.690)	test_acc   0.55 (  0.56)	test_minacc   0.64 (  0.56)	test_majacc   0.53 (  0.56)	Loss_d 0.695 (0.690)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.64 (  0.56)	test_majacc_d   0.53 (  0.56)	test_corr_d  -0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.22it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.66 (  0.66)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.55 (  0.55)	test_majacc   0.66 (  0.66)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 46/  1]	epoch_time 0.0374 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0370 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5579000126719474, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.09it/s] 23%|##3       | 6/26 [00:00<00:00, 25.87it/s] 38%|###8      | 10/26 [00:00<00:00, 29.14it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.55it/s] 69%|######9   | 18/26 [00:00<00:00, 32.77it/s] 85%|########4 | 22/26 [00:00<00:00, 33.65it/s]100%|##########| 26/26 [00:00<00:00, 34.57it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.47 (  0.53)	train_minacc   0.42 (  0.48)	train_majacc   0.48 (  0.54)	train_corr   0.00 (  0.00)	l1 4.2245 (4.2366)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.37it/s] 23%|##3       | 6/26 [00:00<00:00, 30.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.82it/s] 42%|####2     | 11/26 [00:00<00:00, 37.16it/s] 62%|######1   | 16/26 [00:00<00:00, 41.78it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.78it/s] 81%|########  | 21/26 [00:00<00:00, 39.71it/s]100%|##########| 26/26 [00:00<00:00, 42.81it/s]100%|##########| 26/26 [00:00<00:00, 36.05it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.37 (  0.37)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.44 (  0.42)	test_majacc   0.51 (  0.52)	Loss_d 0.695 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.44 (  0.42)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.00 (  0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.47 (  0.44)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.47 (  0.44)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.03 (  0.04)
Test: [  26/  26]	Loss 0.698 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.42 (  0.44)	test_majacc   0.49 (  0.53)	Loss_d 0.698 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.42 (  0.44)	test_majacc_d   0.49 (  0.53)	test_corr_d  -0.01 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.59 (  0.59)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.08 (  0.08)
Overall Timing[ 47/  1]	epoch_time 0.0405 (0.0428)	validation_time 0.0003 (0.0006)	train_time 0.0401 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5128000180721283, 0.45600003004074097)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.70it/s] 23%|##3       | 6/26 [00:00<00:00, 26.34it/s] 38%|###8      | 10/26 [00:00<00:00, 30.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.45it/s] 69%|######9   | 18/26 [00:00<00:00, 32.41it/s] 85%|########4 | 22/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 35.03it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.49 (  0.52)	train_minacc   0.56 (  0.49)	train_majacc   0.48 (  0.53)	train_corr   0.00 (  0.00)	l1 4.1873 (4.1982)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.66it/s] 23%|##3       | 6/26 [00:00<00:00, 25.48it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.48it/s] 42%|####2     | 11/26 [00:00<00:00, 34.80it/s] 62%|######1   | 16/26 [00:00<00:00, 37.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.01it/s] 81%|########  | 21/26 [00:00<00:00, 40.12it/s]100%|##########| 26/26 [00:00<00:00, 42.96it/s]100%|##########| 26/26 [00:00<00:00, 34.65it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.50 (  0.50)	test_minacc   0.38 (  0.38)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.59 (  0.49)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.59 (  0.49)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.02 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.58 (  0.51)	test_majacc   0.48 (  0.51)	Loss_d 0.695 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.58 (  0.51)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.66it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 48/  1]	epoch_time 0.0430 (0.0428)	validation_time 0.0005 (0.0006)	train_time 0.0425 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5125000125765801, 0.5010000467300415)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.91it/s] 19%|#9        | 5/26 [00:00<00:00, 21.13it/s] 35%|###4      | 9/26 [00:00<00:00, 26.53it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 30.96it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.59 ( 22.59)	train_acc   0.50 (  0.52)	train_minacc   0.40 (  0.46)	train_majacc   0.52 (  0.53)	train_corr   0.00 (  0.00)	l1 4.1835 (4.1837)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.13it/s] 23%|##3       | 6/26 [00:00<00:00, 20.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 20.88it/s] 42%|####2     | 11/26 [00:00<00:00, 29.91it/s] 62%|######1   | 16/26 [00:00<00:00, 35.66it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.66it/s] 81%|########  | 21/26 [00:00<00:00, 36.09it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 30.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.41)	test_majacc   0.52 (  0.53)	Loss_d 0.695 (0.694)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.41)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.694)	test_acc   0.53 (  0.51)	test_minacc   0.45 (  0.42)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.694)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.45 (  0.42)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.696 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.40 (  0.43)	test_majacc   0.52 (  0.53)	Loss_d 0.696 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.40 (  0.43)	test_majacc_d   0.52 (  0.53)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.697 (0.697)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.07 (  0.07)
Overall Timing[ 49/  1]	epoch_time 0.0421 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0422)
record: (train_acc, test_acc) (0.7342000319361687, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5176000140607357, 0.45500001311302185)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpqkw68i0d'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_210159-4cewvbgk
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/4cewvbgk
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1195
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6063, 3, 32, 32) (5937, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:43,  1.73s/it] 19%|#9        | 5/26 [00:01<00:05,  3.57it/s] 35%|###4      | 9/26 [00:01<00:02,  7.12it/s] 50%|#####     | 13/26 [00:02<00:01, 11.04it/s] 65%|######5   | 17/26 [00:02<00:00, 14.97it/s] 81%|########  | 21/26 [00:02<00:00, 18.60it/s] 96%|#########6| 25/26 [00:02<00:00, 21.72it/s]100%|##########| 26/26 [00:02<00:00,  9.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.453 (0.569)	train_nll   0.45 (  0.57)	train_penalty   0.09 (  0.26)	weight_norm  20.90 ( 18.13)	train_acc   0.83 (  0.80)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 6.8057 (7.8815)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 23%|##3       | 6/26 [00:00<00:00, 24.08it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.08it/s] 42%|####2     | 11/26 [00:00<00:00, 33.12it/s] 62%|######1   | 16/26 [00:00<00:00, 37.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.07it/s] 81%|########  | 21/26 [00:00<00:00, 38.98it/s]100%|##########| 26/26 [00:00<00:00, 33.96it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.86 (  0.86)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.386 (0.386)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.412 (0.416)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.412 (0.416)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.98)
Test: [  20/  26]	Loss 0.495 (0.427)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.495 (0.427)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.447 (0.424)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.447 (0.424)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.902 (1.902)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.902 (1.902)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.902 (1.902)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.902 (1.902)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/170/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0803 (0.0803)	validation_time 0.0070 (0.0070)	train_time 0.0714 (0.0714)
record: (train_acc, test_acc) (0.8462000232934952, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8462000232934952, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 29.00it/s] 50%|#####     | 13/26 [00:00<00:00, 32.28it/s] 65%|######5   | 17/26 [00:00<00:00, 34.47it/s] 81%|########  | 21/26 [00:00<00:00, 36.05it/s] 96%|#########6| 25/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 30.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.429 (0.417)	train_nll   0.43 (  0.42)	train_penalty   0.06 (  0.06)	weight_norm  22.03 ( 21.68)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.4408 (6.5740)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 23%|##3       | 6/26 [00:00<00:00, 31.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.22it/s] 42%|####2     | 11/26 [00:00<00:00, 37.74it/s] 62%|######1   | 16/26 [00:00<00:00, 42.08it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.08it/s] 81%|########  | 21/26 [00:00<00:00, 40.39it/s]100%|##########| 26/26 [00:00<00:00, 35.91it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.375 (0.375)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.396 (0.406)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.396 (0.406)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.477 (0.414)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.477 (0.414)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.425 (0.412)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.425 (0.412)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.92it/s]
Test: [  0/  1]	Loss 1.764 (1.764)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.764 (1.764)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.764 (1.764)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.764 (1.764)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0386 (0.0595)	validation_time 0.0004 (0.0037)	train_time 0.0382 (0.0548)
record: (train_acc, test_acc) (0.8462000232934952, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8489000256657601, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.05it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 27.84it/s] 50%|#####     | 13/26 [00:00<00:00, 30.92it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 81%|########  | 21/26 [00:00<00:00, 33.68it/s] 96%|#########6| 25/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.416 (0.400)	train_nll   0.42 (  0.40)	train_penalty   0.06 (  0.05)	weight_norm  22.14 ( 22.11)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   0.98 (  1.00)	train_corr   0.00 (  0.00)	l1 6.3631 (6.3957)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.53it/s] 23%|##3       | 6/26 [00:00<00:00, 31.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.93it/s] 42%|####2     | 11/26 [00:00<00:00, 38.68it/s] 62%|######1   | 16/26 [00:00<00:00, 42.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.01it/s] 81%|########  | 21/26 [00:00<00:00, 39.85it/s]100%|##########| 26/26 [00:00<00:00, 42.80it/s]100%|##########| 26/26 [00:00<00:00, 36.39it/s]
Test: [   0/  26]	Loss 0.367 (0.367)	test_acc   0.86 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.367 (0.367)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.375 (0.386)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.386)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  20/  26]	Loss 0.456 (0.390)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.456 (0.390)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.399 (0.388)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.388)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 1.782 (1.782)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.782 (1.782)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.782 (1.782)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.782 (1.782)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Overall Timing[  2/  1]	epoch_time 0.0379 (0.0523)	validation_time 0.0011 (0.0028)	train_time 0.0368 (0.0488)
record: (train_acc, test_acc) (0.8462000232934952, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8493000196218491, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.47it/s] 15%|#5        | 4/26 [00:00<00:01, 16.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.83it/s] 69%|######9   | 18/26 [00:00<00:00, 33.63it/s] 85%|########4 | 22/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.397 (0.381)	train_nll   0.40 (  0.38)	train_penalty   0.06 (  0.04)	weight_norm  22.19 ( 22.17)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.05)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 6.5191 (6.3940)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 27%|##6       | 7/26 [00:00<00:00, 32.31it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.31it/s] 50%|#####     | 13/26 [00:00<00:00, 40.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.50it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.50it/s] 92%|#########2| 24/26 [00:00<00:00, 44.51it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.385 (0.385)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.377 (0.385)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.99)	Loss_d 0.377 (0.385)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.455 (0.389)	test_acc   0.82 (  0.85)	test_minacc   0.04 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.455 (0.389)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.04 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.383 (0.386)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.386)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.27it/s]
Test: [  0/  1]	Loss 1.939 (1.939)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.939 (1.939)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.939 (1.939)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 1.939 (1.939)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/170/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0377 (0.0486)	validation_time 0.0004 (0.0022)	train_time 0.0373 (0.0459)
record: (train_acc, test_acc) (0.8508000220656395, 0.1340000033378601)
last accs (train_acc, test_acc) (0.8508000220656395, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.87it/s] 23%|##3       | 6/26 [00:00<00:00, 26.72it/s] 38%|###8      | 10/26 [00:00<00:00, 30.43it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.89it/s] 69%|######9   | 18/26 [00:00<00:00, 31.58it/s] 85%|########4 | 22/26 [00:00<00:00, 32.83it/s]100%|##########| 26/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.355 (0.359)	train_nll   0.35 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm  22.23 ( 22.21)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.3656 (6.5656)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 23%|##3       | 6/26 [00:00<00:00, 28.18it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.18it/s] 42%|####2     | 11/26 [00:00<00:00, 36.11it/s] 62%|######1   | 16/26 [00:00<00:00, 39.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.81it/s] 81%|########  | 21/26 [00:00<00:00, 38.27it/s]100%|##########| 26/26 [00:00<00:00, 34.26it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.343 (0.349)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.349)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.420 (0.352)	test_acc   0.82 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.420 (0.352)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.343 (0.350)	test_acc   0.84 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.350)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 1.735 (1.735)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.735 (1.735)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.735 (1.735)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 1.735 (1.735)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Overall Timing[  4/  1]	epoch_time 0.0401 (0.0469)	validation_time 0.0004 (0.0019)	train_time 0.0396 (0.0446)
record: (train_acc, test_acc) (0.8508000220656395, 0.1340000033378601)
last accs (train_acc, test_acc) (0.851700025498867, 0.1210000067949295)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.44it/s] 23%|##3       | 6/26 [00:00<00:00, 25.67it/s] 38%|###8      | 10/26 [00:00<00:00, 29.21it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.11it/s] 69%|######9   | 18/26 [00:00<00:00, 32.22it/s] 85%|########4 | 22/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.337 (0.340)	train_nll   0.34 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm  22.29 ( 22.27)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.16)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.4828 (6.5980)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.16it/s] 27%|##6       | 7/26 [00:00<00:00, 35.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.02it/s] 46%|####6     | 12/26 [00:00<00:00, 40.37it/s] 65%|######5   | 17/26 [00:00<00:00, 41.82it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.82it/s] 85%|########4 | 22/26 [00:00<00:00, 41.00it/s]100%|##########| 26/26 [00:00<00:00, 37.82it/s]
Test: [   0/  26]	Loss 0.306 (0.306)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.306 (0.306)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.323 (0.329)	test_acc   0.87 (  0.86)	test_minacc   0.20 (  0.18)	test_majacc   0.97 (  0.98)	Loss_d 0.323 (0.329)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.405 (0.331)	test_acc   0.82 (  0.86)	test_minacc   0.10 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.405 (0.331)	test_acc_d   0.82 (  0.86)	test_minacc_d   0.10 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.326 (0.330)	test_acc   0.83 (  0.86)	test_minacc   0.15 (  0.17)	test_majacc   0.97 (  0.98)	Loss_d 0.326 (0.330)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.15 (  0.17)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.34it/s]
Test: [  0/  1]	Loss 1.737 (1.737)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.737 (1.737)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
Test: [  1/  1]	Loss 1.737 (1.737)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 1.737 (1.737)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.82 (  0.82)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/170/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0403 (0.0458)	validation_time 0.0004 (0.0016)	train_time 0.0398 (0.0438)
record: (train_acc, test_acc) (0.8564000203609466, 0.18300001323223114)
last accs (train_acc, test_acc) (0.8564000203609466, 0.18300001323223114)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.01it/s] 35%|###4      | 9/26 [00:00<00:00, 26.84it/s] 50%|#####     | 13/26 [00:00<00:00, 29.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.343 (0.325)	train_nll   0.34 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm  22.35 ( 22.33)	train_acc   0.84 (  0.86)	train_minacc   0.07 (  0.23)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 6.5217 (6.6533)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.82it/s] 27%|##6       | 7/26 [00:00<00:00, 31.66it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.66it/s] 50%|#####     | 13/26 [00:00<00:00, 37.83it/s] 69%|######9   | 18/26 [00:00<00:00, 41.12it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.12it/s] 88%|########8 | 23/26 [00:00<00:00, 42.53it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]
Test: [   0/  26]	Loss 0.294 (0.294)	test_acc   0.87 (  0.87)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.294 (0.294)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.13 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.13 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.406 (0.333)	test_acc   0.84 (  0.86)	test_minacc   0.16 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.406 (0.333)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.16 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.321 (0.330)	test_acc   0.84 (  0.86)	test_minacc   0.07 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.330)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.07 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.58it/s]
Test: [  0/  1]	Loss 1.847 (1.847)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.847 (1.847)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.847 (1.847)	test_acc   0.14 (  0.14)	test_minacc   0.05 (  0.05)	test_majacc   0.97 (  0.97)	Loss_d 1.847 (1.847)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.86)
Overall Timing[  6/  1]	epoch_time 0.0383 (0.0447)	validation_time 0.0003 (0.0014)	train_time 0.0379 (0.0430)
record: (train_acc, test_acc) (0.8564000203609466, 0.18300001323223114)
last accs (train_acc, test_acc) (0.8568000193834305, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.67it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 28.39it/s] 50%|#####     | 13/26 [00:00<00:00, 30.79it/s] 65%|######5   | 17/26 [00:00<00:00, 32.11it/s] 81%|########  | 21/26 [00:00<00:00, 32.31it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.221)	train_nll   0.40 (  0.33)	train_penalty   0.00 (  0.02)	weight_norm  22.45 ( 22.40)	train_acc   0.80 (  0.85)	train_minacc   0.90 (  0.34)	train_majacc   0.78 (  0.94)	train_corr   0.00 (  0.00)	l1 6.2656 (6.6090)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.40it/s] 27%|##6       | 7/26 [00:00<00:00, 34.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.98it/s] 46%|####6     | 12/26 [00:00<00:00, 40.01it/s] 65%|######5   | 17/26 [00:00<00:00, 42.64it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.64it/s] 85%|########4 | 22/26 [00:00<00:00, 41.21it/s]100%|##########| 26/26 [00:00<00:00, 37.80it/s]
Test: [   0/  26]	Loss 0.442 (0.442)	test_acc   0.76 (  0.76)	test_minacc   0.89 (  0.89)	test_majacc   0.74 (  0.74)	Loss_d 0.442 (0.442)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.89 (  0.89)	test_majacc_d   0.74 (  0.74)	test_corr_d   0.46 (  0.46)
Test: [  10/  26]	Loss 0.457 (0.467)	test_acc   0.75 (  0.75)	test_minacc   0.76 (  0.85)	test_majacc   0.75 (  0.73)	Loss_d 0.457 (0.467)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.76 (  0.85)	test_majacc_d   0.75 (  0.73)	test_corr_d   0.49 (  0.46)
Test: [  20/  26]	Loss 0.511 (0.460)	test_acc   0.72 (  0.75)	test_minacc   0.81 (  0.85)	test_majacc   0.70 (  0.73)	Loss_d 0.511 (0.460)	test_acc_d   0.72 (  0.75)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.70 (  0.73)	test_corr_d   0.38 (  0.45)
Test: [  26/  26]	Loss 0.431 (0.463)	test_acc   0.78 (  0.75)	test_minacc   0.90 (  0.84)	test_majacc   0.76 (  0.73)	Loss_d 0.431 (0.463)	test_acc_d   0.78 (  0.75)	test_minacc_d   0.90 (  0.84)	test_majacc_d   0.76 (  0.73)	test_corr_d   0.47 (  0.45)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.31it/s]
Test: [  0/  1]	Loss 0.930 (0.930)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 0.930 (0.930)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.930 (0.930)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.76 (  0.76)	Loss_d 0.930 (0.930)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.11 ( -0.11)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/170/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0411 (0.0443)	validation_time 0.0005 (0.0013)	train_time 0.0406 (0.0427)
record: (train_acc, test_acc) (0.7510000317692757, 0.6860000491142273)
last accs (train_acc, test_acc) (0.7510000317692757, 0.6860000491142273)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:00, 21.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.23it/s] 50%|#####     | 13/26 [00:00<00:00, 29.70it/s] 65%|######5   | 17/26 [00:00<00:00, 31.79it/s] 81%|########  | 21/26 [00:00<00:00, 33.28it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 28.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.002 (0.002)	train_nll   0.58 (  0.56)	train_penalty   0.00 (  0.00)	weight_norm  22.49 ( 22.48)	train_acc   0.71 (  0.68)	train_minacc   0.93 (  0.88)	train_majacc   0.67 (  0.65)	train_corr   0.00 (  0.00)	l1 5.1904 (5.4908)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 23%|##3       | 6/26 [00:00<00:00, 25.42it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.42it/s] 42%|####2     | 11/26 [00:00<00:00, 34.10it/s] 62%|######1   | 16/26 [00:00<00:00, 38.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.50it/s] 81%|########  | 21/26 [00:00<00:00, 38.17it/s]100%|##########| 26/26 [00:00<00:00, 41.40it/s]100%|##########| 26/26 [00:00<00:00, 33.02it/s]
Test: [   0/  26]	Loss 0.613 (0.613)	test_acc   0.65 (  0.65)	test_minacc   0.87 (  0.87)	test_majacc   0.62 (  0.62)	Loss_d 0.613 (0.613)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.87 (  0.87)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.614 (0.620)	test_acc   0.64 (  0.65)	test_minacc   0.83 (  0.84)	test_majacc   0.61 (  0.62)	Loss_d 0.614 (0.620)	test_acc_d   0.64 (  0.65)	test_minacc_d   0.83 (  0.84)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.27 (  0.24)
Test: [  20/  26]	Loss 0.652 (0.618)	test_acc   0.61 (  0.65)	test_minacc   0.80 (  0.84)	test_majacc   0.57 (  0.62)	Loss_d 0.652 (0.618)	test_acc_d   0.61 (  0.65)	test_minacc_d   0.80 (  0.84)	test_majacc_d   0.57 (  0.62)	test_corr_d   0.17 (  0.23)
Test: [  26/  26]	Loss 0.589 (0.617)	test_acc   0.71 (  0.66)	test_minacc   0.93 (  0.84)	test_majacc   0.67 (  0.62)	Loss_d 0.589 (0.617)	test_acc_d   0.71 (  0.66)	test_minacc_d   0.93 (  0.84)	test_majacc_d   0.67 (  0.62)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.24it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.678 (0.678)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.70 (  0.70)	test_minacc   0.70 (  0.70)	test_majacc   0.70 (  0.70)	Loss_d 0.678 (0.678)	test_acc_d   0.70 (  0.70)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.70 (  0.70)	test_corr_d  -0.14 ( -0.14)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/170/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0421 (0.0440)	validation_time 0.0004 (0.0012)	train_time 0.0417 (0.0426)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.84it/s] 23%|##3       | 6/26 [00:00<00:00, 28.14it/s] 38%|###8      | 10/26 [00:00<00:00, 30.70it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.23it/s] 69%|######9   | 18/26 [00:00<00:00, 31.40it/s] 85%|########4 | 22/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 29.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.002 (0.001)	train_nll   0.58 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.49)	train_acc   0.73 (  0.68)	train_minacc   0.88 (  0.65)	train_majacc   0.70 (  0.68)	train_corr   0.00 (  0.00)	l1 5.0782 (5.1235)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.27it/s] 23%|##3       | 6/26 [00:00<00:00, 23.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.93it/s] 42%|####2     | 11/26 [00:00<00:00, 32.49it/s] 62%|######1   | 16/26 [00:00<00:00, 38.27it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.27it/s] 81%|########  | 21/26 [00:00<00:00, 37.10it/s]100%|##########| 26/26 [00:00<00:00, 40.04it/s]100%|##########| 26/26 [00:00<00:00, 31.87it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.63 (  0.63)	test_minacc   0.70 (  0.70)	test_majacc   0.62 (  0.62)	Loss_d 0.617 (0.617)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.616 (0.621)	test_acc   0.65 (  0.64)	test_minacc   0.78 (  0.74)	test_majacc   0.63 (  0.62)	Loss_d 0.616 (0.621)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.78 (  0.74)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.29 (  0.26)
Test: [  20/  26]	Loss 0.646 (0.618)	test_acc   0.60 (  0.64)	test_minacc   0.69 (  0.74)	test_majacc   0.58 (  0.63)	Loss_d 0.646 (0.618)	test_acc_d   0.60 (  0.64)	test_minacc_d   0.69 (  0.74)	test_majacc_d   0.58 (  0.63)	test_corr_d   0.21 (  0.26)
Test: [  26/  26]	Loss 0.591 (0.618)	test_acc   0.74 (  0.65)	test_minacc   0.93 (  0.75)	test_majacc   0.70 (  0.63)	Loss_d 0.591 (0.618)	test_acc_d   0.74 (  0.65)	test_minacc_d   0.93 (  0.75)	test_majacc_d   0.70 (  0.63)	test_corr_d   0.26 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.32it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.68 (  0.68)	Loss_d 0.695 (0.695)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.68 (  0.68)	Loss_d 0.695 (0.695)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.08 ( -0.08)
Overall Timing[  9/  1]	epoch_time 0.0421 (0.0438)	validation_time 0.0003 (0.0011)	train_time 0.0418 (0.0425)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6457000210881233, 0.6860000491142273)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.72it/s] 23%|##3       | 6/26 [00:00<00:00, 27.31it/s] 38%|###8      | 10/26 [00:00<00:00, 30.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.34it/s] 69%|######9   | 18/26 [00:00<00:00, 34.21it/s] 85%|########4 | 22/26 [00:00<00:00, 34.89it/s]100%|##########| 26/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 29.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.001 (0.001)	train_nll   0.61 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.67 (  0.62)	train_minacc   0.78 (  0.76)	train_majacc   0.65 (  0.60)	train_corr   0.00 (  0.00)	l1 5.0511 (5.0631)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 19%|#9        | 5/26 [00:00<00:00, 25.75it/s] 38%|###8      | 10/26 [00:00<00:00, 35.55it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.55it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.13it/s] 96%|#########6| 25/26 [00:00<00:00, 41.52it/s]100%|##########| 26/26 [00:00<00:00, 35.23it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.60 (  0.60)	test_minacc   0.65 (  0.65)	test_majacc   0.59 (  0.59)	Loss_d 0.639 (0.639)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.637 (0.640)	test_acc   0.61 (  0.61)	test_minacc   0.72 (  0.69)	test_majacc   0.60 (  0.60)	Loss_d 0.637 (0.640)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.22 (  0.20)
Test: [  20/  26]	Loss 0.664 (0.638)	test_acc   0.55 (  0.61)	test_minacc   0.60 (  0.69)	test_majacc   0.54 (  0.60)	Loss_d 0.664 (0.638)	test_acc_d   0.55 (  0.61)	test_minacc_d   0.60 (  0.69)	test_majacc_d   0.54 (  0.60)	test_corr_d   0.15 (  0.19)
Test: [  26/  26]	Loss 0.617 (0.637)	test_acc   0.66 (  0.61)	test_minacc   0.78 (  0.69)	test_majacc   0.64 (  0.60)	Loss_d 0.617 (0.637)	test_acc_d   0.66 (  0.61)	test_minacc_d   0.78 (  0.69)	test_majacc_d   0.64 (  0.60)	test_corr_d   0.20 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.69it/s]
Test: [  0/  1]	Loss 0.681 (0.681)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.69 (  0.69)	Loss_d 0.681 (0.681)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.681 (0.681)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.69 (  0.69)	Loss_d 0.681 (0.681)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 10/  1]	epoch_time 0.0423 (0.0437)	validation_time 0.0004 (0.0011)	train_time 0.0418 (0.0424)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6120000118613244, 0.6910000443458557)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 19%|#9        | 5/26 [00:00<00:00, 21.79it/s] 35%|###4      | 9/26 [00:00<00:00, 27.59it/s] 50%|#####     | 13/26 [00:00<00:00, 30.66it/s] 65%|######5   | 17/26 [00:00<00:00, 32.12it/s] 81%|########  | 21/26 [00:00<00:00, 32.90it/s] 96%|#########6| 25/26 [00:00<00:00, 33.96it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.001 (0.001)	train_nll   0.61 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.67 (  0.62)	train_minacc   0.73 (  0.63)	train_majacc   0.66 (  0.62)	train_corr   0.00 (  0.00)	l1 5.0485 (5.0548)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.48it/s] 27%|##6       | 7/26 [00:00<00:00, 28.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.69it/s] 46%|####6     | 12/26 [00:00<00:00, 35.44it/s] 65%|######5   | 17/26 [00:00<00:00, 39.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.28it/s] 85%|########4 | 22/26 [00:00<00:00, 41.63it/s]100%|##########| 26/26 [00:00<00:00, 35.34it/s]
Test: [   0/  26]	Loss 0.636 (0.636)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.61 (  0.61)	Loss_d 0.636 (0.636)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.634 (0.636)	test_acc   0.61 (  0.62)	test_minacc   0.69 (  0.62)	test_majacc   0.60 (  0.62)	Loss_d 0.634 (0.636)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.69 (  0.62)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.23 (  0.22)
Test: [  20/  26]	Loss 0.656 (0.634)	test_acc   0.58 (  0.62)	test_minacc   0.57 (  0.61)	test_majacc   0.58 (  0.62)	Loss_d 0.656 (0.634)	test_acc_d   0.58 (  0.62)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.615 (0.633)	test_acc   0.66 (  0.62)	test_minacc   0.73 (  0.62)	test_majacc   0.65 (  0.62)	Loss_d 0.615 (0.633)	test_acc_d   0.66 (  0.62)	test_minacc_d   0.73 (  0.62)	test_majacc_d   0.65 (  0.62)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.693 (0.693)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.68 (  0.68)	Loss_d 0.693 (0.693)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 11/  1]	epoch_time 0.0428 (0.0436)	validation_time 0.0007 (0.0010)	train_time 0.0421 (0.0424)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6178000068664551, 0.656000018119812)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.02it/s] 12%|#1        | 3/26 [00:00<00:01, 13.00it/s] 27%|##6       | 7/26 [00:00<00:00, 22.19it/s] 42%|####2     | 11/26 [00:00<00:00, 27.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.73it/s] 88%|########8 | 23/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 27.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.001 (0.000)	train_nll   0.61 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.50 ( 22.50)	train_acc   0.66 (  0.61)	train_minacc   0.54 (  0.60)	train_majacc   0.68 (  0.61)	train_corr   0.00 (  0.00)	l1 5.0459 (5.0603)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.09it/s] 27%|##6       | 7/26 [00:00<00:00, 33.36it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.36it/s] 46%|####6     | 12/26 [00:00<00:00, 39.53it/s] 69%|######9   | 18/26 [00:00<00:00, 43.07it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.07it/s] 88%|########8 | 23/26 [00:00<00:00, 42.94it/s]100%|##########| 26/26 [00:00<00:00, 38.07it/s]
Test: [   0/  26]	Loss 0.634 (0.634)	test_acc   0.61 (  0.61)	test_minacc   0.54 (  0.54)	test_majacc   0.62 (  0.62)	Loss_d 0.634 (0.634)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.632 (0.633)	test_acc   0.61 (  0.63)	test_minacc   0.59 (  0.53)	test_majacc   0.61 (  0.65)	Loss_d 0.632 (0.633)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.24 (  0.24)
Test: [  20/  26]	Loss 0.651 (0.631)	test_acc   0.59 (  0.63)	test_minacc   0.49 (  0.52)	test_majacc   0.61 (  0.65)	Loss_d 0.651 (0.631)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.21 (  0.24)
Test: [  26/  26]	Loss 0.620 (0.631)	test_acc   0.64 (  0.63)	test_minacc   0.54 (  0.52)	test_majacc   0.66 (  0.65)	Loss_d 0.620 (0.631)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.73 (  0.73)	Loss_d 0.708 (0.708)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.73 (  0.73)	Loss_d 0.708 (0.708)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 12/  1]	epoch_time 0.0391 (0.0433)	validation_time 0.0004 (0.0010)	train_time 0.0386 (0.0421)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6269000146985054, 0.5710000395774841)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.65it/s] 12%|#1        | 3/26 [00:00<00:02,  8.71it/s] 27%|##6       | 7/26 [00:00<00:01, 17.89it/s] 42%|####2     | 11/26 [00:00<00:00, 23.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.35it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.12it/s] 88%|########8 | 23/26 [00:00<00:00, 31.84it/s]100%|##########| 26/26 [00:01<00:00, 23.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.001 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.50)	train_acc   0.63 (  0.60)	train_minacc   0.51 (  0.53)	train_majacc   0.66 (  0.61)	train_corr   0.00 (  0.00)	l1 5.0393 (5.0587)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 23%|##3       | 6/26 [00:00<00:00, 29.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.22it/s] 42%|####2     | 11/26 [00:00<00:00, 36.42it/s] 62%|######1   | 16/26 [00:00<00:00, 40.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.56it/s] 81%|########  | 21/26 [00:00<00:00, 39.08it/s]100%|##########| 26/26 [00:00<00:00, 42.26it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.61 (  0.61)	Loss_d 0.639 (0.639)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.636 (0.637)	test_acc   0.60 (  0.61)	test_minacc   0.54 (  0.50)	test_majacc   0.61 (  0.64)	Loss_d 0.636 (0.637)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.23 (  0.24)
Test: [  20/  26]	Loss 0.651 (0.635)	test_acc   0.58 (  0.61)	test_minacc   0.46 (  0.50)	test_majacc   0.61 (  0.64)	Loss_d 0.651 (0.635)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.61 (  0.64)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.630 (0.635)	test_acc   0.62 (  0.62)	test_minacc   0.51 (  0.50)	test_majacc   0.64 (  0.64)	Loss_d 0.630 (0.635)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.51 (  0.50)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.25 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.75 (  0.75)	Loss_d 0.718 (0.718)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.75 (  0.75)	Loss_d 0.718 (0.718)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.04 (  0.04)
Overall Timing[ 13/  1]	epoch_time 0.0393 (0.0430)	validation_time 0.0004 (0.0009)	train_time 0.0389 (0.0419)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6150000075101852, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:00, 21.11it/s] 35%|###4      | 9/26 [00:00<00:00, 26.91it/s] 50%|#####     | 13/26 [00:00<00:00, 30.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 33.56it/s] 96%|#########6| 25/26 [00:00<00:00, 34.37it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.60 (  0.58)	train_minacc   0.49 (  0.52)	train_majacc   0.62 (  0.60)	train_corr   0.00 (  0.00)	l1 5.0236 (5.0440)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.60it/s] 27%|##6       | 7/26 [00:00<00:00, 26.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.90it/s] 46%|####6     | 12/26 [00:00<00:00, 34.95it/s] 65%|######5   | 17/26 [00:00<00:00, 39.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.34it/s] 85%|########4 | 22/26 [00:00<00:00, 38.27it/s]100%|##########| 26/26 [00:00<00:00, 33.84it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.60 (  0.60)	test_minacc   0.59 (  0.59)	test_majacc   0.60 (  0.60)	Loss_d 0.647 (0.647)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.644 (0.644)	test_acc   0.59 (  0.60)	test_minacc   0.56 (  0.50)	test_majacc   0.59 (  0.62)	Loss_d 0.644 (0.644)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.653 (0.642)	test_acc   0.56 (  0.60)	test_minacc   0.46 (  0.50)	test_majacc   0.58 (  0.62)	Loss_d 0.653 (0.642)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.46 (  0.50)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.642 (0.642)	test_acc   0.60 (  0.60)	test_minacc   0.49 (  0.50)	test_majacc   0.62 (  0.62)	Loss_d 0.642 (0.642)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.23 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.720 (0.720)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.73 (  0.73)	Loss_d 0.720 (0.720)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.720 (0.720)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.73 (  0.73)	Loss_d 0.720 (0.720)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.06 (  0.06)
Overall Timing[ 14/  1]	epoch_time 0.0418 (0.0429)	validation_time 0.0003 (0.0009)	train_time 0.0414 (0.0419)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.597300005197525, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 19%|#9        | 5/26 [00:00<00:01, 18.45it/s] 35%|###4      | 9/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 30.07it/s] 65%|######5   | 17/26 [00:00<00:00, 32.73it/s] 85%|########4 | 22/26 [00:00<00:00, 35.47it/s]100%|##########| 26/26 [00:00<00:00, 28.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.59 (  0.57)	train_minacc   0.49 (  0.52)	train_majacc   0.61 (  0.58)	train_corr   0.00 (  0.00)	l1 5.0061 (5.0231)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.03it/s] 27%|##6       | 7/26 [00:00<00:00, 36.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.39it/s] 46%|####6     | 12/26 [00:00<00:00, 37.95it/s] 65%|######5   | 17/26 [00:00<00:00, 40.86it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.86it/s] 85%|########4 | 22/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.653 (0.653)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.650 (0.650)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.52)	test_majacc   0.58 (  0.59)	Loss_d 0.650 (0.650)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.19 (  0.22)
Test: [  20/  26]	Loss 0.656 (0.648)	test_acc   0.55 (  0.58)	test_minacc   0.47 (  0.51)	test_majacc   0.56 (  0.59)	Loss_d 0.656 (0.648)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.651 (0.648)	test_acc   0.58 (  0.58)	test_minacc   0.49 (  0.51)	test_majacc   0.60 (  0.59)	Loss_d 0.651 (0.648)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.21 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.720 (0.720)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.73 (  0.73)	Loss_d 0.720 (0.720)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.720 (0.720)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.73 (  0.73)	Loss_d 0.720 (0.720)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.07 (  0.07)
Overall Timing[ 15/  1]	epoch_time 0.0368 (0.0425)	validation_time 0.0004 (0.0009)	train_time 0.0364 (0.0415)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5798000140786171, 0.5330000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.29it/s] 15%|#5        | 4/26 [00:00<00:01, 14.73it/s] 31%|###       | 8/26 [00:00<00:00, 23.12it/s] 46%|####6     | 12/26 [00:00<00:00, 27.80it/s] 62%|######1   | 16/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 35.10it/s]100%|##########| 26/26 [00:00<00:00, 27.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.56 (  0.55)	train_minacc   0.51 (  0.53)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 4.9888 (5.0035)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 23%|##3       | 6/26 [00:00<00:00, 32.63it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.63it/s] 42%|####2     | 11/26 [00:00<00:00, 38.75it/s] 65%|######5   | 17/26 [00:00<00:00, 43.94it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.94it/s] 85%|########4 | 22/26 [00:00<00:00, 44.53it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.658 (0.658)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.658 (0.658)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.655 (0.655)	test_acc   0.56 (  0.57)	test_minacc   0.59 (  0.53)	test_majacc   0.56 (  0.57)	Loss_d 0.655 (0.655)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.18 (  0.21)
Test: [  20/  26]	Loss 0.658 (0.653)	test_acc   0.54 (  0.57)	test_minacc   0.47 (  0.52)	test_majacc   0.55 (  0.57)	Loss_d 0.658 (0.653)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.19 (  0.21)
Test: [  26/  26]	Loss 0.657 (0.653)	test_acc   0.56 (  0.57)	test_minacc   0.51 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.657 (0.653)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.02it/s]
Test: [  0/  1]	Loss 0.719 (0.719)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.73 (  0.73)	Loss_d 0.719 (0.719)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.09 (  0.09)
Test: [  1/  1]	Loss 0.719 (0.719)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.73 (  0.73)	Loss_d 0.719 (0.719)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.73 (  0.73)	test_corr_d   0.09 (  0.09)
Overall Timing[ 16/  1]	epoch_time 0.0360 (0.0422)	validation_time 0.0004 (0.0008)	train_time 0.0356 (0.0412)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5659000124931336, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.53it/s] 23%|##3       | 6/26 [00:00<00:00, 26.82it/s] 38%|###8      | 10/26 [00:00<00:00, 30.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.91it/s] 69%|######9   | 18/26 [00:00<00:00, 32.15it/s] 85%|########4 | 22/26 [00:00<00:00, 33.36it/s]100%|##########| 26/26 [00:00<00:00, 34.91it/s]100%|##########| 26/26 [00:00<00:00, 29.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.55 (  0.55)	train_minacc   0.51 (  0.54)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 4.9734 (4.9859)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.66it/s] 27%|##6       | 7/26 [00:00<00:00, 35.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.49it/s] 46%|####6     | 12/26 [00:00<00:00, 41.00it/s] 65%|######5   | 17/26 [00:00<00:00, 39.58it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.58it/s] 85%|########4 | 22/26 [00:00<00:00, 42.63it/s]100%|##########| 26/26 [00:00<00:00, 37.29it/s]
Test: [   0/  26]	Loss 0.661 (0.661)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.661 (0.661)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.657 (0.658)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.657 (0.658)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.659 (0.655)	test_acc   0.54 (  0.56)	test_minacc   0.47 (  0.53)	test_majacc   0.55 (  0.56)	Loss_d 0.659 (0.655)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.661 (0.656)	test_acc   0.55 (  0.56)	test_minacc   0.51 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.661 (0.656)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.18it/s]
Test: [  0/  1]	Loss 0.717 (0.717)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.71 (  0.71)	Loss_d 0.717 (0.717)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.717 (0.717)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.71 (  0.71)	Loss_d 0.717 (0.717)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.10 (  0.10)
Overall Timing[ 17/  1]	epoch_time 0.0376 (0.0419)	validation_time 0.0003 (0.0008)	train_time 0.0373 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5590000058412552, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.72it/s] 19%|#9        | 5/26 [00:00<00:01, 20.00it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 30.12it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.22it/s] 96%|#########6| 25/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.55 (  0.54)	train_minacc   0.51 (  0.54)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9609 (4.9715)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.95it/s] 27%|##6       | 7/26 [00:00<00:00, 34.48it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.48it/s] 46%|####6     | 12/26 [00:00<00:00, 39.71it/s] 65%|######5   | 17/26 [00:00<00:00, 42.02it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.02it/s] 85%|########4 | 22/26 [00:00<00:00, 39.39it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.54 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.663 (0.663)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.659 (0.659)	test_acc   0.55 (  0.56)	test_minacc   0.59 (  0.54)	test_majacc   0.54 (  0.56)	Loss_d 0.659 (0.659)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.17 (  0.19)
Test: [  20/  26]	Loss 0.660 (0.657)	test_acc   0.54 (  0.56)	test_minacc   0.50 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.657)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.664 (0.658)	test_acc   0.55 (  0.56)	test_minacc   0.51 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.664 (0.658)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.53it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.716 (0.716)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.716 (0.716)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.10 (  0.10)
Overall Timing[ 18/  1]	epoch_time 0.0401 (0.0418)	validation_time 0.0004 (0.0008)	train_time 0.0396 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5554000093340874, 0.5460000038146973)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.50it/s] 19%|#9        | 5/26 [00:00<00:00, 23.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.93it/s] 50%|#####     | 13/26 [00:00<00:00, 31.45it/s] 65%|######5   | 17/26 [00:00<00:00, 32.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.51 (  0.55)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9514 (4.9603)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 23%|##3       | 6/26 [00:00<00:00, 30.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.46it/s] 42%|####2     | 11/26 [00:00<00:00, 37.04it/s] 65%|######5   | 17/26 [00:00<00:00, 41.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.15it/s] 85%|########4 | 22/26 [00:00<00:00, 41.87it/s]100%|##########| 26/26 [00:00<00:00, 36.98it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.54 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.53 (  0.53)	Loss_d 0.664 (0.664)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.660 (0.661)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.661)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.16 (  0.19)
Test: [  20/  26]	Loss 0.660 (0.658)	test_acc   0.54 (  0.55)	test_minacc   0.50 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.658)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  26/  26]	Loss 0.666 (0.659)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.666 (0.659)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.35it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.11 (  0.11)
Overall Timing[ 19/  1]	epoch_time 0.0424 (0.0418)	validation_time 0.0003 (0.0008)	train_time 0.0420 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5535000162124634, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.29it/s] 19%|#9        | 5/26 [00:00<00:00, 24.13it/s] 35%|###4      | 9/26 [00:00<00:00, 29.62it/s] 50%|#####     | 13/26 [00:00<00:00, 30.72it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 32.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 28.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.51 (  0.55)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9442 (4.9520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.61it/s] 15%|#5        | 4/26 [00:00<00:01, 17.89it/s] 35%|###4      | 9/26 [00:00<00:00, 30.13it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.13it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.89it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.89it/s] 92%|#########2| 24/26 [00:00<00:00, 39.99it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.54 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.664 (0.664)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.660 (0.661)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.54)	test_majacc   0.54 (  0.56)	Loss_d 0.660 (0.661)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.16 (  0.19)
Test: [  20/  26]	Loss 0.660 (0.659)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.659)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  26/  26]	Loss 0.667 (0.660)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.667 (0.660)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.81it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.70 (  0.70)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.11 (  0.11)
Overall Timing[ 20/  1]	epoch_time 0.0386 (0.0417)	validation_time 0.0006 (0.0008)	train_time 0.0380 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5528000127673149, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.19it/s] 23%|##3       | 6/26 [00:00<00:00, 27.93it/s] 38%|###8      | 10/26 [00:00<00:00, 31.47it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.82it/s] 69%|######9   | 18/26 [00:00<00:00, 33.37it/s] 85%|########4 | 22/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 35.42it/s]100%|##########| 26/26 [00:00<00:00, 30.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.54 (  0.55)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9385 (4.9456)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.09it/s]  8%|7         | 2/26 [00:00<00:03,  7.16it/s] 27%|##6       | 7/26 [00:00<00:00, 22.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 22.33it/s] 46%|####6     | 12/26 [00:00<00:00, 30.71it/s] 65%|######5   | 17/26 [00:00<00:00, 36.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.27it/s] 85%|########4 | 22/26 [00:00<00:00, 36.46it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
Test: [   0/  26]	Loss 0.665 (0.665)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.665 (0.665)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.660 (0.661)	test_acc   0.56 (  0.55)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.661)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.19)
Test: [  20/  26]	Loss 0.659 (0.659)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.659 (0.659)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Test: [  26/  26]	Loss 0.667 (0.660)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.667 (0.660)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 21/  1]	epoch_time 0.0422 (0.0417)	validation_time 0.0004 (0.0008)	train_time 0.0418 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5530000141263008, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 12%|#1        | 3/26 [00:00<00:02, 11.10it/s] 27%|##6       | 7/26 [00:00<00:00, 20.85it/s] 42%|####2     | 11/26 [00:00<00:00, 25.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.07it/s] 88%|########8 | 23/26 [00:00<00:00, 32.48it/s]100%|##########| 26/26 [00:01<00:00, 25.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.54 (  0.55)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9342 (4.9408)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.80it/s] 23%|##3       | 6/26 [00:00<00:00, 28.73it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.73it/s] 42%|####2     | 11/26 [00:00<00:00, 37.37it/s] 62%|######1   | 16/26 [00:00<00:00, 39.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.04it/s] 85%|########4 | 22/26 [00:00<00:00, 44.92it/s]100%|##########| 26/26 [00:00<00:00, 38.33it/s]
Test: [   0/  26]	Loss 0.665 (0.665)	test_acc   0.53 (  0.53)	test_minacc   0.61 (  0.61)	test_majacc   0.52 (  0.52)	Loss_d 0.665 (0.665)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.660 (0.661)	test_acc   0.56 (  0.55)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.56)	Loss_d 0.660 (0.661)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.19)
Test: [  20/  26]	Loss 0.659 (0.659)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.659 (0.659)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.668 (0.659)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.55)	test_majacc   0.55 (  0.56)	Loss_d 0.668 (0.659)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.46it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 22/  1]	epoch_time 0.0417 (0.0417)	validation_time 0.0004 (0.0007)	train_time 0.0412 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5534000164270401, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 16.83it/s] 27%|##6       | 7/26 [00:00<00:00, 25.68it/s] 42%|####2     | 11/26 [00:00<00:00, 29.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.09it/s] 88%|########8 | 23/26 [00:00<00:00, 34.82it/s]100%|##########| 26/26 [00:00<00:00, 29.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 4.931491851806641
set z to 4.684917259216308
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9310 (4.9373)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.39it/s] 12%|#1        | 3/26 [00:00<00:03,  7.15it/s] 35%|###4      | 9/26 [00:00<00:00, 21.34it/s]                                               35%|###4      | 9/26 [00:00<00:00, 21.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.25it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 30.25it/s] 81%|########  | 21/26 [00:00<00:00, 37.48it/s]100%|##########| 26/26 [00:00<00:00, 28.08it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.664 (0.664)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.659 (0.661)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.56)	Loss_d 0.659 (0.661)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.17 (  0.20)
Test: [  20/  26]	Loss 0.658 (0.658)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.55)	test_majacc   0.56 (  0.56)	Loss_d 0.658 (0.658)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.667 (0.659)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.667 (0.659)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.17it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 23/  1]	epoch_time 0.0444 (0.0418)	validation_time 0.0004 (0.0007)	train_time 0.0440 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5541000072956085, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 19%|#9        | 5/26 [00:00<00:00, 22.76it/s] 35%|###4      | 9/26 [00:00<00:00, 28.16it/s] 50%|#####     | 13/26 [00:00<00:00, 30.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.80it/s] 81%|########  | 21/26 [00:00<00:00, 32.23it/s] 96%|#########6| 25/26 [00:00<00:00, 33.09it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.54 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9292 (4.9351)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.83it/s] 23%|##3       | 6/26 [00:00<00:00, 25.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.82it/s] 42%|####2     | 11/26 [00:00<00:00, 34.07it/s] 65%|######5   | 17/26 [00:00<00:00, 38.22it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.22it/s] 85%|########4 | 22/26 [00:00<00:00, 40.58it/s]100%|##########| 26/26 [00:00<00:00, 33.61it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.664 (0.664)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.658 (0.660)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.55)	test_majacc   0.55 (  0.56)	Loss_d 0.658 (0.660)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.18 (  0.20)
Test: [  20/  26]	Loss 0.656 (0.658)	test_acc   0.56 (  0.55)	test_minacc   0.51 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.656 (0.658)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.667 (0.658)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.667 (0.658)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.86it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.715 (0.715)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 24/  1]	epoch_time 0.0428 (0.0419)	validation_time 0.0003 (0.0007)	train_time 0.0425 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5547000165581704, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.92it/s] 23%|##3       | 6/26 [00:00<00:00, 27.91it/s] 38%|###8      | 10/26 [00:00<00:00, 30.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.54it/s] 69%|######9   | 18/26 [00:00<00:00, 32.57it/s] 85%|########4 | 22/26 [00:00<00:00, 33.68it/s]100%|##########| 26/26 [00:00<00:00, 35.25it/s]100%|##########| 26/26 [00:00<00:00, 30.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.55 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 4.9281 (4.9340)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.57it/s] 23%|##3       | 6/26 [00:00<00:00, 22.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.16it/s] 42%|####2     | 11/26 [00:00<00:00, 31.05it/s] 62%|######1   | 16/26 [00:00<00:00, 36.72it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.72it/s] 81%|########  | 21/26 [00:00<00:00, 36.33it/s]100%|##########| 26/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 30.32it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.53 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.52 (  0.52)	Loss_d 0.663 (0.663)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.657 (0.659)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.657 (0.659)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.21)
Test: [  20/  26]	Loss 0.655 (0.656)	test_acc   0.55 (  0.56)	test_minacc   0.51 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.655 (0.656)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.666 (0.657)	test_acc   0.55 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.666 (0.657)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.18 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.55it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.716 (0.716)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.716 (0.716)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 25/  1]	epoch_time 0.0408 (0.0418)	validation_time 0.0007 (0.0007)	train_time 0.0401 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.555900017440319, 0.5370000004768372)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 19%|#9        | 5/26 [00:00<00:01, 15.76it/s] 35%|###4      | 9/26 [00:00<00:00, 22.38it/s] 50%|#####     | 13/26 [00:00<00:00, 27.05it/s] 65%|######5   | 17/26 [00:00<00:00, 30.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:01<00:00, 25.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.55 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9280 (4.9338)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.90it/s] 27%|##6       | 7/26 [00:00<00:00, 25.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.87it/s] 46%|####6     | 12/26 [00:00<00:00, 33.65it/s] 65%|######5   | 17/26 [00:00<00:00, 35.55it/s]                                                65%|######5   | 17/26 [00:00<00:00, 35.55it/s] 85%|########4 | 22/26 [00:00<00:00, 39.22it/s]100%|##########| 26/26 [00:00<00:00, 32.07it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.53 (  0.53)	Loss_d 0.662 (0.662)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.655 (0.657)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.55)	test_majacc   0.56 (  0.57)	Loss_d 0.655 (0.657)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.19 (  0.21)
Test: [  20/  26]	Loss 0.653 (0.655)	test_acc   0.56 (  0.56)	test_minacc   0.51 (  0.54)	test_majacc   0.57 (  0.56)	Loss_d 0.653 (0.655)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.21 (  0.21)
Test: [  26/  26]	Loss 0.666 (0.655)	test_acc   0.55 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.56)	Loss_d 0.666 (0.655)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.62it/s]
Test: [  0/  1]	Loss 0.717 (0.717)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.717 (0.717)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.717 (0.717)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.717 (0.717)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 26/  1]	epoch_time 0.0400 (0.0417)	validation_time 0.0004 (0.0007)	train_time 0.0395 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5594000174403191, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 19%|#9        | 5/26 [00:00<00:00, 22.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 30.15it/s] 65%|######5   | 17/26 [00:00<00:00, 31.59it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.25it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.51 ( 22.51)	train_acc   0.55 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9288 (4.9347)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.53it/s] 23%|##3       | 6/26 [00:00<00:00, 30.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.72it/s] 42%|####2     | 11/26 [00:00<00:00, 37.44it/s] 62%|######1   | 16/26 [00:00<00:00, 41.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.33it/s] 81%|########  | 21/26 [00:00<00:00, 39.41it/s]100%|##########| 26/26 [00:00<00:00, 42.23it/s]100%|##########| 26/26 [00:00<00:00, 35.76it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.54 (  0.54)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.660 (0.660)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.653 (0.655)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.55)	test_majacc   0.56 (  0.57)	Loss_d 0.653 (0.655)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.651 (0.653)	test_acc   0.57 (  0.56)	test_minacc   0.51 (  0.54)	test_majacc   0.58 (  0.57)	Loss_d 0.651 (0.653)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.22 (  0.22)
Test: [  26/  26]	Loss 0.664 (0.654)	test_acc   0.55 (  0.56)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.57)	Loss_d 0.664 (0.654)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.19 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.65it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.718 (0.718)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.69 (  0.69)	Loss_d 0.718 (0.718)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 27/  1]	epoch_time 0.0394 (0.0417)	validation_time 0.0004 (0.0007)	train_time 0.0390 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5619000161290169, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.35it/s] 19%|#9        | 5/26 [00:00<00:00, 21.69it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 30.55it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 32.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.51)	train_acc   0.55 (  0.54)	train_minacc   0.54 (  0.56)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 4.9306 (4.9364)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.90it/s] 27%|##6       | 7/26 [00:00<00:00, 33.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.05it/s] 46%|####6     | 12/26 [00:00<00:00, 39.80it/s] 65%|######5   | 17/26 [00:00<00:00, 41.32it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.32it/s] 85%|########4 | 22/26 [00:00<00:00, 41.57it/s]100%|##########| 26/26 [00:00<00:00, 37.07it/s]
Test: [   0/  26]	Loss 0.658 (0.658)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.658 (0.658)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.650 (0.653)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.55)	test_majacc   0.56 (  0.58)	Loss_d 0.650 (0.653)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.648 (0.650)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.54)	test_majacc   0.59 (  0.57)	Loss_d 0.648 (0.650)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.23 (  0.23)
Test: [  26/  26]	Loss 0.663 (0.651)	test_acc   0.55 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.56 (  0.57)	Loss_d 0.663 (0.651)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.20 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.98it/s]
Test: [  0/  1]	Loss 0.719 (0.719)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.719 (0.719)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.719 (0.719)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.719 (0.719)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Overall Timing[ 28/  1]	epoch_time 0.0418 (0.0417)	validation_time 0.0004 (0.0007)	train_time 0.0414 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5662000123858452, 0.5350000262260437)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.18it/s] 27%|##6       | 7/26 [00:00<00:00, 30.68it/s] 42%|####2     | 11/26 [00:00<00:00, 33.19it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 35.08it/s] 88%|########8 | 23/26 [00:00<00:00, 35.46it/s]100%|##########| 26/26 [00:00<00:00, 31.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.52)	train_acc   0.56 (  0.55)	train_minacc   0.54 (  0.56)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 4.9324 (4.9390)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 23%|##3       | 6/26 [00:00<00:00, 31.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.89it/s] 42%|####2     | 11/26 [00:00<00:00, 36.07it/s] 62%|######1   | 16/26 [00:00<00:00, 40.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.73it/s] 81%|########  | 21/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 43.72it/s]100%|##########| 26/26 [00:00<00:00, 36.37it/s]
Test: [   0/  26]	Loss 0.655 (0.655)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.55)	Loss_d 0.655 (0.655)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.646 (0.650)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.54)	test_majacc   0.57 (  0.58)	Loss_d 0.646 (0.650)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.54)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.22 (  0.24)
Test: [  20/  26]	Loss 0.644 (0.647)	test_acc   0.58 (  0.57)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.58)	Loss_d 0.644 (0.647)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.24 (  0.24)
Test: [  26/  26]	Loss 0.660 (0.648)	test_acc   0.56 (  0.57)	test_minacc   0.54 (  0.53)	test_majacc   0.56 (  0.58)	Loss_d 0.660 (0.648)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.22 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.42it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.721 (0.721)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.68 (  0.68)	Loss_d 0.721 (0.721)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Overall Timing[ 29/  1]	epoch_time 0.0378 (0.0415)	validation_time 0.0004 (0.0007)	train_time 0.0373 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.569900012254715, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 26.94it/s] 50%|#####     | 13/26 [00:00<00:00, 28.71it/s] 65%|######5   | 17/26 [00:00<00:00, 30.64it/s] 81%|########  | 21/26 [00:00<00:00, 32.27it/s] 96%|#########6| 25/26 [00:00<00:00, 33.04it/s]100%|##########| 26/26 [00:00<00:00, 27.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.52)	train_acc   0.55 (  0.55)	train_minacc   0.51 (  0.56)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 4.9331 (4.9416)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.21it/s] 23%|##3       | 6/26 [00:00<00:00, 32.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.13it/s] 42%|####2     | 11/26 [00:00<00:00, 38.88it/s] 62%|######1   | 16/26 [00:00<00:00, 42.26it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.26it/s] 81%|########  | 21/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 43.11it/s]100%|##########| 26/26 [00:00<00:00, 36.39it/s]
Test: [   0/  26]	Loss 0.651 (0.651)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.651 (0.651)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.641 (0.645)	test_acc   0.58 (  0.58)	test_minacc   0.61 (  0.53)	test_majacc   0.58 (  0.59)	Loss_d 0.641 (0.645)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.61 (  0.53)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.640 (0.643)	test_acc   0.58 (  0.58)	test_minacc   0.51 (  0.53)	test_majacc   0.60 (  0.58)	Loss_d 0.640 (0.643)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.25 (  0.26)
Test: [  26/  26]	Loss 0.657 (0.643)	test_acc   0.56 (  0.58)	test_minacc   0.49 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.657 (0.643)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 0.724 (0.724)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.724 (0.724)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.724 (0.724)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.68 (  0.68)	Loss_d 0.724 (0.724)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.11 (  0.11)
Overall Timing[ 30/  1]	epoch_time 0.0429 (0.0416)	validation_time 0.0007 (0.0007)	train_time 0.0422 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5760000074505806, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s]  8%|7         | 2/26 [00:00<00:03,  7.95it/s] 23%|##3       | 6/26 [00:00<00:01, 19.78it/s] 38%|###8      | 10/26 [00:00<00:00, 25.44it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.41it/s] 69%|######9   | 18/26 [00:00<00:00, 31.71it/s] 85%|########4 | 22/26 [00:00<00:00, 32.37it/s]100%|##########| 26/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.52)	train_acc   0.56 (  0.55)	train_minacc   0.49 (  0.56)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 4.9317 (4.9434)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 15%|#5        | 4/26 [00:00<00:01, 19.29it/s] 35%|###4      | 9/26 [00:00<00:00, 31.12it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.04it/s] 92%|#########2| 24/26 [00:00<00:00, 39.40it/s]100%|##########| 26/26 [00:00<00:00, 33.38it/s]
Test: [   0/  26]	Loss 0.645 (0.645)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.645 (0.645)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.634 (0.639)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.52)	test_majacc   0.58 (  0.59)	Loss_d 0.634 (0.639)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.633 (0.636)	test_acc   0.59 (  0.58)	test_minacc   0.50 (  0.53)	test_majacc   0.62 (  0.59)	Loss_d 0.633 (0.636)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.62 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  26/  26]	Loss 0.653 (0.637)	test_acc   0.57 (  0.58)	test_minacc   0.49 (  0.53)	test_majacc   0.59 (  0.60)	Loss_d 0.653 (0.637)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.25 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.727 (0.727)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.69 (  0.69)	Loss_d 0.727 (0.727)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.727 (0.727)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.69 (  0.69)	Loss_d 0.727 (0.727)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.11 (  0.11)
Overall Timing[ 31/  1]	epoch_time 0.0431 (0.0416)	validation_time 0.0004 (0.0007)	train_time 0.0427 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5842000097036362, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  2.91it/s] 19%|#9        | 5/26 [00:00<00:01, 13.30it/s] 35%|###4      | 9/26 [00:00<00:00, 20.30it/s] 50%|#####     | 13/26 [00:00<00:00, 24.89it/s] 65%|######5   | 17/26 [00:00<00:00, 28.16it/s] 81%|########  | 21/26 [00:00<00:00, 30.63it/s] 96%|#########6| 25/26 [00:01<00:00, 32.19it/s]100%|##########| 26/26 [00:01<00:00, 23.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.52 ( 22.52)	train_acc   0.56 (  0.56)	train_minacc   0.49 (  0.55)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 4.9246 (4.9409)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.88it/s] 19%|#9        | 5/26 [00:00<00:01, 18.52it/s] 38%|###8      | 10/26 [00:00<00:00, 26.77it/s]                                                38%|###8      | 10/26 [00:00<00:00, 26.77it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.47it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 33.47it/s] 81%|########  | 21/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 31.98it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.58 (  0.58)	test_minacc   0.57 (  0.57)	test_majacc   0.58 (  0.58)	Loss_d 0.639 (0.639)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.628 (0.633)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.52)	test_majacc   0.60 (  0.61)	Loss_d 0.628 (0.633)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.52)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.29 (  0.29)
Test: [  20/  26]	Loss 0.627 (0.631)	test_acc   0.59 (  0.59)	test_minacc   0.47 (  0.52)	test_majacc   0.62 (  0.61)	Loss_d 0.627 (0.631)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.29 (  0.30)
Test: [  26/  26]	Loss 0.648 (0.631)	test_acc   0.59 (  0.59)	test_minacc   0.49 (  0.52)	test_majacc   0.61 (  0.61)	Loss_d 0.648 (0.631)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.27 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.62it/s]
Test: [  0/  1]	Loss 0.730 (0.730)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.69 (  0.69)	Loss_d 0.730 (0.730)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.730 (0.730)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.69 (  0.69)	Loss_d 0.730 (0.730)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.10 (  0.10)
Overall Timing[ 32/  1]	epoch_time 0.0412 (0.0416)	validation_time 0.0003 (0.0007)	train_time 0.0408 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5936000121831894, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 19%|#9        | 5/26 [00:00<00:01, 19.50it/s] 35%|###4      | 9/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 29.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.94it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.53 ( 22.52)	train_acc   0.56 (  0.57)	train_minacc   0.54 (  0.54)	train_majacc   0.56 (  0.58)	train_corr   0.00 (  0.00)	l1 4.8863 (4.9145)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 27%|##6       | 7/26 [00:00<00:00, 28.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.95it/s] 46%|####6     | 12/26 [00:00<00:00, 34.88it/s] 65%|######5   | 17/26 [00:00<00:00, 38.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.87it/s] 85%|########4 | 22/26 [00:00<00:00, 41.30it/s]100%|##########| 26/26 [00:00<00:00, 33.94it/s]
Test: [   0/  26]	Loss 0.640 (0.640)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.57 (  0.57)	Loss_d 0.640 (0.640)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.628 (0.634)	test_acc   0.59 (  0.58)	test_minacc   0.59 (  0.53)	test_majacc   0.59 (  0.59)	Loss_d 0.628 (0.634)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.626 (0.631)	test_acc   0.59 (  0.58)	test_minacc   0.50 (  0.53)	test_majacc   0.61 (  0.59)	Loss_d 0.626 (0.631)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  26/  26]	Loss 0.648 (0.631)	test_acc   0.58 (  0.59)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.60)	Loss_d 0.648 (0.631)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.26 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.26it/s]
Test: [  0/  1]	Loss 0.723 (0.723)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.65 (  0.65)	Loss_d 0.723 (0.723)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.723 (0.723)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.65 (  0.65)	Loss_d 0.723 (0.723)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.07 (  0.07)
Overall Timing[ 33/  1]	epoch_time 0.0392 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0387 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5861000111699104, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.57it/s] 23%|##3       | 6/26 [00:00<00:00, 23.97it/s] 38%|###8      | 10/26 [00:00<00:00, 27.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.51it/s] 69%|######9   | 18/26 [00:00<00:00, 32.04it/s] 85%|########4 | 22/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 28.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.53 ( 22.53)	train_acc   0.56 (  0.56)	train_minacc   0.49 (  0.58)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 4.8710 (4.8799)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.71it/s] 27%|##6       | 7/26 [00:00<00:00, 29.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.38it/s] 46%|####6     | 12/26 [00:00<00:00, 34.31it/s] 69%|######9   | 18/26 [00:00<00:00, 39.87it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.87it/s] 88%|########8 | 23/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 35.70it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.639 (0.639)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.626 (0.633)	test_acc   0.59 (  0.58)	test_minacc   0.57 (  0.53)	test_majacc   0.59 (  0.59)	Loss_d 0.626 (0.633)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.623 (0.630)	test_acc   0.59 (  0.58)	test_minacc   0.53 (  0.54)	test_majacc   0.61 (  0.59)	Loss_d 0.623 (0.630)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.29 (  0.28)
Test: [  26/  26]	Loss 0.649 (0.630)	test_acc   0.56 (  0.58)	test_minacc   0.51 (  0.54)	test_majacc   0.57 (  0.59)	Loss_d 0.649 (0.630)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.27 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.97it/s]
Test: [  0/  1]	Loss 0.731 (0.731)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.65 (  0.65)	Loss_d 0.731 (0.731)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.731 (0.731)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.65 (  0.65)	Loss_d 0.731 (0.731)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.07 (  0.07)
Overall Timing[ 34/  1]	epoch_time 0.0436 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0432 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5817000059485435, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.31it/s]  8%|7         | 2/26 [00:00<00:02,  9.42it/s] 23%|##3       | 6/26 [00:00<00:00, 21.38it/s] 38%|###8      | 10/26 [00:00<00:00, 28.01it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.59it/s] 69%|######9   | 18/26 [00:00<00:00, 32.58it/s] 85%|########4 | 22/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:00<00:00, 34.09it/s]100%|##########| 26/26 [00:00<00:00, 27.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.53 ( 22.53)	train_acc   0.59 (  0.57)	train_minacc   0.59 (  0.55)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 4.8227 (4.8440)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.18it/s] 27%|##6       | 7/26 [00:00<00:00, 30.83it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.83it/s] 46%|####6     | 12/26 [00:00<00:00, 37.36it/s] 65%|######5   | 17/26 [00:00<00:00, 41.10it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.10it/s] 85%|########4 | 22/26 [00:00<00:00, 39.29it/s]100%|##########| 26/26 [00:00<00:00, 35.88it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.57 (  0.57)	Loss_d 0.642 (0.642)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.627 (0.634)	test_acc   0.61 (  0.59)	test_minacc   0.57 (  0.51)	test_majacc   0.62 (  0.61)	Loss_d 0.627 (0.634)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.27 (  0.27)
Test: [  20/  26]	Loss 0.626 (0.631)	test_acc   0.62 (  0.59)	test_minacc   0.53 (  0.52)	test_majacc   0.63 (  0.61)	Loss_d 0.626 (0.631)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.27 (  0.27)
Test: [  26/  26]	Loss 0.643 (0.631)	test_acc   0.62 (  0.60)	test_minacc   0.59 (  0.53)	test_majacc   0.62 (  0.61)	Loss_d 0.643 (0.631)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.61it/s]
Test: [  0/  1]	Loss 0.717 (0.717)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.66 (  0.66)	Loss_d 0.717 (0.717)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.717 (0.717)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.66 (  0.66)	Loss_d 0.717 (0.717)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.04 (  0.04)
Overall Timing[ 35/  1]	epoch_time 0.0416 (0.0416)	validation_time 0.0003 (0.0006)	train_time 0.0412 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5974000108838081, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.20it/s] 23%|##3       | 6/26 [00:00<00:00, 20.58it/s] 38%|###8      | 10/26 [00:00<00:00, 26.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.32it/s] 69%|######9   | 18/26 [00:00<00:00, 32.34it/s] 85%|########4 | 22/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 34.80it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.53 ( 22.53)	train_acc   0.57 (  0.59)	train_minacc   0.61 (  0.53)	train_majacc   0.56 (  0.60)	train_corr   0.00 (  0.00)	l1 4.7932 (4.8214)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.96it/s] 15%|#5        | 4/26 [00:00<00:01, 15.27it/s] 35%|###4      | 9/26 [00:00<00:00, 27.40it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.28it/s] 92%|#########2| 24/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 30.27it/s]
Test: [   0/  26]	Loss 0.636 (0.636)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.55)	Loss_d 0.636 (0.636)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.620 (0.628)	test_acc   0.61 (  0.59)	test_minacc   0.67 (  0.57)	test_majacc   0.60 (  0.59)	Loss_d 0.620 (0.628)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  20/  26]	Loss 0.619 (0.626)	test_acc   0.61 (  0.59)	test_minacc   0.60 (  0.58)	test_majacc   0.61 (  0.59)	Loss_d 0.619 (0.626)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  26/  26]	Loss 0.640 (0.625)	test_acc   0.58 (  0.59)	test_minacc   0.54 (  0.58)	test_majacc   0.58 (  0.59)	Loss_d 0.640 (0.625)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.28 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.718 (0.718)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.718 (0.718)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.03 (  0.03)
Overall Timing[ 36/  1]	epoch_time 0.0393 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0389 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5894000084400177, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 19%|#9        | 5/26 [00:00<00:01, 17.40it/s] 35%|###4      | 9/26 [00:00<00:00, 24.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.52it/s] 65%|######5   | 17/26 [00:00<00:00, 31.11it/s] 81%|########  | 21/26 [00:00<00:00, 32.88it/s] 96%|#########6| 25/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 27.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.001)	train_nll   0.62 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.54 ( 22.54)	train_acc   0.64 (  0.57)	train_minacc   0.63 (  0.65)	train_majacc   0.64 (  0.56)	train_corr   0.00 (  0.00)	l1 4.7613 (4.7773)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 23%|##3       | 6/26 [00:00<00:00, 25.39it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.39it/s] 42%|####2     | 11/26 [00:00<00:00, 33.03it/s] 62%|######1   | 16/26 [00:00<00:00, 38.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.65it/s] 81%|########  | 21/26 [00:00<00:00, 37.71it/s]100%|##########| 26/26 [00:00<00:00, 40.56it/s]100%|##########| 26/26 [00:00<00:00, 32.47it/s]
Test: [   0/  26]	Loss 0.618 (0.618)	test_acc   0.60 (  0.60)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.618 (0.618)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.611 (0.621)	test_acc   0.61 (  0.59)	test_minacc   0.59 (  0.53)	test_majacc   0.61 (  0.61)	Loss_d 0.611 (0.621)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.33 (  0.32)
Test: [  20/  26]	Loss 0.611 (0.617)	test_acc   0.62 (  0.60)	test_minacc   0.53 (  0.54)	test_majacc   0.64 (  0.61)	Loss_d 0.611 (0.617)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.34 (  0.32)
Test: [  26/  26]	Loss 0.620 (0.616)	test_acc   0.63 (  0.60)	test_minacc   0.59 (  0.54)	test_majacc   0.64 (  0.61)	Loss_d 0.620 (0.616)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.31 (  0.32)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.43it/s]
Test: [  0/  1]	Loss 0.737 (0.737)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.69 (  0.69)	Loss_d 0.737 (0.737)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.737 (0.737)	test_acc   0.58 (  0.58)	test_minacc   0.56 (  0.56)	test_majacc   0.69 (  0.69)	Loss_d 0.737 (0.737)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.07 (  0.07)
Overall Timing[ 37/  1]	epoch_time 0.0423 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6008000123500824, 0.5750000476837158)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.68it/s] 23%|##3       | 6/26 [00:00<00:00, 21.17it/s] 38%|###8      | 10/26 [00:00<00:00, 25.87it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.77it/s] 69%|######9   | 18/26 [00:00<00:00, 31.25it/s] 85%|########4 | 22/26 [00:00<00:00, 32.06it/s]100%|##########| 26/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 27.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.001 (0.000)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.55 ( 22.54)	train_acc   0.56 (  0.57)	train_minacc   0.56 (  0.60)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 4.8252 (4.8074)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:11,  2.19it/s] 23%|##3       | 6/26 [00:00<00:01, 13.48it/s]                                               23%|##3       | 6/26 [00:00<00:01, 13.48it/s] 42%|####2     | 11/26 [00:00<00:00, 22.03it/s] 62%|######1   | 16/26 [00:00<00:00, 28.82it/s]                                                62%|######1   | 16/26 [00:00<00:00, 28.82it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:01<00:00, 36.12it/s]100%|##########| 26/26 [00:01<00:00, 24.14it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.58 (  0.58)	test_minacc   0.65 (  0.65)	test_majacc   0.57 (  0.57)	Loss_d 0.644 (0.644)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.623 (0.633)	test_acc   0.60 (  0.59)	test_minacc   0.59 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.623 (0.633)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.59 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.26)
Test: [  20/  26]	Loss 0.625 (0.631)	test_acc   0.61 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.61 (  0.60)	Loss_d 0.625 (0.631)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.25 (  0.25)
Test: [  26/  26]	Loss 0.646 (0.630)	test_acc   0.56 (  0.59)	test_minacc   0.54 (  0.57)	test_majacc   0.57 (  0.60)	Loss_d 0.646 (0.630)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.24 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 0.722 (0.722)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.67 (  0.67)	Loss_d 0.722 (0.722)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.722 (0.722)	test_acc   0.59 (  0.59)	test_minacc   0.58 (  0.58)	test_majacc   0.67 (  0.67)	Loss_d 0.722 (0.722)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.01 (  0.01)
Overall Timing[ 38/  1]	epoch_time 0.0467 (0.0417)	validation_time 0.0003 (0.0006)	train_time 0.0464 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5920000111460686, 0.5900000333786011)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.41it/s] 19%|#9        | 5/26 [00:00<00:01, 11.36it/s] 35%|###4      | 9/26 [00:00<00:00, 18.02it/s] 50%|#####     | 13/26 [00:00<00:00, 22.97it/s] 65%|######5   | 17/26 [00:00<00:00, 26.41it/s] 81%|########  | 21/26 [00:00<00:00, 29.01it/s] 96%|#########6| 25/26 [00:01<00:00, 31.16it/s]100%|##########| 26/26 [00:01<00:00, 22.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.001)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.55 ( 22.55)	train_acc   0.74 (  0.62)	train_minacc   0.59 (  0.58)	train_majacc   0.77 (  0.62)	train_corr   0.00 (  0.00)	l1 4.5403 (4.7151)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.04it/s] 27%|##6       | 7/26 [00:00<00:00, 19.30it/s]                                               27%|##6       | 7/26 [00:00<00:00, 19.30it/s] 46%|####6     | 12/26 [00:00<00:00, 27.65it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 85%|########4 | 22/26 [00:00<00:00, 35.78it/s]100%|##########| 26/26 [00:00<00:00, 27.58it/s]
Test: [   0/  26]	Loss 0.606 (0.606)	test_acc   0.66 (  0.66)	test_minacc   0.46 (  0.46)	test_majacc   0.70 (  0.70)	Loss_d 0.606 (0.606)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.588 (0.614)	test_acc   0.69 (  0.68)	test_minacc   0.57 (  0.47)	test_majacc   0.71 (  0.71)	Loss_d 0.588 (0.614)	test_acc_d   0.69 (  0.68)	test_minacc_d   0.57 (  0.47)	test_majacc_d   0.71 (  0.71)	test_corr_d   0.43 (  0.37)
Test: [  20/  26]	Loss 0.615 (0.611)	test_acc   0.68 (  0.67)	test_minacc   0.46 (  0.48)	test_majacc   0.73 (  0.71)	Loss_d 0.615 (0.611)	test_acc_d   0.68 (  0.67)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.73 (  0.71)	test_corr_d   0.35 (  0.36)
Test: [  26/  26]	Loss 0.615 (0.610)	test_acc   0.73 (  0.68)	test_minacc   0.61 (  0.48)	test_majacc   0.76 (  0.71)	Loss_d 0.615 (0.610)	test_acc_d   0.73 (  0.68)	test_minacc_d   0.61 (  0.48)	test_majacc_d   0.76 (  0.71)	test_corr_d   0.37 (  0.36)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.41it/s]
Test: [  0/  1]	Loss 0.739 (0.739)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.44)	test_majacc   0.80 (  0.80)	Loss_d 0.739 (0.739)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.739 (0.739)	test_acc   0.47 (  0.47)	test_minacc   0.44 (  0.44)	test_majacc   0.80 (  0.80)	Loss_d 0.739 (0.739)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.80 (  0.80)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 39/  1]	epoch_time 0.0410 (0.0417)	validation_time 0.0003 (0.0006)	train_time 0.0406 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6766000329852104, 0.4740000367164612)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 15%|#5        | 4/26 [00:00<00:01, 16.34it/s] 31%|###       | 8/26 [00:00<00:00, 24.56it/s] 46%|####6     | 12/26 [00:00<00:00, 28.63it/s] 62%|######1   | 16/26 [00:00<00:00, 31.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.55it/s] 92%|#########2| 24/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 27.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.55 ( 22.55)	train_acc   0.62 (  0.62)	train_minacc   0.66 (  0.55)	train_majacc   0.61 (  0.63)	train_corr   0.00 (  0.00)	l1 4.3130 (4.3923)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.63it/s] 23%|##3       | 6/26 [00:00<00:00, 28.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.19it/s] 42%|####2     | 11/26 [00:00<00:00, 36.94it/s] 62%|######1   | 16/26 [00:00<00:00, 39.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.48it/s] 81%|########  | 21/26 [00:00<00:00, 40.13it/s]100%|##########| 26/26 [00:00<00:00, 42.77it/s]100%|##########| 26/26 [00:00<00:00, 35.33it/s]
Test: [   0/  26]	Loss 0.636 (0.636)	test_acc   0.62 (  0.62)	test_minacc   0.59 (  0.59)	test_majacc   0.62 (  0.62)	Loss_d 0.636 (0.636)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.626 (0.644)	test_acc   0.63 (  0.61)	test_minacc   0.67 (  0.57)	test_majacc   0.62 (  0.61)	Loss_d 0.626 (0.644)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.32 (  0.24)
Test: [  20/  26]	Loss 0.640 (0.642)	test_acc   0.58 (  0.61)	test_minacc   0.54 (  0.58)	test_majacc   0.59 (  0.61)	Loss_d 0.640 (0.642)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.20 (  0.23)
Test: [  26/  26]	Loss 0.640 (0.641)	test_acc   0.63 (  0.61)	test_minacc   0.71 (  0.58)	test_majacc   0.61 (  0.61)	Loss_d 0.640 (0.641)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.71 (  0.58)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.21 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.62 (  0.62)	Loss_d 0.679 (0.679)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.62 (  0.62)	Loss_d 0.679 (0.679)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 40/  1]	epoch_time 0.0400 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0396 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.6055000095367432, 0.6450000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.56it/s] 27%|##6       | 7/26 [00:00<00:00, 28.97it/s] 42%|####2     | 11/26 [00:00<00:00, 32.48it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.01it/s] 88%|########8 | 23/26 [00:00<00:00, 35.47it/s]100%|##########| 26/26 [00:00<00:00, 31.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.55 ( 22.55)	train_acc   0.58 (  0.56)	train_minacc   0.71 (  0.64)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 4.3204 (4.3137)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 33.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.90it/s] 46%|####6     | 12/26 [00:00<00:00, 39.62it/s] 65%|######5   | 17/26 [00:00<00:00, 39.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.61it/s] 85%|########4 | 22/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 36.72it/s]
Test: [   0/  26]	Loss 0.662 (0.662)	test_acc   0.54 (  0.54)	test_minacc   0.74 (  0.74)	test_majacc   0.51 (  0.51)	Loss_d 0.662 (0.662)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.646 (0.660)	test_acc   0.61 (  0.56)	test_minacc   0.81 (  0.66)	test_majacc   0.58 (  0.54)	Loss_d 0.646 (0.660)	test_acc_d   0.61 (  0.56)	test_minacc_d   0.81 (  0.66)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.21 (  0.20)
Test: [  20/  26]	Loss 0.649 (0.659)	test_acc   0.57 (  0.56)	test_minacc   0.71 (  0.67)	test_majacc   0.54 (  0.54)	Loss_d 0.649 (0.659)	test_acc_d   0.57 (  0.56)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.663 (0.659)	test_acc   0.58 (  0.56)	test_minacc   0.73 (  0.67)	test_majacc   0.55 (  0.53)	Loss_d 0.663 (0.659)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.73 (  0.67)	test_majacc_d   0.55 (  0.53)	test_corr_d   0.18 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.61it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.71 (  0.71)	test_minacc   0.73 (  0.73)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.71 (  0.71)	test_minacc   0.73 (  0.73)	test_majacc   0.61 (  0.61)	Loss_d 0.693 (0.693)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 41/  1]	epoch_time 0.0384 (0.0416)	validation_time 0.0003 (0.0006)	train_time 0.0380 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.555000003516674, 0.7140000462532043)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.57it/s] 19%|#9        | 5/26 [00:00<00:01, 17.30it/s] 35%|###4      | 9/26 [00:00<00:00, 23.41it/s] 50%|#####     | 13/26 [00:00<00:00, 27.27it/s] 65%|######5   | 17/26 [00:00<00:00, 29.73it/s] 81%|########  | 21/26 [00:00<00:00, 30.91it/s] 96%|#########6| 25/26 [00:00<00:00, 32.00it/s]100%|##########| 26/26 [00:01<00:00, 25.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.56)	train_acc   0.62 (  0.55)	train_minacc   0.59 (  0.62)	train_majacc   0.63 (  0.54)	train_corr   0.00 (  0.00)	l1 4.3184 (4.3203)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.21it/s] 23%|##3       | 6/26 [00:00<00:01, 19.95it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.95it/s] 42%|####2     | 11/26 [00:00<00:00, 28.78it/s] 62%|######1   | 16/26 [00:00<00:00, 34.73it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.73it/s] 81%|########  | 21/26 [00:00<00:00, 38.95it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]100%|##########| 26/26 [00:00<00:00, 30.94it/s]
Test: [   0/  26]	Loss 0.650 (0.650)	test_acc   0.59 (  0.59)	test_minacc   0.54 (  0.54)	test_majacc   0.60 (  0.60)	Loss_d 0.650 (0.650)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.642 (0.660)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.54)	test_majacc   0.60 (  0.60)	Loss_d 0.642 (0.660)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.24 (  0.18)
Test: [  20/  26]	Loss 0.650 (0.656)	test_acc   0.59 (  0.59)	test_minacc   0.54 (  0.53)	test_majacc   0.60 (  0.60)	Loss_d 0.650 (0.656)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.54 (  0.53)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.17 (  0.18)
Test: [  26/  26]	Loss 0.654 (0.655)	test_acc   0.61 (  0.59)	test_minacc   0.59 (  0.53)	test_majacc   0.62 (  0.60)	Loss_d 0.654 (0.655)	test_acc_d   0.61 (  0.59)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.62 (  0.60)	test_corr_d   0.16 (  0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.29it/s]
Test: [  0/  1]	Loss 0.673 (0.673)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.673 (0.673)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.673 (0.673)	test_acc   0.57 (  0.57)	test_minacc   0.56 (  0.56)	test_majacc   0.67 (  0.67)	Loss_d 0.673 (0.673)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 42/  1]	epoch_time 0.0385 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0380 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5902000052928924, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.45it/s] 23%|##3       | 6/26 [00:00<00:00, 26.66it/s] 38%|###8      | 10/26 [00:00<00:00, 30.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.11it/s] 69%|######9   | 18/26 [00:00<00:00, 33.33it/s] 85%|########4 | 22/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.001)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.56 ( 22.56)	train_acc   0.56 (  0.58)	train_minacc   0.83 (  0.63)	train_majacc   0.51 (  0.57)	train_corr   0.00 (  0.00)	l1 4.3185 (4.2995)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.32it/s] 23%|##3       | 6/26 [00:00<00:01, 16.82it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.82it/s] 42%|####2     | 11/26 [00:00<00:00, 25.69it/s] 62%|######1   | 16/26 [00:00<00:00, 32.38it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.38it/s] 81%|########  | 21/26 [00:00<00:00, 35.53it/s]100%|##########| 26/26 [00:00<00:00, 39.13it/s]100%|##########| 26/26 [00:00<00:00, 27.84it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.52 (  0.52)	test_minacc   0.91 (  0.91)	test_majacc   0.46 (  0.46)	Loss_d 0.637 (0.637)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.91 (  0.91)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.622 (0.635)	test_acc   0.54 (  0.54)	test_minacc   0.81 (  0.83)	test_majacc   0.50 (  0.48)	Loss_d 0.622 (0.635)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.81 (  0.83)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.27 (  0.25)
Test: [  20/  26]	Loss 0.634 (0.634)	test_acc   0.53 (  0.54)	test_minacc   0.81 (  0.85)	test_majacc   0.47 (  0.48)	Loss_d 0.634 (0.634)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.81 (  0.85)	test_majacc_d   0.47 (  0.48)	test_corr_d   0.23 (  0.24)
Test: [  26/  26]	Loss 0.635 (0.634)	test_acc   0.56 (  0.54)	test_minacc   0.85 (  0.84)	test_majacc   0.50 (  0.48)	Loss_d 0.635 (0.634)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.85 (  0.84)	test_majacc_d   0.50 (  0.48)	test_corr_d   0.24 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.94it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.718 (0.718)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.73 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.60 (  0.60)	Loss_d 0.718 (0.718)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0403 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0398 (0.0408)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5387000188827514, 0.7320000529289246)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.28it/s] 19%|#9        | 5/26 [00:00<00:01, 20.98it/s] 35%|###4      | 9/26 [00:00<00:00, 27.22it/s] 50%|#####     | 13/26 [00:00<00:00, 28.83it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 31.67it/s] 96%|#########6| 25/26 [00:00<00:00, 32.78it/s]100%|##########| 26/26 [00:00<00:00, 27.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.001 (0.001)	train_nll   0.61 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.56)	train_acc   0.70 (  0.56)	train_minacc   0.61 (  0.69)	train_majacc   0.71 (  0.54)	train_corr   0.00 (  0.00)	l1 4.2184 (4.3166)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.61it/s] 23%|##3       | 6/26 [00:00<00:01, 18.89it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.89it/s] 42%|####2     | 11/26 [00:00<00:00, 27.95it/s] 62%|######1   | 16/26 [00:00<00:00, 33.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.16it/s] 81%|########  | 21/26 [00:00<00:00, 34.95it/s]100%|##########| 26/26 [00:00<00:00, 38.74it/s]100%|##########| 26/26 [00:00<00:00, 28.88it/s]
Test: [   0/  26]	Loss 0.606 (0.606)	test_acc   0.65 (  0.65)	test_minacc   0.50 (  0.50)	test_majacc   0.68 (  0.68)	Loss_d 0.606 (0.606)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.600 (0.615)	test_acc   0.65 (  0.64)	test_minacc   0.56 (  0.47)	test_majacc   0.67 (  0.66)	Loss_d 0.600 (0.615)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.56 (  0.47)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.42 (  0.37)
Test: [  20/  26]	Loss 0.620 (0.612)	test_acc   0.62 (  0.64)	test_minacc   0.47 (  0.48)	test_majacc   0.65 (  0.66)	Loss_d 0.620 (0.612)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.35 (  0.37)
Test: [  26/  26]	Loss 0.606 (0.611)	test_acc   0.68 (  0.64)	test_minacc   0.61 (  0.49)	test_majacc   0.69 (  0.67)	Loss_d 0.606 (0.611)	test_acc_d   0.68 (  0.64)	test_minacc_d   0.61 (  0.49)	test_majacc_d   0.69 (  0.67)	test_corr_d   0.35 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.91it/s]
Test: [  0/  1]	Loss 0.740 (0.740)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.78 (  0.78)	Loss_d 0.740 (0.740)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.740 (0.740)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.78 (  0.78)	Loss_d 0.740 (0.740)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.78 (  0.78)	test_corr_d   0.08 (  0.08)
Overall Timing[ 44/  1]	epoch_time 0.0467 (0.0416)	validation_time 0.0003 (0.0006)	train_time 0.0464 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.640500015437603, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.13it/s] 23%|##3       | 6/26 [00:00<00:00, 26.65it/s] 38%|###8      | 10/26 [00:00<00:00, 30.92it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.97it/s] 69%|######9   | 18/26 [00:00<00:00, 32.62it/s] 85%|########4 | 22/26 [00:00<00:00, 33.54it/s]100%|##########| 26/26 [00:00<00:00, 35.04it/s]100%|##########| 26/26 [00:00<00:00, 30.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.001)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.57 ( 22.57)	train_acc   0.64 (  0.57)	train_minacc   0.61 (  0.64)	train_majacc   0.64 (  0.56)	train_corr   0.00 (  0.00)	l1 4.1237 (4.2163)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.08it/s] 12%|#1        | 3/26 [00:00<00:02,  9.98it/s] 31%|###       | 8/26 [00:00<00:00, 23.58it/s]                                               31%|###       | 8/26 [00:00<00:00, 23.58it/s] 50%|#####     | 13/26 [00:00<00:00, 31.40it/s] 69%|######9   | 18/26 [00:00<00:00, 36.61it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.61it/s] 88%|########8 | 23/26 [00:00<00:00, 37.08it/s]100%|##########| 26/26 [00:00<00:00, 30.22it/s]
Test: [   0/  26]	Loss 0.660 (0.660)	test_acc   0.58 (  0.58)	test_minacc   0.54 (  0.54)	test_majacc   0.59 (  0.59)	Loss_d 0.660 (0.660)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.657 (0.672)	test_acc   0.60 (  0.57)	test_minacc   0.63 (  0.49)	test_majacc   0.60 (  0.58)	Loss_d 0.657 (0.672)	test_acc_d   0.60 (  0.57)	test_minacc_d   0.63 (  0.49)	test_majacc_d   0.60 (  0.58)	test_corr_d   0.24 (  0.22)
Test: [  20/  26]	Loss 0.672 (0.669)	test_acc   0.56 (  0.58)	test_minacc   0.49 (  0.50)	test_majacc   0.57 (  0.59)	Loss_d 0.672 (0.669)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.23 (  0.22)
Test: [  26/  26]	Loss 0.655 (0.667)	test_acc   0.62 (  0.58)	test_minacc   0.59 (  0.51)	test_majacc   0.63 (  0.60)	Loss_d 0.655 (0.667)	test_acc_d   0.62 (  0.58)	test_minacc_d   0.59 (  0.51)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.19 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.14it/s]
Test: [  0/  1]	Loss 0.740 (0.740)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.62 (  0.62)	Loss_d 0.740 (0.740)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.740 (0.740)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.62 (  0.62)	Loss_d 0.740 (0.740)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.01 (  0.01)
Overall Timing[ 45/  1]	epoch_time 0.0404 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0400 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5826000106930733, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.25it/s] 15%|#5        | 4/26 [00:00<00:01, 14.04it/s] 31%|###       | 8/26 [00:00<00:00, 21.83it/s] 46%|####6     | 12/26 [00:00<00:00, 26.28it/s] 62%|######1   | 16/26 [00:00<00:00, 29.45it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.22it/s] 92%|#########2| 24/26 [00:00<00:00, 32.39it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.56 (  0.53)	train_minacc   0.63 (  0.52)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 3.8771 (3.9957)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.87it/s] 23%|##3       | 6/26 [00:00<00:00, 25.68it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.68it/s] 42%|####2     | 11/26 [00:00<00:00, 34.24it/s] 62%|######1   | 16/26 [00:00<00:00, 38.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.67it/s] 81%|########  | 21/26 [00:00<00:00, 38.08it/s]100%|##########| 26/26 [00:00<00:00, 41.17it/s]100%|##########| 26/26 [00:00<00:00, 33.12it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.53 (  0.53)	test_minacc   0.67 (  0.67)	test_majacc   0.51 (  0.51)	Loss_d 0.664 (0.664)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.661 (0.672)	test_acc   0.55 (  0.51)	test_minacc   0.70 (  0.60)	test_majacc   0.52 (  0.50)	Loss_d 0.661 (0.672)	test_acc_d   0.55 (  0.51)	test_minacc_d   0.70 (  0.60)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.19 (  0.15)
Test: [  20/  26]	Loss 0.673 (0.672)	test_acc   0.53 (  0.51)	test_minacc   0.63 (  0.60)	test_majacc   0.51 (  0.50)	Loss_d 0.673 (0.672)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.16 (  0.15)
Test: [  26/  26]	Loss 0.664 (0.671)	test_acc   0.55 (  0.52)	test_minacc   0.63 (  0.60)	test_majacc   0.54 (  0.50)	Loss_d 0.664 (0.671)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.17 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.36it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.699 (0.699)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.699 (0.699)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 46/  1]	epoch_time 0.0447 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0443 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5156000188887119, 0.6100000143051147)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.59it/s] 27%|##6       | 7/26 [00:00<00:00, 31.99it/s] 42%|####2     | 11/26 [00:00<00:00, 33.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.68it/s] 88%|########8 | 23/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 30.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.57 (  0.51)	train_minacc   0.59 (  0.57)	train_majacc   0.56 (  0.50)	train_corr   0.00 (  0.00)	l1 3.7788 (3.8205)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.79it/s] 31%|###       | 8/26 [00:00<00:00, 36.32it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.32it/s] 50%|#####     | 13/26 [00:00<00:00, 41.49it/s] 69%|######9   | 18/26 [00:00<00:00, 43.49it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.49it/s] 88%|########8 | 23/26 [00:00<00:00, 41.08it/s]100%|##########| 26/26 [00:00<00:00, 37.93it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.677 (0.677)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.678 (0.684)	test_acc   0.53 (  0.51)	test_minacc   0.61 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.678 (0.684)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.61 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.13 (  0.12)
Test: [  20/  26]	Loss 0.684 (0.684)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.684 (0.684)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.12)
Test: [  26/  26]	Loss 0.676 (0.683)	test_acc   0.56 (  0.51)	test_minacc   0.59 (  0.53)	test_majacc   0.55 (  0.51)	Loss_d 0.676 (0.683)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.59 (  0.53)	test_majacc_d   0.55 (  0.51)	test_corr_d   0.16 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.40it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.56 (  0.56)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.699 (0.699)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Overall Timing[ 47/  1]	epoch_time 0.0427 (0.0416)	validation_time 0.0004 (0.0006)	train_time 0.0423 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5144000121951103, 0.5590000152587891)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.52it/s] 19%|#9        | 5/26 [00:00<00:00, 24.90it/s] 35%|###4      | 9/26 [00:00<00:00, 29.27it/s] 50%|#####     | 13/26 [00:00<00:00, 31.52it/s] 65%|######5   | 17/26 [00:00<00:00, 32.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.75it/s] 96%|#########6| 25/26 [00:00<00:00, 34.93it/s]100%|##########| 26/26 [00:00<00:00, 29.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.57 (  0.51)	train_minacc   0.59 (  0.52)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 3.7312 (3.7571)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.28it/s] 35%|###4      | 9/26 [00:00<00:00, 42.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.62it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.43it/s] 92%|#########2| 24/26 [00:00<00:00, 42.48it/s]100%|##########| 26/26 [00:00<00:00, 38.73it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.673 (0.673)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.677 (0.680)	test_acc   0.52 (  0.51)	test_minacc   0.59 (  0.54)	test_majacc   0.51 (  0.51)	Loss_d 0.677 (0.680)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.59 (  0.54)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.16 (  0.15)
Test: [  20/  26]	Loss 0.683 (0.680)	test_acc   0.51 (  0.52)	test_minacc   0.57 (  0.54)	test_majacc   0.50 (  0.51)	Loss_d 0.683 (0.680)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.16 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.680)	test_acc   0.56 (  0.52)	test_minacc   0.61 (  0.55)	test_majacc   0.56 (  0.52)	Loss_d 0.673 (0.680)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.61 (  0.55)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.17 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.697 (0.697)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.58 (  0.58)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.697 (0.697)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.01 (  0.01)
Overall Timing[ 48/  1]	epoch_time 0.0413 (0.0416)	validation_time 0.0005 (0.0006)	train_time 0.0408 (0.0410)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5214000141918659, 0.578000009059906)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.58it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 35%|###4      | 9/26 [00:00<00:00, 26.01it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 32.20it/s] 81%|########  | 21/26 [00:00<00:00, 33.73it/s] 96%|#########6| 25/26 [00:00<00:00, 34.11it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.58 ( 22.58)	train_acc   0.56 (  0.51)	train_minacc   0.49 (  0.51)	train_majacc   0.57 (  0.51)	train_corr   0.00 (  0.00)	l1 3.6973 (3.7165)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.92it/s] 23%|##3       | 6/26 [00:00<00:00, 32.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.41it/s] 42%|####2     | 11/26 [00:00<00:00, 38.51it/s] 62%|######1   | 16/26 [00:00<00:00, 42.20it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.20it/s] 81%|########  | 21/26 [00:00<00:00, 39.87it/s]100%|##########| 26/26 [00:00<00:00, 42.68it/s]100%|##########| 26/26 [00:00<00:00, 36.11it/s]
Test: [   0/  26]	Loss 0.678 (0.678)	test_acc   0.52 (  0.52)	test_minacc   0.43 (  0.43)	test_majacc   0.53 (  0.53)	Loss_d 0.678 (0.678)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.683 (0.683)	test_acc   0.53 (  0.52)	test_minacc   0.56 (  0.48)	test_majacc   0.52 (  0.53)	Loss_d 0.683 (0.683)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.56 (  0.48)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.13 (  0.14)
Test: [  20/  26]	Loss 0.686 (0.684)	test_acc   0.49 (  0.52)	test_minacc   0.46 (  0.48)	test_majacc   0.49 (  0.52)	Loss_d 0.686 (0.684)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.14 (  0.13)
Test: [  26/  26]	Loss 0.678 (0.684)	test_acc   0.54 (  0.52)	test_minacc   0.46 (  0.48)	test_majacc   0.56 (  0.52)	Loss_d 0.678 (0.684)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.18 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.699 (0.699)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.57 (  0.57)	Loss_d 0.699 (0.699)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.05 (  0.05)
Overall Timing[ 49/  1]	epoch_time 0.0367 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0363 (0.0409)
record: (train_acc, test_acc) (0.6557000155448913, 0.703000009059906)
last accs (train_acc, test_acc) (0.5162000137865543, 0.527999997138977)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.170 MB of 0.170 MB uploadedwandb: \ 0.170 MB of 0.170 MB uploadedwandb: | 0.170 MB of 0.170 MB uploadedwandb: / 0.170 MB of 0.170 MB uploadedwandb: - 0.170 MB of 0.170 MB uploadedwandb: \ 0.170 MB of 0.170 MB uploadedwandb: | 0.170 MB of 0.170 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp_091rz47'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_210444-kwbzs3kn
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/kwbzs3kn
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1218
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6020, 3, 32, 32) (5980, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.53s/it] 19%|#9        | 5/26 [00:01<00:05,  3.93it/s] 35%|###4      | 9/26 [00:01<00:02,  7.66it/s] 50%|#####     | 13/26 [00:01<00:01, 11.68it/s] 65%|######5   | 17/26 [00:01<00:00, 15.84it/s] 81%|########  | 21/26 [00:02<00:00, 19.84it/s] 96%|#########6| 25/26 [00:02<00:00, 22.70it/s]100%|##########| 26/26 [00:02<00:00,  9.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.452 (0.567)	train_nll   0.45 (  0.57)	train_penalty   0.07 (  0.27)	weight_norm  20.85 ( 18.09)	train_acc   0.83 (  0.80)	train_minacc   0.00 (  0.07)	train_majacc   0.99 (  0.93)	train_corr   0.00 (  0.00)	l1 6.7831 (7.8366)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.05it/s] 23%|##3       | 6/26 [00:00<00:01, 17.18it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.18it/s] 42%|####2     | 11/26 [00:00<00:00, 26.26it/s] 62%|######1   | 16/26 [00:00<00:00, 32.89it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.89it/s] 81%|########  | 21/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 38.08it/s]100%|##########| 26/26 [00:00<00:00, 27.53it/s]
Test: [   0/  26]	Loss 0.433 (0.433)	test_acc   0.84 (  0.84)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.433 (0.433)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.358 (0.419)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.358 (0.419)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.392 (0.416)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.392 (0.416)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.449 (0.419)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.449 (0.419)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.52it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]
Test: [  0/  1]	Loss 1.821 (1.821)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.821 (1.821)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.821 (1.821)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.821 (1.821)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/172/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0753 (0.0753)	validation_time 0.0067 (0.0067)	train_time 0.0666 (0.0666)
record: (train_acc, test_acc) (0.8459000269174576, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8459000269174576, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.97it/s] 35%|###4      | 9/26 [00:00<00:00, 29.39it/s] 50%|#####     | 13/26 [00:00<00:00, 32.97it/s] 65%|######5   | 17/26 [00:00<00:00, 35.12it/s] 81%|########  | 21/26 [00:00<00:00, 36.03it/s] 96%|#########6| 25/26 [00:00<00:00, 35.70it/s]100%|##########| 26/26 [00:00<00:00, 30.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.446 (0.418)	train_nll   0.45 (  0.42)	train_penalty   0.05 (  0.06)	weight_norm  21.98 ( 21.63)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.00)	train_majacc   0.99 (  1.00)	train_corr   0.00 (  0.00)	l1 6.6326 (6.6853)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.01it/s] 15%|#5        | 4/26 [00:00<00:01, 20.08it/s] 35%|###4      | 9/26 [00:00<00:00, 31.90it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.90it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.31it/s] 92%|#########2| 24/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 33.63it/s]
Test: [   0/  26]	Loss 0.419 (0.419)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.419 (0.419)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.352 (0.409)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.352 (0.409)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.388 (0.408)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.388 (0.408)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.443 (0.410)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.443 (0.410)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 1.678 (1.678)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.678 (1.678)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.678 (1.678)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.678 (1.678)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  1/  1]	epoch_time 0.0403 (0.0578)	validation_time 0.0004 (0.0035)	train_time 0.0398 (0.0532)
record: (train_acc, test_acc) (0.8459000269174576, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8480000242590904, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.38it/s] 27%|##6       | 7/26 [00:00<00:00, 29.55it/s] 42%|####2     | 11/26 [00:00<00:00, 31.30it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.14it/s] 88%|########8 | 23/26 [00:00<00:00, 33.95it/s]100%|##########| 26/26 [00:00<00:00, 30.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.442 (0.407)	train_nll   0.44 (  0.41)	train_penalty   0.08 (  0.06)	weight_norm  22.09 ( 22.06)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   0.99 (  1.00)	train_corr   0.00 (  0.00)	l1 6.8054 (6.6778)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.17it/s] 23%|##3       | 6/26 [00:00<00:00, 30.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.31it/s] 42%|####2     | 11/26 [00:00<00:00, 37.12it/s] 62%|######1   | 16/26 [00:00<00:00, 41.04it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.04it/s] 81%|########  | 21/26 [00:00<00:00, 39.83it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]100%|##########| 26/26 [00:00<00:00, 36.00it/s]
Test: [   0/  26]	Loss 0.405 (0.405)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.405 (0.405)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.347 (0.401)	test_acc   0.88 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.347 (0.401)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.365 (0.397)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.365 (0.397)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.431 (0.399)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.431 (0.399)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.19it/s]
Test: [  0/  1]	Loss 1.862 (1.862)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.862 (1.862)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.862 (1.862)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Overall Timing[  2/  1]	epoch_time 0.0398 (0.0518)	validation_time 0.0004 (0.0025)	train_time 0.0394 (0.0486)
record: (train_acc, test_acc) (0.8459000269174576, 0.10600000619888306)
last accs (train_acc, test_acc) (0.8482000232934952, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 19%|#9        | 5/26 [00:00<00:01, 17.76it/s] 35%|###4      | 9/26 [00:00<00:00, 24.73it/s] 50%|#####     | 13/26 [00:00<00:00, 28.62it/s] 65%|######5   | 17/26 [00:00<00:00, 31.22it/s] 81%|########  | 21/26 [00:00<00:00, 32.04it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 26.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.417 (0.394)	train_nll   0.42 (  0.39)	train_penalty   0.07 (  0.05)	weight_norm  22.12 ( 22.11)	train_acc   0.84 (  0.85)	train_minacc   0.02 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.9423 (6.7202)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 31%|###       | 8/26 [00:00<00:00, 36.76it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.76it/s] 50%|#####     | 13/26 [00:00<00:00, 41.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.44it/s] 92%|#########2| 24/26 [00:00<00:00, 45.43it/s]100%|##########| 26/26 [00:00<00:00, 38.44it/s]
Test: [   0/  26]	Loss 0.389 (0.389)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.389 (0.389)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.342 (0.390)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.390)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.349 (0.385)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.349 (0.385)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.398 (0.385)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.398 (0.385)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 1.889 (1.889)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.889 (1.889)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.889 (1.889)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.889 (1.889)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/172/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0404 (0.0489)	validation_time 0.0004 (0.0020)	train_time 0.0399 (0.0464)
record: (train_acc, test_acc) (0.8493000209927559, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8493000209927559, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.72it/s] 19%|#9        | 5/26 [00:00<00:01, 17.93it/s] 35%|###4      | 9/26 [00:00<00:00, 24.69it/s] 50%|#####     | 13/26 [00:00<00:00, 28.56it/s] 65%|######5   | 17/26 [00:00<00:00, 31.14it/s] 81%|########  | 21/26 [00:00<00:00, 31.91it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 26.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.384 (0.373)	train_nll   0.38 (  0.37)	train_penalty   0.05 (  0.04)	weight_norm  22.16 ( 22.14)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0258 (6.8241)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 23%|##3       | 6/26 [00:00<00:00, 27.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.54it/s] 42%|####2     | 11/26 [00:00<00:00, 35.00it/s] 62%|######1   | 16/26 [00:00<00:00, 39.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.90it/s] 81%|########  | 21/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 35.12it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.85 (  0.85)	test_minacc   0.15 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.359 (0.359)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.315 (0.359)	test_acc   0.87 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.98)	Loss_d 0.315 (0.359)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.318 (0.352)	test_acc   0.86 (  0.85)	test_minacc   0.17 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.318 (0.352)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.17 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.93)
Test: [  26/  26]	Loss 0.363 (0.352)	test_acc   0.84 (  0.85)	test_minacc   0.10 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.363 (0.352)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.10 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.38it/s]
Test: [  0/  1]	Loss 1.791 (1.791)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.791 (1.791)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.791 (1.791)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.791 (1.791)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/172/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0404 (0.0472)	validation_time 0.0004 (0.0017)	train_time 0.0400 (0.0452)
record: (train_acc, test_acc) (0.8508000150918961, 0.15300001204013824)
last accs (train_acc, test_acc) (0.8508000150918961, 0.15300001204013824)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.48it/s] 23%|##3       | 6/26 [00:00<00:00, 25.09it/s] 38%|###8      | 10/26 [00:00<00:00, 29.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.24it/s] 69%|######9   | 18/26 [00:00<00:00, 32.22it/s] 85%|########4 | 22/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.348 (0.356)	train_nll   0.35 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm  22.21 ( 22.19)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.13)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 7.2067 (6.9036)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 23%|##3       | 6/26 [00:00<00:00, 29.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.81it/s] 46%|####6     | 12/26 [00:00<00:00, 40.06it/s] 65%|######5   | 17/26 [00:00<00:00, 39.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.03it/s] 85%|########4 | 22/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 35.89it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.345 (0.345)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.303 (0.341)	test_acc   0.88 (  0.85)	test_minacc   0.09 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.303 (0.341)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.09 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  20/  26]	Loss 0.292 (0.333)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.292 (0.333)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.323 (0.332)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.08)	test_majacc   1.00 (  0.99)	Loss_d 0.323 (0.332)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.08)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.21it/s]
Test: [  0/  1]	Loss 1.903 (1.903)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.903 (1.903)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.903 (1.903)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.903 (1.903)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/172/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0391 (0.0459)	validation_time 0.0004 (0.0014)	train_time 0.0387 (0.0441)
record: (train_acc, test_acc) (0.8540000259876251, 0.15800000727176666)
last accs (train_acc, test_acc) (0.8540000259876251, 0.15800000727176666)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.06it/s] 19%|#9        | 5/26 [00:00<00:01, 15.91it/s] 35%|###4      | 9/26 [00:00<00:00, 22.15it/s] 50%|#####     | 13/26 [00:00<00:00, 25.92it/s] 65%|######5   | 17/26 [00:00<00:00, 28.01it/s] 81%|########  | 21/26 [00:00<00:00, 30.04it/s] 96%|#########6| 25/26 [00:00<00:00, 31.74it/s]100%|##########| 26/26 [00:01<00:00, 24.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.331 (0.340)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm  22.28 ( 22.25)	train_acc   0.84 (  0.85)	train_minacc   0.15 (  0.19)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 7.0098 (7.0552)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.94it/s] 27%|##6       | 7/26 [00:00<00:00, 35.18it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.18it/s] 46%|####6     | 12/26 [00:00<00:00, 40.38it/s] 65%|######5   | 17/26 [00:00<00:00, 38.60it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.60it/s] 85%|########4 | 22/26 [00:00<00:00, 41.47it/s]100%|##########| 26/26 [00:00<00:00, 36.17it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.321 (0.321)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.297 (0.325)	test_acc   0.88 (  0.86)	test_minacc   0.09 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.297 (0.325)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.09 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.289 (0.319)	test_acc   0.87 (  0.86)	test_minacc   0.15 (  0.11)	test_majacc   0.98 (  0.99)	Loss_d 0.289 (0.319)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.15 (  0.11)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.305 (0.318)	test_acc   0.85 (  0.86)	test_minacc   0.12 (  0.12)	test_majacc   1.00 (  0.99)	Loss_d 0.305 (0.318)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.12 (  0.12)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.65it/s]
Test: [  0/  1]	Loss 1.887 (1.887)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.887 (1.887)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.887 (1.887)	test_acc   0.14 (  0.14)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 1.887 (1.887)	test_acc_d   0.14 (  0.14)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Overall Timing[  6/  1]	epoch_time 0.0390 (0.0449)	validation_time 0.0003 (0.0013)	train_time 0.0386 (0.0433)
record: (train_acc, test_acc) (0.8540000259876251, 0.15800000727176666)
last accs (train_acc, test_acc) (0.8559000260829925, 0.14000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.90it/s] 15%|#5        | 4/26 [00:00<00:01, 16.77it/s] 31%|###       | 8/26 [00:00<00:00, 24.46it/s] 46%|####6     | 12/26 [00:00<00:00, 28.07it/s] 62%|######1   | 16/26 [00:00<00:00, 30.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.61it/s] 92%|#########2| 24/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 27.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.003 (0.228)	train_nll   0.47 (  0.35)	train_penalty   0.00 (  0.02)	weight_norm  22.36 ( 22.32)	train_acc   0.79 (  0.84)	train_minacc   0.73 (  0.35)	train_majacc   0.80 (  0.93)	train_corr   0.00 (  0.00)	l1 6.4387 (6.9237)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.39it/s] 23%|##3       | 6/26 [00:00<00:00, 28.56it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.56it/s] 42%|####2     | 11/26 [00:00<00:00, 32.51it/s] 62%|######1   | 16/26 [00:00<00:00, 37.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.50it/s] 81%|########  | 21/26 [00:00<00:00, 39.31it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]
Test: [   0/  26]	Loss 0.516 (0.516)	test_acc   0.73 (  0.73)	test_minacc   0.64 (  0.64)	test_majacc   0.75 (  0.75)	Loss_d 0.516 (0.516)	test_acc_d   0.73 (  0.73)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.53 (  0.53)
Test: [  10/  26]	Loss 0.468 (0.491)	test_acc   0.77 (  0.77)	test_minacc   0.68 (  0.66)	test_majacc   0.79 (  0.79)	Loss_d 0.468 (0.491)	test_acc_d   0.77 (  0.77)	test_minacc_d   0.68 (  0.66)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.57 (  0.55)
Test: [  20/  26]	Loss 0.488 (0.481)	test_acc   0.76 (  0.78)	test_minacc   0.74 (  0.67)	test_majacc   0.77 (  0.80)	Loss_d 0.488 (0.481)	test_acc_d   0.76 (  0.78)	test_minacc_d   0.74 (  0.67)	test_majacc_d   0.77 (  0.80)	test_corr_d   0.53 (  0.55)
Test: [  26/  26]	Loss 0.463 (0.480)	test_acc   0.79 (  0.78)	test_minacc   0.73 (  0.67)	test_majacc   0.80 (  0.80)	Loss_d 0.463 (0.480)	test_acc_d   0.79 (  0.78)	test_minacc_d   0.73 (  0.67)	test_majacc_d   0.80 (  0.80)	test_corr_d   0.53 (  0.55)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.42it/s]
Test: [  0/  1]	Loss 0.947 (0.947)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.89 (  0.89)	Loss_d 0.947 (0.947)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.32 (  0.32)
Test: [  1/  1]	Loss 0.947 (0.947)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.89 (  0.89)	Loss_d 0.947 (0.947)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.32 (  0.32)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/172/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0377 (0.0440)	validation_time 0.0004 (0.0012)	train_time 0.0373 (0.0425)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:00, 21.48it/s] 35%|###4      | 9/26 [00:00<00:00, 26.60it/s] 50%|#####     | 13/26 [00:00<00:00, 29.25it/s] 65%|######5   | 17/26 [00:00<00:00, 30.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.46it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.002 (0.003)	train_nll   0.62 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm  22.39 ( 22.38)	train_acc   0.60 (  0.63)	train_minacc   0.76 (  0.70)	train_majacc   0.57 (  0.62)	train_corr   0.00 (  0.00)	l1 5.1845 (5.6185)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 27%|##6       | 7/26 [00:00<00:00, 33.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.01it/s] 46%|####6     | 12/26 [00:00<00:00, 39.24it/s] 65%|######5   | 17/26 [00:00<00:00, 38.35it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.35it/s] 85%|########4 | 22/26 [00:00<00:00, 40.77it/s]100%|##########| 26/26 [00:00<00:00, 36.24it/s]
Test: [   0/  26]	Loss 0.635 (0.635)	test_acc   0.58 (  0.58)	test_minacc   0.73 (  0.73)	test_majacc   0.56 (  0.56)	Loss_d 0.635 (0.635)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.625 (0.632)	test_acc   0.58 (  0.59)	test_minacc   0.72 (  0.73)	test_majacc   0.56 (  0.57)	Loss_d 0.625 (0.632)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.34 (  0.30)
Test: [  20/  26]	Loss 0.631 (0.629)	test_acc   0.61 (  0.60)	test_minacc   0.77 (  0.75)	test_majacc   0.58 (  0.57)	Loss_d 0.631 (0.629)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.28 (  0.30)
Test: [  26/  26]	Loss 0.625 (0.628)	test_acc   0.61 (  0.60)	test_minacc   0.76 (  0.75)	test_majacc   0.58 (  0.57)	Loss_d 0.625 (0.628)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.29 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 0.717 (0.717)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.69 (  0.69)	Loss_d 0.717 (0.717)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.717 (0.717)	test_acc   0.57 (  0.57)	test_minacc   0.55 (  0.55)	test_majacc   0.69 (  0.69)	Loss_d 0.717 (0.717)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.19 (  0.19)
Overall Timing[  8/  1]	epoch_time 0.0418 (0.0438)	validation_time 0.0003 (0.0011)	train_time 0.0415 (0.0424)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5992000103592873, 0.5680000185966492)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 23.25it/s] 35%|###4      | 9/26 [00:00<00:00, 27.24it/s] 50%|#####     | 13/26 [00:00<00:00, 29.41it/s] 65%|######5   | 17/26 [00:00<00:00, 30.89it/s] 81%|########  | 21/26 [00:00<00:00, 31.76it/s] 96%|#########6| 25/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.56 (  0.56)	train_minacc   0.54 (  0.68)	train_majacc   0.57 (  0.54)	train_corr   0.00 (  0.00)	l1 5.0033 (5.0750)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 23%|##3       | 6/26 [00:00<00:00, 30.87it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.87it/s] 42%|####2     | 11/26 [00:00<00:00, 37.29it/s] 62%|######1   | 16/26 [00:00<00:00, 40.80it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.80it/s] 81%|########  | 21/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 43.22it/s]100%|##########| 26/26 [00:00<00:00, 36.01it/s]
Test: [   0/  26]	Loss 0.645 (0.645)	test_acc   0.62 (  0.62)	test_minacc   0.63 (  0.63)	test_majacc   0.62 (  0.62)	Loss_d 0.645 (0.645)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.648 (0.648)	test_acc   0.58 (  0.59)	test_minacc   0.57 (  0.59)	test_majacc   0.58 (  0.59)	Loss_d 0.648 (0.648)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.39 (  0.34)
Test: [  20/  26]	Loss 0.652 (0.647)	test_acc   0.57 (  0.59)	test_minacc   0.53 (  0.58)	test_majacc   0.58 (  0.59)	Loss_d 0.652 (0.647)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.30 (  0.34)
Test: [  26/  26]	Loss 0.649 (0.647)	test_acc   0.56 (  0.59)	test_minacc   0.51 (  0.57)	test_majacc   0.57 (  0.59)	Loss_d 0.649 (0.647)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.34 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.45it/s]
Test: [  0/  1]	Loss 0.745 (0.745)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.47)	test_majacc   0.69 (  0.69)	Loss_d 0.745 (0.745)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.745 (0.745)	test_acc   0.49 (  0.49)	test_minacc   0.47 (  0.47)	test_majacc   0.69 (  0.69)	Loss_d 0.745 (0.745)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.26 (  0.26)
Overall Timing[  9/  1]	epoch_time 0.0466 (0.0440)	validation_time 0.0005 (0.0010)	train_time 0.0461 (0.0428)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5889000124931335, 0.49000000953674316)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.18it/s] 12%|#1        | 3/26 [00:00<00:01, 14.12it/s] 27%|##6       | 7/26 [00:00<00:00, 23.77it/s] 42%|####2     | 11/26 [00:00<00:00, 28.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.39it/s] 88%|########8 | 23/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.55 (  0.58)	train_minacc   0.51 (  0.55)	train_majacc   0.56 (  0.58)	train_corr   0.00 (  0.00)	l1 4.9519 (4.9784)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 23%|##3       | 6/26 [00:00<00:00, 25.61it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.61it/s] 42%|####2     | 11/26 [00:00<00:00, 33.82it/s] 62%|######1   | 16/26 [00:00<00:00, 38.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.65it/s] 81%|########  | 21/26 [00:00<00:00, 38.01it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]100%|##########| 26/26 [00:00<00:00, 32.71it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.62 (  0.62)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.653 (0.653)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.656 (0.656)	test_acc   0.56 (  0.58)	test_minacc   0.57 (  0.60)	test_majacc   0.56 (  0.58)	Loss_d 0.656 (0.656)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.35 (  0.30)
Test: [  20/  26]	Loss 0.659 (0.655)	test_acc   0.55 (  0.58)	test_minacc   0.55 (  0.59)	test_majacc   0.55 (  0.58)	Loss_d 0.659 (0.655)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.55 (  0.58)	test_corr_d   0.26 (  0.30)
Test: [  26/  26]	Loss 0.657 (0.655)	test_acc   0.55 (  0.58)	test_minacc   0.51 (  0.58)	test_majacc   0.56 (  0.58)	Loss_d 0.657 (0.655)	test_acc_d   0.55 (  0.58)	test_minacc_d   0.51 (  0.58)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.30 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.730 (0.730)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.67 (  0.67)	Loss_d 0.730 (0.730)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.730 (0.730)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.67 (  0.67)	Loss_d 0.730 (0.730)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.22 (  0.22)
Overall Timing[ 10/  1]	epoch_time 0.0420 (0.0439)	validation_time 0.0004 (0.0010)	train_time 0.0416 (0.0427)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.57660001039505, 0.49900001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.66it/s] 19%|#9        | 5/26 [00:00<00:00, 21.53it/s] 35%|###4      | 9/26 [00:00<00:00, 27.05it/s] 46%|####6     | 12/26 [00:00<00:00, 27.22it/s] 62%|######1   | 16/26 [00:00<00:00, 29.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.64it/s] 92%|#########2| 24/26 [00:00<00:00, 31.55it/s]100%|##########| 26/26 [00:00<00:00, 26.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.55 (  0.57)	train_minacc   0.51 (  0.57)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 4.9162 (4.9370)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s]  8%|7         | 2/26 [00:00<00:02,  8.90it/s] 27%|##6       | 7/26 [00:00<00:00, 25.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.70it/s] 46%|####6     | 12/26 [00:00<00:00, 33.81it/s] 65%|######5   | 17/26 [00:00<00:00, 38.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.59it/s] 85%|########4 | 22/26 [00:00<00:00, 38.89it/s]100%|##########| 26/26 [00:00<00:00, 32.60it/s]
Test: [   0/  26]	Loss 0.657 (0.657)	test_acc   0.59 (  0.59)	test_minacc   0.61 (  0.61)	test_majacc   0.59 (  0.59)	Loss_d 0.657 (0.657)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.661 (0.660)	test_acc   0.55 (  0.57)	test_minacc   0.57 (  0.58)	test_majacc   0.55 (  0.57)	Loss_d 0.661 (0.660)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.57 (  0.58)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.35 (  0.30)
Test: [  20/  26]	Loss 0.663 (0.660)	test_acc   0.54 (  0.57)	test_minacc   0.49 (  0.57)	test_majacc   0.55 (  0.57)	Loss_d 0.663 (0.660)	test_acc_d   0.54 (  0.57)	test_minacc_d   0.49 (  0.57)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.26 (  0.30)
Test: [  26/  26]	Loss 0.661 (0.659)	test_acc   0.55 (  0.57)	test_minacc   0.51 (  0.56)	test_majacc   0.56 (  0.57)	Loss_d 0.661 (0.659)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.30 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.36it/s]
Test: [  0/  1]	Loss 0.729 (0.729)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.65 (  0.65)	Loss_d 0.729 (0.729)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.729 (0.729)	test_acc   0.50 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.65 (  0.65)	Loss_d 0.729 (0.729)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.23 (  0.23)
Overall Timing[ 11/  1]	epoch_time 0.0411 (0.0436)	validation_time 0.0004 (0.0009)	train_time 0.0406 (0.0425)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5681000111103058, 0.4960000216960907)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.03it/s] 12%|#1        | 3/26 [00:00<00:02, 10.74it/s] 27%|##6       | 7/26 [00:00<00:00, 19.71it/s] 42%|####2     | 11/26 [00:00<00:00, 24.65it/s] 58%|#####7    | 15/26 [00:00<00:00, 27.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.07it/s] 88%|########8 | 23/26 [00:00<00:00, 31.72it/s]100%|##########| 26/26 [00:01<00:00, 24.98it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.55 (  0.56)	train_minacc   0.51 (  0.54)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 4.8836 (4.9016)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.42it/s] 23%|##3       | 6/26 [00:00<00:00, 21.44it/s]                                               23%|##3       | 6/26 [00:00<00:00, 21.44it/s] 42%|####2     | 11/26 [00:00<00:00, 29.73it/s] 62%|######1   | 16/26 [00:00<00:00, 35.71it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.71it/s] 81%|########  | 21/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 30.34it/s]
Test: [   0/  26]	Loss 0.663 (0.663)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.663 (0.663)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.668 (0.667)	test_acc   0.54 (  0.56)	test_minacc   0.60 (  0.58)	test_majacc   0.54 (  0.56)	Loss_d 0.668 (0.667)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.32 (  0.27)
Test: [  20/  26]	Loss 0.670 (0.667)	test_acc   0.54 (  0.56)	test_minacc   0.51 (  0.56)	test_majacc   0.54 (  0.56)	Loss_d 0.670 (0.667)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.23 (  0.27)
Test: [  26/  26]	Loss 0.668 (0.666)	test_acc   0.54 (  0.56)	test_minacc   0.51 (  0.56)	test_majacc   0.55 (  0.56)	Loss_d 0.668 (0.666)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.27 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.89it/s]
Test: [  0/  1]	Loss 0.721 (0.721)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.61 (  0.61)	Loss_d 0.721 (0.721)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.721 (0.721)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.61 (  0.61)	Loss_d 0.721 (0.721)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.20 (  0.20)
Overall Timing[ 12/  1]	epoch_time 0.0394 (0.0433)	validation_time 0.0003 (0.0009)	train_time 0.0391 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5603000181317329, 0.4930000305175781)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.35it/s] 15%|#5        | 4/26 [00:00<00:01, 14.89it/s] 31%|###       | 8/26 [00:00<00:00, 23.09it/s] 46%|####6     | 12/26 [00:00<00:00, 27.48it/s] 62%|######1   | 16/26 [00:00<00:00, 30.14it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.76it/s] 92%|#########2| 24/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 26.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.53 (  0.55)	train_minacc   0.46 (  0.53)	train_majacc   0.55 (  0.56)	train_corr   0.00 (  0.00)	l1 4.8513 (4.8685)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 23%|##3       | 6/26 [00:00<00:00, 25.91it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.91it/s] 42%|####2     | 11/26 [00:00<00:00, 34.13it/s] 62%|######1   | 16/26 [00:00<00:00, 38.98it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.98it/s] 81%|########  | 21/26 [00:00<00:00, 38.28it/s]100%|##########| 26/26 [00:00<00:00, 41.29it/s]100%|##########| 26/26 [00:00<00:00, 33.20it/s]
Test: [   0/  26]	Loss 0.668 (0.668)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.668 (0.668)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.673 (0.671)	test_acc   0.54 (  0.56)	test_minacc   0.60 (  0.56)	test_majacc   0.53 (  0.55)	Loss_d 0.673 (0.671)	test_acc_d   0.54 (  0.56)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.31 (  0.25)
Test: [  20/  26]	Loss 0.674 (0.671)	test_acc   0.54 (  0.55)	test_minacc   0.51 (  0.55)	test_majacc   0.55 (  0.55)	Loss_d 0.674 (0.671)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.21 (  0.25)
Test: [  26/  26]	Loss 0.672 (0.670)	test_acc   0.54 (  0.55)	test_minacc   0.49 (  0.54)	test_majacc   0.55 (  0.56)	Loss_d 0.672 (0.670)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.26 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.07it/s]
Test: [  0/  1]	Loss 0.715 (0.715)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.60 (  0.60)	Loss_d 0.715 (0.715)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.715 (0.715)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.60 (  0.60)	Loss_d 0.715 (0.715)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.19 (  0.19)
Overall Timing[ 13/  1]	epoch_time 0.0427 (0.0433)	validation_time 0.0004 (0.0008)	train_time 0.0422 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5533000134825706, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.28it/s] 19%|#9        | 5/26 [00:00<00:01, 16.69it/s] 35%|###4      | 9/26 [00:00<00:00, 23.35it/s] 50%|#####     | 13/26 [00:00<00:00, 27.41it/s] 65%|######5   | 17/26 [00:00<00:00, 29.76it/s] 81%|########  | 21/26 [00:00<00:00, 31.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.76it/s]100%|##########| 26/26 [00:01<00:00, 25.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.53 (  0.55)	train_minacc   0.46 (  0.52)	train_majacc   0.54 (  0.55)	train_corr   0.00 (  0.00)	l1 4.8214 (4.8372)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.90it/s] 23%|##3       | 6/26 [00:00<00:00, 23.27it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.27it/s] 42%|####2     | 11/26 [00:00<00:00, 32.30it/s] 62%|######1   | 16/26 [00:00<00:00, 37.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.63it/s] 81%|########  | 21/26 [00:00<00:00, 36.84it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]100%|##########| 26/26 [00:00<00:00, 31.80it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.671 (0.671)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.677 (0.675)	test_acc   0.53 (  0.55)	test_minacc   0.57 (  0.55)	test_majacc   0.52 (  0.55)	Loss_d 0.677 (0.675)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.57 (  0.55)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.29 (  0.23)
Test: [  20/  26]	Loss 0.677 (0.675)	test_acc   0.54 (  0.54)	test_minacc   0.49 (  0.53)	test_majacc   0.54 (  0.55)	Loss_d 0.677 (0.675)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.19 (  0.23)
Test: [  26/  26]	Loss 0.676 (0.674)	test_acc   0.53 (  0.55)	test_minacc   0.46 (  0.52)	test_majacc   0.54 (  0.55)	Loss_d 0.676 (0.674)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.24 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.96it/s]
Test: [  0/  1]	Loss 0.710 (0.710)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.710 (0.710)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.710 (0.710)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.60 (  0.60)	Loss_d 0.710 (0.710)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.18 (  0.18)
Overall Timing[ 14/  1]	epoch_time 0.0456 (0.0434)	validation_time 0.0003 (0.0008)	train_time 0.0452 (0.0424)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5460000169873238, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 28.67it/s] 50%|#####     | 13/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 33.18it/s] 81%|########  | 21/26 [00:00<00:00, 34.16it/s] 96%|#########6| 25/26 [00:00<00:00, 35.01it/s]100%|##########| 26/26 [00:00<00:00, 29.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.54)	train_minacc   0.46 (  0.51)	train_majacc   0.53 (  0.55)	train_corr   0.00 (  0.00)	l1 4.7935 (4.8085)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.02it/s] 23%|##3       | 6/26 [00:00<00:01, 17.11it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.11it/s] 42%|####2     | 11/26 [00:00<00:00, 26.44it/s] 62%|######1   | 16/26 [00:00<00:00, 33.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 33.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.93it/s]100%|##########| 26/26 [00:00<00:00, 38.15it/s]100%|##########| 26/26 [00:00<00:00, 27.66it/s]
Test: [   0/  26]	Loss 0.674 (0.674)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.674 (0.674)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Test: [  10/  26]	Loss 0.680 (0.677)	test_acc   0.53 (  0.55)	test_minacc   0.55 (  0.54)	test_majacc   0.52 (  0.55)	Loss_d 0.680 (0.677)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.27 (  0.22)
Test: [  20/  26]	Loss 0.680 (0.678)	test_acc   0.53 (  0.54)	test_minacc   0.47 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.680 (0.678)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.47 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.18 (  0.22)
Test: [  26/  26]	Loss 0.679 (0.677)	test_acc   0.52 (  0.54)	test_minacc   0.46 (  0.51)	test_majacc   0.53 (  0.55)	Loss_d 0.679 (0.677)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.53 (  0.55)	test_corr_d   0.23 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.48it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.59 (  0.59)	Loss_d 0.707 (0.707)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.59 (  0.59)	Loss_d 0.707 (0.707)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.19 (  0.19)
Overall Timing[ 15/  1]	epoch_time 0.0428 (0.0434)	validation_time 0.0005 (0.0008)	train_time 0.0423 (0.0424)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5414000183343888, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.62it/s] 19%|#9        | 5/26 [00:00<00:01, 20.47it/s] 35%|###4      | 9/26 [00:00<00:00, 26.46it/s] 50%|#####     | 13/26 [00:00<00:00, 29.85it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 34.10it/s]100%|##########| 26/26 [00:00<00:00, 28.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.54)	train_minacc   0.44 (  0.50)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 4.7692 (4.7827)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 23%|##3       | 6/26 [00:00<00:00, 27.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.72it/s] 42%|####2     | 11/26 [00:00<00:00, 34.87it/s] 62%|######1   | 16/26 [00:00<00:00, 39.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.61it/s] 81%|########  | 21/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 34.12it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.677 (0.677)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.683 (0.680)	test_acc   0.53 (  0.54)	test_minacc   0.55 (  0.53)	test_majacc   0.52 (  0.54)	Loss_d 0.683 (0.680)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.26 (  0.21)
Test: [  20/  26]	Loss 0.682 (0.680)	test_acc   0.54 (  0.54)	test_minacc   0.43 (  0.51)	test_majacc   0.55 (  0.54)	Loss_d 0.682 (0.680)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.681 (0.679)	test_acc   0.52 (  0.54)	test_minacc   0.44 (  0.51)	test_majacc   0.53 (  0.54)	Loss_d 0.681 (0.679)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.51it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.58 (  0.58)	Loss_d 0.704 (0.704)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.58 (  0.58)	Loss_d 0.704 (0.704)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.20 (  0.20)
Overall Timing[ 16/  1]	epoch_time 0.0408 (0.0432)	validation_time 0.0004 (0.0008)	train_time 0.0404 (0.0423)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5390000112950802, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 23.46it/s] 35%|###4      | 9/26 [00:00<00:00, 28.72it/s] 50%|#####     | 13/26 [00:00<00:00, 30.47it/s] 65%|######5   | 17/26 [00:00<00:00, 32.09it/s] 81%|########  | 21/26 [00:00<00:00, 33.44it/s] 96%|#########6| 25/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.53)	train_minacc   0.44 (  0.50)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 4.7491 (4.7608)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.06it/s] 38%|###8      | 10/26 [00:00<00:00, 32.74it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.74it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.71it/s] 96%|#########6| 25/26 [00:00<00:00, 40.01it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
Test: [   0/  26]	Loss 0.679 (0.679)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.679 (0.679)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.685 (0.682)	test_acc   0.52 (  0.54)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.54)	Loss_d 0.685 (0.682)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.25 (  0.21)
Test: [  20/  26]	Loss 0.684 (0.682)	test_acc   0.53 (  0.53)	test_minacc   0.43 (  0.50)	test_majacc   0.55 (  0.54)	Loss_d 0.684 (0.682)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.18 (  0.21)
Test: [  26/  26]	Loss 0.683 (0.682)	test_acc   0.52 (  0.54)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.683 (0.682)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.57)	Loss_d 0.702 (0.702)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.57 (  0.57)	Loss_d 0.702 (0.702)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.22)
Overall Timing[ 17/  1]	epoch_time 0.0404 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0400 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5358000138103962, 0.492000013589859)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 12%|#1        | 3/26 [00:00<00:02, 10.54it/s] 27%|##6       | 7/26 [00:00<00:00, 20.10it/s] 42%|####2     | 11/26 [00:00<00:00, 25.34it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.62it/s] 88%|########8 | 23/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:01<00:00, 25.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.53)	train_minacc   0.44 (  0.50)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 4.7328 (4.7422)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 12%|#1        | 3/26 [00:00<00:02,  9.12it/s] 31%|###       | 8/26 [00:00<00:00, 22.04it/s]                                               31%|###       | 8/26 [00:00<00:00, 22.04it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 69%|######9   | 18/26 [00:00<00:00, 35.25it/s]                                                69%|######9   | 18/26 [00:00<00:00, 35.25it/s] 88%|########8 | 23/26 [00:00<00:00, 38.26it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
Test: [   0/  26]	Loss 0.681 (0.681)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.56 (  0.56)	Loss_d 0.681 (0.681)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.687 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.54)	Loss_d 0.687 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.54)	test_corr_d   0.22 (  0.20)
Test: [  20/  26]	Loss 0.685 (0.684)	test_acc   0.52 (  0.53)	test_minacc   0.42 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.685 (0.684)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.20)
Test: [  26/  26]	Loss 0.685 (0.684)	test_acc   0.52 (  0.54)	test_minacc   0.44 (  0.50)	test_majacc   0.53 (  0.54)	Loss_d 0.685 (0.684)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.53 (  0.54)	test_corr_d   0.22 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.49it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.700 (0.700)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.700 (0.700)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.24 (  0.24)
Overall Timing[ 18/  1]	epoch_time 0.0433 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0429 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5350000103712081, 0.4880000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.65it/s] 23%|##3       | 6/26 [00:00<00:00, 28.34it/s] 38%|###8      | 10/26 [00:00<00:00, 30.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.30it/s] 69%|######9   | 18/26 [00:00<00:00, 33.06it/s] 85%|########4 | 22/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 30.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.53)	train_minacc   0.44 (  0.50)	train_majacc   0.53 (  0.54)	train_corr   0.00 (  0.00)	l1 4.7206 (4.7277)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 23.03it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.03it/s] 42%|####2     | 11/26 [00:00<00:00, 34.42it/s] 65%|######5   | 17/26 [00:00<00:00, 41.68it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.68it/s] 85%|########4 | 22/26 [00:00<00:00, 43.12it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.683 (0.683)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.57 (  0.57)	Loss_d 0.683 (0.683)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.55 (  0.52)	test_majacc   0.51 (  0.55)	Loss_d 0.689 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.18 (  0.18)
Test: [  20/  26]	Loss 0.687 (0.686)	test_acc   0.52 (  0.53)	test_minacc   0.40 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.686)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.40 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.17 (  0.18)
Test: [  26/  26]	Loss 0.687 (0.686)	test_acc   0.52 (  0.54)	test_minacc   0.44 (  0.49)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.686)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.21 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.74it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.60 (  0.60)	Loss_d 0.699 (0.699)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.26 (  0.26)
Overall Timing[ 19/  1]	epoch_time 0.0412 (0.0430)	validation_time 0.0005 (0.0007)	train_time 0.0408 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.536800011843443, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.42it/s] 12%|#1        | 3/26 [00:00<00:03,  6.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.20it/s] 42%|####2     | 11/26 [00:00<00:00, 20.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 28.01it/s] 88%|########8 | 23/26 [00:01<00:00, 30.02it/s]100%|##########| 26/26 [00:01<00:00, 20.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.54)	train_minacc   0.46 (  0.50)	train_majacc   0.54 (  0.55)	train_corr   0.00 (  0.00)	l1 4.7124 (4.7169)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.90it/s] 23%|##3       | 6/26 [00:00<00:00, 29.57it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.57it/s] 42%|####2     | 11/26 [00:00<00:00, 36.55it/s] 62%|######1   | 16/26 [00:00<00:00, 41.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.28it/s] 81%|########  | 21/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 42.49it/s]100%|##########| 26/26 [00:00<00:00, 35.00it/s]
Test: [   0/  26]	Loss 0.685 (0.685)	test_acc   0.59 (  0.59)	test_minacc   0.56 (  0.56)	test_majacc   0.60 (  0.60)	Loss_d 0.685 (0.685)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.691 (0.688)	test_acc   0.53 (  0.56)	test_minacc   0.55 (  0.51)	test_majacc   0.52 (  0.56)	Loss_d 0.691 (0.688)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.52 (  0.56)	test_corr_d   0.13 (  0.16)
Test: [  20/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.55)	test_minacc   0.38 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.38 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.16)
Test: [  26/  26]	Loss 0.689 (0.687)	test_acc   0.54 (  0.55)	test_minacc   0.46 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.689 (0.687)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.33it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.63 (  0.63)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.63 (  0.63)	Loss_d 0.699 (0.699)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Overall Timing[ 20/  1]	epoch_time 0.0435 (0.0430)	validation_time 0.0003 (0.0007)	train_time 0.0431 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5511000124514103, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.19it/s] 12%|#1        | 3/26 [00:00<00:02, 10.67it/s] 27%|##6       | 7/26 [00:00<00:00, 20.17it/s] 42%|####2     | 11/26 [00:00<00:00, 25.00it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.53it/s] 88%|########8 | 23/26 [00:00<00:00, 32.33it/s]100%|##########| 26/26 [00:01<00:00, 25.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.56 (  0.55)	train_minacc   0.46 (  0.50)	train_majacc   0.58 (  0.56)	train_corr   0.00 (  0.00)	l1 4.7076 (4.7103)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.96it/s] 15%|#5        | 4/26 [00:00<00:01, 16.23it/s] 35%|###4      | 9/26 [00:00<00:00, 28.28it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.28it/s] 50%|#####     | 13/26 [00:00<00:00, 32.24it/s] 73%|#######3  | 19/26 [00:00<00:00, 40.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 40.07it/s] 92%|#########2| 24/26 [00:00<00:00, 40.05it/s]100%|##########| 26/26 [00:00<00:00, 32.26it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.60 (  0.60)	test_minacc   0.51 (  0.51)	test_majacc   0.62 (  0.62)	Loss_d 0.687 (0.687)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.692 (0.689)	test_acc   0.53 (  0.57)	test_minacc   0.51 (  0.49)	test_majacc   0.53 (  0.59)	Loss_d 0.692 (0.689)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.51 (  0.49)	test_majacc_d   0.53 (  0.59)	test_corr_d   0.09 (  0.13)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.56 (  0.57)	test_minacc   0.40 (  0.48)	test_majacc   0.58 (  0.58)	Loss_d 0.689 (0.689)	test_acc_d   0.56 (  0.57)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.16 (  0.13)
Test: [  26/  26]	Loss 0.690 (0.689)	test_acc   0.57 (  0.57)	test_minacc   0.46 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.690 (0.689)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.17 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.39it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.68 (  0.68)	Loss_d 0.699 (0.699)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.68 (  0.68)	Loss_d 0.699 (0.699)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.28 (  0.28)
Overall Timing[ 21/  1]	epoch_time 0.0413 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0409 (0.0421)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5707000093460083, 0.41600000858306885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 19%|#9        | 5/26 [00:00<00:01, 19.62it/s] 35%|###4      | 9/26 [00:00<00:00, 26.01it/s] 50%|#####     | 13/26 [00:00<00:00, 28.75it/s] 65%|######5   | 17/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 27.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.55 (  0.55)	train_minacc   0.46 (  0.50)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 4.7045 (4.7061)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.32it/s] 27%|##6       | 7/26 [00:00<00:00, 35.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.53it/s] 46%|####6     | 12/26 [00:00<00:00, 36.68it/s] 65%|######5   | 17/26 [00:00<00:00, 39.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.87it/s] 85%|########4 | 22/26 [00:00<00:00, 41.89it/s]100%|##########| 26/26 [00:00<00:00, 36.19it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.61 (  0.61)	test_minacc   0.51 (  0.51)	test_majacc   0.63 (  0.63)	Loss_d 0.688 (0.688)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.53 (  0.57)	test_minacc   0.49 (  0.48)	test_majacc   0.53 (  0.59)	Loss_d 0.693 (0.690)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.53 (  0.59)	test_corr_d   0.06 (  0.12)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.55 (  0.56)	test_minacc   0.36 (  0.46)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.55 (  0.56)	test_minacc_d   0.36 (  0.46)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.16 (  0.12)
Test: [  26/  26]	Loss 0.691 (0.690)	test_acc   0.55 (  0.57)	test_minacc   0.41 (  0.46)	test_majacc   0.57 (  0.59)	Loss_d 0.691 (0.690)	test_acc_d   0.55 (  0.57)	test_minacc_d   0.41 (  0.46)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.15 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.70it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.70 (  0.70)	Loss_d 0.699 (0.699)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.70 (  0.70)	Loss_d 0.699 (0.699)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.28 (  0.28)
Overall Timing[ 22/  1]	epoch_time 0.0436 (0.0430)	validation_time 0.0005 (0.0007)	train_time 0.0431 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5713000118732452, 0.39500001072883606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.15it/s] 23%|##3       | 6/26 [00:00<00:00, 22.48it/s] 38%|###8      | 10/26 [00:00<00:00, 27.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.37it/s] 69%|######9   | 18/26 [00:00<00:00, 32.82it/s] 85%|########4 | 22/26 [00:00<00:00, 34.50it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 4.703930854797363
set z to 4.468734312057495
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.53)	train_minacc   0.39 (  0.49)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 4.7016 (4.7030)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.02it/s] 31%|###       | 8/26 [00:00<00:00, 37.97it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.65it/s] 69%|######9   | 18/26 [00:00<00:00, 42.77it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.77it/s] 88%|########8 | 23/26 [00:00<00:00, 40.98it/s]100%|##########| 26/26 [00:00<00:00, 38.51it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.59 (  0.59)	test_minacc   0.49 (  0.49)	test_majacc   0.61 (  0.61)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.50 (  0.56)	test_minacc   0.53 (  0.46)	test_majacc   0.50 (  0.57)	Loss_d 0.693 (0.690)	test_acc_d   0.50 (  0.56)	test_minacc_d   0.53 (  0.46)	test_majacc_d   0.50 (  0.57)	test_corr_d   0.04 (  0.11)
Test: [  20/  26]	Loss 0.690 (0.691)	test_acc   0.53 (  0.55)	test_minacc   0.34 (  0.46)	test_majacc   0.56 (  0.57)	Loss_d 0.690 (0.691)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.34 (  0.46)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.15 (  0.11)
Test: [  26/  26]	Loss 0.692 (0.690)	test_acc   0.53 (  0.56)	test_minacc   0.39 (  0.46)	test_majacc   0.56 (  0.58)	Loss_d 0.692 (0.690)	test_acc_d   0.53 (  0.56)	test_minacc_d   0.39 (  0.46)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.15 (  0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.80it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.39 (  0.39)	test_minacc   0.36 (  0.36)	test_majacc   0.68 (  0.68)	Loss_d 0.699 (0.699)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.39 (  0.39)	test_minacc   0.36 (  0.36)	test_majacc   0.68 (  0.68)	Loss_d 0.699 (0.699)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.68 (  0.68)	test_corr_d   0.29 (  0.29)
Overall Timing[ 23/  1]	epoch_time 0.0423 (0.0429)	validation_time 0.0004 (0.0007)	train_time 0.0419 (0.0422)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5578000153303146, 0.3880000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 15%|#5        | 4/26 [00:00<00:01, 15.86it/s] 31%|###       | 8/26 [00:00<00:00, 23.71it/s] 46%|####6     | 12/26 [00:00<00:00, 28.22it/s] 62%|######1   | 16/26 [00:00<00:00, 30.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.38it/s] 92%|#########2| 24/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 27.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.51 (  0.53)	train_minacc   0.39 (  0.49)	train_majacc   0.53 (  0.53)	train_corr   0.00 (  0.00)	l1 4.6988 (4.7000)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.81it/s] 31%|###       | 8/26 [00:00<00:00, 37.95it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.95it/s] 50%|#####     | 13/26 [00:00<00:00, 41.11it/s] 69%|######9   | 18/26 [00:00<00:00, 42.04it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.04it/s] 88%|########8 | 23/26 [00:00<00:00, 43.21it/s]100%|##########| 26/26 [00:00<00:00, 37.78it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.59 (  0.59)	test_minacc   0.51 (  0.51)	test_majacc   0.60 (  0.60)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.50 (  0.55)	test_minacc   0.55 (  0.48)	test_majacc   0.50 (  0.56)	Loss_d 0.694 (0.691)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.50 (  0.56)	test_corr_d   0.02 (  0.10)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.34 (  0.46)	test_majacc   0.56 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.34 (  0.46)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.14 (  0.09)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.52 (  0.55)	test_minacc   0.37 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.691)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.37 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.14 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.62it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.39 (  0.39)	test_minacc   0.36 (  0.36)	test_majacc   0.69 (  0.69)	Loss_d 0.699 (0.699)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.39 (  0.39)	test_minacc   0.36 (  0.36)	test_majacc   0.69 (  0.69)	Loss_d 0.699 (0.699)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Overall Timing[ 24/  1]	epoch_time 0.0404 (0.0428)	validation_time 0.0004 (0.0007)	train_time 0.0400 (0.0421)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5471000135540962, 0.3890000283718109)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 19%|#9        | 5/26 [00:00<00:00, 24.16it/s] 35%|###4      | 9/26 [00:00<00:00, 29.78it/s] 50%|#####     | 13/26 [00:00<00:00, 32.20it/s] 65%|######5   | 17/26 [00:00<00:00, 33.85it/s] 81%|########  | 21/26 [00:00<00:00, 34.15it/s] 96%|#########6| 25/26 [00:00<00:00, 34.81it/s]100%|##########| 26/26 [00:00<00:00, 30.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.49 (  0.51)	train_minacc   0.41 (  0.49)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 4.6961 (4.6971)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 27%|##6       | 7/26 [00:00<00:00, 23.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 23.20it/s] 46%|####6     | 12/26 [00:00<00:00, 31.10it/s] 65%|######5   | 17/26 [00:00<00:00, 36.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.00it/s] 85%|########4 | 22/26 [00:00<00:00, 39.86it/s]100%|##########| 26/26 [00:00<00:00, 30.76it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.694 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.57 (  0.49)	test_majacc   0.49 (  0.54)	Loss_d 0.694 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.57 (  0.49)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.01 (  0.08)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.36 (  0.47)	test_majacc   0.55 (  0.54)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.36 (  0.47)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.12 (  0.08)
Test: [  26/  26]	Loss 0.692 (0.691)	test_acc   0.50 (  0.53)	test_minacc   0.39 (  0.47)	test_majacc   0.52 (  0.55)	Loss_d 0.692 (0.691)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.39 (  0.47)	test_majacc_d   0.52 (  0.55)	test_corr_d   0.13 (  0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.78it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.41 (  0.41)	test_minacc   0.37 (  0.37)	test_majacc   0.69 (  0.69)	Loss_d 0.699 (0.699)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.41 (  0.41)	test_minacc   0.37 (  0.37)	test_majacc   0.69 (  0.69)	Loss_d 0.699 (0.699)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Overall Timing[ 25/  1]	epoch_time 0.0388 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0385 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5349000130295753, 0.406000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.15it/s] 19%|#9        | 5/26 [00:00<00:00, 22.68it/s] 35%|###4      | 9/26 [00:00<00:00, 28.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.95it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.49 (  0.51)	train_minacc   0.44 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 4.6938 (4.6946)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 19%|#9        | 5/26 [00:00<00:00, 25.05it/s] 38%|###8      | 10/26 [00:00<00:00, 34.46it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.46it/s] 58%|#####7    | 15/26 [00:00<00:00, 39.46it/s] 77%|#######6  | 20/26 [00:00<00:00, 38.07it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 38.07it/s] 96%|#########6| 25/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 34.24it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.57)	test_minacc   0.53 (  0.53)	test_majacc   0.58 (  0.58)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.50)	test_majacc   0.47 (  0.53)	Loss_d 0.694 (0.692)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.47 (  0.53)	test_corr_d   0.00 (  0.07)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.40 (  0.48)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.40 (  0.48)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.10 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.44 (  0.48)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.51 (  0.53)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.38 (  0.38)	test_majacc   0.69 (  0.69)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.38 (  0.38)	test_majacc   0.69 (  0.69)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.30 (  0.30)
Overall Timing[ 26/  1]	epoch_time 0.0439 (0.0427)	validation_time 0.0007 (0.0006)	train_time 0.0432 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5221000079810619, 0.4150000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.51it/s] 19%|#9        | 5/26 [00:00<00:01, 17.22it/s] 35%|###4      | 9/26 [00:00<00:00, 24.10it/s] 50%|#####     | 13/26 [00:00<00:00, 28.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.23it/s] 81%|########  | 21/26 [00:00<00:00, 31.77it/s] 96%|#########6| 25/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 26.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.50 (  0.50)	train_minacc   0.46 (  0.51)	train_majacc   0.51 (  0.50)	train_corr   0.00 (  0.00)	l1 4.6918 (4.6924)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:00, 22.50it/s] 38%|###8      | 10/26 [00:00<00:00, 30.23it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 40.16it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 40.16it/s] 96%|#########6| 25/26 [00:00<00:00, 41.54it/s]100%|##########| 26/26 [00:00<00:00, 33.57it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.55 (  0.55)	test_minacc   0.53 (  0.53)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.44 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.44 (  0.51)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.08 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.44 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.44 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.94it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.66 (  0.66)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.66 (  0.66)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.66 (  0.66)	test_corr_d   0.29 (  0.29)
Overall Timing[ 27/  1]	epoch_time 0.0376 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0418)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.5093000104427338, 0.4190000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.73it/s] 15%|#5        | 4/26 [00:00<00:01, 11.66it/s] 31%|###       | 8/26 [00:00<00:00, 19.49it/s] 46%|####6     | 12/26 [00:00<00:00, 24.29it/s] 62%|######1   | 16/26 [00:00<00:00, 28.08it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.69it/s] 92%|#########2| 24/26 [00:00<00:00, 32.54it/s]100%|##########| 26/26 [00:01<00:00, 24.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.50 (  0.49)	train_minacc   0.46 (  0.51)	train_majacc   0.50 (  0.49)	train_corr   0.00 (  0.00)	l1 4.6901 (4.6906)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 23%|##3       | 6/26 [00:00<00:00, 28.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.34it/s] 42%|####2     | 11/26 [00:00<00:00, 36.73it/s] 62%|######1   | 16/26 [00:00<00:00, 39.70it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.70it/s] 81%|########  | 21/26 [00:00<00:00, 38.81it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 34.50it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.45 (  0.50)	test_minacc   0.57 (  0.52)	test_majacc   0.43 (  0.49)	Loss_d 0.694 (0.692)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.43 (  0.49)	test_corr_d  -0.02 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.43 (  0.51)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.43 (  0.51)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.06 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.51)	test_majacc   0.50 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.51)	test_majacc_d   0.50 (  0.49)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.29it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.65 (  0.65)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.29 (  0.29)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.42 (  0.42)	test_minacc   0.39 (  0.39)	test_majacc   0.65 (  0.65)	Loss_d 0.698 (0.698)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.29 (  0.29)
Overall Timing[ 28/  1]	epoch_time 0.0436 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0432 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4972000100016594, 0.4190000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 12%|#1        | 3/26 [00:00<00:01, 12.83it/s] 27%|##6       | 7/26 [00:00<00:00, 23.21it/s] 42%|####2     | 11/26 [00:00<00:00, 28.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.14it/s] 88%|########8 | 23/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 28.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.50 (  0.49)	train_minacc   0.46 (  0.51)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 4.6885 (4.6890)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.55it/s] 31%|###       | 8/26 [00:00<00:00, 33.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.80it/s] 50%|#####     | 13/26 [00:00<00:00, 38.68it/s] 69%|######9   | 18/26 [00:00<00:00, 42.24it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.24it/s] 88%|########8 | 23/26 [00:00<00:00, 39.82it/s]100%|##########| 26/26 [00:00<00:00, 36.39it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.57 (  0.53)	test_majacc   0.41 (  0.48)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.41 (  0.48)	test_corr_d  -0.03 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.45 (  0.52)	test_majacc   0.48 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.48 (  0.47)	test_corr_d   0.04 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.49 (  0.52)	test_majacc   0.51 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.51 (  0.48)	test_corr_d   0.08 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.40 (  0.40)	test_majacc   0.65 (  0.65)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.28 (  0.28)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.40 (  0.40)	test_majacc   0.65 (  0.65)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.28 (  0.28)
Overall Timing[ 29/  1]	epoch_time 0.0399 (0.0425)	validation_time 0.0006 (0.0006)	train_time 0.0392 (0.0418)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4870000058412552, 0.42600002884864807)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 15%|#5        | 4/26 [00:00<00:01, 15.16it/s] 31%|###       | 8/26 [00:00<00:00, 22.66it/s] 46%|####6     | 12/26 [00:00<00:00, 25.62it/s] 62%|######1   | 16/26 [00:00<00:00, 28.02it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.17it/s] 92%|#########2| 24/26 [00:00<00:00, 31.77it/s]100%|##########| 26/26 [00:01<00:00, 25.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.48)	train_minacc   0.49 (  0.52)	train_majacc   0.52 (  0.48)	train_corr   0.00 (  0.00)	l1 4.6871 (4.6875)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.97it/s] 15%|#5        | 4/26 [00:00<00:01, 18.57it/s] 35%|###4      | 9/26 [00:00<00:00, 30.63it/s]                                               35%|###4      | 9/26 [00:00<00:00, 30.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 37.72it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 37.72it/s] 92%|#########2| 24/26 [00:00<00:00, 40.89it/s]100%|##########| 26/26 [00:00<00:00, 34.01it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.48)	test_minacc   0.57 (  0.54)	test_majacc   0.41 (  0.47)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.48)	test_minacc_d   0.57 (  0.54)	test_majacc_d   0.41 (  0.47)	test_corr_d  -0.04 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.47)	test_minacc   0.47 (  0.53)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.48)	test_minacc   0.51 (  0.53)	test_majacc   0.52 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.48)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.52 (  0.47)	test_corr_d   0.07 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.89it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.63 (  0.63)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.63 (  0.63)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Overall Timing[ 30/  1]	epoch_time 0.0408 (0.0424)	validation_time 0.0004 (0.0006)	train_time 0.0404 (0.0417)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4778000044822693, 0.4320000112056732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 19%|#9        | 5/26 [00:00<00:00, 24.03it/s] 35%|###4      | 9/26 [00:00<00:00, 28.66it/s] 50%|#####     | 13/26 [00:00<00:00, 30.78it/s] 65%|######5   | 17/26 [00:00<00:00, 32.62it/s] 81%|########  | 21/26 [00:00<00:00, 33.99it/s] 96%|#########6| 25/26 [00:00<00:00, 35.01it/s]100%|##########| 26/26 [00:00<00:00, 30.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.52 (  0.48)	train_minacc   0.54 (  0.53)	train_majacc   0.52 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6859 (4.6862)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.44it/s] 23%|##3       | 6/26 [00:00<00:00, 25.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.20it/s] 42%|####2     | 11/26 [00:00<00:00, 34.63it/s] 65%|######5   | 17/26 [00:00<00:00, 42.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.25it/s] 85%|########4 | 22/26 [00:00<00:00, 42.98it/s]100%|##########| 26/26 [00:00<00:00, 36.06it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.695 (0.693)	test_acc   0.42 (  0.47)	test_minacc   0.60 (  0.56)	test_majacc   0.40 (  0.45)	Loss_d 0.695 (0.693)	test_acc_d   0.42 (  0.47)	test_minacc_d   0.60 (  0.56)	test_majacc_d   0.40 (  0.45)	test_corr_d  -0.05 ( -0.02)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.49 (  0.55)	test_majacc   0.46 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.46 (  0.45)	test_corr_d  -0.01 ( -0.03)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.51 (  0.47)	test_minacc   0.54 (  0.55)	test_majacc   0.51 (  0.45)	Loss_d 0.693 (0.694)	test_acc_d   0.51 (  0.47)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.51 (  0.45)	test_corr_d   0.06 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.26 (  0.26)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.44 (  0.44)	test_minacc   0.42 (  0.42)	test_majacc   0.61 (  0.61)	Loss_d 0.697 (0.697)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.26 (  0.26)
Overall Timing[ 31/  1]	epoch_time 0.0419 (0.0424)	validation_time 0.0004 (0.0006)	train_time 0.0414 (0.0417)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.46660000610351565, 0.43800002336502075)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 15%|#5        | 4/26 [00:00<00:01, 17.92it/s] 31%|###       | 8/26 [00:00<00:00, 25.82it/s] 46%|####6     | 12/26 [00:00<00:00, 29.38it/s] 62%|######1   | 16/26 [00:00<00:00, 31.09it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.03it/s] 92%|#########2| 24/26 [00:00<00:00, 32.40it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.51 (  0.48)	train_minacc   0.51 (  0.53)	train_majacc   0.51 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6847 (4.6850)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 12%|#1        | 3/26 [00:00<00:02, 10.93it/s] 35%|###4      | 9/26 [00:00<00:00, 27.95it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 39.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 39.19it/s] 92%|#########2| 24/26 [00:00<00:00, 38.54it/s]100%|##########| 26/26 [00:00<00:00, 30.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.41 (  0.46)	test_minacc   0.60 (  0.57)	test_majacc   0.38 (  0.44)	Loss_d 0.695 (0.694)	test_acc_d   0.41 (  0.46)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.38 (  0.44)	test_corr_d  -0.07 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.45)	test_minacc   0.49 (  0.55)	test_majacc   0.45 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.45)	test_minacc_d   0.49 (  0.55)	test_majacc_d   0.45 (  0.44)	test_corr_d  -0.03 ( -0.05)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.46)	test_minacc   0.51 (  0.55)	test_majacc   0.47 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.46)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.47 (  0.44)	test_corr_d   0.04 ( -0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.44 (  0.44)	test_minacc   0.43 (  0.43)	test_majacc   0.59 (  0.59)	Loss_d 0.696 (0.696)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.25 (  0.25)
Overall Timing[ 32/  1]	epoch_time 0.0439 (0.0425)	validation_time 0.0003 (0.0006)	train_time 0.0436 (0.0418)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.45830000525712966, 0.4440000355243683)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.25it/s] 15%|#5        | 4/26 [00:00<00:01, 16.50it/s] 31%|###       | 8/26 [00:00<00:00, 23.33it/s] 46%|####6     | 12/26 [00:00<00:00, 28.14it/s] 62%|######1   | 16/26 [00:00<00:00, 30.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.64it/s] 92%|#########2| 24/26 [00:00<00:00, 32.61it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.49 (  0.48)	train_minacc   0.51 (  0.53)	train_majacc   0.49 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6835 (4.6838)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.79it/s] 27%|##6       | 7/26 [00:00<00:00, 35.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.53it/s] 46%|####6     | 12/26 [00:00<00:00, 40.50it/s] 65%|######5   | 17/26 [00:00<00:00, 38.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.89it/s] 85%|########4 | 22/26 [00:00<00:00, 41.04it/s]100%|##########| 26/26 [00:00<00:00, 36.76it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.41 (  0.46)	test_minacc   0.62 (  0.57)	test_majacc   0.38 (  0.44)	Loss_d 0.695 (0.694)	test_acc_d   0.41 (  0.46)	test_minacc_d   0.62 (  0.57)	test_majacc_d   0.38 (  0.44)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.45 (  0.45)	test_minacc   0.49 (  0.56)	test_majacc   0.45 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.45 (  0.43)	test_corr_d  -0.05 ( -0.06)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.45)	test_minacc   0.51 (  0.55)	test_majacc   0.47 (  0.43)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.45)	test_minacc_d   0.51 (  0.55)	test_majacc_d   0.47 (  0.43)	test_corr_d   0.03 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.69it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.24 (  0.24)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.24 (  0.24)
Overall Timing[ 33/  1]	epoch_time 0.0432 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0428 (0.0418)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4499000055491924, 0.45500001311302185)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.37it/s] 19%|#9        | 5/26 [00:00<00:01, 17.00it/s] 35%|###4      | 9/26 [00:00<00:00, 24.31it/s] 50%|#####     | 13/26 [00:00<00:00, 28.79it/s] 65%|######5   | 17/26 [00:00<00:00, 32.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.65it/s] 96%|#########6| 25/26 [00:00<00:00, 33.27it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6822 (4.6825)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 15%|#5        | 4/26 [00:00<00:01, 17.39it/s] 35%|###4      | 9/26 [00:00<00:00, 29.48it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 35.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.23it/s] 92%|#########2| 24/26 [00:00<00:00, 40.21it/s]100%|##########| 26/26 [00:00<00:00, 32.75it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.41 (  0.45)	test_minacc   0.57 (  0.57)	test_majacc   0.38 (  0.43)	Loss_d 0.695 (0.694)	test_acc_d   0.41 (  0.45)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.38 (  0.43)	test_corr_d  -0.09 ( -0.07)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.56)	test_majacc   0.44 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.44 (  0.42)	test_corr_d  -0.06 ( -0.07)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.44)	test_minacc   0.51 (  0.56)	test_majacc   0.46 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.46 (  0.42)	test_corr_d   0.02 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.19it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.23)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.44 (  0.44)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.23)
Overall Timing[ 34/  1]	epoch_time 0.0445 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.44270000398159026, 0.4570000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  8.60it/s] 23%|##3       | 6/26 [00:00<00:01, 19.55it/s] 38%|###8      | 10/26 [00:00<00:00, 25.51it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.96it/s] 69%|######9   | 18/26 [00:00<00:00, 31.19it/s] 85%|########4 | 22/26 [00:00<00:00, 32.80it/s]100%|##########| 26/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6808 (4.6811)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 27%|##6       | 7/26 [00:00<00:00, 29.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.68it/s] 46%|####6     | 12/26 [00:00<00:00, 37.02it/s] 65%|######5   | 17/26 [00:00<00:00, 38.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.69it/s] 85%|########4 | 22/26 [00:00<00:00, 41.23it/s]100%|##########| 26/26 [00:00<00:00, 35.26it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.40 (  0.44)	test_minacc   0.60 (  0.57)	test_majacc   0.37 (  0.42)	Loss_d 0.695 (0.694)	test_acc_d   0.40 (  0.44)	test_minacc_d   0.60 (  0.57)	test_majacc_d   0.37 (  0.42)	test_corr_d  -0.10 ( -0.08)
Test: [  20/  26]	Loss 0.694 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.49 (  0.56)	test_majacc   0.43 (  0.41)	Loss_d 0.694 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.49 (  0.56)	test_majacc_d   0.43 (  0.41)	test_corr_d  -0.07 ( -0.08)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.44)	test_minacc   0.51 (  0.56)	test_majacc   0.46 (  0.42)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.44)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.46 (  0.42)	test_corr_d   0.01 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.23it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.46 (  0.46)	test_minacc   0.45 (  0.45)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.22)
Overall Timing[ 35/  1]	epoch_time 0.0432 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.43790000426769254, 0.4610000252723694)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.90it/s] 19%|#9        | 5/26 [00:00<00:00, 25.88it/s] 35%|###4      | 9/26 [00:00<00:00, 30.61it/s] 50%|#####     | 13/26 [00:00<00:00, 32.82it/s] 65%|######5   | 17/26 [00:00<00:00, 33.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.81it/s] 96%|#########6| 25/26 [00:00<00:00, 34.52it/s]100%|##########| 26/26 [00:00<00:00, 30.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6794 (4.6797)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.34it/s] 23%|##3       | 6/26 [00:00<00:00, 22.88it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.88it/s] 42%|####2     | 11/26 [00:00<00:00, 31.68it/s] 62%|######1   | 16/26 [00:00<00:00, 36.95it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.95it/s] 81%|########  | 21/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 41.46it/s]100%|##########| 26/26 [00:00<00:00, 32.44it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.39 (  0.44)	test_minacc   0.60 (  0.58)	test_majacc   0.37 (  0.42)	Loss_d 0.695 (0.694)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.60 (  0.58)	test_majacc_d   0.37 (  0.42)	test_corr_d  -0.10 ( -0.08)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.43)	test_minacc   0.49 (  0.57)	test_majacc   0.43 (  0.41)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.49 (  0.57)	test_majacc_d   0.43 (  0.41)	test_corr_d  -0.08 ( -0.09)
Test: [  26/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.43)	test_minacc   0.51 (  0.56)	test_majacc   0.45 (  0.41)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.51 (  0.56)	test_majacc_d   0.45 (  0.41)	test_corr_d   0.01 ( -0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.96it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.45 (  0.45)	test_majacc   0.57 (  0.57)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.21)
Overall Timing[ 36/  1]	epoch_time 0.0435 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0431 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4334000043272972, 0.4660000205039978)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:12,  2.05it/s] 19%|#9        | 5/26 [00:00<00:02, 10.46it/s] 35%|###4      | 9/26 [00:00<00:00, 17.36it/s] 50%|#####     | 13/26 [00:00<00:00, 22.48it/s] 65%|######5   | 17/26 [00:00<00:00, 26.55it/s] 81%|########  | 21/26 [00:01<00:00, 29.51it/s] 96%|#########6| 25/26 [00:01<00:00, 31.69it/s]100%|##########| 26/26 [00:01<00:00, 21.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6779 (4.6782)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.37it/s] 27%|##6       | 7/26 [00:00<00:00, 30.72it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.72it/s] 46%|####6     | 12/26 [00:00<00:00, 35.56it/s] 65%|######5   | 17/26 [00:00<00:00, 39.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.40it/s] 85%|########4 | 22/26 [00:00<00:00, 42.25it/s]100%|##########| 26/26 [00:00<00:00, 34.84it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.07 ( -0.07)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.39 (  0.44)	test_minacc   0.60 (  0.59)	test_majacc   0.36 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.39 (  0.44)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.36 (  0.41)	test_corr_d  -0.11 ( -0.09)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.49 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.49 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d  -0.08 ( -0.10)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.51 (  0.57)	test_majacc   0.45 (  0.41)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.45 (  0.41)	test_corr_d   0.00 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.94it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.57 (  0.57)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.21)
Overall Timing[ 37/  1]	epoch_time 0.0466 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0462 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4333000041246414, 0.46800002455711365)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.23it/s] 19%|#9        | 5/26 [00:00<00:01, 14.28it/s] 35%|###4      | 9/26 [00:00<00:00, 21.17it/s] 50%|#####     | 13/26 [00:00<00:00, 25.81it/s] 65%|######5   | 17/26 [00:00<00:00, 29.03it/s] 81%|########  | 21/26 [00:00<00:00, 31.42it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:01<00:00, 24.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.51 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6763 (4.6767)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.29it/s] 15%|#5        | 4/26 [00:00<00:01, 17.32it/s] 31%|###       | 8/26 [00:00<00:00, 26.24it/s]                                               31%|###       | 8/26 [00:00<00:00, 26.24it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.68it/s]                                                54%|#####3    | 14/26 [00:00<00:00, 37.68it/s] 81%|########  | 21/26 [00:00<00:00, 47.06it/s]100%|##########| 26/26 [00:00<00:00, 36.47it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.54 (  0.54)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.38 (  0.44)	test_minacc   0.60 (  0.59)	test_majacc   0.36 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.38 (  0.44)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.36 (  0.41)	test_corr_d  -0.11 ( -0.09)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.51 (  0.58)	test_majacc   0.42 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.51 (  0.58)	test_majacc_d   0.42 (  0.40)	test_corr_d  -0.09 ( -0.10)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.51 (  0.57)	test_majacc   0.44 (  0.41)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.44 (  0.41)	test_corr_d  -0.00 ( -0.09)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.91it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Overall Timing[ 38/  1]	epoch_time 0.0417 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0412 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4316000047624111, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s] 12%|#1        | 3/26 [00:00<00:02, 10.71it/s] 27%|##6       | 7/26 [00:00<00:00, 20.13it/s] 42%|####2     | 11/26 [00:00<00:00, 25.44it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.96it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.32it/s] 88%|########8 | 23/26 [00:00<00:00, 31.43it/s]100%|##########| 26/26 [00:01<00:00, 25.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6748 (4.6752)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.41it/s] 27%|##6       | 7/26 [00:00<00:00, 28.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.19it/s] 46%|####6     | 12/26 [00:00<00:00, 34.84it/s] 65%|######5   | 17/26 [00:00<00:00, 39.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.90it/s] 85%|########4 | 22/26 [00:00<00:00, 38.11it/s]100%|##########| 26/26 [00:00<00:00, 34.36it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.38 (  0.44)	test_minacc   0.57 (  0.59)	test_majacc   0.36 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.38 (  0.44)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.36 (  0.41)	test_corr_d  -0.12 ( -0.10)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.58)	test_majacc   0.42 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.42 (  0.40)	test_corr_d  -0.09 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.51 (  0.57)	test_majacc   0.44 (  0.40)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.44 (  0.40)	test_corr_d  -0.01 ( -0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.12it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.56 (  0.56)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.20 (  0.20)
Overall Timing[ 39/  1]	epoch_time 0.0440 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0437 (0.0421)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4290000049173832, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.70it/s] 19%|#9        | 5/26 [00:00<00:01, 18.21it/s] 35%|###4      | 9/26 [00:00<00:00, 25.26it/s] 50%|#####     | 13/26 [00:00<00:00, 29.39it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 33.18it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 27.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.46 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6731 (4.6736)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 23%|##3       | 6/26 [00:00<00:00, 26.70it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.70it/s] 42%|####2     | 11/26 [00:00<00:00, 34.57it/s] 62%|######1   | 16/26 [00:00<00:00, 38.17it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.17it/s] 81%|########  | 21/26 [00:00<00:00, 37.75it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.47 (  0.47)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.695 (0.694)	test_acc   0.38 (  0.43)	test_minacc   0.57 (  0.59)	test_majacc   0.36 (  0.41)	Loss_d 0.695 (0.694)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.36 (  0.41)	test_corr_d  -0.12 ( -0.10)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.58)	test_majacc   0.42 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.42 (  0.40)	test_corr_d  -0.10 ( -0.11)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.54 (  0.57)	test_majacc   0.44 (  0.40)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.44 (  0.40)	test_corr_d  -0.01 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.19)
Overall Timing[ 40/  1]	epoch_time 0.0398 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.42750000500679014, 0.4700000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.95it/s] 12%|#1        | 3/26 [00:00<00:01, 13.85it/s] 27%|##6       | 7/26 [00:00<00:00, 23.13it/s] 42%|####2     | 11/26 [00:00<00:00, 27.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.58it/s] 88%|########8 | 23/26 [00:00<00:00, 33.17it/s]100%|##########| 26/26 [00:00<00:00, 27.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.48 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6715 (4.6720)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.21it/s] 27%|##6       | 7/26 [00:00<00:00, 30.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.79it/s] 46%|####6     | 12/26 [00:00<00:00, 37.18it/s] 65%|######5   | 17/26 [00:00<00:00, 40.25it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.25it/s] 85%|########4 | 22/26 [00:00<00:00, 39.02it/s]100%|##########| 26/26 [00:00<00:00, 36.27it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.54 (  0.54)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.09 ( -0.09)
Test: [  10/  26]	Loss 0.695 (0.695)	test_acc   0.38 (  0.43)	test_minacc   0.57 (  0.59)	test_majacc   0.35 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.35 (  0.40)	test_corr_d  -0.13 ( -0.11)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.53 (  0.58)	test_majacc   0.41 (  0.40)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.41 (  0.40)	test_corr_d  -0.10 ( -0.12)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.44 (  0.40)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.44 (  0.40)	test_corr_d  -0.02 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.49it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.18 (  0.18)
Overall Timing[ 41/  1]	epoch_time 0.0404 (0.0426)	validation_time 0.0003 (0.0006)	train_time 0.0401 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.42580000510811805, 0.4690000116825104)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.59it/s] 19%|#9        | 5/26 [00:00<00:00, 23.54it/s] 35%|###4      | 9/26 [00:00<00:00, 29.33it/s] 50%|#####     | 13/26 [00:00<00:00, 32.31it/s] 65%|######5   | 17/26 [00:00<00:00, 34.08it/s] 81%|########  | 21/26 [00:00<00:00, 35.14it/s] 96%|#########6| 25/26 [00:00<00:00, 35.85it/s]100%|##########| 26/26 [00:00<00:00, 30.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6698 (4.6703)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 27%|##6       | 7/26 [00:00<00:00, 32.58it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.58it/s] 46%|####6     | 12/26 [00:00<00:00, 38.42it/s] 65%|######5   | 17/26 [00:00<00:00, 38.00it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.00it/s] 85%|########4 | 22/26 [00:00<00:00, 40.49it/s]100%|##########| 26/26 [00:00<00:00, 34.86it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.54 (  0.54)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.10 ( -0.10)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.38 (  0.43)	test_minacc   0.57 (  0.59)	test_majacc   0.35 (  0.40)	Loss_d 0.696 (0.695)	test_acc_d   0.38 (  0.43)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.35 (  0.40)	test_corr_d  -0.14 ( -0.12)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.53 (  0.58)	test_majacc   0.42 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.11 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.45 (  0.40)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.45 (  0.40)	test_corr_d  -0.02 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.58it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Overall Timing[ 42/  1]	epoch_time 0.0422 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0419)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4252000048160553, 0.47200003266334534)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:00, 22.65it/s] 35%|###4      | 9/26 [00:00<00:00, 28.63it/s] 50%|#####     | 13/26 [00:00<00:00, 31.69it/s] 65%|######5   | 17/26 [00:00<00:00, 33.60it/s] 81%|########  | 21/26 [00:00<00:00, 34.97it/s] 96%|#########6| 25/26 [00:00<00:00, 35.85it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6680 (4.6686)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.62it/s] 23%|##3       | 6/26 [00:00<00:00, 32.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.11it/s] 42%|####2     | 11/26 [00:00<00:00, 38.22it/s] 62%|######1   | 16/26 [00:00<00:00, 39.16it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.16it/s] 81%|########  | 21/26 [00:00<00:00, 42.06it/s]100%|##########| 26/26 [00:00<00:00, 36.63it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.56)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.11 ( -0.11)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.37 (  0.43)	test_minacc   0.57 (  0.59)	test_majacc   0.35 (  0.40)	Loss_d 0.696 (0.695)	test_acc_d   0.37 (  0.43)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.35 (  0.40)	test_corr_d  -0.15 ( -0.13)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.53 (  0.58)	test_majacc   0.41 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.12 ( -0.13)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.46 (  0.42)	test_minacc   0.54 (  0.58)	test_majacc   0.44 (  0.40)	Loss_d 0.694 (0.695)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.44 (  0.40)	test_corr_d  -0.03 ( -0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.00it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.17 (  0.17)
Overall Timing[ 43/  1]	epoch_time 0.0432 (0.0426)	validation_time 0.0004 (0.0006)	train_time 0.0427 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4241000046730041, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.22it/s] 23%|##3       | 6/26 [00:00<00:00, 28.45it/s] 38%|###8      | 10/26 [00:00<00:00, 32.15it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.07it/s] 69%|######9   | 18/26 [00:00<00:00, 32.54it/s] 85%|########4 | 22/26 [00:00<00:00, 32.60it/s]100%|##########| 26/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.46 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6661 (4.6668)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 19%|#9        | 5/26 [00:00<00:01, 20.63it/s] 38%|###8      | 10/26 [00:00<00:00, 31.09it/s]                                                38%|###8      | 10/26 [00:00<00:00, 31.09it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 35.95it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 35.95it/s] 96%|#########6| 25/26 [00:00<00:00, 39.24it/s]100%|##########| 26/26 [00:00<00:00, 32.06it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.694 (0.694)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.37 (  0.43)	test_minacc   0.57 (  0.60)	test_majacc   0.35 (  0.40)	Loss_d 0.696 (0.695)	test_acc_d   0.37 (  0.43)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.35 (  0.40)	test_corr_d  -0.16 ( -0.14)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.53 (  0.59)	test_majacc   0.41 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.53 (  0.59)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.13 ( -0.14)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.42)	test_minacc   0.54 (  0.58)	test_majacc   0.44 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.42)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.44 (  0.39)	test_corr_d  -0.04 ( -0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.74it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.15 (  0.15)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.15 (  0.15)
Overall Timing[ 44/  1]	epoch_time 0.0443 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0438 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.4222000053226948, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.28it/s] 50%|#####     | 13/26 [00:00<00:00, 31.42it/s] 65%|######5   | 17/26 [00:00<00:00, 33.31it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 35.79it/s]100%|##########| 26/26 [00:00<00:00, 29.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.47)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6642 (4.6649)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.41it/s] 27%|##6       | 7/26 [00:00<00:00, 33.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.61it/s] 46%|####6     | 12/26 [00:00<00:00, 38.34it/s] 65%|######5   | 17/26 [00:00<00:00, 40.43it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.43it/s] 85%|########4 | 22/26 [00:00<00:00, 41.27it/s]100%|##########| 26/26 [00:00<00:00, 37.24it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.36 (  0.42)	test_minacc   0.55 (  0.60)	test_majacc   0.34 (  0.39)	Loss_d 0.696 (0.695)	test_acc_d   0.36 (  0.42)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.34 (  0.39)	test_corr_d  -0.17 ( -0.14)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.55 (  0.59)	test_majacc   0.41 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.55 (  0.59)	test_majacc_d   0.41 (  0.39)	test_corr_d  -0.13 ( -0.15)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.45 (  0.42)	test_minacc   0.54 (  0.58)	test_majacc   0.43 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.42)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.43 (  0.39)	test_corr_d  -0.05 ( -0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.06it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.695 (0.695)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.14 (  0.14)
Overall Timing[ 45/  1]	epoch_time 0.0408 (0.0426)	validation_time 0.0003 (0.0005)	train_time 0.0404 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.42020000502467153, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 12%|#1        | 3/26 [00:00<00:01, 12.64it/s] 27%|##6       | 7/26 [00:00<00:00, 21.84it/s] 42%|####2     | 11/26 [00:00<00:00, 26.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.80it/s] 88%|########8 | 23/26 [00:00<00:00, 32.10it/s]100%|##########| 26/26 [00:00<00:00, 26.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.48)	train_minacc   0.49 (  0.53)	train_majacc   0.47 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6621 (4.6629)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 23%|##3       | 6/26 [00:00<00:00, 30.81it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.81it/s] 42%|####2     | 11/26 [00:00<00:00, 37.45it/s] 62%|######1   | 16/26 [00:00<00:00, 41.07it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.07it/s] 81%|########  | 21/26 [00:00<00:00, 40.63it/s]100%|##########| 26/26 [00:00<00:00, 35.80it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.46 (  0.46)	test_minacc   0.56 (  0.56)	test_majacc   0.44 (  0.44)	Loss_d 0.695 (0.695)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.44 (  0.44)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.35 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.33 (  0.39)	Loss_d 0.696 (0.695)	test_acc_d   0.35 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.33 (  0.39)	test_corr_d  -0.18 ( -0.15)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.42)	test_minacc   0.55 (  0.60)	test_majacc   0.42 (  0.38)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.42 (  0.38)	test_corr_d  -0.14 ( -0.16)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.42)	test_minacc   0.54 (  0.59)	test_majacc   0.42 (  0.39)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.54 (  0.59)	test_majacc_d   0.42 (  0.39)	test_corr_d  -0.06 ( -0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.51it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.13 (  0.13)
Overall Timing[ 46/  1]	epoch_time 0.0469 (0.0427)	validation_time 0.0007 (0.0005)	train_time 0.0461 (0.0421)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.41840000545978545, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 15%|#5        | 4/26 [00:00<00:01, 16.13it/s] 31%|###       | 8/26 [00:00<00:00, 24.12it/s] 46%|####6     | 12/26 [00:00<00:00, 28.87it/s] 62%|######1   | 16/26 [00:00<00:00, 30.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.44it/s] 92%|#########2| 24/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 27.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.47 (  0.48)	train_minacc   0.49 (  0.54)	train_majacc   0.46 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6599 (4.6608)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.50it/s] 23%|##3       | 6/26 [00:00<00:00, 24.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.00it/s] 42%|####2     | 11/26 [00:00<00:00, 33.71it/s] 62%|######1   | 16/26 [00:00<00:00, 34.58it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.58it/s] 81%|########  | 21/26 [00:00<00:00, 38.22it/s]100%|##########| 26/26 [00:00<00:00, 40.86it/s]100%|##########| 26/26 [00:00<00:00, 32.24it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.695 (0.695)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d  -0.15 ( -0.15)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.35 (  0.42)	test_minacc   0.55 (  0.61)	test_majacc   0.33 (  0.38)	Loss_d 0.696 (0.695)	test_acc_d   0.35 (  0.42)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.33 (  0.38)	test_corr_d  -0.19 ( -0.17)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.41)	test_minacc   0.55 (  0.60)	test_majacc   0.42 (  0.38)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.55 (  0.60)	test_majacc_d   0.42 (  0.38)	test_corr_d  -0.16 ( -0.18)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.42)	test_minacc   0.56 (  0.60)	test_majacc   0.41 (  0.38)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.41 (  0.38)	test_corr_d  -0.07 ( -0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.03it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.11)
Overall Timing[ 47/  1]	epoch_time 0.0391 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0387 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.41580000540614126, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.78it/s] 19%|#9        | 5/26 [00:00<00:01, 17.76it/s] 35%|###4      | 9/26 [00:00<00:00, 23.95it/s] 50%|#####     | 13/26 [00:00<00:00, 26.48it/s] 65%|######5   | 17/26 [00:00<00:00, 29.12it/s] 81%|########  | 21/26 [00:00<00:00, 30.85it/s] 96%|#########6| 25/26 [00:00<00:00, 32.29it/s]100%|##########| 26/26 [00:01<00:00, 25.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.46 (  0.48)	train_minacc   0.49 (  0.54)	train_majacc   0.45 (  0.46)	train_corr   0.00 (  0.00)	l1 4.6576 (4.6585)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.92it/s] 27%|##6       | 7/26 [00:00<00:00, 35.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.38it/s] 46%|####6     | 12/26 [00:00<00:00, 40.83it/s] 65%|######5   | 17/26 [00:00<00:00, 42.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.97it/s] 85%|########4 | 22/26 [00:00<00:00, 43.39it/s]100%|##########| 26/26 [00:00<00:00, 38.05it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.16 ( -0.16)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.35 (  0.42)	test_minacc   0.57 (  0.62)	test_majacc   0.32 (  0.38)	Loss_d 0.696 (0.695)	test_acc_d   0.35 (  0.42)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.32 (  0.38)	test_corr_d  -0.20 ( -0.18)
Test: [  20/  26]	Loss 0.695 (0.696)	test_acc   0.43 (  0.41)	test_minacc   0.55 (  0.61)	test_majacc   0.42 (  0.37)	Loss_d 0.695 (0.696)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.42 (  0.37)	test_corr_d  -0.17 ( -0.19)
Test: [  26/  26]	Loss 0.695 (0.695)	test_acc   0.43 (  0.41)	test_minacc   0.56 (  0.60)	test_majacc   0.41 (  0.38)	Loss_d 0.695 (0.695)	test_acc_d   0.43 (  0.41)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.41 (  0.38)	test_corr_d  -0.08 ( -0.18)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.81it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.10 (  0.10)
Overall Timing[ 48/  1]	epoch_time 0.0462 (0.0427)	validation_time 0.0004 (0.0005)	train_time 0.0458 (0.0421)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.41170000544190405, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.23it/s] 23%|##3       | 6/26 [00:00<00:00, 23.91it/s] 38%|###8      | 10/26 [00:00<00:00, 28.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.80it/s] 69%|######9   | 18/26 [00:00<00:00, 33.70it/s] 85%|########4 | 22/26 [00:00<00:00, 34.64it/s]100%|##########| 26/26 [00:00<00:00, 35.44it/s]100%|##########| 26/26 [00:00<00:00, 29.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.40 ( 22.40)	train_acc   0.46 (  0.48)	train_minacc   0.49 (  0.54)	train_majacc   0.45 (  0.47)	train_corr   0.00 (  0.00)	l1 4.6551 (4.6561)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 23%|##3       | 6/26 [00:00<00:00, 26.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.05it/s] 42%|####2     | 11/26 [00:00<00:00, 34.27it/s] 65%|######5   | 17/26 [00:00<00:00, 38.54it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.54it/s] 85%|########4 | 22/26 [00:00<00:00, 41.65it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.695 (0.695)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.17 ( -0.17)
Test: [  10/  26]	Loss 0.696 (0.695)	test_acc   0.35 (  0.41)	test_minacc   0.57 (  0.62)	test_majacc   0.32 (  0.37)	Loss_d 0.696 (0.695)	test_acc_d   0.35 (  0.41)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.32 (  0.37)	test_corr_d  -0.21 ( -0.19)
Test: [  20/  26]	Loss 0.696 (0.696)	test_acc   0.43 (  0.40)	test_minacc   0.55 (  0.61)	test_majacc   0.41 (  0.37)	Loss_d 0.696 (0.696)	test_acc_d   0.43 (  0.40)	test_minacc_d   0.55 (  0.61)	test_majacc_d   0.41 (  0.37)	test_corr_d  -0.18 ( -0.20)
Test: [  26/  26]	Loss 0.695 (0.696)	test_acc   0.44 (  0.41)	test_minacc   0.56 (  0.60)	test_majacc   0.41 (  0.37)	Loss_d 0.695 (0.696)	test_acc_d   0.44 (  0.41)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.41 (  0.37)	test_corr_d  -0.09 ( -0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.08 (  0.08)
Overall Timing[ 49/  1]	epoch_time 0.0407 (0.0426)	validation_time 0.0005 (0.0005)	train_time 0.0402 (0.0420)
record: (train_acc, test_acc) (0.780800029039383, 0.42500001192092896)
last accs (train_acc, test_acc) (0.40780000588297843, 0.4970000088214874)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.167 MB of 0.167 MB uploadedwandb: \ 0.167 MB of 0.167 MB uploadedwandb: | 0.167 MB of 0.167 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpjjiut7ts'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_210729-am8ny0vk
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/am8ny0vk
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1201
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5997, 3, 32, 32) (6003, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.58s/it] 19%|#9        | 5/26 [00:01<00:05,  3.82it/s] 35%|###4      | 9/26 [00:01<00:02,  7.49it/s] 54%|#####3    | 14/26 [00:01<00:00, 12.56it/s] 69%|######9   | 18/26 [00:02<00:00, 16.42it/s] 85%|########4 | 22/26 [00:02<00:00, 20.30it/s]100%|##########| 26/26 [00:02<00:00, 14.75it/s]100%|##########| 26/26 [00:02<00:00,  9.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.468 (0.601)	train_nll   0.47 (  0.60)	train_penalty   0.07 (  0.34)	weight_norm  20.96 ( 18.16)	train_acc   0.83 (  0.80)	train_minacc   0.00 (  0.08)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 6.2655 (8.0671)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 27%|##6       | 7/26 [00:00<00:00, 33.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.21it/s] 50%|#####     | 13/26 [00:00<00:00, 41.11it/s] 69%|######9   | 18/26 [00:00<00:00, 41.69it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.69it/s] 88%|########8 | 23/26 [00:00<00:00, 42.95it/s]100%|##########| 26/26 [00:00<00:00, 37.06it/s]
Test: [   0/  26]	Loss 0.415 (0.415)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.415 (0.415)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.434 (0.423)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.434 (0.423)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.434 (0.421)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  1.00)	Loss_d 0.434 (0.421)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.461 (0.418)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.461 (0.418)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.51it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]
Test: [  0/  1]	Loss 1.672 (1.672)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.672 (1.672)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.672 (1.672)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.672 (1.672)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0782 (0.0782)	validation_time 0.0068 (0.0068)	train_time 0.0692 (0.0692)
record: (train_acc, test_acc) (0.8471000221967697, 0.10200000554323196)
last accs (train_acc, test_acc) (0.8471000221967697, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 23%|##3       | 6/26 [00:00<00:00, 25.38it/s] 38%|###8      | 10/26 [00:00<00:00, 29.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.88it/s] 69%|######9   | 18/26 [00:00<00:00, 33.55it/s] 85%|########4 | 22/26 [00:00<00:00, 34.81it/s]100%|##########| 26/26 [00:00<00:00, 35.61it/s]100%|##########| 26/26 [00:00<00:00, 29.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.463 (0.416)	train_nll   0.46 (  0.42)	train_penalty   0.11 (  0.06)	weight_norm  22.11 ( 21.75)	train_acc   0.83 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.2219 (6.1534)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.94it/s] 27%|##6       | 7/26 [00:00<00:00, 26.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.50it/s] 50%|#####     | 13/26 [00:00<00:00, 34.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.53it/s] 92%|#########2| 24/26 [00:00<00:00, 40.93it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]
Test: [   0/  26]	Loss 0.403 (0.403)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.403 (0.403)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  10/  26]	Loss 0.433 (0.418)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.433 (0.418)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.427 (0.414)	test_acc   0.84 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.427 (0.414)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.461 (0.411)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.461 (0.411)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.98it/s]
Test: [  0/  1]	Loss 1.869 (1.869)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.869 (1.869)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.869 (1.869)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 1.869 (1.869)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0380 (0.0581)	validation_time 0.0003 (0.0036)	train_time 0.0376 (0.0534)
record: (train_acc, test_acc) (0.8471000221967697, 0.10200000554323196)
last accs (train_acc, test_acc) (0.8484000163078308, 0.10100000351667404)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 19%|#9        | 5/26 [00:00<00:00, 24.26it/s] 35%|###4      | 9/26 [00:00<00:00, 30.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.87it/s] 69%|######9   | 18/26 [00:00<00:00, 35.46it/s] 85%|########4 | 22/26 [00:00<00:00, 35.95it/s]100%|##########| 26/26 [00:00<00:00, 36.50it/s]100%|##########| 26/26 [00:00<00:00, 30.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.426 (0.401)	train_nll   0.43 (  0.40)	train_penalty   0.07 (  0.05)	weight_norm  22.23 ( 22.19)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.01)	train_majacc   1.00 (  1.00)	train_corr   0.00 (  0.00)	l1 6.2875 (6.1727)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.71it/s] 27%|##6       | 7/26 [00:00<00:00, 34.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.81it/s] 46%|####6     | 12/26 [00:00<00:00, 40.50it/s] 65%|######5   | 17/26 [00:00<00:00, 38.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.79it/s] 85%|########4 | 22/26 [00:00<00:00, 41.34it/s]100%|##########| 26/26 [00:00<00:00, 36.32it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.396 (0.396)	test_acc   0.83 (  0.84)	test_minacc   0.02 (  0.03)	test_majacc   0.98 (  0.99)	Loss_d 0.396 (0.396)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.401 (0.393)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.401 (0.393)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.420 (0.388)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.420 (0.388)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.54it/s]
Test: [  0/  1]	Loss 1.786 (1.786)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.786 (1.786)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.786 (1.786)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.786 (1.786)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0424 (0.0529)	validation_time 0.0011 (0.0028)	train_time 0.0412 (0.0494)
record: (train_acc, test_acc) (0.8463000221252441, 0.12200000882148743)
last accs (train_acc, test_acc) (0.8463000221252441, 0.12200000882148743)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.49it/s] 12%|#1        | 3/26 [00:00<00:02, 10.39it/s] 27%|##6       | 7/26 [00:00<00:00, 20.14it/s] 42%|####2     | 11/26 [00:00<00:00, 26.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.75it/s] 88%|########8 | 23/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.390 (0.376)	train_nll   0.39 (  0.38)	train_penalty   0.05 (  0.04)	weight_norm  22.27 ( 22.25)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.06)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.6193 (6.4096)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 23%|##3       | 6/26 [00:00<00:00, 29.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.35it/s] 42%|####2     | 11/26 [00:00<00:00, 37.73it/s] 62%|######1   | 16/26 [00:00<00:00, 37.93it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.93it/s] 81%|########  | 21/26 [00:00<00:00, 40.80it/s]100%|##########| 26/26 [00:00<00:00, 43.30it/s]100%|##########| 26/26 [00:00<00:00, 35.31it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.355 (0.378)	test_acc   0.83 (  0.84)	test_minacc   0.16 (  0.18)	test_majacc   0.95 (  0.96)	Loss_d 0.355 (0.378)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.370 (0.374)	test_acc   0.83 (  0.84)	test_minacc   0.17 (  0.17)	test_majacc   0.95 (  0.96)	Loss_d 0.370 (0.374)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.88 (  0.90)
Test: [  26/  26]	Loss 0.367 (0.368)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   0.99 (  0.96)	Loss_d 0.367 (0.368)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.57it/s]
Test: [  0/  1]	Loss 1.769 (1.769)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.769 (1.769)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.769 (1.769)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.769 (1.769)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0409 (0.0499)	validation_time 0.0003 (0.0022)	train_time 0.0406 (0.0472)
record: (train_acc, test_acc) (0.8464000254869462, 0.20600001513957977)
last accs (train_acc, test_acc) (0.8464000254869462, 0.20600001513957977)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 19%|#9        | 5/26 [00:00<00:01, 18.00it/s] 35%|###4      | 9/26 [00:00<00:00, 24.87it/s] 50%|#####     | 13/26 [00:00<00:00, 28.94it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 33.15it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 26.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.381 (0.369)	train_nll   0.38 (  0.37)	train_penalty   0.06 (  0.04)	weight_norm  22.33 ( 22.30)	train_acc   0.83 (  0.85)	train_minacc   0.12 (  0.09)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 7.0882 (6.6251)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.66it/s] 23%|##3       | 6/26 [00:00<00:00, 22.64it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.64it/s] 42%|####2     | 11/26 [00:00<00:00, 30.77it/s] 62%|######1   | 16/26 [00:00<00:00, 36.74it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.74it/s] 81%|########  | 21/26 [00:00<00:00, 37.13it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]100%|##########| 26/26 [00:00<00:00, 31.20it/s]
Test: [   0/  26]	Loss 0.339 (0.339)	test_acc   0.85 (  0.85)	test_minacc   0.24 (  0.24)	test_majacc   0.97 (  0.97)	Loss_d 0.339 (0.339)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.340 (0.366)	test_acc   0.83 (  0.84)	test_minacc   0.24 (  0.23)	test_majacc   0.94 (  0.96)	Loss_d 0.340 (0.366)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.24 (  0.23)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  20/  26]	Loss 0.352 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.23 (  0.23)	test_majacc   0.95 (  0.96)	Loss_d 0.352 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.89)
Test: [  26/  26]	Loss 0.349 (0.352)	test_acc   0.84 (  0.85)	test_minacc   0.21 (  0.24)	test_majacc   0.97 (  0.96)	Loss_d 0.349 (0.352)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.21 (  0.24)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.46it/s]
Test: [  0/  1]	Loss 1.869 (1.869)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.869 (1.869)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.869 (1.869)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 1.869 (1.869)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.76 (  0.76)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0386 (0.0476)	validation_time 0.0005 (0.0018)	train_time 0.0381 (0.0454)
record: (train_acc, test_acc) (0.850500019967556, 0.24000000953674316)
last accs (train_acc, test_acc) (0.850500019967556, 0.24000000953674316)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.49it/s]  8%|7         | 2/26 [00:00<00:03,  7.37it/s] 23%|##3       | 6/26 [00:00<00:01, 18.77it/s] 38%|###8      | 10/26 [00:00<00:00, 24.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.77it/s] 69%|######9   | 18/26 [00:00<00:00, 30.99it/s] 85%|########4 | 22/26 [00:00<00:00, 32.41it/s]100%|##########| 26/26 [00:00<00:00, 34.40it/s]100%|##########| 26/26 [00:01<00:00, 25.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.319 (0.347)	train_nll   0.32 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm  22.40 ( 22.36)	train_acc   0.85 (  0.85)	train_minacc   0.16 (  0.15)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.1423 (6.8283)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 23%|##3       | 6/26 [00:00<00:00, 32.13it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.13it/s] 42%|####2     | 11/26 [00:00<00:00, 38.86it/s] 62%|######1   | 16/26 [00:00<00:00, 42.53it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.53it/s] 81%|########  | 21/26 [00:00<00:00, 40.35it/s]100%|##########| 26/26 [00:00<00:00, 42.87it/s]100%|##########| 26/26 [00:00<00:00, 35.78it/s]
Test: [   0/  26]	Loss 0.329 (0.329)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.329 (0.329)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.309 (0.332)	test_acc   0.87 (  0.85)	test_minacc   0.40 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.309 (0.332)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.40 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.319 (0.326)	test_acc   0.86 (  0.86)	test_minacc   0.37 (  0.29)	test_majacc   0.95 (  0.96)	Loss_d 0.319 (0.326)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.37 (  0.29)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  26/  26]	Loss 0.283 (0.319)	test_acc   0.86 (  0.86)	test_minacc   0.30 (  0.31)	test_majacc   0.98 (  0.96)	Loss_d 0.283 (0.319)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.30 (  0.31)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.09it/s]
Test: [  0/  1]	Loss 1.745 (1.745)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 1.745 (1.745)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.745 (1.745)	test_acc   0.24 (  0.24)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 1.745 (1.745)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Overall Timing[  5/  1]	epoch_time 0.0430 (0.0469)	validation_time 0.0004 (0.0016)	train_time 0.0426 (0.0449)
record: (train_acc, test_acc) (0.850500019967556, 0.24000000953674316)
last accs (train_acc, test_acc) (0.8604000189304352, 0.23500001430511475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.24it/s] 35%|###4      | 9/26 [00:00<00:00, 27.10it/s] 50%|#####     | 13/26 [00:00<00:00, 29.66it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.16it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.298 (0.326)	train_nll   0.30 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm  22.47 ( 22.43)	train_acc   0.85 (  0.86)	train_minacc   0.14 (  0.23)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.0521 (6.9937)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.00it/s] 31%|###       | 8/26 [00:00<00:00, 39.64it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.64it/s] 50%|#####     | 13/26 [00:00<00:00, 41.79it/s] 69%|######9   | 18/26 [00:00<00:00, 43.97it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.97it/s] 88%|########8 | 23/26 [00:00<00:00, 43.00it/s]100%|##########| 26/26 [00:00<00:00, 39.49it/s]
Test: [   0/  26]	Loss 0.307 (0.307)	test_acc   0.86 (  0.86)	test_minacc   0.31 (  0.31)	test_majacc   0.97 (  0.97)	Loss_d 0.307 (0.307)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.304 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.39 (  0.33)	test_majacc   0.95 (  0.96)	Loss_d 0.304 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.39 (  0.33)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.293 (0.311)	test_acc   0.87 (  0.86)	test_minacc   0.37 (  0.32)	test_majacc   0.96 (  0.96)	Loss_d 0.293 (0.311)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.37 (  0.32)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.264 (0.303)	test_acc   0.85 (  0.87)	test_minacc   0.26 (  0.33)	test_majacc   0.98 (  0.96)	Loss_d 0.264 (0.303)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.26 (  0.33)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.89 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.60it/s]
Test: [  0/  1]	Loss 1.759 (1.759)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.759 (1.759)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.71 (  0.71)
Test: [  1/  1]	Loss 1.759 (1.759)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 1.759 (1.759)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.71 (  0.71)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0385 (0.0457)	validation_time 0.0004 (0.0014)	train_time 0.0380 (0.0439)
record: (train_acc, test_acc) (0.8671000230908393, 0.27400001883506775)
last accs (train_acc, test_acc) (0.8671000230908393, 0.27400001883506775)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.94it/s] 19%|#9        | 5/26 [00:00<00:00, 23.89it/s] 35%|###4      | 9/26 [00:00<00:00, 29.03it/s] 50%|#####     | 13/26 [00:00<00:00, 30.86it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 34.04it/s]100%|##########| 26/26 [00:00<00:00, 28.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.224)	train_nll   0.38 (  0.33)	train_penalty   0.00 (  0.01)	weight_norm  22.56 ( 22.51)	train_acc   0.82 (  0.84)	train_minacc   0.63 (  0.38)	train_majacc   0.86 (  0.93)	train_corr   0.00 (  0.00)	l1 6.7026 (7.0202)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.26it/s] 23%|##3       | 6/26 [00:00<00:00, 30.23it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.23it/s] 42%|####2     | 11/26 [00:00<00:00, 36.96it/s] 62%|######1   | 16/26 [00:00<00:00, 41.46it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.46it/s] 81%|########  | 21/26 [00:00<00:00, 39.60it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]100%|##########| 26/26 [00:00<00:00, 35.21it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.80 (  0.80)	test_minacc   0.61 (  0.61)	test_majacc   0.84 (  0.84)	Loss_d 0.406 (0.406)	test_acc_d   0.80 (  0.80)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.84 (  0.84)	test_corr_d   0.63 (  0.63)
Test: [  10/  26]	Loss 0.398 (0.426)	test_acc   0.79 (  0.79)	test_minacc   0.73 (  0.65)	test_majacc   0.81 (  0.82)	Loss_d 0.398 (0.426)	test_acc_d   0.79 (  0.79)	test_minacc_d   0.73 (  0.65)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.60 (  0.62)
Test: [  20/  26]	Loss 0.432 (0.426)	test_acc   0.78 (  0.79)	test_minacc   0.62 (  0.64)	test_majacc   0.81 (  0.82)	Loss_d 0.432 (0.426)	test_acc_d   0.78 (  0.79)	test_minacc_d   0.62 (  0.64)	test_majacc_d   0.81 (  0.82)	test_corr_d   0.59 (  0.63)
Test: [  26/  26]	Loss 0.390 (0.425)	test_acc   0.82 (  0.79)	test_minacc   0.65 (  0.65)	test_majacc   0.86 (  0.82)	Loss_d 0.390 (0.425)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.86 (  0.82)	test_corr_d   0.66 (  0.63)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.56it/s]
Test: [  0/  1]	Loss 1.186 (1.186)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 1.186 (1.186)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 1.186 (1.186)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 1.186 (1.186)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0402 (0.0450)	validation_time 0.0003 (0.0013)	train_time 0.0398 (0.0434)
record: (train_acc, test_acc) (0.7913000297546386, 0.5400000214576721)
last accs (train_acc, test_acc) (0.7913000297546386, 0.5400000214576721)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.77it/s] 19%|#9        | 5/26 [00:00<00:01, 20.86it/s] 35%|###4      | 9/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.82it/s] 65%|######5   | 17/26 [00:00<00:00, 30.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.26it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.001)	train_nll   0.58 (  0.54)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.58)	train_acc   0.66 (  0.71)	train_minacc   0.70 (  0.71)	train_majacc   0.65 (  0.71)	train_corr   0.00 (  0.00)	l1 5.6227 (6.0273)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.81it/s] 38%|###8      | 10/26 [00:00<00:00, 35.61it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.66it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.17it/s] 96%|#########6| 25/26 [00:00<00:00, 42.05it/s]100%|##########| 26/26 [00:00<00:00, 34.97it/s]
Test: [   0/  26]	Loss 0.617 (0.617)	test_acc   0.64 (  0.64)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.63)	Loss_d 0.617 (0.617)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.640 (0.639)	test_acc   0.62 (  0.61)	test_minacc   0.76 (  0.74)	test_majacc   0.59 (  0.59)	Loss_d 0.640 (0.639)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.76 (  0.74)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.18 (  0.20)
Test: [  20/  26]	Loss 0.666 (0.637)	test_acc   0.59 (  0.62)	test_minacc   0.73 (  0.74)	test_majacc   0.56 (  0.59)	Loss_d 0.666 (0.637)	test_acc_d   0.59 (  0.62)	test_minacc_d   0.73 (  0.74)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.15 (  0.21)
Test: [  26/  26]	Loss 0.608 (0.637)	test_acc   0.64 (  0.61)	test_minacc   0.70 (  0.74)	test_majacc   0.63 (  0.59)	Loss_d 0.608 (0.637)	test_acc_d   0.64 (  0.61)	test_minacc_d   0.70 (  0.74)	test_majacc_d   0.63 (  0.59)	test_corr_d   0.23 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.711 (0.711)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.71 (  0.71)	Loss_d 0.711 (0.711)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.711 (0.711)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.71 (  0.71)	Loss_d 0.711 (0.711)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.09 ( -0.09)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0408 (0.0445)	validation_time 0.0004 (0.0012)	train_time 0.0403 (0.0431)
record: (train_acc, test_acc) (0.614800014257431, 0.6440000534057617)
last accs (train_acc, test_acc) (0.614800014257431, 0.6440000534057617)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.34it/s] 19%|#9        | 5/26 [00:00<00:01, 20.17it/s] 35%|###4      | 9/26 [00:00<00:00, 25.59it/s] 50%|#####     | 13/26 [00:00<00:00, 28.38it/s] 65%|######5   | 17/26 [00:00<00:00, 30.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 33.71it/s]100%|##########| 26/26 [00:00<00:00, 27.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.001 (0.001)	train_nll   0.59 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.60 ( 22.60)	train_acc   0.66 (  0.63)	train_minacc   0.77 (  0.75)	train_majacc   0.64 (  0.61)	train_corr   0.00 (  0.00)	l1 5.3951 (5.4713)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.04it/s] 23%|##3       | 6/26 [00:00<00:01, 16.23it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.23it/s] 42%|####2     | 11/26 [00:00<00:00, 25.11it/s] 62%|######1   | 16/26 [00:00<00:00, 31.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 35.45it/s]100%|##########| 26/26 [00:00<00:00, 39.13it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
Test: [   0/  26]	Loss 0.594 (0.594)	test_acc   0.65 (  0.65)	test_minacc   0.76 (  0.76)	test_majacc   0.63 (  0.63)	Loss_d 0.594 (0.594)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.607 (0.612)	test_acc   0.63 (  0.63)	test_minacc   0.77 (  0.76)	test_majacc   0.60 (  0.60)	Loss_d 0.607 (0.612)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.77 (  0.76)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.22 (  0.23)
Test: [  20/  26]	Loss 0.634 (0.612)	test_acc   0.59 (  0.63)	test_minacc   0.78 (  0.76)	test_majacc   0.55 (  0.61)	Loss_d 0.634 (0.612)	test_acc_d   0.59 (  0.63)	test_minacc_d   0.78 (  0.76)	test_majacc_d   0.55 (  0.61)	test_corr_d   0.18 (  0.24)
Test: [  26/  26]	Loss 0.595 (0.613)	test_acc   0.65 (  0.63)	test_minacc   0.77 (  0.76)	test_majacc   0.63 (  0.61)	Loss_d 0.595 (0.613)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.77 (  0.76)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.29 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 0.716 (0.716)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.63 (  0.63)	test_minacc   0.61 (  0.61)	test_majacc   0.78 (  0.78)	Loss_d 0.716 (0.716)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.02 ( -0.02)
Overall Timing[  9/  1]	epoch_time 0.0415 (0.0442)	validation_time 0.0004 (0.0011)	train_time 0.0410 (0.0429)
record: (train_acc, test_acc) (0.614800014257431, 0.6440000534057617)
last accs (train_acc, test_acc) (0.6306000066399574, 0.628000020980835)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 19%|#9        | 5/26 [00:00<00:00, 22.37it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 29.79it/s] 65%|######5   | 17/26 [00:00<00:00, 31.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.68it/s] 96%|#########6| 25/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.002 (0.001)	train_nll   0.58 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.66 (  0.63)	train_minacc   0.67 (  0.73)	train_majacc   0.66 (  0.61)	train_corr   0.00 (  0.00)	l1 5.2927 (5.3669)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.33it/s] 19%|#9        | 5/26 [00:00<00:01, 17.42it/s] 38%|###8      | 10/26 [00:00<00:00, 25.54it/s]                                                38%|###8      | 10/26 [00:00<00:00, 25.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.33it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.13it/s] 96%|#########6| 25/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 30.15it/s]
Test: [   0/  26]	Loss 0.592 (0.592)	test_acc   0.64 (  0.64)	test_minacc   0.76 (  0.76)	test_majacc   0.62 (  0.62)	Loss_d 0.592 (0.592)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.602 (0.608)	test_acc   0.64 (  0.63)	test_minacc   0.74 (  0.73)	test_majacc   0.62 (  0.61)	Loss_d 0.602 (0.608)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.74 (  0.73)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.26 (  0.28)
Test: [  20/  26]	Loss 0.624 (0.609)	test_acc   0.61 (  0.64)	test_minacc   0.75 (  0.74)	test_majacc   0.58 (  0.62)	Loss_d 0.624 (0.609)	test_acc_d   0.61 (  0.64)	test_minacc_d   0.75 (  0.74)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.22 (  0.28)
Test: [  26/  26]	Loss 0.603 (0.610)	test_acc   0.65 (  0.64)	test_minacc   0.72 (  0.73)	test_majacc   0.63 (  0.62)	Loss_d 0.603 (0.610)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.72 (  0.73)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.32 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.64it/s]
Test: [  0/  1]	Loss 0.753 (0.753)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.79 (  0.79)	Loss_d 0.753 (0.753)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.753 (0.753)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.79 (  0.79)	Loss_d 0.753 (0.753)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.06 (  0.06)
Overall Timing[ 10/  1]	epoch_time 0.0402 (0.0438)	validation_time 0.0004 (0.0011)	train_time 0.0398 (0.0426)
record: (train_acc, test_acc) (0.614800014257431, 0.6440000534057617)
last accs (train_acc, test_acc) (0.6369000130295753, 0.6000000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 19.08it/s] 35%|###4      | 9/26 [00:00<00:00, 25.93it/s] 50%|#####     | 13/26 [00:00<00:00, 28.01it/s] 65%|######5   | 17/26 [00:00<00:00, 30.30it/s] 81%|########  | 21/26 [00:00<00:00, 31.85it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 27.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.001)	train_nll   0.61 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.64 (  0.64)	train_minacc   0.74 (  0.72)	train_majacc   0.62 (  0.62)	train_corr   0.00 (  0.00)	l1 5.1582 (5.2372)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 23%|##3       | 6/26 [00:00<00:00, 30.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.26it/s] 42%|####2     | 11/26 [00:00<00:00, 36.97it/s] 62%|######1   | 16/26 [00:00<00:00, 41.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.56it/s] 81%|########  | 21/26 [00:00<00:00, 38.27it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]100%|##########| 26/26 [00:00<00:00, 34.53it/s]
Test: [   0/  26]	Loss 0.610 (0.610)	test_acc   0.65 (  0.65)	test_minacc   0.74 (  0.74)	test_majacc   0.63 (  0.63)	Loss_d 0.610 (0.610)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.616 (0.620)	test_acc   0.63 (  0.64)	test_minacc   0.76 (  0.75)	test_majacc   0.61 (  0.62)	Loss_d 0.616 (0.620)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.76 (  0.75)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.636 (0.623)	test_acc   0.64 (  0.64)	test_minacc   0.77 (  0.75)	test_majacc   0.62 (  0.62)	Loss_d 0.636 (0.623)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.77 (  0.75)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.20 (  0.27)
Test: [  26/  26]	Loss 0.624 (0.625)	test_acc   0.63 (  0.64)	test_minacc   0.74 (  0.75)	test_majacc   0.61 (  0.62)	Loss_d 0.624 (0.625)	test_acc_d   0.63 (  0.64)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.31 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.70it/s]
Test: [  0/  1]	Loss 0.757 (0.757)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.75 (  0.75)	Loss_d 0.757 (0.757)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
Test: [  1/  1]	Loss 0.757 (0.757)	test_acc   0.61 (  0.61)	test_minacc   0.59 (  0.59)	test_majacc   0.75 (  0.75)	Loss_d 0.757 (0.757)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.75 (  0.75)	test_corr_d  -0.04 ( -0.04)
Overall Timing[ 11/  1]	epoch_time 0.0455 (0.0440)	validation_time 0.0005 (0.0010)	train_time 0.0450 (0.0428)
record: (train_acc, test_acc) (0.614800014257431, 0.6440000534057617)
last accs (train_acc, test_acc) (0.6365000137090683, 0.6080000400543213)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.43it/s] 23%|##3       | 6/26 [00:00<00:00, 27.50it/s] 38%|###8      | 10/26 [00:00<00:00, 29.71it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.07it/s] 69%|######9   | 18/26 [00:00<00:00, 32.90it/s] 85%|########4 | 22/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 34.85it/s]100%|##########| 26/26 [00:00<00:00, 29.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.001 (0.000)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.68 (  0.66)	train_minacc   0.79 (  0.74)	train_majacc   0.65 (  0.65)	train_corr   0.00 (  0.00)	l1 5.0809 (5.1177)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 19.23it/s] 31%|###       | 8/26 [00:00<00:00, 32.27it/s]                                               31%|###       | 8/26 [00:00<00:00, 32.27it/s] 50%|#####     | 13/26 [00:00<00:00, 38.37it/s] 69%|######9   | 18/26 [00:00<00:00, 41.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.52it/s] 88%|########8 | 23/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 36.05it/s]
Test: [   0/  26]	Loss 0.594 (0.594)	test_acc   0.65 (  0.65)	test_minacc   0.77 (  0.77)	test_majacc   0.62 (  0.62)	Loss_d 0.594 (0.594)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.29 (  0.29)
Test: [  10/  26]	Loss 0.602 (0.602)	test_acc   0.65 (  0.64)	test_minacc   0.76 (  0.77)	test_majacc   0.63 (  0.62)	Loss_d 0.602 (0.602)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.76 (  0.77)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.25 (  0.28)
Test: [  20/  26]	Loss 0.619 (0.603)	test_acc   0.63 (  0.65)	test_minacc   0.78 (  0.77)	test_majacc   0.61 (  0.63)	Loss_d 0.619 (0.603)	test_acc_d   0.63 (  0.65)	test_minacc_d   0.78 (  0.77)	test_majacc_d   0.61 (  0.63)	test_corr_d   0.22 (  0.28)
Test: [  26/  26]	Loss 0.598 (0.605)	test_acc   0.67 (  0.65)	test_minacc   0.79 (  0.77)	test_majacc   0.64 (  0.62)	Loss_d 0.598 (0.605)	test_acc_d   0.67 (  0.65)	test_minacc_d   0.79 (  0.77)	test_majacc_d   0.64 (  0.62)	test_corr_d   0.32 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.43it/s]
Test: [  0/  1]	Loss 0.730 (0.730)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 0.730 (0.730)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.730 (0.730)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.76 (  0.76)	Loss_d 0.730 (0.730)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.76 (  0.76)	test_corr_d  -0.03 ( -0.03)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0416 (0.0438)	validation_time 0.0005 (0.0010)	train_time 0.0411 (0.0426)
record: (train_acc, test_acc) (0.6462000135183334, 0.6530000567436218)
last accs (train_acc, test_acc) (0.6462000135183334, 0.6530000567436218)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 19%|#9        | 5/26 [00:00<00:01, 19.09it/s] 35%|###4      | 9/26 [00:00<00:00, 25.29it/s] 50%|#####     | 13/26 [00:00<00:00, 29.02it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 27.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.001 (0.001)	train_nll   0.57 (  0.61)	train_penalty   0.00 (  0.00)	weight_norm  22.61 ( 22.61)	train_acc   0.66 (  0.64)	train_minacc   0.65 (  0.75)	train_majacc   0.67 (  0.62)	train_corr   0.00 (  0.00)	l1 5.0730 (5.1015)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.23it/s] 19%|#9        | 5/26 [00:00<00:00, 25.11it/s] 38%|###8      | 10/26 [00:00<00:00, 35.65it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.65it/s] 62%|######1   | 16/26 [00:00<00:00, 39.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.24it/s] 81%|########  | 21/26 [00:00<00:00, 42.31it/s]100%|##########| 26/26 [00:00<00:00, 37.08it/s]
Test: [   0/  26]	Loss 0.580 (0.580)	test_acc   0.67 (  0.67)	test_minacc   0.66 (  0.66)	test_majacc   0.67 (  0.67)	Loss_d 0.580 (0.580)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.39 (  0.39)
Test: [  10/  26]	Loss 0.603 (0.591)	test_acc   0.66 (  0.64)	test_minacc   0.76 (  0.70)	test_majacc   0.64 (  0.63)	Loss_d 0.603 (0.591)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.608 (0.587)	test_acc   0.61 (  0.65)	test_minacc   0.75 (  0.70)	test_majacc   0.59 (  0.64)	Loss_d 0.608 (0.587)	test_acc_d   0.61 (  0.65)	test_minacc_d   0.75 (  0.70)	test_majacc_d   0.59 (  0.64)	test_corr_d   0.32 (  0.37)
Test: [  26/  26]	Loss 0.577 (0.589)	test_acc   0.66 (  0.65)	test_minacc   0.63 (  0.69)	test_majacc   0.67 (  0.64)	Loss_d 0.577 (0.589)	test_acc_d   0.66 (  0.65)	test_minacc_d   0.63 (  0.69)	test_majacc_d   0.67 (  0.64)	test_corr_d   0.37 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.79it/s]
Test: [  0/  1]	Loss 0.773 (0.773)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.77 (  0.77)	Loss_d 0.773 (0.773)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.773 (0.773)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.77 (  0.77)	Loss_d 0.773 (0.773)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.06 (  0.06)
Overall Timing[ 13/  1]	epoch_time 0.0446 (0.0439)	validation_time 0.0003 (0.0009)	train_time 0.0442 (0.0428)
record: (train_acc, test_acc) (0.6462000135183334, 0.6530000567436218)
last accs (train_acc, test_acc) (0.6464000154137611, 0.6210000514984131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.18it/s] 23%|##3       | 6/26 [00:00<00:00, 20.63it/s] 38%|###8      | 10/26 [00:00<00:00, 25.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.62it/s] 69%|######9   | 18/26 [00:00<00:00, 30.13it/s] 85%|########4 | 22/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 26.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.002 (0.001)	train_nll   0.56 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.66 (  0.64)	train_minacc   0.65 (  0.74)	train_majacc   0.67 (  0.62)	train_corr   0.00 (  0.00)	l1 4.9933 (5.0796)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 19%|#9        | 5/26 [00:00<00:00, 24.28it/s] 38%|###8      | 10/26 [00:00<00:00, 33.91it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.91it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.99it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.99it/s] 96%|#########6| 25/26 [00:00<00:00, 40.25it/s]100%|##########| 26/26 [00:00<00:00, 33.91it/s]
Test: [   0/  26]	Loss 0.560 (0.560)	test_acc   0.67 (  0.67)	test_minacc   0.69 (  0.69)	test_majacc   0.67 (  0.67)	Loss_d 0.560 (0.560)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.43 (  0.43)
Test: [  10/  26]	Loss 0.582 (0.569)	test_acc   0.66 (  0.66)	test_minacc   0.73 (  0.70)	test_majacc   0.65 (  0.66)	Loss_d 0.582 (0.569)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.65 (  0.66)	test_corr_d   0.38 (  0.41)
Test: [  20/  26]	Loss 0.582 (0.566)	test_acc   0.63 (  0.67)	test_minacc   0.78 (  0.71)	test_majacc   0.60 (  0.66)	Loss_d 0.582 (0.566)	test_acc_d   0.63 (  0.67)	test_minacc_d   0.78 (  0.71)	test_majacc_d   0.60 (  0.66)	test_corr_d   0.37 (  0.42)
Test: [  26/  26]	Loss 0.565 (0.567)	test_acc   0.67 (  0.67)	test_minacc   0.65 (  0.71)	test_majacc   0.68 (  0.66)	Loss_d 0.565 (0.567)	test_acc_d   0.67 (  0.67)	test_minacc_d   0.65 (  0.71)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.42 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.778 (0.778)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 0.778 (0.778)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.10 (  0.10)
Test: [  1/  1]	Loss 0.778 (0.778)	test_acc   0.62 (  0.62)	test_minacc   0.60 (  0.60)	test_majacc   0.79 (  0.79)	Loss_d 0.778 (0.778)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.79 (  0.79)	test_corr_d   0.10 (  0.10)
Overall Timing[ 14/  1]	epoch_time 0.0431 (0.0438)	validation_time 0.0004 (0.0009)	train_time 0.0427 (0.0428)
record: (train_acc, test_acc) (0.6462000135183334, 0.6530000567436218)
last accs (train_acc, test_acc) (0.6663000195026397, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.67it/s] 27%|##6       | 7/26 [00:00<00:00, 27.25it/s] 42%|####2     | 11/26 [00:00<00:00, 29.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.80it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.83it/s] 88%|########8 | 23/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 29.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.001)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.65 (  0.65)	train_minacc   0.74 (  0.73)	train_majacc   0.63 (  0.63)	train_corr   0.00 (  0.00)	l1 4.9408 (4.9939)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.69it/s] 23%|##3       | 6/26 [00:00<00:00, 25.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.77it/s] 46%|####6     | 12/26 [00:00<00:00, 37.50it/s] 65%|######5   | 17/26 [00:00<00:00, 37.76it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.76it/s] 85%|########4 | 22/26 [00:00<00:00, 40.60it/s]100%|##########| 26/26 [00:00<00:00, 33.74it/s]
Test: [   0/  26]	Loss 0.581 (0.581)	test_acc   0.66 (  0.66)	test_minacc   0.74 (  0.74)	test_majacc   0.65 (  0.65)	Loss_d 0.581 (0.581)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.608 (0.588)	test_acc   0.65 (  0.65)	test_minacc   0.74 (  0.74)	test_majacc   0.63 (  0.63)	Loss_d 0.608 (0.588)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.30 (  0.34)
Test: [  20/  26]	Loss 0.599 (0.585)	test_acc   0.62 (  0.65)	test_minacc   0.82 (  0.75)	test_majacc   0.58 (  0.64)	Loss_d 0.599 (0.585)	test_acc_d   0.62 (  0.65)	test_minacc_d   0.82 (  0.75)	test_majacc_d   0.58 (  0.64)	test_corr_d   0.30 (  0.34)
Test: [  26/  26]	Loss 0.591 (0.587)	test_acc   0.65 (  0.65)	test_minacc   0.74 (  0.75)	test_majacc   0.63 (  0.63)	Loss_d 0.591 (0.587)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.74 (  0.75)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.33 (  0.34)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.37it/s]
Test: [  0/  1]	Loss 0.719 (0.719)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.73 (  0.73)	Loss_d 0.719 (0.719)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.719 (0.719)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.73 (  0.73)	Loss_d 0.719 (0.719)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.06 ( -0.06)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/174/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0460 (0.0439)	validation_time 0.0004 (0.0009)	train_time 0.0456 (0.0429)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.19it/s] 19%|#9        | 5/26 [00:00<00:00, 21.15it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.97it/s] 81%|########  | 21/26 [00:00<00:00, 33.60it/s] 96%|#########6| 25/26 [00:00<00:00, 34.22it/s]100%|##########| 26/26 [00:00<00:00, 28.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.001)	train_nll   0.59 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.62 ( 22.62)	train_acc   0.64 (  0.64)	train_minacc   0.70 (  0.74)	train_majacc   0.62 (  0.62)	train_corr   0.00 (  0.00)	l1 4.9236 (4.9886)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 23%|##3       | 6/26 [00:00<00:00, 29.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.77it/s] 42%|####2     | 11/26 [00:00<00:00, 37.09it/s] 62%|######1   | 16/26 [00:00<00:00, 41.21it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.21it/s] 81%|########  | 21/26 [00:00<00:00, 39.25it/s]100%|##########| 26/26 [00:00<00:00, 34.99it/s]
Test: [   0/  26]	Loss 0.579 (0.579)	test_acc   0.68 (  0.68)	test_minacc   0.73 (  0.73)	test_majacc   0.67 (  0.67)	Loss_d 0.579 (0.579)	test_acc_d   0.68 (  0.68)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.67 (  0.67)	test_corr_d   0.38 (  0.38)
Test: [  10/  26]	Loss 0.604 (0.584)	test_acc   0.65 (  0.66)	test_minacc   0.71 (  0.72)	test_majacc   0.64 (  0.65)	Loss_d 0.604 (0.584)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.71 (  0.72)	test_majacc_d   0.64 (  0.65)	test_corr_d   0.33 (  0.37)
Test: [  20/  26]	Loss 0.590 (0.581)	test_acc   0.63 (  0.66)	test_minacc   0.75 (  0.72)	test_majacc   0.61 (  0.65)	Loss_d 0.590 (0.581)	test_acc_d   0.63 (  0.66)	test_minacc_d   0.75 (  0.72)	test_majacc_d   0.61 (  0.65)	test_corr_d   0.34 (  0.37)
Test: [  26/  26]	Loss 0.591 (0.583)	test_acc   0.65 (  0.66)	test_minacc   0.72 (  0.72)	test_majacc   0.64 (  0.64)	Loss_d 0.591 (0.583)	test_acc_d   0.65 (  0.66)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.35 (  0.37)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.05it/s]
Test: [  0/  1]	Loss 0.735 (0.735)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.74 (  0.74)	Loss_d 0.735 (0.735)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.735 (0.735)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.74 (  0.74)	Loss_d 0.735 (0.735)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.74 (  0.74)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 16/  1]	epoch_time 0.0412 (0.0438)	validation_time 0.0005 (0.0008)	train_time 0.0407 (0.0428)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6562000190615654, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.01it/s] 19%|#9        | 5/26 [00:00<00:01, 19.85it/s] 35%|###4      | 9/26 [00:00<00:00, 25.90it/s] 50%|#####     | 13/26 [00:00<00:00, 28.94it/s] 65%|######5   | 17/26 [00:00<00:00, 31.32it/s] 81%|########  | 21/26 [00:00<00:00, 32.97it/s] 96%|#########6| 25/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.64 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.62)	train_acc   0.60 (  0.65)	train_minacc   0.72 (  0.72)	train_majacc   0.58 (  0.63)	train_corr   0.00 (  0.00)	l1 4.8928 (4.9094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.60it/s] 23%|##3       | 6/26 [00:00<00:01, 19.19it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.19it/s] 42%|####2     | 11/26 [00:00<00:00, 28.47it/s] 62%|######1   | 16/26 [00:00<00:00, 34.67it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.67it/s] 81%|########  | 21/26 [00:00<00:00, 35.60it/s]100%|##########| 26/26 [00:00<00:00, 39.56it/s]100%|##########| 26/26 [00:00<00:00, 29.19it/s]
Test: [   0/  26]	Loss 0.620 (0.620)	test_acc   0.65 (  0.65)	test_minacc   0.73 (  0.73)	test_majacc   0.63 (  0.63)	Loss_d 0.620 (0.620)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.635 (0.621)	test_acc   0.64 (  0.64)	test_minacc   0.76 (  0.72)	test_majacc   0.62 (  0.62)	Loss_d 0.635 (0.621)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.76 (  0.72)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.20 (  0.26)
Test: [  20/  26]	Loss 0.616 (0.623)	test_acc   0.65 (  0.64)	test_minacc   0.73 (  0.72)	test_majacc   0.63 (  0.63)	Loss_d 0.616 (0.623)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.646 (0.625)	test_acc   0.60 (  0.64)	test_minacc   0.72 (  0.72)	test_majacc   0.57 (  0.62)	Loss_d 0.646 (0.625)	test_acc_d   0.60 (  0.64)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.57 (  0.62)	test_corr_d   0.25 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.704 (0.704)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.704 (0.704)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.704 (0.704)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.69 (  0.69)	Loss_d 0.704 (0.704)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 17/  1]	epoch_time 0.0409 (0.0436)	validation_time 0.0004 (0.0008)	train_time 0.0404 (0.0427)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.635000011086464, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.34it/s] 23%|##3       | 6/26 [00:00<00:00, 20.61it/s] 38%|###8      | 10/26 [00:00<00:00, 26.09it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.93it/s] 69%|######9   | 18/26 [00:00<00:00, 30.56it/s] 85%|########4 | 22/26 [00:00<00:00, 32.22it/s]100%|##########| 26/26 [00:00<00:00, 33.59it/s]100%|##########| 26/26 [00:00<00:00, 27.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.64)	train_minacc   0.70 (  0.66)	train_majacc   0.57 (  0.63)	train_corr   0.00 (  0.00)	l1 4.7357 (4.7941)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 19%|#9        | 5/26 [00:00<00:00, 21.42it/s]                                               19%|#9        | 5/26 [00:00<00:00, 21.42it/s] 42%|####2     | 11/26 [00:00<00:00, 35.08it/s] 62%|######1   | 16/26 [00:00<00:00, 37.32it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.32it/s] 81%|########  | 21/26 [00:00<00:00, 40.06it/s]100%|##########| 26/26 [00:00<00:00, 42.66it/s]100%|##########| 26/26 [00:00<00:00, 33.46it/s]
Test: [   0/  26]	Loss 0.621 (0.621)	test_acc   0.64 (  0.64)	test_minacc   0.68 (  0.68)	test_majacc   0.63 (  0.63)	Loss_d 0.621 (0.621)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.30 (  0.30)
Test: [  10/  26]	Loss 0.627 (0.620)	test_acc   0.64 (  0.64)	test_minacc   0.76 (  0.71)	test_majacc   0.62 (  0.63)	Loss_d 0.627 (0.620)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.24 (  0.29)
Test: [  20/  26]	Loss 0.618 (0.621)	test_acc   0.65 (  0.64)	test_minacc   0.72 (  0.71)	test_majacc   0.64 (  0.63)	Loss_d 0.618 (0.621)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.27 (  0.30)
Test: [  26/  26]	Loss 0.638 (0.624)	test_acc   0.60 (  0.64)	test_minacc   0.70 (  0.70)	test_majacc   0.58 (  0.63)	Loss_d 0.638 (0.624)	test_acc_d   0.60 (  0.64)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.58 (  0.63)	test_corr_d   0.30 (  0.29)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.41it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.718 (0.718)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.60 (  0.60)	test_minacc   0.58 (  0.58)	test_majacc   0.71 (  0.71)	Loss_d 0.718 (0.718)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 18/  1]	epoch_time 0.0452 (0.0437)	validation_time 0.0004 (0.0008)	train_time 0.0447 (0.0428)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6400000168085098, 0.5950000286102295)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 19%|#9        | 5/26 [00:00<00:00, 21.39it/s] 35%|###4      | 9/26 [00:00<00:00, 27.88it/s] 50%|#####     | 13/26 [00:00<00:00, 31.45it/s] 65%|######5   | 17/26 [00:00<00:00, 34.07it/s] 85%|########4 | 22/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:00<00:00, 36.76it/s]100%|##########| 26/26 [00:00<00:00, 29.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.61 (  0.63)	train_minacc   0.65 (  0.69)	train_majacc   0.60 (  0.61)	train_corr   0.00 (  0.00)	l1 4.7720 (4.7695)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 23%|##3       | 6/26 [00:00<00:00, 33.20it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.20it/s] 42%|####2     | 11/26 [00:00<00:00, 40.15it/s] 62%|######1   | 16/26 [00:00<00:00, 43.77it/s]                                                62%|######1   | 16/26 [00:00<00:00, 43.77it/s] 81%|########  | 21/26 [00:00<00:00, 39.80it/s]100%|##########| 26/26 [00:00<00:00, 42.83it/s]100%|##########| 26/26 [00:00<00:00, 36.78it/s]
Test: [   0/  26]	Loss 0.615 (0.615)	test_acc   0.64 (  0.64)	test_minacc   0.74 (  0.74)	test_majacc   0.62 (  0.62)	Loss_d 0.615 (0.615)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.31 (  0.31)
Test: [  10/  26]	Loss 0.627 (0.614)	test_acc   0.61 (  0.63)	test_minacc   0.73 (  0.72)	test_majacc   0.59 (  0.61)	Loss_d 0.627 (0.614)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.24 (  0.30)
Test: [  20/  26]	Loss 0.612 (0.614)	test_acc   0.62 (  0.63)	test_minacc   0.73 (  0.72)	test_majacc   0.60 (  0.61)	Loss_d 0.612 (0.614)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.28 (  0.30)
Test: [  26/  26]	Loss 0.630 (0.616)	test_acc   0.61 (  0.63)	test_minacc   0.65 (  0.72)	test_majacc   0.60 (  0.61)	Loss_d 0.630 (0.616)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.65 (  0.72)	test_majacc_d   0.60 (  0.61)	test_corr_d   0.30 (  0.30)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.33it/s]
Test: [  0/  1]	Loss 0.728 (0.728)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.70 (  0.70)	Loss_d 0.728 (0.728)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.728 (0.728)	test_acc   0.62 (  0.62)	test_minacc   0.61 (  0.61)	test_majacc   0.70 (  0.70)	Loss_d 0.728 (0.728)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.01 (  0.01)
Overall Timing[ 19/  1]	epoch_time 0.0391 (0.0435)	validation_time 0.0003 (0.0008)	train_time 0.0388 (0.0426)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.626000011086464, 0.6220000386238098)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 19%|#9        | 5/26 [00:00<00:00, 24.02it/s] 35%|###4      | 9/26 [00:00<00:00, 30.11it/s] 54%|#####3    | 14/26 [00:00<00:00, 34.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.79it/s] 92%|#########2| 24/26 [00:00<00:00, 38.39it/s]100%|##########| 26/26 [00:00<00:00, 31.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.59 (  0.60)	train_minacc   0.63 (  0.71)	train_majacc   0.58 (  0.59)	train_corr   0.00 (  0.00)	l1 4.8096 (4.8229)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.56it/s] 31%|###       | 8/26 [00:00<00:00, 36.40it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.40it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.29it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.64it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.64it/s] 96%|#########6| 25/26 [00:00<00:00, 44.96it/s]100%|##########| 26/26 [00:00<00:00, 39.07it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.629 (0.629)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.642 (0.626)	test_acc   0.59 (  0.61)	test_minacc   0.73 (  0.70)	test_majacc   0.56 (  0.59)	Loss_d 0.642 (0.626)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.56 (  0.59)	test_corr_d   0.20 (  0.26)
Test: [  20/  26]	Loss 0.622 (0.625)	test_acc   0.61 (  0.61)	test_minacc   0.73 (  0.70)	test_majacc   0.58 (  0.59)	Loss_d 0.622 (0.625)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.26 (  0.27)
Test: [  26/  26]	Loss 0.643 (0.627)	test_acc   0.60 (  0.61)	test_minacc   0.63 (  0.70)	test_majacc   0.60 (  0.59)	Loss_d 0.643 (0.627)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.63 (  0.70)	test_majacc_d   0.60 (  0.59)	test_corr_d   0.25 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.14it/s]
Test: [  0/  1]	Loss 0.718 (0.718)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.718 (0.718)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.718 (0.718)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.718 (0.718)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 20/  1]	epoch_time 0.0384 (0.0432)	validation_time 0.0005 (0.0008)	train_time 0.0379 (0.0424)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6067000097036361, 0.6350000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.36it/s] 19%|#9        | 5/26 [00:00<00:01, 19.20it/s] 35%|###4      | 9/26 [00:00<00:00, 26.04it/s] 50%|#####     | 13/26 [00:00<00:00, 29.86it/s] 65%|######5   | 17/26 [00:00<00:00, 32.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.96it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.001 (0.000)	train_nll   0.66 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.57 (  0.61)	train_minacc   0.70 (  0.69)	train_majacc   0.55 (  0.60)	train_corr   0.00 (  0.00)	l1 4.7789 (4.7560)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.05it/s] 31%|###       | 8/26 [00:00<00:00, 28.66it/s]                                               31%|###       | 8/26 [00:00<00:00, 28.66it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 43.16it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 43.16it/s]100%|##########| 26/26 [00:00<00:00, 46.67it/s]100%|##########| 26/26 [00:00<00:00, 35.32it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.61 (  0.61)	test_minacc   0.74 (  0.74)	test_majacc   0.58 (  0.58)	Loss_d 0.647 (0.647)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.664 (0.648)	test_acc   0.58 (  0.59)	test_minacc   0.77 (  0.71)	test_majacc   0.55 (  0.56)	Loss_d 0.664 (0.648)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.77 (  0.71)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.10 (  0.17)
Test: [  20/  26]	Loss 0.644 (0.650)	test_acc   0.59 (  0.59)	test_minacc   0.72 (  0.71)	test_majacc   0.56 (  0.56)	Loss_d 0.644 (0.650)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.17 (  0.17)
Test: [  26/  26]	Loss 0.661 (0.651)	test_acc   0.58 (  0.58)	test_minacc   0.70 (  0.71)	test_majacc   0.55 (  0.56)	Loss_d 0.661 (0.651)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.16 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.98it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.57 (  0.57)	Loss_d 0.676 (0.676)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 21/  1]	epoch_time 0.0398 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0393 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.584200011074543, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.97it/s] 27%|##6       | 7/26 [00:00<00:00, 29.72it/s] 42%|####2     | 11/26 [00:00<00:00, 32.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 33.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.74it/s] 88%|########8 | 23/26 [00:00<00:00, 35.16it/s]100%|##########| 26/26 [00:00<00:00, 31.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.58 (  0.59)	train_minacc   0.67 (  0.71)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7416 (4.7328)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:09,  2.67it/s] 23%|##3       | 6/26 [00:00<00:01, 15.40it/s]                                               23%|##3       | 6/26 [00:00<00:01, 15.40it/s] 42%|####2     | 11/26 [00:00<00:00, 24.12it/s] 62%|######1   | 16/26 [00:00<00:00, 30.99it/s]                                                62%|######1   | 16/26 [00:00<00:00, 30.99it/s] 81%|########  | 21/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 36.75it/s]100%|##########| 26/26 [00:01<00:00, 25.36it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.60 (  0.60)	test_minacc   0.66 (  0.66)	test_majacc   0.59 (  0.59)	Loss_d 0.643 (0.643)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.657 (0.643)	test_acc   0.58 (  0.59)	test_minacc   0.76 (  0.69)	test_majacc   0.55 (  0.57)	Loss_d 0.657 (0.643)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.76 (  0.69)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.13 (  0.20)
Test: [  20/  26]	Loss 0.641 (0.646)	test_acc   0.60 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.58 (  0.57)	Loss_d 0.641 (0.646)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.20 (  0.20)
Test: [  26/  26]	Loss 0.654 (0.646)	test_acc   0.58 (  0.59)	test_minacc   0.67 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.654 (0.646)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.67 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.20 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.42it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.60 (  0.60)	Loss_d 0.685 (0.685)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.60 (  0.60)	Loss_d 0.685 (0.685)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 22/  1]	epoch_time 0.0408 (0.0430)	validation_time 0.0007 (0.0007)	train_time 0.0401 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5903000099658966, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.48it/s] 19%|#9        | 5/26 [00:00<00:01, 11.95it/s] 35%|###4      | 9/26 [00:00<00:00, 18.54it/s] 50%|#####     | 13/26 [00:00<00:00, 23.37it/s] 65%|######5   | 17/26 [00:00<00:00, 26.71it/s] 81%|########  | 21/26 [00:00<00:00, 29.02it/s] 96%|#########6| 25/26 [00:01<00:00, 30.89it/s]100%|##########| 26/26 [00:01<00:00, 21.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 4.740099906921387
set z to 4.503094911575317
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.70)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7319 (4.7335)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.82it/s] 27%|##6       | 7/26 [00:00<00:00, 29.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.71it/s] 46%|####6     | 12/26 [00:00<00:00, 37.42it/s] 65%|######5   | 17/26 [00:00<00:00, 40.96it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.96it/s] 85%|########4 | 22/26 [00:00<00:00, 42.69it/s]100%|##########| 26/26 [00:00<00:00, 35.16it/s]
Test: [   0/  26]	Loss 0.645 (0.645)	test_acc   0.60 (  0.60)	test_minacc   0.69 (  0.69)	test_majacc   0.58 (  0.58)	Loss_d 0.645 (0.645)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.652 (0.643)	test_acc   0.58 (  0.59)	test_minacc   0.74 (  0.70)	test_majacc   0.55 (  0.57)	Loss_d 0.652 (0.643)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.15 (  0.21)
Test: [  20/  26]	Loss 0.642 (0.646)	test_acc   0.60 (  0.59)	test_minacc   0.73 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.642 (0.646)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.652 (0.647)	test_acc   0.60 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.58 (  0.57)	Loss_d 0.652 (0.647)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.21 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.697 (0.697)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.697 (0.697)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 23/  1]	epoch_time 0.0414 (0.0429)	validation_time 0.0003 (0.0007)	train_time 0.0411 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5876000096797943, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.43it/s] 50%|#####     | 13/26 [00:00<00:00, 30.61it/s] 65%|######5   | 17/26 [00:00<00:00, 32.39it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.59)	train_minacc   0.70 (  0.70)	train_majacc   0.58 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7328 (4.7316)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.53it/s] 27%|##6       | 7/26 [00:00<00:00, 33.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.93it/s] 46%|####6     | 12/26 [00:00<00:00, 39.41it/s] 65%|######5   | 17/26 [00:00<00:00, 42.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.30it/s] 85%|########4 | 22/26 [00:00<00:00, 39.94it/s]100%|##########| 26/26 [00:00<00:00, 36.96it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.60 (  0.60)	test_minacc   0.71 (  0.71)	test_majacc   0.58 (  0.58)	Loss_d 0.644 (0.644)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  10/  26]	Loss 0.651 (0.642)	test_acc   0.58 (  0.59)	test_minacc   0.74 (  0.70)	test_majacc   0.55 (  0.57)	Loss_d 0.651 (0.642)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.74 (  0.70)	test_majacc_d   0.55 (  0.57)	test_corr_d   0.16 (  0.21)
Test: [  20/  26]	Loss 0.642 (0.645)	test_acc   0.60 (  0.59)	test_minacc   0.73 (  0.70)	test_majacc   0.58 (  0.57)	Loss_d 0.642 (0.645)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.58 (  0.57)	test_corr_d   0.20 (  0.21)
Test: [  26/  26]	Loss 0.650 (0.645)	test_acc   0.60 (  0.59)	test_minacc   0.70 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.650 (0.645)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.47it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.62 (  0.62)	Loss_d 0.696 (0.696)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.62 (  0.62)	Loss_d 0.696 (0.696)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 24/  1]	epoch_time 0.0407 (0.0428)	validation_time 0.0004 (0.0007)	train_time 0.0403 (0.0420)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.588200009226799, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.47it/s] 23%|##3       | 6/26 [00:00<00:00, 25.34it/s] 38%|###8      | 10/26 [00:00<00:00, 28.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.75it/s] 69%|######9   | 18/26 [00:00<00:00, 32.29it/s] 85%|########4 | 22/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.70)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7322 (4.7353)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.84it/s] 19%|#9        | 5/26 [00:00<00:01, 20.16it/s] 38%|###8      | 10/26 [00:00<00:00, 30.26it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.26it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.03it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.35it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.35it/s] 96%|#########6| 25/26 [00:00<00:00, 38.99it/s]100%|##########| 26/26 [00:00<00:00, 31.21it/s]
Test: [   0/  26]	Loss 0.643 (0.643)	test_acc   0.61 (  0.61)	test_minacc   0.71 (  0.71)	test_majacc   0.59 (  0.59)	Loss_d 0.643 (0.643)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.649 (0.640)	test_acc   0.59 (  0.59)	test_minacc   0.76 (  0.70)	test_majacc   0.56 (  0.57)	Loss_d 0.649 (0.640)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.76 (  0.70)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.16 (  0.22)
Test: [  20/  26]	Loss 0.641 (0.643)	test_acc   0.59 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.641 (0.643)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.20 (  0.22)
Test: [  26/  26]	Loss 0.647 (0.644)	test_acc   0.60 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.647 (0.644)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.65it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.695 (0.695)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.695 (0.695)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 25/  1]	epoch_time 0.0497 (0.0431)	validation_time 0.0004 (0.0007)	train_time 0.0492 (0.0423)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5890000059008599, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.37it/s] 23%|##3       | 6/26 [00:00<00:00, 24.96it/s] 38%|###8      | 10/26 [00:00<00:00, 28.95it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.76it/s] 69%|######9   | 18/26 [00:00<00:00, 31.73it/s] 85%|########4 | 22/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 29.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.69)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7378 (4.7415)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.32it/s] 23%|##3       | 6/26 [00:00<00:00, 26.22it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.22it/s] 42%|####2     | 11/26 [00:00<00:00, 34.49it/s] 62%|######1   | 16/26 [00:00<00:00, 39.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.03it/s] 81%|########  | 21/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 43.69it/s]100%|##########| 26/26 [00:00<00:00, 34.78it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.61 (  0.61)	test_minacc   0.71 (  0.71)	test_majacc   0.59 (  0.59)	Loss_d 0.641 (0.641)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.646 (0.638)	test_acc   0.59 (  0.59)	test_minacc   0.76 (  0.71)	test_majacc   0.56 (  0.57)	Loss_d 0.646 (0.638)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.17 (  0.22)
Test: [  20/  26]	Loss 0.640 (0.641)	test_acc   0.59 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.640 (0.641)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.645 (0.642)	test_acc   0.60 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.57)	Loss_d 0.645 (0.642)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.22 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.53it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 26/  1]	epoch_time 0.0403 (0.0430)	validation_time 0.0003 (0.0007)	train_time 0.0400 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.590600011408329, 0.6520000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 19%|#9        | 5/26 [00:00<00:00, 24.46it/s] 35%|###4      | 9/26 [00:00<00:00, 29.42it/s] 50%|#####     | 13/26 [00:00<00:00, 31.70it/s] 65%|######5   | 17/26 [00:00<00:00, 33.01it/s] 81%|########  | 21/26 [00:00<00:00, 33.75it/s] 96%|#########6| 25/26 [00:00<00:00, 34.21it/s]100%|##########| 26/26 [00:00<00:00, 29.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.59 (  0.59)	train_minacc   0.70 (  0.69)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7432 (4.7507)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 31%|###       | 8/26 [00:00<00:00, 38.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.86it/s] 50%|#####     | 13/26 [00:00<00:00, 41.12it/s] 69%|######9   | 18/26 [00:00<00:00, 40.29it/s]                                                69%|######9   | 18/26 [00:00<00:00, 40.29it/s] 88%|########8 | 23/26 [00:00<00:00, 42.02it/s]100%|##########| 26/26 [00:00<00:00, 37.43it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.62 (  0.62)	test_minacc   0.73 (  0.73)	test_majacc   0.59 (  0.59)	Loss_d 0.639 (0.639)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.642 (0.636)	test_acc   0.60 (  0.60)	test_minacc   0.76 (  0.71)	test_majacc   0.57 (  0.58)	Loss_d 0.642 (0.636)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.19 (  0.23)
Test: [  20/  26]	Loss 0.638 (0.638)	test_acc   0.59 (  0.60)	test_minacc   0.73 (  0.70)	test_majacc   0.57 (  0.58)	Loss_d 0.638 (0.638)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.642 (0.639)	test_acc   0.60 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.58)	Loss_d 0.642 (0.639)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.23 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.63it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.697 (0.697)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.697 (0.697)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 27/  1]	epoch_time 0.0427 (0.0430)	validation_time 0.0005 (0.0007)	train_time 0.0422 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5943000123500825, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.47it/s] 23%|##3       | 6/26 [00:00<00:00, 25.36it/s] 38%|###8      | 10/26 [00:00<00:00, 28.81it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.35it/s] 69%|######9   | 18/26 [00:00<00:00, 32.48it/s] 85%|########4 | 22/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 34.81it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.63 ( 22.63)	train_acc   0.60 (  0.59)	train_minacc   0.70 (  0.70)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7499 (4.7608)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.76it/s] 31%|###       | 8/26 [00:00<00:00, 33.77it/s]                                               31%|###       | 8/26 [00:00<00:00, 33.77it/s] 50%|#####     | 13/26 [00:00<00:00, 39.29it/s] 69%|######9   | 18/26 [00:00<00:00, 42.03it/s]                                                69%|######9   | 18/26 [00:00<00:00, 42.03it/s] 88%|########8 | 23/26 [00:00<00:00, 43.20it/s]100%|##########| 26/26 [00:00<00:00, 36.90it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.62 (  0.62)	test_minacc   0.73 (  0.73)	test_majacc   0.60 (  0.60)	Loss_d 0.637 (0.637)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.639 (0.633)	test_acc   0.59 (  0.60)	test_minacc   0.73 (  0.71)	test_majacc   0.57 (  0.58)	Loss_d 0.639 (0.633)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.20 (  0.24)
Test: [  20/  26]	Loss 0.637 (0.635)	test_acc   0.60 (  0.60)	test_minacc   0.73 (  0.70)	test_majacc   0.58 (  0.58)	Loss_d 0.637 (0.635)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.640 (0.636)	test_acc   0.60 (  0.60)	test_minacc   0.70 (  0.70)	test_majacc   0.57 (  0.58)	Loss_d 0.640 (0.636)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.23 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 0.698 (0.698)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.698 (0.698)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.698 (0.698)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.64 (  0.64)	Loss_d 0.698 (0.698)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 28/  1]	epoch_time 0.0408 (0.0429)	validation_time 0.0003 (0.0007)	train_time 0.0405 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5975000075101853, 0.6550000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.93it/s] 19%|#9        | 5/26 [00:00<00:00, 21.77it/s] 35%|###4      | 9/26 [00:00<00:00, 27.57it/s] 50%|#####     | 13/26 [00:00<00:00, 30.73it/s] 65%|######5   | 17/26 [00:00<00:00, 32.03it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.98it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.70 (  0.70)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.7562 (4.7719)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 23%|##3       | 6/26 [00:00<00:00, 24.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.12it/s] 42%|####2     | 11/26 [00:00<00:00, 31.79it/s] 62%|######1   | 16/26 [00:00<00:00, 37.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.13it/s] 81%|########  | 21/26 [00:00<00:00, 37.85it/s]100%|##########| 26/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 32.00it/s]
Test: [   0/  26]	Loss 0.634 (0.634)	test_acc   0.63 (  0.63)	test_minacc   0.73 (  0.73)	test_majacc   0.61 (  0.61)	Loss_d 0.634 (0.634)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.634 (0.630)	test_acc   0.59 (  0.61)	test_minacc   0.71 (  0.71)	test_majacc   0.57 (  0.59)	Loss_d 0.634 (0.630)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.21 (  0.25)
Test: [  20/  26]	Loss 0.634 (0.632)	test_acc   0.60 (  0.61)	test_minacc   0.73 (  0.71)	test_majacc   0.58 (  0.59)	Loss_d 0.634 (0.632)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.58 (  0.59)	test_corr_d   0.23 (  0.25)
Test: [  26/  26]	Loss 0.638 (0.633)	test_acc   0.60 (  0.60)	test_minacc   0.70 (  0.70)	test_majacc   0.57 (  0.58)	Loss_d 0.638 (0.633)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.24 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.44it/s]
Test: [  0/  1]	Loss 0.700 (0.700)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.700 (0.700)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.700 (0.700)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.66 (  0.66)	Loss_d 0.700 (0.700)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 29/  1]	epoch_time 0.0401 (0.0428)	validation_time 0.0004 (0.0007)	train_time 0.0397 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6016000061035156, 0.6550000309944153)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.48it/s] 19%|#9        | 5/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:00, 21.76it/s] 50%|#####     | 13/26 [00:00<00:00, 26.31it/s] 65%|######5   | 17/26 [00:00<00:00, 29.28it/s] 81%|########  | 21/26 [00:00<00:00, 31.47it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:01<00:00, 24.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.60)	train_minacc   0.70 (  0.70)	train_majacc   0.58 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7629 (4.7828)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.17it/s] 27%|##6       | 7/26 [00:00<00:00, 34.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.94it/s] 50%|#####     | 13/26 [00:00<00:00, 40.52it/s] 69%|######9   | 18/26 [00:00<00:00, 41.17it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.17it/s] 88%|########8 | 23/26 [00:00<00:00, 42.56it/s]100%|##########| 26/26 [00:00<00:00, 37.65it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.63 (  0.63)	test_minacc   0.74 (  0.74)	test_majacc   0.61 (  0.61)	Loss_d 0.632 (0.632)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.631 (0.628)	test_acc   0.60 (  0.61)	test_minacc   0.73 (  0.71)	test_majacc   0.57 (  0.59)	Loss_d 0.631 (0.628)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.23 (  0.26)
Test: [  20/  26]	Loss 0.632 (0.629)	test_acc   0.59 (  0.61)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.59)	Loss_d 0.632 (0.629)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.23 (  0.26)
Test: [  26/  26]	Loss 0.635 (0.630)	test_acc   0.59 (  0.60)	test_minacc   0.70 (  0.70)	test_majacc   0.57 (  0.59)	Loss_d 0.635 (0.630)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.88it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.66 (  0.66)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 30/  1]	epoch_time 0.0398 (0.0427)	validation_time 0.0005 (0.0006)	train_time 0.0393 (0.0420)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6034000046253204, 0.656000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.07it/s] 15%|#5        | 4/26 [00:00<00:01, 14.25it/s] 31%|###       | 8/26 [00:00<00:00, 21.79it/s] 46%|####6     | 12/26 [00:00<00:00, 25.58it/s] 62%|######1   | 16/26 [00:00<00:00, 27.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.10it/s] 92%|#########2| 24/26 [00:00<00:00, 30.80it/s]100%|##########| 26/26 [00:01<00:00, 25.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.60)	train_minacc   0.72 (  0.70)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7684 (4.7948)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.81it/s] 23%|##3       | 6/26 [00:00<00:00, 23.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.11it/s] 42%|####2     | 11/26 [00:00<00:00, 31.95it/s] 62%|######1   | 16/26 [00:00<00:00, 37.37it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.37it/s] 81%|########  | 21/26 [00:00<00:00, 38.49it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]100%|##########| 26/26 [00:00<00:00, 31.86it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.62 (  0.62)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.629 (0.629)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.625 (0.624)	test_acc   0.60 (  0.61)	test_minacc   0.69 (  0.70)	test_majacc   0.58 (  0.60)	Loss_d 0.625 (0.624)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.69 (  0.70)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.24 (  0.27)
Test: [  20/  26]	Loss 0.629 (0.626)	test_acc   0.61 (  0.62)	test_minacc   0.72 (  0.70)	test_majacc   0.59 (  0.60)	Loss_d 0.629 (0.626)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.24 (  0.27)
Test: [  26/  26]	Loss 0.634 (0.627)	test_acc   0.59 (  0.61)	test_minacc   0.72 (  0.70)	test_majacc   0.57 (  0.60)	Loss_d 0.634 (0.627)	test_acc_d   0.59 (  0.61)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.55it/s]
Test: [  0/  1]	Loss 0.705 (0.705)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.68 (  0.68)	Loss_d 0.705 (0.705)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.705 (0.705)	test_acc   0.65 (  0.65)	test_minacc   0.64 (  0.64)	test_majacc   0.68 (  0.68)	Loss_d 0.705 (0.705)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.68 (  0.68)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 31/  1]	epoch_time 0.0483 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0479 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6108000088334083, 0.6480000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 27.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.30it/s] 65%|######5   | 17/26 [00:00<00:00, 32.08it/s] 81%|########  | 21/26 [00:00<00:00, 33.65it/s] 96%|#########6| 25/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 28.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.60)	train_minacc   0.70 (  0.69)	train_majacc   0.58 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7707 (4.8013)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 23%|##3       | 6/26 [00:00<00:00, 29.34it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.34it/s] 42%|####2     | 11/26 [00:00<00:00, 36.90it/s] 62%|######1   | 16/26 [00:00<00:00, 41.69it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.69it/s] 81%|########  | 21/26 [00:00<00:00, 42.39it/s]100%|##########| 26/26 [00:00<00:00, 36.15it/s]
Test: [   0/  26]	Loss 0.630 (0.630)	test_acc   0.63 (  0.63)	test_minacc   0.73 (  0.73)	test_majacc   0.61 (  0.61)	Loss_d 0.630 (0.630)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.627 (0.625)	test_acc   0.60 (  0.61)	test_minacc   0.76 (  0.72)	test_majacc   0.57 (  0.59)	Loss_d 0.627 (0.625)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.76 (  0.72)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.630 (0.625)	test_acc   0.59 (  0.60)	test_minacc   0.73 (  0.70)	test_majacc   0.57 (  0.58)	Loss_d 0.630 (0.625)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.73 (  0.70)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.630 (0.626)	test_acc   0.60 (  0.60)	test_minacc   0.70 (  0.70)	test_majacc   0.58 (  0.58)	Loss_d 0.630 (0.626)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 32/  1]	epoch_time 0.0449 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0445 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5992000052928924, 0.6540000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.88it/s] 19%|#9        | 5/26 [00:00<00:01, 19.82it/s] 35%|###4      | 9/26 [00:00<00:00, 25.41it/s] 50%|#####     | 13/26 [00:00<00:00, 28.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.17it/s] 81%|########  | 21/26 [00:00<00:00, 32.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 27.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.70)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7830 (4.8077)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 27%|##6       | 7/26 [00:00<00:00, 27.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.45it/s] 46%|####6     | 12/26 [00:00<00:00, 34.76it/s] 65%|######5   | 17/26 [00:00<00:00, 39.15it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.15it/s] 85%|########4 | 22/26 [00:00<00:00, 38.69it/s]100%|##########| 26/26 [00:00<00:00, 33.59it/s]
Test: [   0/  26]	Loss 0.627 (0.627)	test_acc   0.63 (  0.63)	test_minacc   0.68 (  0.68)	test_majacc   0.62 (  0.62)	Loss_d 0.627 (0.627)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.28 (  0.28)
Test: [  10/  26]	Loss 0.619 (0.621)	test_acc   0.62 (  0.63)	test_minacc   0.71 (  0.69)	test_majacc   0.60 (  0.62)	Loss_d 0.619 (0.621)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.26 (  0.28)
Test: [  20/  26]	Loss 0.625 (0.622)	test_acc   0.62 (  0.63)	test_minacc   0.72 (  0.69)	test_majacc   0.60 (  0.62)	Loss_d 0.625 (0.622)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.60 (  0.62)	test_corr_d   0.26 (  0.29)
Test: [  26/  26]	Loss 0.634 (0.624)	test_acc   0.60 (  0.62)	test_minacc   0.72 (  0.69)	test_majacc   0.58 (  0.61)	Loss_d 0.634 (0.624)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.58 (  0.61)	test_corr_d   0.26 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.15it/s]
Test: [  0/  1]	Loss 0.709 (0.709)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.73 (  0.73)	Loss_d 0.709 (0.709)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.709 (0.709)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.73 (  0.73)	Loss_d 0.709 (0.709)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.73 (  0.73)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 33/  1]	epoch_time 0.0431 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0426 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6218000076413155, 0.6430000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 19%|#9        | 5/26 [00:00<00:00, 21.17it/s] 35%|###4      | 9/26 [00:00<00:00, 26.65it/s] 50%|#####     | 13/26 [00:00<00:00, 29.73it/s] 65%|######5   | 17/26 [00:00<00:00, 31.16it/s] 81%|########  | 21/26 [00:00<00:00, 32.66it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 26.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.58 (  0.61)	train_minacc   0.72 (  0.69)	train_majacc   0.56 (  0.59)	train_corr   0.00 (  0.00)	l1 4.7766 (4.7974)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.55it/s]  8%|7         | 2/26 [00:00<00:03,  6.60it/s] 31%|###       | 8/26 [00:00<00:00, 24.59it/s]                                               31%|###       | 8/26 [00:00<00:00, 24.59it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.35it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.35it/s] 96%|#########6| 25/26 [00:00<00:00, 43.55it/s]100%|##########| 26/26 [00:00<00:00, 31.08it/s]
Test: [   0/  26]	Loss 0.635 (0.635)	test_acc   0.61 (  0.61)	test_minacc   0.66 (  0.66)	test_majacc   0.60 (  0.60)	Loss_d 0.635 (0.635)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.630 (0.629)	test_acc   0.59 (  0.60)	test_minacc   0.76 (  0.71)	test_majacc   0.56 (  0.58)	Loss_d 0.630 (0.629)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.633 (0.628)	test_acc   0.58 (  0.60)	test_minacc   0.68 (  0.70)	test_majacc   0.56 (  0.58)	Loss_d 0.633 (0.628)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.24 (  0.27)
Test: [  26/  26]	Loss 0.632 (0.630)	test_acc   0.58 (  0.59)	test_minacc   0.72 (  0.70)	test_majacc   0.56 (  0.57)	Loss_d 0.632 (0.630)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.37it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.694 (0.694)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.694 (0.694)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 34/  1]	epoch_time 0.0421 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0417 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5930000063180924, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.30it/s] 15%|#5        | 4/26 [00:00<00:01, 20.00it/s] 31%|###       | 8/26 [00:00<00:00, 27.30it/s] 46%|####6     | 12/26 [00:00<00:00, 31.05it/s] 62%|######1   | 16/26 [00:00<00:00, 32.49it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.17it/s] 92%|#########2| 24/26 [00:00<00:00, 34.38it/s]100%|##########| 26/26 [00:00<00:00, 28.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.70)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7860 (4.8005)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.08it/s] 23%|##3       | 6/26 [00:00<00:00, 26.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.06it/s] 42%|####2     | 11/26 [00:00<00:00, 33.74it/s] 62%|######1   | 16/26 [00:00<00:00, 38.81it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.81it/s] 81%|########  | 21/26 [00:00<00:00, 37.57it/s]100%|##########| 26/26 [00:00<00:00, 40.97it/s]100%|##########| 26/26 [00:00<00:00, 33.03it/s]
Test: [   0/  26]	Loss 0.632 (0.632)	test_acc   0.64 (  0.64)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.63)	Loss_d 0.632 (0.632)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.621 (0.626)	test_acc   0.63 (  0.63)	test_minacc   0.73 (  0.69)	test_majacc   0.61 (  0.61)	Loss_d 0.621 (0.626)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.73 (  0.69)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.627 (0.626)	test_acc   0.62 (  0.63)	test_minacc   0.68 (  0.69)	test_majacc   0.61 (  0.62)	Loss_d 0.627 (0.626)	test_acc_d   0.62 (  0.63)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.61 (  0.62)	test_corr_d   0.25 (  0.28)
Test: [  26/  26]	Loss 0.638 (0.628)	test_acc   0.60 (  0.62)	test_minacc   0.72 (  0.68)	test_majacc   0.57 (  0.61)	Loss_d 0.638 (0.628)	test_acc_d   0.60 (  0.62)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.57 (  0.61)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.01it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.71 (  0.71)	Loss_d 0.707 (0.707)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.71 (  0.71)	Loss_d 0.707 (0.707)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.71 (  0.71)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 35/  1]	epoch_time 0.0419 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0415 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6215000097751617, 0.6380000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.97it/s] 19%|#9        | 5/26 [00:00<00:00, 21.46it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.71it/s] 81%|########  | 21/26 [00:00<00:00, 33.01it/s] 96%|#########6| 25/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.63 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.58 (  0.61)	train_minacc   0.72 (  0.69)	train_majacc   0.55 (  0.59)	train_corr   0.00 (  0.00)	l1 4.7787 (4.7961)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 23%|##3       | 6/26 [00:00<00:00, 22.40it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.40it/s] 42%|####2     | 11/26 [00:00<00:00, 31.30it/s] 62%|######1   | 16/26 [00:00<00:00, 36.61it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.61it/s] 81%|########  | 21/26 [00:00<00:00, 36.45it/s]100%|##########| 26/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 30.78it/s]
Test: [   0/  26]	Loss 0.637 (0.637)	test_acc   0.60 (  0.60)	test_minacc   0.66 (  0.66)	test_majacc   0.59 (  0.59)	Loss_d 0.637 (0.637)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.629 (0.630)	test_acc   0.59 (  0.60)	test_minacc   0.74 (  0.71)	test_majacc   0.56 (  0.58)	Loss_d 0.629 (0.630)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.74 (  0.71)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.24 (  0.26)
Test: [  20/  26]	Loss 0.633 (0.629)	test_acc   0.58 (  0.59)	test_minacc   0.68 (  0.70)	test_majacc   0.56 (  0.58)	Loss_d 0.633 (0.629)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.68 (  0.70)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.632 (0.630)	test_acc   0.58 (  0.59)	test_minacc   0.70 (  0.70)	test_majacc   0.56 (  0.57)	Loss_d 0.632 (0.630)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.08it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.695 (0.695)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.695 (0.695)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 36/  1]	epoch_time 0.0443 (0.0429)	validation_time 0.0005 (0.0006)	train_time 0.0438 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5911000131964683, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:01, 20.49it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.57it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.60it/s] 96%|#########6| 25/26 [00:00<00:00, 33.96it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.60)	train_minacc   0.72 (  0.69)	train_majacc   0.57 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7760 (4.7990)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.64it/s] 27%|##6       | 7/26 [00:00<00:00, 30.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.39it/s] 46%|####6     | 12/26 [00:00<00:00, 37.43it/s] 65%|######5   | 17/26 [00:00<00:00, 40.32it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.32it/s] 85%|########4 | 22/26 [00:00<00:00, 41.44it/s]100%|##########| 26/26 [00:00<00:00, 35.94it/s]
Test: [   0/  26]	Loss 0.634 (0.634)	test_acc   0.64 (  0.64)	test_minacc   0.68 (  0.68)	test_majacc   0.64 (  0.64)	Loss_d 0.634 (0.634)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.64 (  0.64)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.621 (0.627)	test_acc   0.64 (  0.63)	test_minacc   0.71 (  0.68)	test_majacc   0.62 (  0.62)	Loss_d 0.621 (0.627)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.71 (  0.68)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.27)
Test: [  20/  26]	Loss 0.627 (0.628)	test_acc   0.63 (  0.63)	test_minacc   0.68 (  0.68)	test_majacc   0.62 (  0.62)	Loss_d 0.627 (0.628)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.28)
Test: [  26/  26]	Loss 0.640 (0.629)	test_acc   0.60 (  0.63)	test_minacc   0.72 (  0.68)	test_majacc   0.58 (  0.62)	Loss_d 0.640 (0.629)	test_acc_d   0.60 (  0.63)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.58 (  0.62)	test_corr_d   0.25 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.83it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 37/  1]	epoch_time 0.0423 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6259000062346458, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 19%|#9        | 5/26 [00:00<00:00, 22.18it/s] 35%|###4      | 9/26 [00:00<00:00, 27.59it/s] 50%|#####     | 13/26 [00:00<00:00, 30.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.59it/s] 81%|########  | 21/26 [00:00<00:00, 33.64it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.58 (  0.61)	train_minacc   0.72 (  0.68)	train_majacc   0.55 (  0.60)	train_corr   0.00 (  0.00)	l1 4.7847 (4.7807)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.28it/s] 23%|##3       | 6/26 [00:00<00:00, 26.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.82it/s] 46%|####6     | 12/26 [00:00<00:00, 38.06it/s] 65%|######5   | 17/26 [00:00<00:00, 40.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.39it/s] 85%|########4 | 22/26 [00:00<00:00, 42.68it/s]100%|##########| 26/26 [00:00<00:00, 34.83it/s]
Test: [   0/  26]	Loss 0.644 (0.644)	test_acc   0.59 (  0.59)	test_minacc   0.69 (  0.69)	test_majacc   0.58 (  0.58)	Loss_d 0.644 (0.644)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.634 (0.637)	test_acc   0.59 (  0.59)	test_minacc   0.76 (  0.71)	test_majacc   0.56 (  0.57)	Loss_d 0.634 (0.637)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.76 (  0.71)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.22 (  0.23)
Test: [  20/  26]	Loss 0.639 (0.635)	test_acc   0.58 (  0.59)	test_minacc   0.72 (  0.71)	test_majacc   0.56 (  0.57)	Loss_d 0.639 (0.635)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.638 (0.636)	test_acc   0.58 (  0.58)	test_minacc   0.70 (  0.71)	test_majacc   0.55 (  0.56)	Loss_d 0.638 (0.636)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.21 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.69it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 38/  1]	epoch_time 0.0414 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5847000145316124, 0.6510000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.60it/s] 23%|##3       | 6/26 [00:00<00:00, 26.86it/s] 38%|###8      | 10/26 [00:00<00:00, 29.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.53it/s] 69%|######9   | 18/26 [00:00<00:00, 32.35it/s] 85%|########4 | 22/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 29.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.62 (  0.60)	train_minacc   0.74 (  0.69)	train_majacc   0.59 (  0.58)	train_corr   0.00 (  0.00)	l1 4.7265 (4.7842)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  4.04it/s] 19%|#9        | 5/26 [00:00<00:01, 16.90it/s]                                               19%|#9        | 5/26 [00:00<00:01, 16.90it/s] 42%|####2     | 11/26 [00:00<00:00, 29.38it/s] 65%|######5   | 17/26 [00:00<00:00, 34.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 34.90it/s] 85%|########4 | 22/26 [00:00<00:00, 37.88it/s]100%|##########| 26/26 [00:00<00:00, 29.42it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.63 (  0.63)	test_minacc   0.68 (  0.68)	test_majacc   0.62 (  0.62)	Loss_d 0.639 (0.639)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.26 (  0.26)
Test: [  10/  26]	Loss 0.625 (0.633)	test_acc   0.63 (  0.62)	test_minacc   0.71 (  0.67)	test_majacc   0.62 (  0.61)	Loss_d 0.625 (0.633)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.71 (  0.67)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.25 (  0.26)
Test: [  20/  26]	Loss 0.632 (0.633)	test_acc   0.64 (  0.63)	test_minacc   0.68 (  0.67)	test_majacc   0.63 (  0.62)	Loss_d 0.632 (0.633)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.25 (  0.27)
Test: [  26/  26]	Loss 0.644 (0.635)	test_acc   0.61 (  0.62)	test_minacc   0.70 (  0.67)	test_majacc   0.59 (  0.62)	Loss_d 0.644 (0.635)	test_acc_d   0.61 (  0.62)	test_minacc_d   0.70 (  0.67)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.25 (  0.27)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.83it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.62 (  0.62)	test_majacc   0.72 (  0.72)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 39/  1]	epoch_time 0.0435 (0.0429)	validation_time 0.0007 (0.0006)	train_time 0.0428 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6246000088453293, 0.6300000548362732)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 22.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.37it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.57 (  0.62)	train_minacc   0.70 (  0.66)	train_majacc   0.54 (  0.61)	train_corr   0.00 (  0.00)	l1 4.7075 (4.7094)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.84it/s] 27%|##6       | 7/26 [00:00<00:00, 33.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.88it/s] 46%|####6     | 12/26 [00:00<00:00, 39.35it/s] 65%|######5   | 17/26 [00:00<00:00, 42.28it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.28it/s] 85%|########4 | 22/26 [00:00<00:00, 39.61it/s]100%|##########| 26/26 [00:00<00:00, 36.71it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.647 (0.647)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.634 (0.640)	test_acc   0.59 (  0.59)	test_minacc   0.73 (  0.72)	test_majacc   0.56 (  0.57)	Loss_d 0.634 (0.640)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.21 (  0.22)
Test: [  20/  26]	Loss 0.641 (0.639)	test_acc   0.59 (  0.59)	test_minacc   0.73 (  0.72)	test_majacc   0.56 (  0.57)	Loss_d 0.641 (0.639)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.73 (  0.72)	test_majacc_d   0.56 (  0.57)	test_corr_d   0.21 (  0.23)
Test: [  26/  26]	Loss 0.644 (0.640)	test_acc   0.56 (  0.59)	test_minacc   0.70 (  0.71)	test_majacc   0.53 (  0.57)	Loss_d 0.644 (0.640)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.53 (  0.57)	test_corr_d   0.21 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.57it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.64)	Loss_d 0.696 (0.696)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.64)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 40/  1]	epoch_time 0.0415 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.589000014603138, 0.6490000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.73it/s] 19%|#9        | 5/26 [00:00<00:01, 20.24it/s] 35%|###4      | 9/26 [00:00<00:00, 25.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 30.85it/s] 81%|########  | 21/26 [00:00<00:00, 32.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.01it/s]100%|##########| 26/26 [00:00<00:00, 27.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.72 (  0.70)	train_majacc   0.57 (  0.56)	train_corr   0.00 (  0.00)	l1 4.7283 (4.7276)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.93it/s] 23%|##3       | 6/26 [00:00<00:00, 23.43it/s]                                               23%|##3       | 6/26 [00:00<00:00, 23.43it/s] 42%|####2     | 11/26 [00:00<00:00, 32.03it/s] 62%|######1   | 16/26 [00:00<00:00, 37.48it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.48it/s] 81%|########  | 21/26 [00:00<00:00, 37.39it/s]100%|##########| 26/26 [00:00<00:00, 40.75it/s]100%|##########| 26/26 [00:00<00:00, 31.50it/s]
Test: [   0/  26]	Loss 0.642 (0.642)	test_acc   0.62 (  0.62)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.642 (0.642)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.629 (0.635)	test_acc   0.61 (  0.61)	test_minacc   0.69 (  0.68)	test_majacc   0.59 (  0.60)	Loss_d 0.629 (0.635)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.69 (  0.68)	test_majacc_d   0.59 (  0.60)	test_corr_d   0.24 (  0.25)
Test: [  20/  26]	Loss 0.634 (0.635)	test_acc   0.62 (  0.61)	test_minacc   0.70 (  0.68)	test_majacc   0.60 (  0.60)	Loss_d 0.634 (0.635)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.24 (  0.26)
Test: [  26/  26]	Loss 0.644 (0.636)	test_acc   0.60 (  0.61)	test_minacc   0.72 (  0.67)	test_majacc   0.58 (  0.60)	Loss_d 0.644 (0.636)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.72 (  0.67)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.707 (0.707)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 41/  1]	epoch_time 0.0414 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6091000072360039, 0.6320000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.99it/s] 19%|#9        | 5/26 [00:00<00:01, 20.51it/s] 35%|###4      | 9/26 [00:00<00:00, 26.68it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.28it/s] 81%|########  | 21/26 [00:00<00:00, 31.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.57 (  0.60)	train_minacc   0.72 (  0.68)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.7256 (4.7270)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.65it/s] 23%|##3       | 6/26 [00:00<00:00, 24.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.26it/s] 46%|####6     | 12/26 [00:00<00:00, 35.95it/s] 65%|######5   | 17/26 [00:00<00:00, 40.49it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.49it/s] 88%|########8 | 23/26 [00:00<00:00, 44.82it/s]100%|##########| 26/26 [00:00<00:00, 34.86it/s]
Test: [   0/  26]	Loss 0.647 (0.647)	test_acc   0.58 (  0.58)	test_minacc   0.66 (  0.66)	test_majacc   0.57 (  0.57)	Loss_d 0.647 (0.647)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.639 (0.641)	test_acc   0.59 (  0.58)	test_minacc   0.73 (  0.71)	test_majacc   0.56 (  0.56)	Loss_d 0.639 (0.641)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.73 (  0.71)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.642 (0.639)	test_acc   0.58 (  0.58)	test_minacc   0.72 (  0.70)	test_majacc   0.56 (  0.56)	Loss_d 0.642 (0.639)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.638 (0.639)	test_acc   0.57 (  0.58)	test_minacc   0.72 (  0.70)	test_majacc   0.54 (  0.56)	Loss_d 0.638 (0.639)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.21 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.61)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.61 (  0.61)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 42/  1]	epoch_time 0.0388 (0.0427)	validation_time 0.0003 (0.0006)	train_time 0.0384 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5807000041007996, 0.6420000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.50it/s] 50%|#####     | 13/26 [00:00<00:00, 31.32it/s] 65%|######5   | 17/26 [00:00<00:00, 33.06it/s] 81%|########  | 21/26 [00:00<00:00, 34.19it/s] 96%|#########6| 25/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.67 (  0.70)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 4.6971 (4.7405)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.54it/s] 27%|##6       | 7/26 [00:00<00:00, 34.44it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.44it/s] 46%|####6     | 12/26 [00:00<00:00, 39.65it/s] 65%|######5   | 17/26 [00:00<00:00, 38.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.14it/s] 85%|########4 | 22/26 [00:00<00:00, 40.67it/s]100%|##########| 26/26 [00:00<00:00, 35.46it/s]
Test: [   0/  26]	Loss 0.638 (0.638)	test_acc   0.63 (  0.63)	test_minacc   0.66 (  0.66)	test_majacc   0.62 (  0.62)	Loss_d 0.638 (0.638)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.27 (  0.27)
Test: [  10/  26]	Loss 0.627 (0.633)	test_acc   0.64 (  0.62)	test_minacc   0.69 (  0.65)	test_majacc   0.63 (  0.62)	Loss_d 0.627 (0.633)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.69 (  0.65)	test_majacc_d   0.63 (  0.62)	test_corr_d   0.25 (  0.27)
Test: [  20/  26]	Loss 0.630 (0.633)	test_acc   0.65 (  0.63)	test_minacc   0.67 (  0.65)	test_majacc   0.64 (  0.63)	Loss_d 0.630 (0.633)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.26 (  0.28)
Test: [  26/  26]	Loss 0.644 (0.634)	test_acc   0.61 (  0.63)	test_minacc   0.67 (  0.65)	test_majacc   0.59 (  0.62)	Loss_d 0.644 (0.634)	test_acc_d   0.61 (  0.63)	test_minacc_d   0.67 (  0.65)	test_majacc_d   0.59 (  0.62)	test_corr_d   0.26 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.52it/s]
Test: [  0/  1]	Loss 0.711 (0.711)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.69 (  0.69)	Loss_d 0.711 (0.711)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.711 (0.711)	test_acc   0.61 (  0.61)	test_minacc   0.61 (  0.61)	test_majacc   0.69 (  0.69)	Loss_d 0.711 (0.711)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.69 (  0.69)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 43/  1]	epoch_time 0.0473 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0469 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6267000122070312, 0.6140000224113464)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 19%|#9        | 5/26 [00:00<00:01, 18.17it/s] 35%|###4      | 9/26 [00:00<00:00, 24.49it/s] 50%|#####     | 13/26 [00:00<00:00, 28.04it/s] 65%|######5   | 17/26 [00:00<00:00, 30.43it/s] 81%|########  | 21/26 [00:00<00:00, 31.93it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.56 (  0.61)	train_minacc   0.70 (  0.65)	train_majacc   0.53 (  0.61)	train_corr   0.00 (  0.00)	l1 4.6746 (4.6712)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 23%|##3       | 6/26 [00:00<00:00, 25.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.00it/s] 42%|####2     | 11/26 [00:00<00:00, 33.36it/s] 62%|######1   | 16/26 [00:00<00:00, 38.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.02it/s] 81%|########  | 21/26 [00:00<00:00, 37.35it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]100%|##########| 26/26 [00:00<00:00, 31.72it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.60 (  0.60)	test_minacc   0.71 (  0.71)	test_majacc   0.58 (  0.58)	Loss_d 0.653 (0.653)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.642 (0.647)	test_acc   0.58 (  0.58)	test_minacc   0.76 (  0.72)	test_majacc   0.55 (  0.56)	Loss_d 0.642 (0.647)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.76 (  0.72)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.18 (  0.20)
Test: [  20/  26]	Loss 0.647 (0.646)	test_acc   0.59 (  0.58)	test_minacc   0.72 (  0.72)	test_majacc   0.56 (  0.56)	Loss_d 0.647 (0.646)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.648 (0.647)	test_acc   0.57 (  0.58)	test_minacc   0.72 (  0.72)	test_majacc   0.54 (  0.56)	Loss_d 0.648 (0.647)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.95it/s]
Test: [  0/  1]	Loss 0.685 (0.685)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.685 (0.685)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.11 ( -0.11)
Test: [  1/  1]	Loss 0.685 (0.685)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.685 (0.685)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.11 ( -0.11)
Overall Timing[ 44/  1]	epoch_time 0.0415 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0411 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.580800009906292, 0.659000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.28it/s] 15%|#5        | 4/26 [00:00<00:01, 12.71it/s] 31%|###       | 8/26 [00:00<00:00, 20.75it/s] 46%|####6     | 12/26 [00:00<00:00, 25.41it/s] 62%|######1   | 16/26 [00:00<00:00, 28.24it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.18it/s] 92%|#########2| 24/26 [00:00<00:00, 31.83it/s]100%|##########| 26/26 [00:01<00:00, 24.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.58 (  0.58)	train_minacc   0.70 (  0.69)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 4.6893 (4.6860)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.69it/s] 23%|##3       | 6/26 [00:00<00:00, 27.65it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.65it/s] 42%|####2     | 11/26 [00:00<00:00, 36.33it/s] 62%|######1   | 16/26 [00:00<00:00, 41.00it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.00it/s] 81%|########  | 21/26 [00:00<00:00, 42.62it/s]100%|##########| 26/26 [00:00<00:00, 44.10it/s]100%|##########| 26/26 [00:00<00:00, 35.70it/s]
Test: [   0/  26]	Loss 0.648 (0.648)	test_acc   0.62 (  0.62)	test_minacc   0.68 (  0.68)	test_majacc   0.60 (  0.60)	Loss_d 0.648 (0.648)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.23 (  0.23)
Test: [  10/  26]	Loss 0.636 (0.642)	test_acc   0.62 (  0.60)	test_minacc   0.71 (  0.68)	test_majacc   0.61 (  0.59)	Loss_d 0.636 (0.642)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.71 (  0.68)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.21 (  0.23)
Test: [  20/  26]	Loss 0.640 (0.642)	test_acc   0.62 (  0.61)	test_minacc   0.70 (  0.67)	test_majacc   0.61 (  0.60)	Loss_d 0.640 (0.642)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.70 (  0.67)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.22 (  0.24)
Test: [  26/  26]	Loss 0.650 (0.643)	test_acc   0.58 (  0.61)	test_minacc   0.70 (  0.67)	test_majacc   0.55 (  0.59)	Loss_d 0.650 (0.643)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.70 (  0.67)	test_majacc_d   0.55 (  0.59)	test_corr_d   0.23 (  0.24)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.701 (0.701)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 45/  1]	epoch_time 0.0445 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0440 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6057000063061714, 0.6340000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 19%|#9        | 5/26 [00:00<00:01, 20.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.14it/s] 46%|####6     | 12/26 [00:00<00:00, 26.34it/s] 62%|######1   | 16/26 [00:00<00:00, 28.55it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.82it/s] 92%|#########2| 24/26 [00:00<00:00, 31.25it/s]100%|##########| 26/26 [00:00<00:00, 26.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.56 (  0.59)	train_minacc   0.70 (  0.68)	train_majacc   0.53 (  0.58)	train_corr   0.00 (  0.00)	l1 4.6879 (4.6820)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 23%|##3       | 6/26 [00:00<00:00, 25.82it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.82it/s] 42%|####2     | 11/26 [00:00<00:00, 33.51it/s] 62%|######1   | 16/26 [00:00<00:00, 38.14it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.14it/s] 81%|########  | 21/26 [00:00<00:00, 37.37it/s]100%|##########| 26/26 [00:00<00:00, 40.87it/s]100%|##########| 26/26 [00:00<00:00, 32.58it/s]
Test: [   0/  26]	Loss 0.652 (0.652)	test_acc   0.58 (  0.58)	test_minacc   0.68 (  0.68)	test_majacc   0.56 (  0.56)	Loss_d 0.652 (0.652)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.645 (0.647)	test_acc   0.58 (  0.57)	test_minacc   0.71 (  0.69)	test_majacc   0.56 (  0.55)	Loss_d 0.645 (0.647)	test_acc_d   0.58 (  0.57)	test_minacc_d   0.71 (  0.69)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.646 (0.644)	test_acc   0.58 (  0.58)	test_minacc   0.72 (  0.69)	test_majacc   0.56 (  0.56)	Loss_d 0.646 (0.644)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.72 (  0.69)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.23)
Test: [  26/  26]	Loss 0.640 (0.644)	test_acc   0.56 (  0.58)	test_minacc   0.70 (  0.69)	test_majacc   0.53 (  0.56)	Loss_d 0.640 (0.644)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.70 (  0.69)	test_majacc_d   0.53 (  0.56)	test_corr_d   0.21 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 46/  1]	epoch_time 0.0456 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0453 (0.0423)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.575600010752678, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 19%|#9        | 5/26 [00:00<00:01, 17.60it/s] 35%|###4      | 9/26 [00:00<00:00, 24.53it/s] 50%|#####     | 13/26 [00:00<00:00, 28.59it/s] 65%|######5   | 17/26 [00:00<00:00, 30.22it/s] 81%|########  | 21/26 [00:00<00:00, 31.58it/s] 96%|#########6| 25/26 [00:00<00:00, 32.55it/s]100%|##########| 26/26 [00:00<00:00, 26.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.64 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.60 (  0.59)	train_minacc   0.74 (  0.70)	train_majacc   0.57 (  0.57)	train_corr   0.00 (  0.00)	l1 4.6569 (4.7012)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 15%|#5        | 4/26 [00:00<00:01, 19.92it/s] 35%|###4      | 9/26 [00:00<00:00, 31.79it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.79it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.56it/s] 92%|#########2| 24/26 [00:00<00:00, 39.47it/s]100%|##########| 26/26 [00:00<00:00, 33.48it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.63 (  0.63)	test_minacc   0.68 (  0.68)	test_majacc   0.62 (  0.62)	Loss_d 0.641 (0.641)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.25 (  0.25)
Test: [  10/  26]	Loss 0.634 (0.638)	test_acc   0.62 (  0.61)	test_minacc   0.73 (  0.68)	test_majacc   0.60 (  0.60)	Loss_d 0.634 (0.638)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.73 (  0.68)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.22 (  0.25)
Test: [  20/  26]	Loss 0.634 (0.637)	test_acc   0.63 (  0.61)	test_minacc   0.70 (  0.68)	test_majacc   0.61 (  0.60)	Loss_d 0.634 (0.637)	test_acc_d   0.63 (  0.61)	test_minacc_d   0.70 (  0.68)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.24 (  0.26)
Test: [  26/  26]	Loss 0.643 (0.638)	test_acc   0.60 (  0.61)	test_minacc   0.72 (  0.68)	test_majacc   0.57 (  0.60)	Loss_d 0.643 (0.638)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.72 (  0.68)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.24 (  0.26)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.701 (0.701)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.66 (  0.66)	Loss_d 0.701 (0.701)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 47/  1]	epoch_time 0.0397 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0422)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.610800011575222, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 19%|#9        | 5/26 [00:00<00:00, 22.50it/s] 35%|###4      | 9/26 [00:00<00:00, 28.15it/s] 50%|#####     | 13/26 [00:00<00:00, 31.00it/s] 65%|######5   | 17/26 [00:00<00:00, 32.27it/s] 81%|########  | 21/26 [00:00<00:00, 33.41it/s] 96%|#########6| 25/26 [00:00<00:00, 34.01it/s]100%|##########| 26/26 [00:00<00:00, 28.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.56 (  0.60)	train_minacc   0.70 (  0.66)	train_majacc   0.54 (  0.59)	train_corr   0.00 (  0.00)	l1 4.6496 (4.6427)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 19%|#9        | 5/26 [00:00<00:01, 20.04it/s] 38%|###8      | 10/26 [00:00<00:00, 30.64it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.64it/s] 58%|#####7    | 15/26 [00:00<00:00, 34.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.79it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.79it/s] 96%|#########6| 25/26 [00:00<00:00, 40.28it/s]100%|##########| 26/26 [00:00<00:00, 31.70it/s]
Test: [   0/  26]	Loss 0.655 (0.655)	test_acc   0.60 (  0.60)	test_minacc   0.73 (  0.73)	test_majacc   0.58 (  0.58)	Loss_d 0.655 (0.655)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.646 (0.650)	test_acc   0.59 (  0.58)	test_minacc   0.77 (  0.72)	test_majacc   0.55 (  0.55)	Loss_d 0.646 (0.650)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.77 (  0.72)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.17 (  0.19)
Test: [  20/  26]	Loss 0.647 (0.648)	test_acc   0.58 (  0.58)	test_minacc   0.72 (  0.71)	test_majacc   0.56 (  0.56)	Loss_d 0.647 (0.648)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.72 (  0.71)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.19 (  0.20)
Test: [  26/  26]	Loss 0.650 (0.649)	test_acc   0.57 (  0.58)	test_minacc   0.70 (  0.71)	test_majacc   0.55 (  0.56)	Loss_d 0.650 (0.649)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.19 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.32it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.65 (  0.65)	test_minacc   0.66 (  0.66)	test_majacc   0.63 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 48/  1]	epoch_time 0.0397 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0393 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.5826000097990036, 0.6530000567436218)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 12%|#1        | 3/26 [00:00<00:02, 11.44it/s] 27%|##6       | 7/26 [00:00<00:00, 21.08it/s] 42%|####2     | 11/26 [00:00<00:00, 26.16it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.09it/s] 88%|########8 | 23/26 [00:00<00:00, 31.65it/s]100%|##########| 26/26 [00:01<00:00, 25.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.64 ( 22.64)	train_acc   0.58 (  0.58)	train_minacc   0.70 (  0.69)	train_majacc   0.56 (  0.56)	train_corr   0.00 (  0.00)	l1 4.6569 (4.6627)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.54it/s] 19%|#9        | 5/26 [00:00<00:01, 17.35it/s] 38%|###8      | 10/26 [00:00<00:00, 25.57it/s]                                                38%|###8      | 10/26 [00:00<00:00, 25.57it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.37it/s] 77%|#######6  | 20/26 [00:00<00:00, 36.73it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 36.73it/s]100%|##########| 26/26 [00:00<00:00, 42.10it/s]100%|##########| 26/26 [00:00<00:00, 30.28it/s]
Test: [   0/  26]	Loss 0.646 (0.646)	test_acc   0.62 (  0.62)	test_minacc   0.68 (  0.68)	test_majacc   0.61 (  0.61)	Loss_d 0.646 (0.646)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.24 (  0.24)
Test: [  10/  26]	Loss 0.639 (0.642)	test_acc   0.61 (  0.60)	test_minacc   0.71 (  0.68)	test_majacc   0.59 (  0.59)	Loss_d 0.639 (0.642)	test_acc_d   0.61 (  0.60)	test_minacc_d   0.71 (  0.68)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.21 (  0.24)
Test: [  20/  26]	Loss 0.638 (0.642)	test_acc   0.62 (  0.61)	test_minacc   0.68 (  0.67)	test_majacc   0.61 (  0.60)	Loss_d 0.638 (0.642)	test_acc_d   0.62 (  0.61)	test_minacc_d   0.68 (  0.67)	test_majacc_d   0.61 (  0.60)	test_corr_d   0.23 (  0.25)
Test: [  26/  26]	Loss 0.648 (0.642)	test_acc   0.58 (  0.61)	test_minacc   0.67 (  0.67)	test_majacc   0.57 (  0.59)	Loss_d 0.648 (0.642)	test_acc_d   0.58 (  0.61)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.23 (  0.25)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.50it/s]
Test: [  0/  1]	Loss 0.706 (0.706)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.706 (0.706)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.706 (0.706)	test_acc   0.64 (  0.64)	test_minacc   0.63 (  0.63)	test_majacc   0.67 (  0.67)	Loss_d 0.706 (0.706)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.67 (  0.67)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 49/  1]	epoch_time 0.0417 (0.0428)	validation_time 0.0004 (0.0006)	train_time 0.0413 (0.0421)
record: (train_acc, test_acc) (0.6504000180363655, 0.6580000519752502)
last accs (train_acc, test_acc) (0.6050000056028366, 0.6360000371932983)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.166 MB of 0.166 MB uploadedwandb: \ 0.166 MB of 0.166 MB uploadedwandb: | 0.166 MB of 0.166 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmp4ppcv_is'
wandb: ERROR Internal wandb error: file data was not synced
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_211023-8murplro
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8murplro
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=200, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=False, z=15.0, pgd_anneal_iters=600, pgd_skip_steps=50, fraction_z=0.95)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Conv2d(512, 1, kernel_size=(1, 1), stride=(1, 1), bias=False)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1216
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5954, 3, 32, 32) (6046, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:36,  1.45s/it] 19%|#9        | 5/26 [00:01<00:05,  4.14it/s] 35%|###4      | 9/26 [00:01<00:02,  8.03it/s] 50%|#####     | 13/26 [00:01<00:01, 12.16it/s] 65%|######5   | 17/26 [00:01<00:00, 16.30it/s] 81%|########  | 21/26 [00:02<00:00, 20.14it/s] 96%|#########6| 25/26 [00:02<00:00, 23.52it/s]100%|##########| 26/26 [00:02<00:00, 10.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 200
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 0.450 (0.612)	train_nll   0.45 (  0.61)	train_penalty   0.09 (  0.37)	weight_norm  21.00 ( 18.16)	train_acc   0.83 (  0.78)	train_minacc   0.02 (  0.12)	train_majacc   1.00 (  0.89)	train_corr   0.00 (  0.00)	l1 8.5550 (8.1270)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 19%|#9        | 5/26 [00:00<00:00, 24.23it/s] 38%|###8      | 10/26 [00:00<00:00, 34.36it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.91it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.71it/s] 96%|#########6| 25/26 [00:00<00:00, 39.79it/s]100%|##########| 26/26 [00:00<00:00, 33.98it/s]
Test: [   0/  26]	Loss 0.464 (0.464)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.464 (0.464)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.393 (0.421)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.393 (0.421)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.462 (0.421)	test_acc   0.81 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.98 (  0.99)	Loss_d 0.462 (0.421)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.445 (0.421)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.445 (0.421)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.50it/s]100%|##########| 1/1 [00:00<00:00,  2.49it/s]
Test: [  0/  1]	Loss 1.812 (1.812)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.812 (1.812)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  1/  1]	Loss 1.812 (1.812)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.812 (1.812)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0785 (0.0785)	validation_time 0.0068 (0.0068)	train_time 0.0695 (0.0695)
record: (train_acc, test_acc) (0.8454000197649002, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8454000197649002, 0.11500000208616257)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.98it/s]  8%|7         | 2/26 [00:00<00:02,  8.71it/s] 23%|##3       | 6/26 [00:00<00:00, 20.35it/s] 38%|###8      | 10/26 [00:00<00:00, 25.57it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.70it/s] 69%|######9   | 18/26 [00:00<00:00, 29.99it/s] 85%|########4 | 22/26 [00:00<00:00, 31.53it/s]100%|##########| 26/26 [00:00<00:00, 32.36it/s]100%|##########| 26/26 [00:01<00:00, 25.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 200
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 0.464 (0.426)	train_nll   0.46 (  0.43)	train_penalty   0.10 (  0.06)	weight_norm  22.14 ( 21.79)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 8.8641 (8.8116)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 11.93it/s] 15%|#5        | 4/26 [00:00<00:01, 13.61it/s] 35%|###4      | 9/26 [00:00<00:00, 26.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 26.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 34.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 34.68it/s] 92%|#########2| 24/26 [00:00<00:00, 38.59it/s]100%|##########| 26/26 [00:00<00:00, 30.79it/s]
Test: [   0/  26]	Loss 0.427 (0.427)	test_acc   0.83 (  0.83)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.427 (0.427)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.364 (0.395)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.364 (0.395)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.436 (0.395)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.436 (0.395)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.97 (  0.98)
Test: [  26/  26]	Loss 0.435 (0.396)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.435 (0.396)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.20it/s]
Test: [  0/  1]	Loss 1.765 (1.765)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.765 (1.765)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.765 (1.765)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.765 (1.765)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Overall Timing[  1/  1]	epoch_time 0.0420 (0.0602)	validation_time 0.0003 (0.0036)	train_time 0.0416 (0.0556)
record: (train_acc, test_acc) (0.8454000197649002, 0.11500000208616257)
last accs (train_acc, test_acc) (0.8482000219225884, 0.10600000619888306)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.33it/s] 19%|#9        | 5/26 [00:00<00:00, 22.28it/s] 35%|###4      | 9/26 [00:00<00:00, 28.09it/s] 50%|#####     | 13/26 [00:00<00:00, 30.90it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 28.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 200
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 0.455 (0.408)	train_nll   0.46 (  0.41)	train_penalty   0.09 (  0.05)	weight_norm  22.26 ( 22.22)	train_acc   0.82 (  0.85)	train_minacc   0.05 (  0.06)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.5770 (8.6786)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.72it/s] 15%|#5        | 4/26 [00:00<00:01, 17.10it/s] 35%|###4      | 9/26 [00:00<00:00, 29.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 29.61it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.71it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.10it/s] 92%|#########2| 24/26 [00:00<00:00, 40.17it/s]100%|##########| 26/26 [00:00<00:00, 32.38it/s]
Test: [   0/  26]	Loss 0.406 (0.406)	test_acc   0.83 (  0.83)	test_minacc   0.05 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.406 (0.406)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.350 (0.377)	test_acc   0.86 (  0.85)	test_minacc   0.02 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.350 (0.377)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.02 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.420 (0.378)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.420 (0.378)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.427 (0.378)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.427 (0.378)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 1.725 (1.725)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.725 (1.725)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
Test: [  1/  1]	Loss 1.725 (1.725)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.725 (1.725)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.90 (  0.90)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0429 (0.0544)	validation_time 0.0004 (0.0025)	train_time 0.0425 (0.0512)
record: (train_acc, test_acc) (0.8496000255346299, 0.15000000596046448)
last accs (train_acc, test_acc) (0.8496000255346299, 0.15000000596046448)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.47it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.04it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.74it/s] 81%|########  | 21/26 [00:00<00:00, 32.76it/s] 96%|#########6| 25/26 [00:00<00:00, 34.69it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 200
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 0.424 (0.384)	train_nll   0.42 (  0.38)	train_penalty   0.07 (  0.04)	weight_norm  22.30 ( 22.28)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.2933 (8.4200)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 27%|##6       | 7/26 [00:00<00:00, 32.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.52it/s] 69%|######9   | 18/26 [00:00<00:00, 41.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.00it/s] 88%|########8 | 23/26 [00:00<00:00, 42.64it/s]100%|##########| 26/26 [00:00<00:00, 36.97it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.399 (0.399)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.341 (0.364)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.341 (0.364)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.408 (0.365)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.365)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.97 (  0.97)
Test: [  26/  26]	Loss 0.408 (0.365)	test_acc   0.82 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.408 (0.365)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 1.715 (1.715)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.715 (1.715)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  1/  1]	Loss 1.715 (1.715)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.715 (1.715)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Overall Timing[  3/  1]	epoch_time 0.0428 (0.0515)	validation_time 0.0004 (0.0020)	train_time 0.0424 (0.0490)
record: (train_acc, test_acc) (0.8496000255346299, 0.15000000596046448)
last accs (train_acc, test_acc) (0.8496000288128853, 0.1120000034570694)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 19%|#9        | 5/26 [00:00<00:00, 24.71it/s] 35%|###4      | 9/26 [00:00<00:00, 29.72it/s] 50%|#####     | 13/26 [00:00<00:00, 32.07it/s] 65%|######5   | 17/26 [00:00<00:00, 33.04it/s] 81%|########  | 21/26 [00:00<00:00, 34.06it/s] 96%|#########6| 25/26 [00:00<00:00, 34.70it/s]100%|##########| 26/26 [00:00<00:00, 29.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 200
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 0.416 (0.362)	train_nll   0.42 (  0.36)	train_penalty   0.09 (  0.04)	weight_norm  22.36 ( 22.33)	train_acc   0.83 (  0.85)	train_minacc   0.02 (  0.15)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.2325 (8.2662)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.54it/s] 27%|##6       | 7/26 [00:00<00:00, 33.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.02it/s] 46%|####6     | 12/26 [00:00<00:00, 38.88it/s] 65%|######5   | 17/26 [00:00<00:00, 41.69it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.69it/s] 85%|########4 | 22/26 [00:00<00:00, 44.23it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.381 (0.381)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.306 (0.338)	test_acc   0.87 (  0.86)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.306 (0.338)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  20/  26]	Loss 0.401 (0.342)	test_acc   0.82 (  0.85)	test_minacc   0.01 (  0.05)	test_majacc   0.99 (  1.00)	Loss_d 0.401 (0.342)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.01 (  0.05)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  26/  26]	Loss 0.397 (0.341)	test_acc   0.83 (  0.85)	test_minacc   0.02 (  0.05)	test_majacc   1.00 (  1.00)	Loss_d 0.397 (0.341)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.02 (  0.05)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.78it/s]
Test: [  0/  1]	Loss 1.813 (1.813)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.813 (1.813)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.813 (1.813)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 1.813 (1.813)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.89 (  0.89)
Overall Timing[  4/  1]	epoch_time 0.0378 (0.0488)	validation_time 0.0003 (0.0017)	train_time 0.0375 (0.0467)
record: (train_acc, test_acc) (0.8496000255346299, 0.15000000596046448)
last accs (train_acc, test_acc) (0.8533000264763833, 0.14900000393390656)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.47it/s] 23%|##3       | 6/26 [00:00<00:00, 27.17it/s] 38%|###8      | 10/26 [00:00<00:00, 30.28it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.22it/s] 69%|######9   | 18/26 [00:00<00:00, 33.13it/s] 85%|########4 | 22/26 [00:00<00:00, 34.06it/s]100%|##########| 26/26 [00:00<00:00, 34.92it/s]100%|##########| 26/26 [00:00<00:00, 30.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 200
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.409 (0.338)	train_nll   0.41 (  0.34)	train_penalty   0.07 (  0.03)	weight_norm  22.44 ( 22.40)	train_acc   0.83 (  0.86)	train_minacc   0.07 (  0.23)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 8.0806 (8.1845)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.79it/s] 23%|##3       | 6/26 [00:00<00:00, 31.45it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.45it/s] 42%|####2     | 11/26 [00:00<00:00, 36.83it/s] 62%|######1   | 16/26 [00:00<00:00, 39.60it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.60it/s] 81%|########  | 21/26 [00:00<00:00, 40.45it/s]100%|##########| 26/26 [00:00<00:00, 42.74it/s]100%|##########| 26/26 [00:00<00:00, 36.01it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 0.351 (0.351)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.294 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.08 (  0.06)	test_majacc   0.99 (  1.00)	Loss_d 0.294 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.08 (  0.06)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.403 (0.323)	test_acc   0.82 (  0.85)	test_minacc   0.03 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.403 (0.323)	test_acc_d   0.82 (  0.85)	test_minacc_d   0.03 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  26/  26]	Loss 0.387 (0.323)	test_acc   0.83 (  0.86)	test_minacc   0.05 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.387 (0.323)	test_acc_d   0.83 (  0.86)	test_minacc_d   0.05 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.79it/s]
Test: [  0/  1]	Loss 1.734 (1.734)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.734 (1.734)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.734 (1.734)	test_acc   0.16 (  0.16)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.734 (1.734)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0367 (0.0468)	validation_time 0.0004 (0.0015)	train_time 0.0362 (0.0450)
record: (train_acc, test_acc) (0.8551000217199326, 0.1550000011920929)
last accs (train_acc, test_acc) (0.8551000217199326, 0.1550000011920929)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.43it/s] 23%|##3       | 6/26 [00:00<00:00, 27.90it/s] 38%|###8      | 10/26 [00:00<00:00, 31.58it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.10it/s] 69%|######9   | 18/26 [00:00<00:00, 34.00it/s] 85%|########4 | 22/26 [00:00<00:00, 34.55it/s]100%|##########| 26/26 [00:00<00:00, 34.73it/s]100%|##########| 26/26 [00:00<00:00, 30.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 200
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 200
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.387 (0.319)	train_nll   0.39 (  0.32)	train_penalty   0.05 (  0.02)	weight_norm  22.52 ( 22.48)	train_acc   0.84 (  0.86)	train_minacc   0.12 (  0.30)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 7.9610 (8.1909)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.43it/s] 15%|#5        | 4/26 [00:00<00:01, 11.50it/s] 35%|###4      | 9/26 [00:00<00:00, 22.65it/s]                                               35%|###4      | 9/26 [00:00<00:00, 22.65it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.94it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.91it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 34.91it/s] 96%|#########6| 25/26 [00:00<00:00, 38.90it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
Test: [   0/  26]	Loss 0.341 (0.341)	test_acc   0.85 (  0.85)	test_minacc   0.20 (  0.20)	test_majacc   0.98 (  0.98)	Loss_d 0.341 (0.341)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.271 (0.301)	test_acc   0.89 (  0.87)	test_minacc   0.25 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 0.271 (0.301)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.25 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  20/  26]	Loss 0.363 (0.307)	test_acc   0.84 (  0.86)	test_minacc   0.17 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 0.363 (0.307)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.364 (0.307)	test_acc   0.84 (  0.87)	test_minacc   0.12 (  0.17)	test_majacc   0.99 (  0.99)	Loss_d 0.364 (0.307)	test_acc_d   0.84 (  0.87)	test_minacc_d   0.12 (  0.17)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.38it/s]
Test: [  0/  1]	Loss 1.619 (1.619)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.619 (1.619)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
Test: [  1/  1]	Loss 1.619 (1.619)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 1.619 (1.619)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.80 (  0.80)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0403 (0.0459)	validation_time 0.0003 (0.0013)	train_time 0.0400 (0.0442)
record: (train_acc, test_acc) (0.8650000235438347, 0.20900000631809235)
last accs (train_acc, test_acc) (0.8650000235438347, 0.20900000631809235)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.26it/s] 35%|###4      | 9/26 [00:00<00:00, 27.69it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.52it/s]100%|##########| 26/26 [00:00<00:00, 28.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 200
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 200
penalty weights 10000.0
Epoch: [7][  26/  26]	Loss 0.001 (0.210)	train_nll   0.41 (  0.32)	train_penalty   0.00 (  0.02)	weight_norm  22.63 ( 22.58)	train_acc   0.82 (  0.86)	train_minacc   0.70 (  0.44)	train_majacc   0.84 (  0.94)	train_corr   0.00 (  0.00)	l1 7.6463 (8.1864)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 23%|##3       | 6/26 [00:00<00:00, 31.50it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.50it/s] 42%|####2     | 11/26 [00:00<00:00, 37.83it/s] 62%|######1   | 16/26 [00:00<00:00, 41.54it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.54it/s] 81%|########  | 21/26 [00:00<00:00, 39.04it/s]100%|##########| 26/26 [00:00<00:00, 42.05it/s]100%|##########| 26/26 [00:00<00:00, 35.90it/s]
Test: [   0/  26]	Loss 0.483 (0.483)	test_acc   0.75 (  0.75)	test_minacc   0.73 (  0.73)	test_majacc   0.76 (  0.76)	Loss_d 0.483 (0.483)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.73 (  0.73)	test_majacc_d   0.76 (  0.76)	test_corr_d   0.48 (  0.48)
Test: [  10/  26]	Loss 0.401 (0.442)	test_acc   0.82 (  0.79)	test_minacc   0.75 (  0.69)	test_majacc   0.83 (  0.81)	Loss_d 0.401 (0.442)	test_acc_d   0.82 (  0.79)	test_minacc_d   0.75 (  0.69)	test_majacc_d   0.83 (  0.81)	test_corr_d   0.58 (  0.57)
Test: [  20/  26]	Loss 0.452 (0.431)	test_acc   0.78 (  0.80)	test_minacc   0.84 (  0.72)	test_majacc   0.76 (  0.81)	Loss_d 0.452 (0.431)	test_acc_d   0.78 (  0.80)	test_minacc_d   0.84 (  0.72)	test_majacc_d   0.76 (  0.81)	test_corr_d   0.45 (  0.56)
Test: [  26/  26]	Loss 0.430 (0.436)	test_acc   0.81 (  0.80)	test_minacc   0.70 (  0.72)	test_majacc   0.84 (  0.81)	Loss_d 0.430 (0.436)	test_acc_d   0.81 (  0.80)	test_minacc_d   0.70 (  0.72)	test_majacc_d   0.84 (  0.81)	test_corr_d   0.57 (  0.56)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.06it/s]
Test: [  0/  1]	Loss 0.860 (0.860)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.860 (0.860)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.13 ( -0.13)
Test: [  1/  1]	Loss 0.860 (0.860)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.62)	test_majacc   0.77 (  0.77)	Loss_d 0.860 (0.860)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.77 (  0.77)	test_corr_d  -0.13 ( -0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0414 (0.0453)	validation_time 0.0004 (0.0012)	train_time 0.0409 (0.0438)
record: (train_acc, test_acc) (0.7961000244021416, 0.6360000371932983)
last accs (train_acc, test_acc) (0.7961000244021416, 0.6360000371932983)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.05it/s] 12%|#1        | 3/26 [00:00<00:01, 12.20it/s] 27%|##6       | 7/26 [00:00<00:00, 21.75it/s] 42%|####2     | 11/26 [00:00<00:00, 26.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.18it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.74it/s] 88%|########8 | 23/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 200
penalty weights 10000.0
Epoch: [8][  26/  26]	Loss 0.000 (0.002)	train_nll   0.64 (  0.58)	train_penalty   0.00 (  0.00)	weight_norm  22.69 ( 22.67)	train_acc   0.66 (  0.68)	train_minacc   0.65 (  0.73)	train_majacc   0.66 (  0.67)	train_corr   0.00 (  0.00)	l1 6.5576 (6.8995)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.67it/s] 23%|##3       | 6/26 [00:00<00:00, 27.14it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.14it/s] 42%|####2     | 11/26 [00:00<00:00, 34.57it/s] 62%|######1   | 16/26 [00:00<00:00, 36.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.55it/s] 81%|########  | 21/26 [00:00<00:00, 39.30it/s]100%|##########| 26/26 [00:00<00:00, 42.49it/s]100%|##########| 26/26 [00:00<00:00, 33.83it/s]
Test: [   0/  26]	Loss 0.641 (0.641)	test_acc   0.59 (  0.59)	test_minacc   0.71 (  0.71)	test_majacc   0.57 (  0.57)	Loss_d 0.641 (0.641)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.620 (0.627)	test_acc   0.64 (  0.62)	test_minacc   0.81 (  0.73)	test_majacc   0.61 (  0.61)	Loss_d 0.620 (0.627)	test_acc_d   0.64 (  0.62)	test_minacc_d   0.81 (  0.73)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.24 (  0.23)
Test: [  20/  26]	Loss 0.626 (0.622)	test_acc   0.63 (  0.63)	test_minacc   0.79 (  0.74)	test_majacc   0.59 (  0.61)	Loss_d 0.626 (0.622)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.79 (  0.74)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.14 (  0.23)
Test: [  26/  26]	Loss 0.634 (0.625)	test_acc   0.64 (  0.63)	test_minacc   0.63 (  0.73)	test_majacc   0.65 (  0.61)	Loss_d 0.634 (0.625)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.63 (  0.73)	test_majacc_d   0.65 (  0.61)	test_corr_d   0.21 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.88it/s]
Test: [  0/  1]	Loss 0.626 (0.626)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.626 (0.626)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.626 (0.626)	test_acc   0.69 (  0.69)	test_minacc   0.70 (  0.70)	test_majacc   0.60 (  0.60)	Loss_d 0.626 (0.626)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.70 (  0.70)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.32 ( -0.32)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/176/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0415 (0.0449)	validation_time 0.0004 (0.0011)	train_time 0.0411 (0.0435)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 15%|#5        | 4/26 [00:00<00:01, 17.62it/s] 31%|###       | 8/26 [00:00<00:00, 25.48it/s] 46%|####6     | 12/26 [00:00<00:00, 29.41it/s] 62%|######1   | 16/26 [00:00<00:00, 31.88it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.22it/s] 92%|#########2| 24/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 200
penalty weights 10000.0
Epoch: [9][  26/  26]	Loss 0.000 (0.001)	train_nll   0.67 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.53 (  0.54)	train_minacc   0.74 (  0.69)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 6.4025 (6.4563)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.66it/s] 15%|#5        | 4/26 [00:00<00:01, 19.30it/s] 35%|###4      | 9/26 [00:00<00:00, 31.03it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 37.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.52it/s] 92%|#########2| 24/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 34.30it/s]
Test: [   0/  26]	Loss 0.673 (0.673)	test_acc   0.52 (  0.52)	test_minacc   0.77 (  0.77)	test_majacc   0.47 (  0.47)	Loss_d 0.673 (0.673)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.661 (0.665)	test_acc   0.55 (  0.55)	test_minacc   0.85 (  0.77)	test_majacc   0.51 (  0.51)	Loss_d 0.661 (0.665)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.85 (  0.77)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.15 (  0.14)
Test: [  20/  26]	Loss 0.662 (0.663)	test_acc   0.59 (  0.55)	test_minacc   0.89 (  0.78)	test_majacc   0.52 (  0.51)	Loss_d 0.662 (0.663)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.89 (  0.78)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.09 (  0.15)
Test: [  26/  26]	Loss 0.667 (0.664)	test_acc   0.57 (  0.55)	test_minacc   0.72 (  0.77)	test_majacc   0.54 (  0.51)	Loss_d 0.667 (0.664)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.72 (  0.77)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.13 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.17it/s]
Test: [  0/  1]	Loss 0.654 (0.654)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.51 (  0.51)	Loss_d 0.654 (0.654)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.654 (0.654)	test_acc   0.75 (  0.75)	test_minacc   0.77 (  0.77)	test_majacc   0.51 (  0.51)	Loss_d 0.654 (0.654)	test_acc_d   0.75 (  0.75)	test_minacc_d   0.77 (  0.77)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.31 ( -0.31)
Overall Timing[  9/  1]	epoch_time 0.0416 (0.0445)	validation_time 0.0005 (0.0010)	train_time 0.0411 (0.0433)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.5500000080466271, 0.7450000643730164)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.22it/s] 19%|#9        | 5/26 [00:00<00:00, 23.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.21it/s] 50%|#####     | 13/26 [00:00<00:00, 29.60it/s] 65%|######5   | 17/26 [00:00<00:00, 30.62it/s] 81%|########  | 21/26 [00:00<00:00, 31.99it/s] 96%|#########6| 25/26 [00:00<00:00, 32.84it/s]100%|##########| 26/26 [00:00<00:00, 28.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 200
penalty weights 10000.0
Epoch: [10][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.39 (  0.53)	train_minacc   0.86 (  0.73)	train_majacc   0.29 (  0.49)	train_corr   0.00 (  0.00)	l1 6.3767 (6.3850)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.35it/s] 23%|##3       | 6/26 [00:00<00:00, 26.46it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.46it/s] 42%|####2     | 11/26 [00:00<00:00, 32.62it/s] 62%|######1   | 16/26 [00:00<00:00, 36.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.06it/s] 81%|########  | 21/26 [00:00<00:00, 39.04it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]100%|##########| 26/26 [00:00<00:00, 34.08it/s]
Test: [   0/  26]	Loss 0.695 (0.695)	test_acc   0.36 (  0.36)	test_minacc   0.74 (  0.74)	test_majacc   0.29 (  0.29)	Loss_d 0.695 (0.695)	test_acc_d   0.36 (  0.36)	test_minacc_d   0.74 (  0.74)	test_majacc_d   0.29 (  0.29)	test_corr_d  -0.12 ( -0.12)
Test: [  10/  26]	Loss 0.694 (0.694)	test_acc   0.35 (  0.38)	test_minacc   0.85 (  0.85)	test_majacc   0.27 (  0.30)	Loss_d 0.694 (0.694)	test_acc_d   0.35 (  0.38)	test_minacc_d   0.85 (  0.85)	test_majacc_d   0.27 (  0.30)	test_corr_d  -0.11 ( -0.12)
Test: [  20/  26]	Loss 0.692 (0.694)	test_acc   0.41 (  0.38)	test_minacc   0.87 (  0.85)	test_majacc   0.30 (  0.30)	Loss_d 0.692 (0.694)	test_acc_d   0.41 (  0.38)	test_minacc_d   0.87 (  0.85)	test_majacc_d   0.30 (  0.30)	test_corr_d  -0.14 ( -0.12)
Test: [  26/  26]	Loss 0.696 (0.694)	test_acc   0.39 (  0.38)	test_minacc   0.88 (  0.85)	test_majacc   0.29 (  0.30)	Loss_d 0.696 (0.694)	test_acc_d   0.39 (  0.38)	test_minacc_d   0.88 (  0.85)	test_majacc_d   0.29 (  0.30)	test_corr_d  -0.21 ( -0.12)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.82it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.78 (  0.78)	test_minacc   0.83 (  0.83)	test_majacc   0.32 (  0.32)	Loss_d 0.676 (0.676)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.38 ( -0.38)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.78 (  0.78)	test_minacc   0.83 (  0.83)	test_majacc   0.32 (  0.32)	Loss_d 0.676 (0.676)	test_acc_d   0.78 (  0.78)	test_minacc_d   0.83 (  0.83)	test_majacc_d   0.32 (  0.32)	test_corr_d  -0.38 ( -0.38)
Overall Timing[ 10/  1]	epoch_time 0.0437 (0.0445)	validation_time 0.0004 (0.0010)	train_time 0.0433 (0.0433)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.38010000747442246, 0.7820000648498535)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.61it/s] 12%|#1        | 3/26 [00:00<00:01, 13.85it/s] 27%|##6       | 7/26 [00:00<00:00, 23.45it/s] 42%|####2     | 11/26 [00:00<00:00, 27.15it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.01it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.00it/s] 88%|########8 | 23/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 28.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 200
penalty weights 10000.0
Epoch: [11][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.37 (  0.38)	train_minacc   0.67 (  0.71)	train_majacc   0.31 (  0.32)	train_corr   0.00 (  0.00)	l1 6.3628 (6.3667)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.39it/s] 23%|##3       | 6/26 [00:00<00:00, 24.77it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.77it/s] 42%|####2     | 11/26 [00:00<00:00, 33.20it/s] 62%|######1   | 16/26 [00:00<00:00, 38.28it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.28it/s] 81%|########  | 21/26 [00:00<00:00, 37.97it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]100%|##########| 26/26 [00:00<00:00, 32.81it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.38 (  0.38)	test_minacc   0.64 (  0.64)	test_majacc   0.32 (  0.32)	Loss_d 0.689 (0.689)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.32 (  0.32)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.688 (0.689)	test_acc   0.39 (  0.39)	test_minacc   0.60 (  0.65)	test_majacc   0.36 (  0.35)	Loss_d 0.688 (0.689)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.60 (  0.65)	test_majacc_d   0.36 (  0.35)	test_corr_d   0.07 (  0.07)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.38 (  0.39)	test_minacc   0.64 (  0.64)	test_majacc   0.33 (  0.34)	Loss_d 0.689 (0.689)	test_acc_d   0.38 (  0.39)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.33 (  0.34)	test_corr_d   0.07 (  0.07)
Test: [  26/  26]	Loss 0.692 (0.689)	test_acc   0.37 (  0.38)	test_minacc   0.70 (  0.64)	test_majacc   0.30 (  0.34)	Loss_d 0.692 (0.689)	test_acc_d   0.37 (  0.38)	test_minacc_d   0.70 (  0.64)	test_majacc_d   0.30 (  0.34)	test_corr_d  -0.02 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.46it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.35 (  0.35)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.35 (  0.35)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.35 (  0.35)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 11/  1]	epoch_time 0.0434 (0.0444)	validation_time 0.0003 (0.0009)	train_time 0.0431 (0.0433)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.38300000700354575, 0.5660000443458557)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 19%|#9        | 5/26 [00:00<00:01, 15.71it/s] 35%|###4      | 9/26 [00:00<00:00, 22.37it/s] 50%|#####     | 13/26 [00:00<00:00, 26.66it/s] 65%|######5   | 17/26 [00:00<00:00, 29.49it/s] 81%|########  | 21/26 [00:00<00:00, 31.32it/s] 96%|#########6| 25/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:01<00:00, 25.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 200
penalty weights 10000.0
Epoch: [12][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.39)	train_minacc   0.65 (  0.61)	train_majacc   0.34 (  0.35)	train_corr   0.00 (  0.00)	l1 6.3611 (6.3618)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.90it/s] 23%|##3       | 6/26 [00:00<00:00, 26.78it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.78it/s] 42%|####2     | 11/26 [00:00<00:00, 35.40it/s] 62%|######1   | 16/26 [00:00<00:00, 40.29it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.29it/s] 81%|########  | 21/26 [00:00<00:00, 41.42it/s]100%|##########| 26/26 [00:00<00:00, 44.01it/s]100%|##########| 26/26 [00:00<00:00, 35.84it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.40)	test_minacc   0.60 (  0.61)	test_majacc   0.36 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.40)	test_minacc_d   0.60 (  0.61)	test_majacc_d   0.36 (  0.37)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.42 (  0.40)	test_minacc   0.59 (  0.60)	test_majacc   0.38 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.42 (  0.40)	test_minacc_d   0.59 (  0.60)	test_majacc_d   0.38 (  0.37)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.40 (  0.40)	test_minacc   0.63 (  0.60)	test_majacc   0.36 (  0.37)	Loss_d 0.695 (0.692)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.63 (  0.60)	test_majacc_d   0.36 (  0.37)	test_corr_d  -0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.01 (  0.01)
Overall Timing[ 12/  1]	epoch_time 0.0425 (0.0442)	validation_time 0.0003 (0.0009)	train_time 0.0422 (0.0432)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4035000059604645, 0.5470000505447388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 19%|#9        | 5/26 [00:00<00:01, 20.38it/s] 35%|###4      | 9/26 [00:00<00:00, 26.57it/s] 50%|#####     | 13/26 [00:00<00:00, 29.85it/s] 65%|######5   | 17/26 [00:00<00:00, 32.70it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 28.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 200
penalty weights 10000.0
Epoch: [13][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.39 (  0.39)	train_minacc   0.65 (  0.60)	train_majacc   0.34 (  0.36)	train_corr   0.00 (  0.00)	l1 6.3598 (6.3602)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.47it/s] 23%|##3       | 6/26 [00:00<00:01, 18.67it/s]                                               23%|##3       | 6/26 [00:00<00:01, 18.67it/s] 42%|####2     | 11/26 [00:00<00:00, 28.02it/s] 62%|######1   | 16/26 [00:00<00:00, 34.55it/s]                                                62%|######1   | 16/26 [00:00<00:00, 34.55it/s] 81%|########  | 21/26 [00:00<00:00, 34.35it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.42 (  0.42)	test_minacc   0.58 (  0.58)	test_majacc   0.39 (  0.39)	Loss_d 0.691 (0.691)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.40)	test_minacc   0.56 (  0.60)	test_majacc   0.37 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.40)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.37 (  0.36)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.41 (  0.39)	test_minacc   0.57 (  0.59)	test_majacc   0.37 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.41 (  0.39)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.37 (  0.36)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.39 (  0.39)	test_minacc   0.65 (  0.59)	test_majacc   0.33 (  0.36)	Loss_d 0.695 (0.692)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.33 (  0.36)	test_corr_d  -0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.01 (  0.01)
Overall Timing[ 13/  1]	epoch_time 0.0425 (0.0441)	validation_time 0.0004 (0.0008)	train_time 0.0420 (0.0431)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.39270000651478765, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.30it/s] 19%|#9        | 5/26 [00:00<00:00, 21.72it/s] 35%|###4      | 9/26 [00:00<00:00, 28.27it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.67it/s] 81%|########  | 21/26 [00:00<00:00, 33.77it/s] 96%|#########6| 25/26 [00:00<00:00, 34.37it/s]100%|##########| 26/26 [00:00<00:00, 29.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 200
penalty weights 10000.0
Epoch: [14][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.39 (  0.40)	train_minacc   0.63 (  0.60)	train_majacc   0.34 (  0.36)	train_corr   0.00 (  0.00)	l1 6.3585 (6.3589)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.12it/s] 27%|##6       | 7/26 [00:00<00:00, 35.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.55it/s] 46%|####6     | 12/26 [00:00<00:00, 40.35it/s] 65%|######5   | 17/26 [00:00<00:00, 41.46it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.46it/s] 85%|########4 | 22/26 [00:00<00:00, 40.88it/s]100%|##########| 26/26 [00:00<00:00, 37.20it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.55 (  0.55)	test_majacc   0.40 (  0.40)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.40)	test_minacc   0.58 (  0.60)	test_majacc   0.36 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.40)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.36 (  0.36)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.41 (  0.40)	test_minacc   0.57 (  0.60)	test_majacc   0.37 (  0.36)	Loss_d 0.692 (0.692)	test_acc_d   0.41 (  0.40)	test_minacc_d   0.57 (  0.60)	test_majacc_d   0.37 (  0.36)	test_corr_d   0.03 (  0.02)
Test: [  26/  26]	Loss 0.695 (0.692)	test_acc   0.40 (  0.40)	test_minacc   0.65 (  0.60)	test_majacc   0.35 (  0.37)	Loss_d 0.695 (0.692)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.35 (  0.37)	test_corr_d  -0.09 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.35 (  0.35)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.35 (  0.35)	test_corr_d   0.00 (  0.00)
Overall Timing[ 14/  1]	epoch_time 0.0415 (0.0439)	validation_time 0.0004 (0.0008)	train_time 0.0411 (0.0430)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4000000059604645, 0.5430000424385071)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.74it/s] 23%|##3       | 6/26 [00:00<00:00, 26.28it/s] 38%|###8      | 10/26 [00:00<00:00, 30.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.96it/s] 69%|######9   | 18/26 [00:00<00:00, 33.09it/s] 85%|########4 | 22/26 [00:00<00:00, 33.76it/s]100%|##########| 26/26 [00:00<00:00, 34.34it/s]100%|##########| 26/26 [00:00<00:00, 29.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 200
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.40)	train_minacc   0.65 (  0.60)	train_majacc   0.34 (  0.37)	train_corr   0.00 (  0.00)	l1 6.3575 (6.3577)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.55it/s] 15%|#5        | 4/26 [00:00<00:01, 18.64it/s] 38%|###8      | 10/26 [00:00<00:00, 34.39it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.39it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.75it/s] 77%|#######6  | 20/26 [00:00<00:00, 37.36it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 37.36it/s] 96%|#########6| 25/26 [00:00<00:00, 39.77it/s]100%|##########| 26/26 [00:00<00:00, 33.00it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.692)	test_acc   0.39 (  0.40)	test_minacc   0.58 (  0.60)	test_majacc   0.36 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.39 (  0.40)	test_minacc_d   0.58 (  0.60)	test_majacc_d   0.36 (  0.37)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.41 (  0.40)	test_minacc   0.57 (  0.59)	test_majacc   0.38 (  0.37)	Loss_d 0.692 (0.692)	test_acc_d   0.41 (  0.40)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.38 (  0.37)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.40 (  0.40)	test_minacc   0.65 (  0.60)	test_majacc   0.35 (  0.37)	Loss_d 0.695 (0.693)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.35 (  0.37)	test_corr_d  -0.10 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.36 (  0.36)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.36 (  0.36)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 15/  1]	epoch_time 0.0423 (0.0438)	validation_time 0.0004 (0.0008)	train_time 0.0418 (0.0429)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4033000057637692, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 15%|#5        | 4/26 [00:00<00:01, 16.77it/s] 31%|###       | 8/26 [00:00<00:00, 23.62it/s] 46%|####6     | 12/26 [00:00<00:00, 27.14it/s] 62%|######1   | 16/26 [00:00<00:00, 30.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.44it/s] 92%|#########2| 24/26 [00:00<00:00, 33.00it/s]100%|##########| 26/26 [00:00<00:00, 26.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 200
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.41)	train_minacc   0.65 (  0.59)	train_majacc   0.35 (  0.38)	train_corr   0.00 (  0.00)	l1 6.3564 (6.3566)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 19%|#9        | 5/26 [00:00<00:00, 25.45it/s] 38%|###8      | 10/26 [00:00<00:00, 32.62it/s]                                                38%|###8      | 10/26 [00:00<00:00, 32.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 37.53it/s] 77%|#######6  | 20/26 [00:00<00:00, 41.40it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 41.40it/s] 96%|#########6| 25/26 [00:00<00:00, 41.83it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.39 (  0.41)	test_minacc   0.54 (  0.59)	test_majacc   0.37 (  0.38)	Loss_d 0.692 (0.693)	test_acc_d   0.39 (  0.41)	test_minacc_d   0.54 (  0.59)	test_majacc_d   0.37 (  0.38)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.41 (  0.41)	test_minacc   0.57 (  0.59)	test_majacc   0.37 (  0.37)	Loss_d 0.692 (0.693)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.37 (  0.37)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.40 (  0.41)	test_minacc   0.65 (  0.59)	test_majacc   0.35 (  0.37)	Loss_d 0.695 (0.693)	test_acc_d   0.40 (  0.41)	test_minacc_d   0.65 (  0.59)	test_majacc_d   0.35 (  0.37)	test_corr_d  -0.10 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.37 (  0.37)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.37 (  0.37)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 16/  1]	epoch_time 0.0419 (0.0437)	validation_time 0.0004 (0.0008)	train_time 0.0415 (0.0428)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4066000055670738, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s]  8%|7         | 2/26 [00:00<00:02,  8.11it/s] 23%|##3       | 6/26 [00:00<00:01, 19.36it/s] 38%|###8      | 10/26 [00:00<00:00, 25.91it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.18it/s] 69%|######9   | 18/26 [00:00<00:00, 31.15it/s] 85%|########4 | 22/26 [00:00<00:00, 32.70it/s]100%|##########| 26/26 [00:00<00:00, 33.51it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 200
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.41)	train_minacc   0.65 (  0.59)	train_majacc   0.34 (  0.38)	train_corr   0.00 (  0.00)	l1 6.3554 (6.3556)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.28it/s] 23%|##3       | 6/26 [00:00<00:00, 24.30it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.30it/s] 42%|####2     | 11/26 [00:00<00:00, 32.29it/s] 65%|######5   | 17/26 [00:00<00:00, 36.63it/s]                                                65%|######5   | 17/26 [00:00<00:00, 36.63it/s] 85%|########4 | 22/26 [00:00<00:00, 40.00it/s]100%|##########| 26/26 [00:00<00:00, 32.55it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.55 (  0.55)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.39 (  0.41)	test_minacc   0.52 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.39 (  0.41)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.02 (  0.01)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.40 (  0.41)	test_minacc   0.67 (  0.59)	test_majacc   0.34 (  0.38)	Loss_d 0.695 (0.693)	test_acc_d   0.40 (  0.41)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.34 (  0.38)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 17/  1]	epoch_time 0.0413 (0.0436)	validation_time 0.0003 (0.0007)	train_time 0.0410 (0.0427)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.409800005376339, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.22it/s]  8%|7         | 2/26 [00:00<00:03,  6.12it/s] 23%|##3       | 6/26 [00:00<00:01, 16.52it/s] 38%|###8      | 10/26 [00:00<00:00, 22.84it/s] 54%|#####3    | 14/26 [00:00<00:00, 26.55it/s] 69%|######9   | 18/26 [00:00<00:00, 29.17it/s] 85%|########4 | 22/26 [00:00<00:00, 30.99it/s]100%|##########| 26/26 [00:01<00:00, 32.47it/s]100%|##########| 26/26 [00:01<00:00, 23.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 200
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.41)	train_minacc   0.70 (  0.59)	train_majacc   0.34 (  0.38)	train_corr   0.00 (  0.00)	l1 6.3545 (6.3546)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 23%|##3       | 6/26 [00:00<00:00, 30.99it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.99it/s] 42%|####2     | 11/26 [00:00<00:00, 37.04it/s] 62%|######1   | 16/26 [00:00<00:00, 40.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.11it/s] 81%|########  | 21/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 42.67it/s]100%|##########| 26/26 [00:00<00:00, 35.30it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.53)	test_majacc   0.41 (  0.41)	Loss_d 0.691 (0.691)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.52 (  0.59)	test_majacc   0.38 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.02 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.41)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.41)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d   0.02 (  0.00)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.67 (  0.60)	test_majacc   0.35 (  0.38)	Loss_d 0.695 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.67 (  0.60)	test_majacc_d   0.35 (  0.38)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 18/  1]	epoch_time 0.0446 (0.0436)	validation_time 0.0006 (0.0007)	train_time 0.0440 (0.0428)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4150000054836273, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.83it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.33it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 34.27it/s]100%|##########| 26/26 [00:00<00:00, 36.48it/s]100%|##########| 26/26 [00:00<00:00, 29.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 200
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.42)	train_minacc   0.70 (  0.59)	train_majacc   0.35 (  0.39)	train_corr   0.00 (  0.00)	l1 6.3536 (6.3537)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 23%|##3       | 6/26 [00:00<00:00, 30.24it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.24it/s] 42%|####2     | 11/26 [00:00<00:00, 36.52it/s] 62%|######1   | 16/26 [00:00<00:00, 40.65it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.65it/s] 81%|########  | 21/26 [00:00<00:00, 39.65it/s]100%|##########| 26/26 [00:00<00:00, 42.39it/s]100%|##########| 26/26 [00:00<00:00, 34.99it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.40 (  0.42)	test_minacc   0.52 (  0.59)	test_majacc   0.38 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.40 (  0.42)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.39)	test_corr_d   0.02 (  0.00)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.67 (  0.59)	test_majacc   0.36 (  0.39)	Loss_d 0.695 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.36 (  0.39)	test_corr_d  -0.10 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.16it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 19/  1]	epoch_time 0.0392 (0.0434)	validation_time 0.0003 (0.0007)	train_time 0.0388 (0.0426)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.41710000556707383, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 12.77it/s] 23%|##3       | 6/26 [00:00<00:00, 22.90it/s] 38%|###8      | 10/26 [00:00<00:00, 27.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.63it/s] 69%|######9   | 18/26 [00:00<00:00, 30.62it/s] 85%|########4 | 22/26 [00:00<00:00, 32.10it/s]100%|##########| 26/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 200
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.42)	train_minacc   0.67 (  0.59)	train_majacc   0.36 (  0.39)	train_corr   0.00 (  0.00)	l1 6.3527 (6.3528)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.95it/s] 27%|##6       | 7/26 [00:00<00:00, 33.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.22it/s] 46%|####6     | 12/26 [00:00<00:00, 38.76it/s] 65%|######5   | 17/26 [00:00<00:00, 41.03it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.03it/s] 85%|########4 | 22/26 [00:00<00:00, 41.61it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.52 (  0.59)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.59 (  0.58)	test_majacc   0.39 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.59 (  0.58)	test_majacc_d   0.39 (  0.39)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.67 (  0.59)	test_majacc   0.36 (  0.39)	Loss_d 0.695 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.36 (  0.39)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.46it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 20/  1]	epoch_time 0.0391 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0386 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.41860000494122507, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.86it/s] 19%|#9        | 5/26 [00:00<00:01, 19.68it/s] 35%|###4      | 9/26 [00:00<00:00, 25.68it/s] 50%|#####     | 13/26 [00:00<00:00, 28.14it/s] 65%|######5   | 17/26 [00:00<00:00, 30.17it/s] 81%|########  | 21/26 [00:00<00:00, 31.43it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 27.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 200
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.42)	train_minacc   0.67 (  0.58)	train_majacc   0.36 (  0.39)	train_corr   0.00 (  0.00)	l1 6.3519 (6.3520)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 27%|##6       | 7/26 [00:00<00:00, 32.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.17it/s] 50%|#####     | 13/26 [00:00<00:00, 39.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.71it/s] 92%|#########2| 24/26 [00:00<00:00, 45.13it/s]100%|##########| 26/26 [00:00<00:00, 37.59it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.52 (  0.59)	test_majacc   0.39 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.56 (  0.58)	test_majacc   0.40 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.40 (  0.39)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.67 (  0.59)	test_majacc   0.38 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.67 (  0.59)	test_majacc_d   0.38 (  0.39)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 21/  1]	epoch_time 0.0401 (0.0431)	validation_time 0.0003 (0.0007)	train_time 0.0397 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.42040000545978545, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 19%|#9        | 5/26 [00:00<00:00, 21.98it/s] 35%|###4      | 9/26 [00:00<00:00, 27.85it/s] 50%|#####     | 13/26 [00:00<00:00, 30.19it/s] 65%|######5   | 17/26 [00:00<00:00, 31.38it/s] 81%|########  | 21/26 [00:00<00:00, 32.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 28.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 200
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.42)	train_minacc   0.65 (  0.58)	train_majacc   0.36 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3511 (6.3511)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 23%|##3       | 6/26 [00:00<00:00, 31.21it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.21it/s] 42%|####2     | 11/26 [00:00<00:00, 37.61it/s] 62%|######1   | 16/26 [00:00<00:00, 40.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.11it/s] 81%|########  | 21/26 [00:00<00:00, 38.78it/s]100%|##########| 26/26 [00:00<00:00, 41.92it/s]100%|##########| 26/26 [00:00<00:00, 34.36it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.52 (  0.59)	test_majacc   0.39 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.02 (  0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.42)	test_minacc   0.56 (  0.58)	test_majacc   0.41 (  0.39)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.42)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.41 (  0.39)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.41 (  0.42)	test_minacc   0.63 (  0.58)	test_majacc   0.37 (  0.39)	Loss_d 0.694 (0.693)	test_acc_d   0.41 (  0.42)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.37 (  0.39)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.88it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 22/  1]	epoch_time 0.0472 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0467 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.42110000532865527, 0.5490000247955322)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.75it/s] 19%|#9        | 5/26 [00:00<00:01, 15.52it/s] 35%|###4      | 9/26 [00:00<00:00, 21.91it/s] 50%|#####     | 13/26 [00:00<00:00, 26.05it/s] 65%|######5   | 17/26 [00:00<00:00, 29.15it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:01<00:00, 25.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 200
penalty weights 10000.0
l1 at pgd_anneal_iters 6.350699424743652
set z to 6.033164453506469
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 200
penalty weights 10000.0
Epoch: [23][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.43)	train_minacc   0.65 (  0.58)	train_majacc   0.36 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3503 (6.3503)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.11it/s] 19%|#9        | 5/26 [00:00<00:00, 25.02it/s] 38%|###8      | 10/26 [00:00<00:00, 30.95it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.71it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.71it/s] 96%|#########6| 25/26 [00:00<00:00, 41.72it/s]100%|##########| 26/26 [00:00<00:00, 34.25it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.43)	test_minacc   0.52 (  0.59)	test_majacc   0.39 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.54 (  0.58)	test_majacc   0.41 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.01 ( -0.00)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.63 (  0.58)	test_majacc   0.38 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.38 (  0.40)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 23/  1]	epoch_time 0.0430 (0.0432)	validation_time 0.0007 (0.0007)	train_time 0.0423 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.42380000483989716, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.94it/s] 19%|#9        | 5/26 [00:00<00:01, 15.90it/s] 35%|###4      | 9/26 [00:00<00:00, 22.40it/s] 50%|#####     | 13/26 [00:00<00:00, 25.98it/s] 65%|######5   | 17/26 [00:00<00:00, 28.50it/s] 81%|########  | 21/26 [00:00<00:00, 30.35it/s] 96%|#########6| 25/26 [00:00<00:00, 31.93it/s]100%|##########| 26/26 [00:01<00:00, 24.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 200
penalty weights 10000.0
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.43)	train_minacc   0.65 (  0.58)	train_majacc   0.36 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3495 (6.3496)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 23%|##3       | 6/26 [00:00<00:00, 29.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.90it/s] 42%|####2     | 11/26 [00:00<00:00, 36.33it/s] 62%|######1   | 16/26 [00:00<00:00, 40.41it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.41it/s] 81%|########  | 21/26 [00:00<00:00, 38.67it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]100%|##########| 26/26 [00:00<00:00, 34.66it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.43 (  0.43)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.43)	test_minacc   0.52 (  0.58)	test_majacc   0.39 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.42)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.42)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.42)	test_minacc   0.63 (  0.58)	test_majacc   0.37 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.37 (  0.40)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 24/  1]	epoch_time 0.0436 (0.0433)	validation_time 0.0004 (0.0007)	train_time 0.0431 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.42480000457167627, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.24it/s] 15%|#5        | 4/26 [00:00<00:01, 17.58it/s] 31%|###       | 8/26 [00:00<00:00, 24.74it/s] 46%|####6     | 12/26 [00:00<00:00, 28.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.78it/s] 88%|########8 | 23/26 [00:00<00:00, 32.09it/s]100%|##########| 26/26 [00:00<00:00, 27.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 200
penalty weights 10000.0
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.40 (  0.43)	train_minacc   0.63 (  0.58)	train_majacc   0.36 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3488 (6.3488)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 12.51it/s] 35%|###4      | 9/26 [00:00<00:00, 28.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 28.38it/s] 58%|#####7    | 15/26 [00:00<00:00, 36.49it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 36.49it/s] 81%|########  | 21/26 [00:00<00:00, 42.22it/s]100%|##########| 26/26 [00:00<00:00, 35.30it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.43)	test_minacc   0.52 (  0.58)	test_majacc   0.39 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.39 (  0.40)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.38 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.38 (  0.40)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 25/  1]	epoch_time 0.0411 (0.0432)	validation_time 0.0004 (0.0007)	train_time 0.0406 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4265000048875809, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.78it/s] 19%|#9        | 5/26 [00:00<00:01, 19.44it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 28.22it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.41it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 200
penalty weights 10000.0
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.43)	train_minacc   0.63 (  0.58)	train_majacc   0.36 (  0.40)	train_corr   0.00 (  0.00)	l1 6.3481 (6.3481)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 15%|#5        | 4/26 [00:00<00:01, 15.21it/s] 35%|###4      | 9/26 [00:00<00:00, 27.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 27.17it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 36.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 36.16it/s] 92%|#########2| 24/26 [00:00<00:00, 39.33it/s]100%|##########| 26/26 [00:00<00:00, 30.78it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.691 (0.691)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.41 (  0.43)	test_minacc   0.52 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.41 (  0.43)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.38 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.38 (  0.40)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 26/  1]	epoch_time 0.0388 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0385 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4280000047981739, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.05it/s] 23%|##3       | 6/26 [00:00<00:00, 25.28it/s] 38%|###8      | 10/26 [00:00<00:00, 28.55it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.08it/s] 69%|######9   | 18/26 [00:00<00:00, 33.99it/s] 85%|########4 | 22/26 [00:00<00:00, 35.62it/s]100%|##########| 26/26 [00:00<00:00, 34.61it/s]100%|##########| 26/26 [00:00<00:00, 29.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 200
penalty weights 10000.0
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.41 (  0.43)	train_minacc   0.63 (  0.57)	train_majacc   0.37 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3474 (6.3474)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.06it/s] 27%|##6       | 7/26 [00:00<00:00, 33.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.51it/s] 46%|####6     | 12/26 [00:00<00:00, 39.61it/s] 65%|######5   | 17/26 [00:00<00:00, 42.61it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.61it/s] 85%|########4 | 22/26 [00:00<00:00, 38.64it/s]100%|##########| 26/26 [00:00<00:00, 36.95it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.52 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.38 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.38 (  0.40)	test_corr_d  -0.10 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 27/  1]	epoch_time 0.0423 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0422)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4284000045657158, 0.550000011920929)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:05,  4.41it/s] 23%|##3       | 6/26 [00:00<00:01, 12.45it/s] 38%|###8      | 10/26 [00:00<00:00, 18.45it/s] 54%|#####3    | 14/26 [00:00<00:00, 22.94it/s] 69%|######9   | 18/26 [00:00<00:00, 26.40it/s] 85%|########4 | 22/26 [00:01<00:00, 29.03it/s]100%|##########| 26/26 [00:01<00:00, 31.03it/s]100%|##########| 26/26 [00:01<00:00, 21.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 200
penalty weights 10000.0
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.42 (  0.43)	train_minacc   0.63 (  0.57)	train_majacc   0.37 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3467 (6.3467)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.38it/s] 23%|##3       | 6/26 [00:00<00:00, 30.03it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.03it/s] 42%|####2     | 11/26 [00:00<00:00, 37.41it/s] 65%|######5   | 17/26 [00:00<00:00, 40.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.40it/s] 85%|########4 | 22/26 [00:00<00:00, 43.36it/s]100%|##########| 26/26 [00:00<00:00, 36.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.39 (  0.40)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.39 (  0.40)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 55.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 28/  1]	epoch_time 0.0470 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0466 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4303000048696995, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.92it/s] 12%|#1        | 3/26 [00:00<00:03,  7.46it/s] 27%|##6       | 7/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 21.40it/s] 58%|#####7    | 15/26 [00:00<00:00, 24.74it/s] 73%|#######3  | 19/26 [00:00<00:00, 27.55it/s] 88%|########8 | 23/26 [00:01<00:00, 29.63it/s]100%|##########| 26/26 [00:01<00:00, 21.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 200
penalty weights 10000.0
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.42 (  0.43)	train_minacc   0.63 (  0.57)	train_majacc   0.38 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3461 (6.3461)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 23%|##3       | 6/26 [00:00<00:00, 27.32it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.32it/s] 42%|####2     | 11/26 [00:00<00:00, 35.32it/s] 62%|######1   | 16/26 [00:00<00:00, 38.06it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.06it/s] 81%|########  | 21/26 [00:00<00:00, 38.09it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]100%|##########| 26/26 [00:00<00:00, 33.30it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.692 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.65 (  0.58)	test_majacc   0.39 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.39 (  0.41)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 29/  1]	epoch_time 0.0485 (0.0433)	validation_time 0.0005 (0.0006)	train_time 0.0479 (0.0426)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43110000428557393, 0.5550000071525574)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.65it/s] 19%|#9        | 5/26 [00:00<00:01, 17.28it/s] 35%|###4      | 9/26 [00:00<00:00, 23.89it/s] 50%|#####     | 13/26 [00:00<00:00, 27.77it/s] 65%|######5   | 17/26 [00:00<00:00, 29.96it/s] 81%|########  | 21/26 [00:00<00:00, 31.63it/s] 96%|#########6| 25/26 [00:00<00:00, 32.75it/s]100%|##########| 26/26 [00:01<00:00, 25.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 200
penalty weights 10000.0
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.42 (  0.43)	train_minacc   0.63 (  0.57)	train_majacc   0.38 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3455 (6.3455)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:08,  3.03it/s] 23%|##3       | 6/26 [00:00<00:01, 16.63it/s]                                               23%|##3       | 6/26 [00:00<00:01, 16.63it/s] 42%|####2     | 11/26 [00:00<00:00, 25.94it/s] 62%|######1   | 16/26 [00:00<00:00, 32.11it/s]                                                62%|######1   | 16/26 [00:00<00:00, 32.11it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]100%|##########| 26/26 [00:00<00:00, 27.02it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.52 (  0.52)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.39 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.39 (  0.41)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.53it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 30/  1]	epoch_time 0.0437 (0.0433)	validation_time 0.0005 (0.0006)	train_time 0.0432 (0.0426)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43330000415444375, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.23it/s] 23%|##3       | 6/26 [00:00<00:00, 26.29it/s] 38%|###8      | 10/26 [00:00<00:00, 29.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.53it/s] 69%|######9   | 18/26 [00:00<00:00, 32.05it/s] 85%|########4 | 22/26 [00:00<00:00, 32.81it/s]100%|##########| 26/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 200
penalty weights 10000.0
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.63 (  0.57)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3449 (6.3449)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.08it/s] 23%|##3       | 6/26 [00:00<00:00, 22.49it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.49it/s] 42%|####2     | 11/26 [00:00<00:00, 31.26it/s] 62%|######1   | 16/26 [00:00<00:00, 36.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 36.44it/s] 81%|########  | 21/26 [00:00<00:00, 37.82it/s]100%|##########| 26/26 [00:00<00:00, 40.94it/s]100%|##########| 26/26 [00:00<00:00, 31.46it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.52 (  0.52)	test_majacc   0.44 (  0.44)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.44 (  0.44)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.63 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.99it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 31/  1]	epoch_time 0.0398 (0.0432)	validation_time 0.0007 (0.0006)	train_time 0.0391 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4337000043392181, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.32it/s] 23%|##3       | 6/26 [00:00<00:00, 24.75it/s] 38%|###8      | 10/26 [00:00<00:00, 28.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.23it/s] 69%|######9   | 18/26 [00:00<00:00, 31.87it/s] 85%|########4 | 22/26 [00:00<00:00, 32.89it/s]100%|##########| 26/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 28.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 200
penalty weights 10000.0
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.63 (  0.57)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3443 (6.3443)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02, 10.40it/s] 27%|##6       | 7/26 [00:00<00:00, 26.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.15it/s] 46%|####6     | 12/26 [00:00<00:00, 33.69it/s] 65%|######5   | 17/26 [00:00<00:00, 38.13it/s]                                                65%|######5   | 17/26 [00:00<00:00, 38.13it/s] 85%|########4 | 22/26 [00:00<00:00, 37.59it/s]100%|##########| 26/26 [00:00<00:00, 33.27it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.56 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.00)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.63 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.09 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.29it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0421 (0.0432)	validation_time 0.0005 (0.0006)	train_time 0.0416 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4350000042617321, 0.5570000410079956)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 15%|#5        | 4/26 [00:00<00:01, 20.89it/s] 31%|###       | 8/26 [00:00<00:00, 27.92it/s] 46%|####6     | 12/26 [00:00<00:00, 31.09it/s] 62%|######1   | 16/26 [00:00<00:00, 32.61it/s] 77%|#######6  | 20/26 [00:00<00:00, 33.00it/s] 92%|#########2| 24/26 [00:00<00:00, 33.84it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 200
penalty weights 10000.0
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.63 (  0.57)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3438 (6.3438)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.43it/s] 27%|##6       | 7/26 [00:00<00:00, 24.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 24.73it/s] 46%|####6     | 12/26 [00:00<00:00, 32.31it/s] 69%|######9   | 18/26 [00:00<00:00, 36.10it/s]                                                69%|######9   | 18/26 [00:00<00:00, 36.10it/s] 88%|########8 | 23/26 [00:00<00:00, 39.13it/s]100%|##########| 26/26 [00:00<00:00, 33.09it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.56 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.63 (  0.58)	test_majacc   0.39 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.63 (  0.58)	test_majacc_d   0.39 (  0.41)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.86it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0423 (0.0431)	validation_time 0.0004 (0.0006)	train_time 0.0418 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.435400004029274, 0.5600000023841858)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:02,  9.64it/s] 15%|#5        | 4/26 [00:00<00:01, 12.33it/s] 31%|###       | 8/26 [00:00<00:00, 20.73it/s] 46%|####6     | 12/26 [00:00<00:00, 25.23it/s] 62%|######1   | 16/26 [00:00<00:00, 28.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.39it/s] 92%|#########2| 24/26 [00:00<00:00, 31.79it/s]100%|##########| 26/26 [00:01<00:00, 24.91it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 200
penalty weights 10000.0
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3433 (6.3433)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.56it/s] 23%|##3       | 6/26 [00:00<00:00, 22.26it/s]                                               23%|##3       | 6/26 [00:00<00:00, 22.26it/s] 42%|####2     | 11/26 [00:00<00:00, 31.10it/s] 62%|######1   | 16/26 [00:00<00:00, 37.02it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.02it/s] 81%|########  | 21/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 32.16it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.56 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.694 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.42 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.42 (  0.42)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 34/  1]	epoch_time 0.0449 (0.0432)	validation_time 0.0004 (0.0006)	train_time 0.0444 (0.0425)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43550000444054604, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 15%|#5        | 4/26 [00:00<00:01, 15.69it/s] 31%|###       | 8/26 [00:00<00:00, 23.53it/s] 46%|####6     | 12/26 [00:00<00:00, 26.89it/s] 62%|######1   | 16/26 [00:00<00:00, 29.05it/s] 77%|#######6  | 20/26 [00:00<00:00, 30.33it/s] 92%|#########2| 24/26 [00:00<00:00, 31.67it/s]100%|##########| 26/26 [00:01<00:00, 25.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 200
penalty weights 10000.0
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.41)	train_corr   0.00 (  0.00)	l1 6.3428 (6.3428)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.04it/s] 27%|##6       | 7/26 [00:00<00:00, 25.73it/s]                                               27%|##6       | 7/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 35.07it/s] 69%|######9   | 18/26 [00:00<00:00, 39.27it/s]                                                69%|######9   | 18/26 [00:00<00:00, 39.27it/s] 88%|########8 | 23/26 [00:00<00:00, 39.68it/s]100%|##########| 26/26 [00:00<00:00, 32.88it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.56 (  0.59)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.56 (  0.59)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.56 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.71it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 35/  1]	epoch_time 0.0395 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0392 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4366000043749809, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.86it/s] 19%|#9        | 5/26 [00:00<00:00, 22.26it/s] 35%|###4      | 9/26 [00:00<00:00, 26.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 30.97it/s] 81%|########  | 21/26 [00:00<00:00, 33.42it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 28.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 200
penalty weights 10000.0
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.40 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3423 (6.3423)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 23%|##3       | 6/26 [00:00<00:00, 32.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.15it/s] 42%|####2     | 11/26 [00:00<00:00, 38.47it/s] 62%|######1   | 16/26 [00:00<00:00, 42.44it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.44it/s] 81%|########  | 21/26 [00:00<00:00, 40.09it/s]100%|##########| 26/26 [00:00<00:00, 43.02it/s]100%|##########| 26/26 [00:00<00:00, 36.52it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.56 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.56 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 36/  1]	epoch_time 0.0421 (0.0431)	validation_time 0.0003 (0.0006)	train_time 0.0418 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4356000046432018, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.21it/s] 15%|#5        | 4/26 [00:00<00:01, 16.83it/s] 27%|##6       | 7/26 [00:00<00:00, 21.75it/s] 42%|####2     | 11/26 [00:00<00:00, 26.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.55it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.08it/s] 88%|########8 | 23/26 [00:00<00:00, 32.34it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 200
penalty weights 10000.0
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.40 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3418 (6.3419)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 23%|##3       | 6/26 [00:00<00:00, 25.05it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.05it/s] 42%|####2     | 11/26 [00:00<00:00, 33.09it/s] 62%|######1   | 16/26 [00:00<00:00, 37.15it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.15it/s] 81%|########  | 21/26 [00:00<00:00, 36.87it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]100%|##########| 26/26 [00:00<00:00, 31.94it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.53)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.43)	test_minacc   0.54 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.54 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.54 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.08 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 37/  1]	epoch_time 0.0424 (0.0430)	validation_time 0.0005 (0.0006)	train_time 0.0420 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43710000401735305, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.98it/s] 19%|#9        | 5/26 [00:00<00:00, 24.68it/s] 35%|###4      | 9/26 [00:00<00:00, 29.34it/s] 50%|#####     | 13/26 [00:00<00:00, 31.06it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 29.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 200
penalty weights 10000.0
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.67 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3414 (6.3414)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:00, 21.74it/s] 38%|###8      | 10/26 [00:00<00:00, 30.17it/s]                                                38%|###8      | 10/26 [00:00<00:00, 30.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 35.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 39.04it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 39.04it/s] 96%|#########6| 25/26 [00:00<00:00, 41.26it/s]100%|##########| 26/26 [00:00<00:00, 32.96it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.43)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.43)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.43)	test_minacc   0.54 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.43)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.50it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.58 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 38/  1]	epoch_time 0.0413 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0409 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4371000045537949, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:00, 22.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.36it/s] 96%|#########6| 25/26 [00:00<00:00, 34.18it/s]100%|##########| 26/26 [00:00<00:00, 28.73it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 200
penalty weights 10000.0
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.67 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3410 (6.3410)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.87it/s] 23%|##3       | 6/26 [00:00<00:01, 19.88it/s]                                               23%|##3       | 6/26 [00:00<00:01, 19.88it/s] 42%|####2     | 11/26 [00:00<00:00, 28.83it/s] 62%|######1   | 16/26 [00:00<00:00, 35.41it/s]                                                62%|######1   | 16/26 [00:00<00:00, 35.41it/s] 81%|########  | 21/26 [00:00<00:00, 35.35it/s]100%|##########| 26/26 [00:00<00:00, 39.03it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.54 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 39/  1]	epoch_time 0.0455 (0.0431)	validation_time 0.0005 (0.0006)	train_time 0.0450 (0.0424)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43820000395178793, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.78it/s] 12%|#1        | 3/26 [00:00<00:01, 14.19it/s] 27%|##6       | 7/26 [00:00<00:00, 23.97it/s] 42%|####2     | 11/26 [00:00<00:00, 27.95it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.45it/s] 88%|########8 | 23/26 [00:00<00:00, 32.53it/s]100%|##########| 26/26 [00:00<00:00, 27.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 200
penalty weights 10000.0
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.67 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3406 (6.3406)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.63it/s] 23%|##3       | 6/26 [00:00<00:00, 32.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.12it/s] 42%|####2     | 11/26 [00:00<00:00, 38.61it/s] 62%|######1   | 16/26 [00:00<00:00, 42.03it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.03it/s] 81%|########  | 21/26 [00:00<00:00, 40.02it/s]100%|##########| 26/26 [00:00<00:00, 42.88it/s]100%|##########| 26/26 [00:00<00:00, 36.02it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.54 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.54 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.98it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 40/  1]	epoch_time 0.0397 (0.0430)	validation_time 0.0003 (0.0006)	train_time 0.0394 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4387000039219856, 0.5680000185966492)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.42it/s] 27%|##6       | 7/26 [00:00<00:00, 26.65it/s] 42%|####2     | 11/26 [00:00<00:00, 30.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 31.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.55it/s] 88%|########8 | 23/26 [00:00<00:00, 31.89it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 200
penalty weights 10000.0
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.67 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3402 (6.3402)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 15%|#5        | 4/26 [00:00<00:01, 19.95it/s] 35%|###4      | 9/26 [00:00<00:00, 31.36it/s]                                               35%|###4      | 9/26 [00:00<00:00, 31.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 36.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 38.09it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 38.09it/s] 92%|#########2| 24/26 [00:00<00:00, 41.33it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.55 (  0.55)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 41/  1]	epoch_time 0.0420 (0.0430)	validation_time 0.0004 (0.0006)	train_time 0.0416 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43830000415444376, 0.5700000524520874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 18.39it/s] 27%|##6       | 7/26 [00:00<00:00, 26.01it/s] 42%|####2     | 11/26 [00:00<00:00, 28.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 31.54it/s] 88%|########8 | 23/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 200
penalty weights 10000.0
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.67 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3398 (6.3399)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.95it/s] 23%|##3       | 6/26 [00:00<00:00, 25.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.11it/s] 42%|####2     | 11/26 [00:00<00:00, 33.16it/s] 62%|######1   | 16/26 [00:00<00:00, 37.86it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.86it/s] 81%|########  | 21/26 [00:00<00:00, 37.53it/s]100%|##########| 26/26 [00:00<00:00, 40.72it/s]100%|##########| 26/26 [00:00<00:00, 32.58it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.42 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.42 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.11it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 42/  1]	epoch_time 0.0415 (0.0429)	validation_time 0.0003 (0.0006)	train_time 0.0412 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4389000039100647, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.56it/s] 19%|#9        | 5/26 [00:00<00:01, 14.78it/s] 35%|###4      | 9/26 [00:00<00:00, 21.98it/s] 50%|#####     | 13/26 [00:00<00:00, 26.56it/s] 65%|######5   | 17/26 [00:00<00:00, 29.58it/s] 81%|########  | 21/26 [00:00<00:00, 31.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:01<00:00, 24.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 200
penalty weights 10000.0
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3395 (6.3395)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 23%|##3       | 6/26 [00:00<00:00, 24.94it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.94it/s] 42%|####2     | 11/26 [00:00<00:00, 33.18it/s] 62%|######1   | 16/26 [00:00<00:00, 37.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 37.36it/s] 81%|########  | 21/26 [00:00<00:00, 37.03it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]100%|##########| 26/26 [00:00<00:00, 32.19it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.27it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 43/  1]	epoch_time 0.0396 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0392 (0.0422)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4393000038862228, 0.5690000057220459)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.92it/s]  8%|7         | 2/26 [00:00<00:03,  6.63it/s] 23%|##3       | 6/26 [00:00<00:01, 17.45it/s] 38%|###8      | 10/26 [00:00<00:00, 23.86it/s] 54%|#####3    | 14/26 [00:00<00:00, 28.09it/s] 69%|######9   | 18/26 [00:00<00:00, 30.92it/s] 85%|########4 | 22/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:01<00:00, 25.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 200
penalty weights 10000.0
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3392 (6.3392)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 23%|##3       | 6/26 [00:00<00:00, 26.37it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.37it/s] 42%|####2     | 11/26 [00:00<00:00, 33.96it/s] 62%|######1   | 16/26 [00:00<00:00, 39.13it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.13it/s] 81%|########  | 21/26 [00:00<00:00, 38.20it/s]100%|##########| 26/26 [00:00<00:00, 41.51it/s]100%|##########| 26/26 [00:00<00:00, 33.37it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.51 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.07 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 51.45it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.40 (  0.40)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.40 (  0.40)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 44/  1]	epoch_time 0.0434 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0430 (0.0422)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43860000392794607, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.01it/s] 23%|##3       | 6/26 [00:00<00:00, 27.55it/s] 38%|###8      | 10/26 [00:00<00:00, 30.89it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.51it/s] 69%|######9   | 18/26 [00:00<00:00, 32.38it/s] 85%|########4 | 22/26 [00:00<00:00, 33.58it/s]100%|##########| 26/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 29.94it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 200
penalty weights 10000.0
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3389 (6.3389)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 23%|##3       | 6/26 [00:00<00:00, 27.04it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.04it/s] 42%|####2     | 11/26 [00:00<00:00, 34.28it/s] 65%|######5   | 17/26 [00:00<00:00, 37.89it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.89it/s] 85%|########4 | 22/26 [00:00<00:00, 41.10it/s]100%|##########| 26/26 [00:00<00:00, 34.77it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.51 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.39 (  0.39)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.39 (  0.39)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 45/  1]	epoch_time 0.0424 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0419 (0.0422)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4389000039100647, 0.562000036239624)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.67it/s] 19%|#9        | 5/26 [00:00<00:01, 15.19it/s] 35%|###4      | 9/26 [00:00<00:00, 21.94it/s] 50%|#####     | 13/26 [00:00<00:00, 26.33it/s] 65%|######5   | 17/26 [00:00<00:00, 29.14it/s] 81%|########  | 21/26 [00:00<00:00, 31.11it/s] 96%|#########6| 25/26 [00:00<00:00, 32.43it/s]100%|##########| 26/26 [00:01<00:00, 24.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 200
penalty weights 10000.0
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.38 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3386 (6.3386)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.67it/s] 23%|##3       | 6/26 [00:00<00:00, 24.93it/s]                                               23%|##3       | 6/26 [00:00<00:00, 24.93it/s] 42%|####2     | 11/26 [00:00<00:00, 33.44it/s] 62%|######1   | 16/26 [00:00<00:00, 38.63it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.63it/s] 81%|########  | 21/26 [00:00<00:00, 38.06it/s]100%|##########| 26/26 [00:00<00:00, 41.53it/s]100%|##########| 26/26 [00:00<00:00, 32.42it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.51 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.44)	test_minacc   0.67 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.44)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.58it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 46/  1]	epoch_time 0.0413 (0.0428)	validation_time 0.0003 (0.0005)	train_time 0.0409 (0.0422)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.43860000392794607, 0.5630000233650208)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.30it/s] 19%|#9        | 5/26 [00:00<00:01, 19.08it/s] 35%|###4      | 9/26 [00:00<00:00, 25.12it/s] 50%|#####     | 13/26 [00:00<00:00, 28.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.43it/s] 96%|#########6| 25/26 [00:00<00:00, 33.12it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 200
penalty weights 10000.0
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.38 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3383 (6.3383)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.36it/s] 23%|##3       | 6/26 [00:00<00:00, 26.90it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.90it/s] 42%|####2     | 11/26 [00:00<00:00, 35.96it/s] 62%|######1   | 16/26 [00:00<00:00, 39.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.39it/s] 81%|########  | 21/26 [00:00<00:00, 38.57it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]100%|##########| 26/26 [00:00<00:00, 33.52it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.44 (  0.44)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.51 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.41)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 47/  1]	epoch_time 0.0458 (0.0429)	validation_time 0.0005 (0.0005)	train_time 0.0453 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4389000042378902, 0.5649999976158142)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.23it/s] 12%|#1        | 3/26 [00:00<00:01, 11.79it/s] 27%|##6       | 7/26 [00:00<00:00, 21.35it/s] 42%|####2     | 11/26 [00:00<00:00, 26.11it/s] 58%|#####7    | 15/26 [00:00<00:00, 29.36it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.89it/s] 88%|########8 | 23/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 200
penalty weights 10000.0
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.43 (  0.44)	train_minacc   0.65 (  0.57)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3381 (6.3381)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:10,  2.44it/s] 23%|##3       | 6/26 [00:00<00:01, 14.01it/s]                                               23%|##3       | 6/26 [00:00<00:01, 14.01it/s] 42%|####2     | 11/26 [00:00<00:00, 22.35it/s] 62%|######1   | 16/26 [00:00<00:00, 29.33it/s]                                                62%|######1   | 16/26 [00:00<00:00, 29.33it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 36.91it/s]100%|##########| 26/26 [00:01<00:00, 24.89it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.56 (  0.56)	test_majacc   0.42 (  0.42)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.42 (  0.42)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.51 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.58 (  0.58)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.58 (  0.58)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 48/  1]	epoch_time 0.0428 (0.0429)	validation_time 0.0005 (0.0005)	train_time 0.0423 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4398000041842461, 0.5640000104904175)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.44it/s] 23%|##3       | 6/26 [00:00<00:00, 26.09it/s] 38%|###8      | 10/26 [00:00<00:00, 30.12it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.83it/s] 69%|######9   | 18/26 [00:00<00:00, 32.72it/s] 85%|########4 | 22/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 35.01it/s]100%|##########| 26/26 [00:00<00:00, 29.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 200
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 200
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 200
penalty weights 10000.0
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm  22.70 ( 22.70)	train_acc   0.44 (  0.44)	train_minacc   0.65 (  0.58)	train_majacc   0.39 (  0.42)	train_corr   0.00 (  0.00)	l1 6.3378 (6.3378)	zero_count 0.0000 (0.0000)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:07,  3.15it/s] 23%|##3       | 6/26 [00:00<00:01, 17.51it/s]                                               23%|##3       | 6/26 [00:00<00:01, 17.51it/s] 42%|####2     | 11/26 [00:00<00:00, 25.30it/s] 62%|######1   | 16/26 [00:00<00:00, 31.64it/s]                                                62%|######1   | 16/26 [00:00<00:00, 31.64it/s] 81%|########  | 21/26 [00:00<00:00, 35.32it/s]100%|##########| 26/26 [00:00<00:00, 39.38it/s]100%|##########| 26/26 [00:00<00:00, 27.62it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.45 (  0.45)	test_minacc   0.55 (  0.55)	test_majacc   0.43 (  0.43)	Loss_d 0.692 (0.692)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.43 (  0.43)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.44)	test_minacc   0.52 (  0.59)	test_majacc   0.41 (  0.41)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.44)	test_minacc_d   0.52 (  0.59)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.43 (  0.44)	test_minacc   0.53 (  0.57)	test_majacc   0.41 (  0.41)	Loss_d 0.692 (0.693)	test_acc_d   0.43 (  0.44)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.41 (  0.41)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.44)	test_minacc   0.65 (  0.58)	test_majacc   0.40 (  0.42)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.65 (  0.58)	test_majacc_d   0.40 (  0.42)	test_corr_d  -0.06 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.57 (  0.57)	test_minacc   0.59 (  0.59)	test_majacc   0.38 (  0.38)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.38 (  0.38)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 49/  1]	epoch_time 0.0433 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0429 (0.0423)
record: (train_acc, test_acc) (0.6285000159740448, 0.6940000057220459)
last accs (train_acc, test_acc) (0.4399000041782856, 0.5660000443458557)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.164 MB of 0.164 MB uploadedwandb: \ 0.164 MB of 0.164 MB uploadedThread SenderThread:
Traceback (most recent call last):
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 48, in run
    self._run()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal_util.py", line 99, in _run
    self._process(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/internal.py", line 327, in _process
    self._sm.send(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 398, in send
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 420, in send_request
    send_handler(record)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 654, in send_request_defer
    self._flush_job()
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/sender.py", line 1706, in _flush_job
    artifact = self._job_builder.build(api=self._api)
  File "/home/zd16/scratch/mypython3/wandb/sdk/internal/job_builder.py", line 552, in build
    artifact.add_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1196, in add_file
    return self._add_local_file(
  File "/home/zd16/scratch/mypython3/wandb/sdk/artifacts/artifact.py", line 1459, in _add_local_file
    with tempfile.NamedTemporaryFile(dir=get_staging_dir(), delete=False) as f:
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 545, in NamedTemporaryFile
    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)
  File "/usr/local/python/3.9.16/lib/python3.9/tempfile.py", line 255, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
OSError: [Errno 122] Disk quota exceeded: '/home/zd16/.local/share/wandb/artifacts/staging/tmpy9lk7457'
wandb: ERROR Internal wandb error: file data was not synced
