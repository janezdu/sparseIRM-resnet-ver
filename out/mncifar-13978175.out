hello
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_113635-7kgrhddh
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/7kgrhddh
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1199
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5963, 3, 32, 32) (6037, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:37,  1.51s/it] 19%|#9        | 5/26 [00:01<00:05,  4.01it/s] 35%|###4      | 9/26 [00:01<00:02,  7.81it/s] 50%|#####     | 13/26 [00:01<00:01, 11.87it/s] 65%|######5   | 17/26 [00:01<00:00, 15.92it/s] 81%|########  | 21/26 [00:02<00:00, 19.66it/s] 96%|#########6| 25/26 [00:02<00:00, 22.93it/s]100%|##########| 26/26 [00:02<00:00, 10.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 10.300 (12.770)	train_nll   0.42 (  0.61)	train_penalty   0.08 (  0.35)	weight_norm   9.88 ( 12.16)	train_acc   0.85 (  0.79)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 8.1644 (9.0978)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.30it/s] 31%|###       | 8/26 [00:00<00:00, 34.69it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.69it/s] 50%|#####     | 13/26 [00:00<00:00, 38.54it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.74it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.26it/s]100%|##########| 26/26 [00:00<00:00, 38.02it/s]
Test: [   0/  26]	Loss 0.467 (0.467)	test_acc   0.82 (  0.82)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 0.467 (0.467)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.388 (0.420)	test_acc   0.86 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.388 (0.420)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.99 (  0.98)
Test: [  20/  26]	Loss 0.418 (0.419)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.418 (0.419)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.419 (0.420)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  0.99)	Loss_d 0.419 (0.420)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.876 (1.876)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.876 (1.876)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.876 (1.876)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.876 (1.876)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0792 (0.0792)	validation_time 0.0069 (0.0069)	train_time 0.0649 (0.0649)
record: (train_acc, test_acc) (0.8458000264763832, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8458000264763832, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 21.21it/s] 35%|###4      | 9/26 [00:00<00:00, 26.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.76it/s] 65%|######5   | 17/26 [00:00<00:00, 31.64it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.31it/s]100%|##########| 26/26 [00:00<00:00, 27.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.511 (7.554)	train_nll   0.40 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   5.11 (  7.14)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 7.7308 (7.9538)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.19it/s] 27%|##6       | 7/26 [00:00<00:00, 34.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.53it/s] 46%|####6     | 12/26 [00:00<00:00, 39.53it/s] 69%|######9   | 18/26 [00:00<00:00, 46.83it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.83it/s] 92%|#########2| 24/26 [00:00<00:00, 47.31it/s]100%|##########| 26/26 [00:00<00:00, 39.60it/s]
Test: [   0/  26]	Loss 0.457 (0.457)	test_acc   0.82 (  0.82)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.457 (0.457)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.363 (0.400)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.363 (0.400)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  20/  26]	Loss 0.395 (0.400)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.395 (0.400)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  26/  26]	Loss 0.401 (0.399)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 0.401 (0.399)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.75it/s]
Test: [  0/  1]	Loss 1.831 (1.831)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  1/  1]	Loss 1.831 (1.831)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Overall Timing[  1/  1]	epoch_time 0.0371 (0.0582)	validation_time 0.0004 (0.0036)	train_time 0.0367 (0.0508)
record: (train_acc, test_acc) (0.8458000264763832, 0.10500000417232513)
last accs (train_acc, test_acc) (0.848700026512146, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.53it/s] 23%|##3       | 6/26 [00:00<00:00, 27.14it/s] 38%|###8      | 10/26 [00:00<00:00, 30.85it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.85it/s] 69%|######9   | 18/26 [00:00<00:00, 33.17it/s] 85%|########4 | 22/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 33.88it/s]100%|##########| 26/26 [00:00<00:00, 29.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.363 (4.277)	train_nll   0.38 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   2.98 (  3.88)	train_acc   0.86 (  0.85)	train_minacc   0.08 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.8468 (7.2777)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.15it/s] 27%|##6       | 7/26 [00:00<00:00, 33.46it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.46it/s] 50%|#####     | 13/26 [00:00<00:00, 43.66it/s] 69%|######9   | 18/26 [00:00<00:00, 44.31it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.31it/s] 92%|#########2| 24/26 [00:00<00:00, 48.87it/s]100%|##########| 26/26 [00:00<00:00, 41.62it/s]
Test: [   0/  26]	Loss 0.431 (0.431)	test_acc   0.83 (  0.83)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 0.431 (0.431)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.332 (0.365)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.332 (0.365)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.381 (0.365)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.06)	test_majacc   0.98 (  0.99)	Loss_d 0.381 (0.365)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.06)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.368 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.06)	test_majacc   1.00 (  0.99)	Loss_d 0.368 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.06)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.66it/s]
Test: [  0/  1]	Loss 1.798 (1.798)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.798 (1.798)	test_acc   0.15 (  0.15)	test_minacc   0.06 (  0.06)	test_majacc   1.00 (  1.00)	Loss_d 1.798 (1.798)	test_acc_d   0.15 (  0.15)	test_minacc_d   0.06 (  0.06)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0351 (0.0505)	validation_time 0.0004 (0.0025)	train_time 0.0347 (0.0455)
record: (train_acc, test_acc) (0.8495000230669976, 0.15200001001358032)
last accs (train_acc, test_acc) (0.8495000230669976, 0.15200001001358032)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 19%|#9        | 5/26 [00:00<00:00, 23.99it/s] 35%|###4      | 9/26 [00:00<00:00, 28.53it/s] 50%|#####     | 13/26 [00:00<00:00, 30.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.91it/s] 81%|########  | 21/26 [00:00<00:00, 31.63it/s] 96%|#########6| 25/26 [00:00<00:00, 32.47it/s]100%|##########| 26/26 [00:00<00:00, 28.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.259 (2.745)	train_nll   0.36 (  0.37)	train_penalty   0.04 (  0.04)	weight_norm   1.90 (  2.37)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.0920 (6.4098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.05it/s] 31%|###       | 8/26 [00:00<00:00, 38.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.15it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.64it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.76it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.76it/s]100%|##########| 26/26 [00:00<00:00, 51.26it/s]100%|##########| 26/26 [00:00<00:00, 41.85it/s]
Test: [   0/  26]	Loss 0.424 (0.424)	test_acc   0.83 (  0.83)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.424 (0.424)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.351 (0.369)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.11)	test_majacc   1.00 (  0.98)	Loss_d 0.351 (0.369)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.11)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.95 (  0.93)
Test: [  20/  26]	Loss 0.374 (0.368)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.09)	test_majacc   0.99 (  0.98)	Loss_d 0.374 (0.368)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.09)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.95 (  0.94)
Test: [  26/  26]	Loss 0.347 (0.365)	test_acc   0.86 (  0.85)	test_minacc   0.08 (  0.09)	test_majacc   1.00 (  0.98)	Loss_d 0.347 (0.365)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.08 (  0.09)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.51it/s]
Test: [  0/  1]	Loss 1.857 (1.857)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.857 (1.857)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
Test: [  1/  1]	Loss 1.857 (1.857)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.857 (1.857)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.87 (  0.87)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0355 (0.0467)	validation_time 0.0003 (0.0020)	train_time 0.0352 (0.0429)
record: (train_acc, test_acc) (0.8489000231027604, 0.16700001060962677)
last accs (train_acc, test_acc) (0.8489000231027604, 0.16700001060962677)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.53it/s] 19%|#9        | 5/26 [00:00<00:01, 20.03it/s] 35%|###4      | 9/26 [00:00<00:00, 25.93it/s] 50%|#####     | 13/26 [00:00<00:00, 29.05it/s] 65%|######5   | 17/26 [00:00<00:00, 31.02it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.593 (1.909)	train_nll   0.33 (  0.37)	train_penalty   0.02 (  0.03)	weight_norm   1.26 (  1.54)	train_acc   0.87 (  0.85)	train_minacc   0.19 (  0.14)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 5.6525 (5.8492)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.16it/s] 27%|##6       | 7/26 [00:00<00:00, 34.00it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.00it/s] 50%|#####     | 13/26 [00:00<00:00, 40.17it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.95it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 39.46it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.376 (0.376)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.338 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.12 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.338 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.12 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  20/  26]	Loss 0.345 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.14 (  0.21)	test_majacc   0.96 (  0.96)	Loss_d 0.345 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.14 (  0.21)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.89)
Test: [  26/  26]	Loss 0.316 (0.345)	test_acc   0.87 (  0.85)	test_minacc   0.22 (  0.21)	test_majacc   0.98 (  0.96)	Loss_d 0.316 (0.345)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 1.504 (1.504)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 1.504 (1.504)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
Test: [  1/  1]	Loss 1.504 (1.504)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.98 (  0.98)	Loss_d 1.504 (1.504)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.69 (  0.69)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[  4/  1]	epoch_time 0.0375 (0.0449)	validation_time 0.0003 (0.0017)	train_time 0.0372 (0.0418)
record: (train_acc, test_acc) (0.850300018787384, 0.2850000262260437)
last accs (train_acc, test_acc) (0.850300018787384, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.06it/s] 19%|#9        | 5/26 [00:00<00:01, 17.48it/s] 35%|###4      | 9/26 [00:00<00:00, 24.13it/s] 50%|#####     | 13/26 [00:00<00:00, 27.42it/s] 65%|######5   | 17/26 [00:00<00:00, 29.77it/s] 81%|########  | 21/26 [00:00<00:00, 31.46it/s] 96%|#########6| 25/26 [00:00<00:00, 32.45it/s]100%|##########| 26/26 [00:00<00:00, 26.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.166 (1.374)	train_nll   0.34 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.83 (  1.03)	train_acc   0.86 (  0.85)	train_minacc   0.08 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 6.0974 (5.9366)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.13it/s] 27%|##6       | 7/26 [00:00<00:00, 29.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.88it/s] 50%|#####     | 13/26 [00:00<00:00, 36.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.33it/s] 96%|#########6| 25/26 [00:00<00:00, 45.27it/s]100%|##########| 26/26 [00:00<00:00, 36.69it/s]
Test: [   0/  26]	Loss 0.354 (0.354)	test_acc   0.84 (  0.84)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.354 (0.354)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.327 (0.332)	test_acc   0.85 (  0.86)	test_minacc   0.10 (  0.21)	test_majacc   0.96 (  0.97)	Loss_d 0.327 (0.332)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.10 (  0.21)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  20/  26]	Loss 0.355 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.20 (  0.20)	test_majacc   0.97 (  0.97)	Loss_d 0.355 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.88)
Test: [  26/  26]	Loss 0.316 (0.334)	test_acc   0.88 (  0.86)	test_minacc   0.22 (  0.21)	test_majacc   0.99 (  0.97)	Loss_d 0.316 (0.334)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.22 (  0.21)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.88 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.49it/s]
Test: [  0/  1]	Loss 1.435 (1.435)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.435 (1.435)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
Test: [  1/  1]	Loss 1.435 (1.435)	test_acc   0.25 (  0.25)	test_minacc   0.17 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 1.435 (1.435)	test_acc_d   0.25 (  0.25)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.65 (  0.65)
Overall Timing[  5/  1]	epoch_time 0.0388 (0.0439)	validation_time 0.0004 (0.0014)	train_time 0.0384 (0.0412)
record: (train_acc, test_acc) (0.850300018787384, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8572000222802162, 0.25)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 19%|#9        | 5/26 [00:00<00:01, 18.75it/s] 35%|###4      | 9/26 [00:00<00:00, 25.01it/s] 50%|#####     | 13/26 [00:00<00:00, 28.80it/s] 65%|######5   | 17/26 [00:00<00:00, 30.82it/s] 81%|########  | 21/26 [00:00<00:00, 32.21it/s] 96%|#########6| 25/26 [00:00<00:00, 33.26it/s]100%|##########| 26/26 [00:00<00:00, 27.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.895 (1.039)	train_nll   0.33 (  0.35)	train_penalty   0.03 (  0.03)	weight_norm   0.56 (  0.69)	train_acc   0.85 (  0.85)	train_minacc   0.00 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 7.0230 (6.6105)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.17it/s] 27%|##6       | 7/26 [00:00<00:00, 35.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.53it/s] 50%|#####     | 13/26 [00:00<00:00, 43.25it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.31it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.31it/s] 96%|#########6| 25/26 [00:00<00:00, 49.77it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]
Test: [   0/  26]	Loss 0.352 (0.352)	test_acc   0.84 (  0.84)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.352 (0.352)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.326 (0.336)	test_acc   0.85 (  0.85)	test_minacc   0.04 (  0.13)	test_majacc   0.98 (  0.98)	Loss_d 0.326 (0.336)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.04 (  0.13)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.356 (0.342)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.13)	test_majacc   0.99 (  0.98)	Loss_d 0.356 (0.342)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.13)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.307 (0.338)	test_acc   0.86 (  0.86)	test_minacc   0.11 (  0.13)	test_majacc   1.00 (  0.98)	Loss_d 0.307 (0.338)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.11 (  0.13)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.89 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.08it/s]
Test: [  0/  1]	Loss 1.511 (1.511)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 1.511 (1.511)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.511 (1.511)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.99 (  0.99)	Loss_d 1.511 (1.511)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.72 (  0.72)
Overall Timing[  6/  1]	epoch_time 0.0352 (0.0426)	validation_time 0.0003 (0.0013)	train_time 0.0349 (0.0403)
record: (train_acc, test_acc) (0.850300018787384, 0.2850000262260437)
last accs (train_acc, test_acc) (0.8558000229001045, 0.2639999985694885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.85it/s] 19%|#9        | 5/26 [00:00<00:00, 22.52it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 30.82it/s] 65%|######5   | 17/26 [00:00<00:00, 32.03it/s] 81%|########  | 21/26 [00:00<00:00, 33.05it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 28.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.718 (0.814)	train_nll   0.32 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.40 (  0.48)	train_acc   0.86 (  0.85)	train_minacc   0.05 (  0.20)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 8.4401 (7.8003)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.02it/s] 31%|###       | 8/26 [00:00<00:00, 38.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.91it/s] 50%|#####     | 13/26 [00:00<00:00, 40.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.27it/s] 96%|#########6| 25/26 [00:00<00:00, 46.79it/s]100%|##########| 26/26 [00:00<00:00, 40.27it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.307 (0.324)	test_acc   0.85 (  0.85)	test_minacc   0.06 (  0.16)	test_majacc   0.97 (  0.98)	Loss_d 0.307 (0.324)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.06 (  0.16)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  20/  26]	Loss 0.322 (0.327)	test_acc   0.86 (  0.86)	test_minacc   0.07 (  0.15)	test_majacc   0.99 (  0.98)	Loss_d 0.322 (0.327)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.07 (  0.15)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.291 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.11 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.291 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.11 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.70it/s]
Test: [  0/  1]	Loss 1.562 (1.562)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.562 (1.562)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.562 (1.562)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.99 (  0.99)	Loss_d 1.562 (1.562)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.76 (  0.76)
Overall Timing[  7/  1]	epoch_time 0.0380 (0.0421)	validation_time 0.0004 (0.0012)	train_time 0.0375 (0.0399)
record: (train_acc, test_acc) (0.850300018787384, 0.2850000262260437)
last accs (train_acc, test_acc) (0.856800027191639, 0.22300000488758087)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.40it/s] 23%|##3       | 6/26 [00:00<00:00, 24.48it/s] 38%|###8      | 10/26 [00:00<00:00, 28.16it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.63it/s] 69%|######9   | 18/26 [00:00<00:00, 32.28it/s] 85%|########4 | 22/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 34.13it/s]100%|##########| 26/26 [00:00<00:00, 29.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.587 (0.664)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.28 (  0.33)	train_acc   0.88 (  0.85)	train_minacc   0.24 (  0.23)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 9.8113 (9.2402)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.64it/s] 35%|###4      | 9/26 [00:00<00:00, 40.17it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.72it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.72it/s] 81%|########  | 21/26 [00:00<00:00, 47.98it/s]100%|##########| 26/26 [00:00<00:00, 43.14it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.43 (  0.43)	test_majacc   0.92 (  0.92)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.321 (0.319)	test_acc   0.85 (  0.86)	test_minacc   0.33 (  0.43)	test_majacc   0.92 (  0.93)	Loss_d 0.321 (0.319)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.33 (  0.43)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.85 (  0.83)
Test: [  20/  26]	Loss 0.334 (0.325)	test_acc   0.87 (  0.86)	test_minacc   0.43 (  0.43)	test_majacc   0.95 (  0.93)	Loss_d 0.334 (0.325)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.84 (  0.84)
Test: [  26/  26]	Loss 0.286 (0.322)	test_acc   0.87 (  0.86)	test_minacc   0.41 (  0.44)	test_majacc   0.95 (  0.93)	Loss_d 0.286 (0.322)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.41 (  0.44)	test_majacc_d   0.95 (  0.93)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 1.349 (1.349)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.95 (  0.95)	Loss_d 1.349 (1.349)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.349 (1.349)	test_acc   0.43 (  0.43)	test_minacc   0.37 (  0.37)	test_majacc   0.95 (  0.95)	Loss_d 1.349 (1.349)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.52 (  0.52)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0372 (0.0415)	validation_time 0.0003 (0.0011)	train_time 0.0369 (0.0396)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 28.67it/s] 50%|#####     | 13/26 [00:00<00:00, 31.85it/s] 65%|######5   | 17/26 [00:00<00:00, 33.44it/s] 81%|########  | 21/26 [00:00<00:00, 34.23it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 29.05it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.526 (0.572)	train_nll   0.31 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.21 (  0.24)	train_acc   0.86 (  0.86)	train_minacc   0.03 (  0.28)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 11.7445 (10.9423)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.02it/s] 27%|##6       | 7/26 [00:00<00:00, 36.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.75it/s] 50%|#####     | 13/26 [00:00<00:00, 44.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.00it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 48.84it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.83 (  0.83)	test_minacc   0.04 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.355 (0.355)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.304 (0.314)	test_acc   0.87 (  0.85)	test_minacc   0.04 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.304 (0.314)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.04 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.342 (0.321)	test_acc   0.86 (  0.85)	test_minacc   0.12 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.342 (0.321)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.12 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.302 (0.319)	test_acc   0.86 (  0.85)	test_minacc   0.14 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.302 (0.319)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.14 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.31it/s]
Test: [  0/  1]	Loss 1.467 (1.467)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.467 (1.467)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.467 (1.467)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.467 (1.467)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Overall Timing[  9/  1]	epoch_time 0.0368 (0.0410)	validation_time 0.0004 (0.0010)	train_time 0.0365 (0.0393)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8544000239372254, 0.16300000250339508)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.59it/s] 23%|##3       | 6/26 [00:00<00:00, 24.59it/s] 38%|###8      | 10/26 [00:00<00:00, 28.33it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.91it/s] 69%|######9   | 18/26 [00:00<00:00, 31.93it/s] 85%|########4 | 22/26 [00:00<00:00, 32.79it/s]100%|##########| 26/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 29.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.466 (0.517)	train_nll   0.30 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.17 (  0.19)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.27)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 13.5035 (12.8375)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 22.03it/s] 35%|###4      | 9/26 [00:00<00:00, 39.93it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.93it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.47it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.47it/s] 81%|########  | 21/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 41.89it/s]
Test: [   0/  26]	Loss 0.319 (0.319)	test_acc   0.85 (  0.85)	test_minacc   0.39 (  0.39)	test_majacc   0.94 (  0.94)	Loss_d 0.319 (0.319)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.321 (0.306)	test_acc   0.86 (  0.87)	test_minacc   0.35 (  0.43)	test_majacc   0.94 (  0.95)	Loss_d 0.321 (0.306)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.35 (  0.43)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.85 (  0.84)
Test: [  20/  26]	Loss 0.327 (0.311)	test_acc   0.87 (  0.87)	test_minacc   0.43 (  0.41)	test_majacc   0.94 (  0.95)	Loss_d 0.327 (0.311)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.43 (  0.41)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.85 (  0.85)
Test: [  26/  26]	Loss 0.274 (0.308)	test_acc   0.88 (  0.87)	test_minacc   0.32 (  0.41)	test_majacc   0.97 (  0.95)	Loss_d 0.274 (0.308)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.32 (  0.41)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 1.330 (1.330)	test_acc   0.43 (  0.43)	test_minacc   0.36 (  0.36)	test_majacc   0.98 (  0.98)	Loss_d 1.330 (1.330)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.48 (  0.48)
Test: [  1/  1]	Loss 1.330 (1.330)	test_acc   0.43 (  0.43)	test_minacc   0.36 (  0.36)	test_majacc   0.98 (  0.98)	Loss_d 1.330 (1.330)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.48 (  0.48)
Overall Timing[ 10/  1]	epoch_time 0.0351 (0.0405)	validation_time 0.0004 (0.0010)	train_time 0.0346 (0.0389)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8668000263571739, 0.42500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 15%|#5        | 4/26 [00:00<00:01, 20.60it/s] 31%|###       | 8/26 [00:00<00:00, 26.67it/s] 46%|####6     | 12/26 [00:00<00:00, 30.11it/s] 62%|######1   | 16/26 [00:00<00:00, 31.40it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.85it/s] 92%|#########2| 24/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 28.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.463 (0.479)	train_nll   0.32 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.14 (  0.15)	train_acc   0.86 (  0.85)	train_minacc   0.11 (  0.29)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 14.7899 (14.2433)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 19%|#9        | 5/26 [00:00<00:00, 24.77it/s]                                               19%|#9        | 5/26 [00:00<00:00, 24.77it/s] 42%|####2     | 11/26 [00:00<00:00, 37.58it/s] 62%|######1   | 16/26 [00:00<00:00, 40.39it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.39it/s] 85%|########4 | 22/26 [00:00<00:00, 46.26it/s]100%|##########| 26/26 [00:00<00:00, 37.64it/s]
Test: [   0/  26]	Loss 0.351 (0.351)	test_acc   0.83 (  0.83)	test_minacc   0.12 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.351 (0.351)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.298 (0.313)	test_acc   0.87 (  0.85)	test_minacc   0.10 (  0.11)	test_majacc   0.99 (  0.99)	Loss_d 0.298 (0.313)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.10 (  0.11)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.343 (0.317)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.343 (0.317)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.292 (0.314)	test_acc   0.86 (  0.86)	test_minacc   0.14 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.292 (0.314)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.14 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 1.523 (1.523)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.523 (1.523)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.523 (1.523)	test_acc   0.19 (  0.19)	test_minacc   0.10 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 1.523 (1.523)	test_acc_d   0.19 (  0.19)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Overall Timing[ 11/  1]	epoch_time 0.0361 (0.0401)	validation_time 0.0003 (0.0009)	train_time 0.0358 (0.0386)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.855200018286705, 0.19200000166893005)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.22it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 35%|###4      | 9/26 [00:00<00:00, 26.37it/s] 50%|#####     | 13/26 [00:00<00:00, 29.46it/s] 65%|######5   | 17/26 [00:00<00:00, 31.29it/s] 81%|########  | 21/26 [00:00<00:00, 32.50it/s] 96%|#########6| 25/26 [00:00<00:00, 32.87it/s]100%|##########| 26/26 [00:00<00:00, 27.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.421 (0.448)	train_nll   0.31 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.11 (  0.13)	train_acc   0.87 (  0.86)	train_minacc   0.35 (  0.33)	train_majacc   0.96 (  0.95)	train_corr   0.00 (  0.00)	l1 16.1057 (15.5673)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 23%|##3       | 6/26 [00:00<00:00, 30.41it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.41it/s] 46%|####6     | 12/26 [00:00<00:00, 39.48it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.42it/s] 96%|#########6| 25/26 [00:00<00:00, 48.69it/s]100%|##########| 26/26 [00:00<00:00, 40.08it/s]
Test: [   0/  26]	Loss 0.311 (0.311)	test_acc   0.87 (  0.87)	test_minacc   0.43 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.311 (0.311)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.299 (0.291)	test_acc   0.85 (  0.87)	test_minacc   0.29 (  0.40)	test_majacc   0.93 (  0.95)	Loss_d 0.299 (0.291)	test_acc_d   0.85 (  0.87)	test_minacc_d   0.29 (  0.40)	test_majacc_d   0.93 (  0.95)	test_corr_d   0.88 (  0.86)
Test: [  20/  26]	Loss 0.315 (0.295)	test_acc   0.88 (  0.87)	test_minacc   0.43 (  0.40)	test_majacc   0.96 (  0.95)	Loss_d 0.315 (0.295)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.43 (  0.40)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  26/  26]	Loss 0.261 (0.291)	test_acc   0.88 (  0.87)	test_minacc   0.35 (  0.40)	test_majacc   0.97 (  0.95)	Loss_d 0.261 (0.291)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.35 (  0.40)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.72it/s]
Test: [  0/  1]	Loss 1.385 (1.385)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 1.385 (1.385)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.52 (  0.52)
Test: [  1/  1]	Loss 1.385 (1.385)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.96 (  0.96)	Loss_d 1.385 (1.385)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.52 (  0.52)
Overall Timing[ 12/  1]	epoch_time 0.0364 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0360 (0.0384)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8707000263333321, 0.4010000228881836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 19%|#9        | 5/26 [00:00<00:01, 19.31it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.95it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.20it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.402 (0.426)	train_nll   0.30 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.88 (  0.86)	train_minacc   0.19 (  0.35)	train_majacc   1.00 (  0.95)	train_corr   0.00 (  0.00)	l1 17.2202 (16.7800)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.10it/s] 31%|###       | 8/26 [00:00<00:00, 39.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.56it/s] 50%|#####     | 13/26 [00:00<00:00, 41.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.51it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.51it/s] 96%|#########6| 25/26 [00:00<00:00, 48.08it/s]100%|##########| 26/26 [00:00<00:00, 41.27it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.22 (  0.22)	test_majacc   0.99 (  0.99)	Loss_d 0.330 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.305 (0.309)	test_acc   0.86 (  0.86)	test_minacc   0.12 (  0.18)	test_majacc   0.97 (  0.98)	Loss_d 0.305 (0.309)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.12 (  0.18)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  20/  26]	Loss 0.348 (0.315)	test_acc   0.87 (  0.86)	test_minacc   0.16 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.348 (0.315)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.16 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.273 (0.312)	test_acc   0.88 (  0.86)	test_minacc   0.27 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.273 (0.312)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.27 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.34it/s]
Test: [  0/  1]	Loss 1.495 (1.495)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.495 (1.495)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.495 (1.495)	test_acc   0.21 (  0.21)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 1.495 (1.495)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.78 (  0.78)
Overall Timing[ 13/  1]	epoch_time 0.0350 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0346 (0.0381)
record: (train_acc, test_acc) (0.8565000230669976, 0.4300000071525574)
last accs (train_acc, test_acc) (0.8610000247955323, 0.2120000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 19%|#9        | 5/26 [00:00<00:00, 23.06it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.49it/s] 81%|########  | 21/26 [00:00<00:00, 32.69it/s] 96%|#########6| 25/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 28.16it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.398 (0.414)	train_nll   0.30 (  0.31)	train_penalty   0.02 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.88 (  0.86)	train_minacc   0.22 (  0.36)	train_majacc   0.99 (  0.95)	train_corr   0.00 (  0.00)	l1 18.3701 (17.9776)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.03it/s] 31%|###       | 8/26 [00:00<00:00, 40.98it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.98it/s] 50%|#####     | 13/26 [00:00<00:00, 40.63it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.17it/s] 96%|#########6| 25/26 [00:00<00:00, 47.18it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]
Test: [   0/  26]	Loss 0.320 (0.320)	test_acc   0.86 (  0.86)	test_minacc   0.49 (  0.49)	test_majacc   0.94 (  0.94)	Loss_d 0.320 (0.320)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.301 (0.302)	test_acc   0.87 (  0.87)	test_minacc   0.49 (  0.48)	test_majacc   0.93 (  0.93)	Loss_d 0.301 (0.302)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.49 (  0.48)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.86 (  0.85)
Test: [  20/  26]	Loss 0.325 (0.306)	test_acc   0.87 (  0.87)	test_minacc   0.46 (  0.48)	test_majacc   0.94 (  0.94)	Loss_d 0.325 (0.306)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.267 (0.301)	test_acc   0.90 (  0.87)	test_minacc   0.54 (  0.49)	test_majacc   0.96 (  0.94)	Loss_d 0.267 (0.301)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.54 (  0.49)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.86 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.72it/s]
Test: [  0/  1]	Loss 1.262 (1.262)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 1.262 (1.262)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.47 (  0.47)
Test: [  1/  1]	Loss 1.262 (1.262)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.96 (  0.96)	Loss_d 1.262 (1.262)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.47 (  0.47)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[ 14/  1]	epoch_time 0.0362 (0.0393)	validation_time 0.0003 (0.0008)	train_time 0.0358 (0.0380)
record: (train_acc, test_acc) (0.8684000246524811, 0.4710000157356262)
last accs (train_acc, test_acc) (0.8684000246524811, 0.4710000157356262)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 19%|#9        | 5/26 [00:00<00:01, 19.21it/s] 35%|###4      | 9/26 [00:00<00:00, 24.82it/s] 50%|#####     | 13/26 [00:00<00:00, 28.13it/s] 65%|######5   | 17/26 [00:00<00:00, 30.03it/s] 81%|########  | 21/26 [00:00<00:00, 31.41it/s] 96%|#########6| 25/26 [00:00<00:00, 32.38it/s]100%|##########| 26/26 [00:00<00:00, 26.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.001 (0.158)	train_nll   0.62 (  0.42)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.67 (  0.79)	train_minacc   0.78 (  0.54)	train_majacc   0.65 (  0.83)	train_corr   0.00 (  0.00)	l1 18.4057 (18.6984)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 27%|##6       | 7/26 [00:00<00:00, 37.39it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.39it/s] 50%|#####     | 13/26 [00:00<00:00, 42.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.59it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.59it/s] 96%|#########6| 25/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 41.32it/s]
Test: [   0/  26]	Loss 0.664 (0.664)	test_acc   0.62 (  0.62)	test_minacc   0.78 (  0.78)	test_majacc   0.59 (  0.59)	Loss_d 0.664 (0.664)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.78 (  0.78)	test_majacc_d   0.59 (  0.59)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.696 (0.658)	test_acc   0.56 (  0.62)	test_minacc   0.69 (  0.77)	test_majacc   0.54 (  0.60)	Loss_d 0.696 (0.658)	test_acc_d   0.56 (  0.62)	test_minacc_d   0.69 (  0.77)	test_majacc_d   0.54 (  0.60)	test_corr_d   0.01 (  0.05)
Test: [  20/  26]	Loss 0.678 (0.658)	test_acc   0.62 (  0.62)	test_minacc   0.73 (  0.77)	test_majacc   0.60 (  0.60)	Loss_d 0.678 (0.658)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.73 (  0.77)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  26/  26]	Loss 0.641 (0.658)	test_acc   0.65 (  0.62)	test_minacc   0.73 (  0.76)	test_majacc   0.63 (  0.60)	Loss_d 0.641 (0.658)	test_acc_d   0.65 (  0.62)	test_minacc_d   0.73 (  0.76)	test_majacc_d   0.63 (  0.60)	test_corr_d   0.14 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.46it/s]
Test: [  0/  1]	Loss 0.587 (0.587)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.61 (  0.61)	Loss_d 0.587 (0.587)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.47 ( -0.47)
Test: [  1/  1]	Loss 0.587 (0.587)	test_acc   0.71 (  0.71)	test_minacc   0.72 (  0.72)	test_majacc   0.61 (  0.61)	Loss_d 0.587 (0.587)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.72 (  0.72)	test_majacc_d   0.61 (  0.61)	test_corr_d  -0.47 ( -0.47)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/48/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0372 (0.0391)	validation_time 0.0004 (0.0008)	train_time 0.0368 (0.0379)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.81it/s] 19%|#9        | 5/26 [00:00<00:00, 23.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.92it/s] 65%|######5   | 17/26 [00:00<00:00, 31.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.92it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 28.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.58 (  0.60)	train_minacc   0.57 (  0.67)	train_majacc   0.59 (  0.59)	train_corr   0.00 (  0.00)	l1 18.1476 (18.2265)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.96it/s] 27%|##6       | 7/26 [00:00<00:00, 31.29it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.29it/s] 50%|#####     | 13/26 [00:00<00:00, 38.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.16it/s] 96%|#########6| 25/26 [00:00<00:00, 46.25it/s]100%|##########| 26/26 [00:00<00:00, 38.53it/s]
Test: [   0/  26]	Loss 0.684 (0.684)	test_acc   0.54 (  0.54)	test_minacc   0.67 (  0.67)	test_majacc   0.51 (  0.51)	Loss_d 0.684 (0.684)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.699 (0.683)	test_acc   0.50 (  0.55)	test_minacc   0.57 (  0.62)	test_majacc   0.49 (  0.54)	Loss_d 0.699 (0.683)	test_acc_d   0.50 (  0.55)	test_minacc_d   0.57 (  0.62)	test_majacc_d   0.49 (  0.54)	test_corr_d  -0.01 (  0.04)
Test: [  20/  26]	Loss 0.685 (0.682)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.63)	test_majacc   0.55 (  0.55)	Loss_d 0.685 (0.682)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.63)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.08 (  0.05)
Test: [  26/  26]	Loss 0.677 (0.682)	test_acc   0.58 (  0.56)	test_minacc   0.57 (  0.63)	test_majacc   0.59 (  0.55)	Loss_d 0.677 (0.682)	test_acc_d   0.58 (  0.56)	test_minacc_d   0.57 (  0.63)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.14 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.45it/s]
Test: [  0/  1]	Loss 0.674 (0.674)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.674 (0.674)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.674 (0.674)	test_acc   0.59 (  0.59)	test_minacc   0.59 (  0.59)	test_majacc   0.58 (  0.58)	Loss_d 0.674 (0.674)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 16/  1]	epoch_time 0.0364 (0.0390)	validation_time 0.0004 (0.0007)	train_time 0.0360 (0.0378)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5631000092625618, 0.5870000123977661)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 19%|#9        | 5/26 [00:00<00:00, 23.85it/s] 35%|###4      | 9/26 [00:00<00:00, 28.57it/s] 50%|#####     | 13/26 [00:00<00:00, 30.95it/s] 65%|######5   | 17/26 [00:00<00:00, 32.19it/s] 81%|########  | 21/26 [00:00<00:00, 33.22it/s] 96%|#########6| 25/26 [00:00<00:00, 33.28it/s]100%|##########| 26/26 [00:00<00:00, 29.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.55)	train_minacc   0.57 (  0.61)	train_majacc   0.51 (  0.54)	train_corr   0.00 (  0.00)	l1 18.1249 (18.1319)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 27%|##6       | 7/26 [00:00<00:00, 37.94it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.94it/s] 50%|#####     | 13/26 [00:00<00:00, 44.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.79it/s] 96%|#########6| 25/26 [00:00<00:00, 49.26it/s]100%|##########| 26/26 [00:00<00:00, 41.45it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.696 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.59 (  0.59)	test_majacc   0.48 (  0.52)	Loss_d 0.696 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.08 ( -0.05)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.52 (  0.53)	test_minacc   0.54 (  0.59)	test_majacc   0.51 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.52 (  0.53)	test_minacc_d   0.54 (  0.59)	test_majacc_d   0.51 (  0.52)	test_corr_d  -0.05 ( -0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.53)	test_minacc   0.57 (  0.59)	test_majacc   0.50 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.53)	test_minacc_d   0.57 (  0.59)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.05 ( -0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.43it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 17/  1]	epoch_time 0.0362 (0.0388)	validation_time 0.0003 (0.0007)	train_time 0.0358 (0.0377)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5327000126242638, 0.5440000295639038)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.44it/s] 19%|#9        | 5/26 [00:00<00:01, 18.37it/s] 35%|###4      | 9/26 [00:00<00:00, 23.88it/s] 50%|#####     | 13/26 [00:00<00:00, 27.75it/s] 65%|######5   | 17/26 [00:00<00:00, 30.08it/s] 81%|########  | 21/26 [00:00<00:00, 31.63it/s] 96%|#########6| 25/26 [00:00<00:00, 32.30it/s]100%|##########| 26/26 [00:00<00:00, 26.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.48 (  0.52)	train_minacc   0.41 (  0.56)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 18.1243 (18.1244)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.97it/s] 27%|##6       | 7/26 [00:00<00:00, 35.45it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.45it/s] 50%|#####     | 13/26 [00:00<00:00, 41.26it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.77it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.77it/s] 96%|#########6| 25/26 [00:00<00:00, 47.89it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.46 (  0.46)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.49 (  0.49)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.03 (  0.02)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.45 (  0.49)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.41 (  0.49)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.27it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.697 (0.697)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.45 (  0.45)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.697 (0.697)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.16 (  0.16)
Overall Timing[ 18/  1]	epoch_time 0.0370 (0.0387)	validation_time 0.0006 (0.0007)	train_time 0.0364 (0.0376)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5115000111758709, 0.44700002670288086)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.45it/s] 19%|#9        | 5/26 [00:00<00:01, 20.35it/s] 35%|###4      | 9/26 [00:00<00:00, 26.18it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.07it/s] 96%|#########6| 25/26 [00:00<00:00, 33.55it/s]100%|##########| 26/26 [00:00<00:00, 27.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.47 (  0.51)	train_minacc   0.41 (  0.46)	train_majacc   0.48 (  0.51)	train_corr   0.00 (  0.00)	l1 18.1241 (18.1241)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.94it/s] 31%|###       | 8/26 [00:00<00:00, 39.47it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.47it/s] 50%|#####     | 13/26 [00:00<00:00, 41.66it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.46it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.46it/s] 96%|#########6| 25/26 [00:00<00:00, 47.00it/s]100%|##########| 26/26 [00:00<00:00, 40.66it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.50 (  0.50)	test_minacc   0.38 (  0.38)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.43 (  0.43)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.03)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.50)	test_minacc   0.45 (  0.44)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.50)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.41 (  0.44)	test_majacc   0.48 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.41 (  0.44)	test_majacc_d   0.48 (  0.51)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.66it/s]
Test: [  0/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.697 (0.697)	test_acc   0.43 (  0.43)	test_minacc   0.41 (  0.41)	test_majacc   0.56 (  0.56)	Loss_d 0.697 (0.697)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Overall Timing[ 19/  1]	epoch_time 0.0362 (0.0386)	validation_time 0.0003 (0.0007)	train_time 0.0358 (0.0375)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.4968000114262104, 0.4280000329017639)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 18.79it/s] 35%|###4      | 9/26 [00:00<00:00, 24.88it/s] 50%|#####     | 13/26 [00:00<00:00, 28.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.03it/s] 81%|########  | 21/26 [00:00<00:00, 31.85it/s] 96%|#########6| 25/26 [00:00<00:00, 32.52it/s]100%|##########| 26/26 [00:00<00:00, 26.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.51)	train_minacc   0.38 (  0.46)	train_majacc   0.52 (  0.52)	train_corr   0.00 (  0.00)	l1 18.1236 (18.1237)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 27%|##6       | 7/26 [00:00<00:00, 31.04it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.04it/s] 50%|#####     | 13/26 [00:00<00:00, 39.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.28it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 38.03it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.38 (  0.38)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.45 (  0.44)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.05 (  0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.46 (  0.51)	test_minacc   0.43 (  0.45)	test_majacc   0.46 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.43 (  0.45)	test_majacc_d   0.46 (  0.52)	test_corr_d  -0.04 (  0.03)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.38 (  0.45)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.38 (  0.45)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.62it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.42 (  0.42)	test_minacc   0.40 (  0.40)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.42 (  0.42)	test_minacc   0.40 (  0.40)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Overall Timing[ 20/  1]	epoch_time 0.0379 (0.0386)	validation_time 0.0004 (0.0007)	train_time 0.0374 (0.0375)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.509700015693903, 0.42100003361701965)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.07it/s] 19%|#9        | 5/26 [00:00<00:00, 23.86it/s] 35%|###4      | 9/26 [00:00<00:00, 29.37it/s] 50%|#####     | 13/26 [00:00<00:00, 31.73it/s] 65%|######5   | 17/26 [00:00<00:00, 33.34it/s] 81%|########  | 21/26 [00:00<00:00, 33.55it/s] 96%|#########6| 25/26 [00:00<00:00, 33.38it/s]100%|##########| 26/26 [00:00<00:00, 29.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.51 (  0.52)	train_minacc   0.35 (  0.45)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 18.1234 (18.1234)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 19%|#9        | 5/26 [00:00<00:00, 26.52it/s]                                               19%|#9        | 5/26 [00:00<00:00, 26.52it/s] 42%|####2     | 11/26 [00:00<00:00, 38.13it/s] 62%|######1   | 16/26 [00:00<00:00, 41.36it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.36it/s] 85%|########4 | 22/26 [00:00<00:00, 47.22it/s]100%|##########| 26/26 [00:00<00:00, 38.95it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.42 (  0.42)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.41 (  0.43)	test_majacc   0.50 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.06 (  0.04)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.39 (  0.44)	test_majacc   0.50 (  0.54)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.39 (  0.44)	test_majacc_d   0.50 (  0.54)	test_corr_d  -0.03 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.35 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.35 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.98it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.40 (  0.40)	test_minacc   0.38 (  0.38)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.40 (  0.40)	test_minacc   0.38 (  0.38)	test_majacc   0.58 (  0.58)	Loss_d 0.696 (0.696)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.21 (  0.21)
Overall Timing[ 21/  1]	epoch_time 0.0358 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0355 (0.0374)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5203000158965587, 0.40400001406669617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 19%|#9        | 5/26 [00:00<00:00, 22.38it/s] 35%|###4      | 9/26 [00:00<00:00, 26.72it/s] 50%|#####     | 13/26 [00:00<00:00, 29.81it/s] 65%|######5   | 17/26 [00:00<00:00, 31.35it/s] 81%|########  | 21/26 [00:00<00:00, 32.45it/s] 96%|#########6| 25/26 [00:00<00:00, 32.88it/s]100%|##########| 26/26 [00:00<00:00, 28.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.52)	train_minacc   0.32 (  0.44)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 18.1234 (18.1233)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.78it/s] 27%|##6       | 7/26 [00:00<00:00, 31.70it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.70it/s] 50%|#####     | 13/26 [00:00<00:00, 38.67it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.64it/s] 96%|#########6| 25/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.39 (  0.39)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.53)	test_minacc   0.41 (  0.43)	test_majacc   0.51 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.41 (  0.43)	test_majacc_d   0.51 (  0.55)	test_corr_d   0.08 (  0.06)
Test: [  20/  26]	Loss 0.694 (0.693)	test_acc   0.51 (  0.54)	test_minacc   0.39 (  0.43)	test_majacc   0.53 (  0.56)	Loss_d 0.694 (0.693)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.39 (  0.43)	test_majacc_d   0.53 (  0.56)	test_corr_d  -0.02 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.30 (  0.43)	test_majacc   0.57 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.30 (  0.43)	test_majacc_d   0.57 (  0.56)	test_corr_d   0.09 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.53it/s]
Test: [  0/  1]	Loss 0.696 (0.696)	test_acc   0.39 (  0.39)	test_minacc   0.37 (  0.37)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Test: [  1/  1]	Loss 0.696 (0.696)	test_acc   0.39 (  0.39)	test_minacc   0.37 (  0.37)	test_majacc   0.56 (  0.56)	Loss_d 0.696 (0.696)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.21 (  0.21)
Overall Timing[ 22/  1]	epoch_time 0.0374 (0.0384)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0374)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5360000154674053, 0.38600000739097595)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.59it/s] 19%|#9        | 5/26 [00:00<00:01, 20.76it/s] 31%|###       | 8/26 [00:00<00:00, 20.81it/s] 42%|####2     | 11/26 [00:00<00:00, 19.41it/s] 50%|#####     | 13/26 [00:00<00:00, 18.83it/s] 58%|#####7    | 15/26 [00:00<00:00, 18.36it/s] 65%|######5   | 17/26 [00:00<00:00, 18.15it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.87it/s] 81%|########  | 21/26 [00:01<00:00, 17.56it/s] 88%|########8 | 23/26 [00:01<00:00, 17.06it/s] 96%|#########6| 25/26 [00:01<00:00, 17.08it/s]100%|##########| 26/26 [00:01<00:00, 17.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 341 tensor(-0.0233, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 421 tensor(-0.0015, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 448 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 451 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 459 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 463 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 473 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 481 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 493 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 497 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 498 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 501 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 503 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
rho, theta 497 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
rho, theta 501 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
Epoch: [23][  26/  26]	Loss 0.000 (0.009)	train_nll   0.69 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.19 (  0.17)	train_acc   0.50 (  0.55)	train_minacc   0.54 (  0.50)	train_majacc   0.49 (  0.56)	train_corr   0.00 (  0.00)	l1 15.0434 (15.3953)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.46it/s] 27%|##6       | 7/26 [00:00<00:00, 33.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.01it/s] 50%|#####     | 13/26 [00:00<00:00, 39.10it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.66it/s] 96%|#########6| 25/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 37.78it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.65 (  0.65)	test_majacc   0.45 (  0.45)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.45 (  0.45)	test_corr_d  -0.13 ( -0.13)
Test: [  10/  26]	Loss 0.694 (0.695)	test_acc   0.51 (  0.48)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.47)	Loss_d 0.694 (0.695)	test_acc_d   0.51 (  0.48)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.47)	test_corr_d  -0.10 ( -0.10)
Test: [  20/  26]	Loss 0.695 (0.695)	test_acc   0.51 (  0.49)	test_minacc   0.54 (  0.55)	test_majacc   0.50 (  0.48)	Loss_d 0.695 (0.695)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.50 (  0.48)	test_corr_d  -0.08 ( -0.10)
Test: [  26/  26]	Loss 0.694 (0.695)	test_acc   0.50 (  0.49)	test_minacc   0.54 (  0.55)	test_majacc   0.49 (  0.48)	Loss_d 0.694 (0.695)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.54 (  0.55)	test_majacc_d   0.49 (  0.48)	test_corr_d  -0.18 ( -0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.78it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 23/  1]	epoch_time 0.0475 (0.0388)	validation_time 0.0004 (0.0006)	train_time 0.0471 (0.0378)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.4896000127792358, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.14it/s] 12%|#1        | 3/26 [00:00<00:02, 10.40it/s] 19%|#9        | 5/26 [00:00<00:01, 12.98it/s] 27%|##6       | 7/26 [00:00<00:01, 14.47it/s] 35%|###4      | 9/26 [00:00<00:01, 15.35it/s] 42%|####2     | 11/26 [00:00<00:00, 15.96it/s] 50%|#####     | 13/26 [00:00<00:00, 16.42it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.60it/s] 65%|######5   | 17/26 [00:01<00:00, 16.78it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.97it/s] 88%|########8 | 23/26 [00:01<00:00, 17.10it/s] 96%|#########6| 25/26 [00:01<00:00, 17.09it/s]100%|##########| 26/26 [00:01<00:00, 15.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
rho, theta 502 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
rho, theta 509 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.49)	train_minacc   0.49 (  0.54)	train_majacc   0.51 (  0.48)	train_corr   0.00 (  0.00)	l1 15.0252 (15.0362)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.51it/s] 31%|###       | 8/26 [00:00<00:00, 40.41it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.41it/s] 50%|#####     | 13/26 [00:00<00:00, 40.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.83it/s] 96%|#########6| 25/26 [00:00<00:00, 46.31it/s]100%|##########| 26/26 [00:00<00:00, 39.79it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.08 ( -0.08)
Test: [  10/  26]	Loss 0.692 (0.695)	test_acc   0.51 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.48)	Loss_d 0.692 (0.695)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.48)	test_corr_d  -0.05 ( -0.04)
Test: [  20/  26]	Loss 0.694 (0.694)	test_acc   0.51 (  0.50)	test_minacc   0.55 (  0.53)	test_majacc   0.50 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.50 (  0.49)	test_corr_d  -0.04 ( -0.05)
Test: [  26/  26]	Loss 0.693 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.12 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.00 (  0.00)
Overall Timing[ 24/  1]	epoch_time 0.0495 (0.0392)	validation_time 0.0004 (0.0006)	train_time 0.0491 (0.0383)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.49610001090168954, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 12%|#1        | 3/26 [00:00<00:01, 12.40it/s] 19%|#9        | 5/26 [00:00<00:01, 14.31it/s] 27%|##6       | 7/26 [00:00<00:01, 15.49it/s] 35%|###4      | 9/26 [00:00<00:01, 16.21it/s] 42%|####2     | 11/26 [00:00<00:00, 16.62it/s] 50%|#####     | 13/26 [00:00<00:00, 16.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.64it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 77%|#######6  | 20/26 [00:01<00:00, 19.79it/s] 92%|#########2| 24/26 [00:01<00:00, 24.69it/s]100%|##########| 26/26 [00:01<00:00, 18.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.50 (  0.50)	train_minacc   0.46 (  0.52)	train_majacc   0.51 (  0.49)	train_corr   0.00 (  0.00)	l1 14.9930 (15.0076)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.29it/s] 27%|##6       | 7/26 [00:00<00:00, 31.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.77it/s] 46%|####6     | 12/26 [00:00<00:00, 38.39it/s] 65%|######5   | 17/26 [00:00<00:00, 42.27it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.27it/s] 88%|########8 | 23/26 [00:00<00:00, 47.52it/s]100%|##########| 26/26 [00:00<00:00, 37.80it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.61 (  0.61)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.694)	test_acc   0.52 (  0.49)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.694)	test_acc_d   0.52 (  0.49)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.55 (  0.53)	test_majacc   0.51 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.55 (  0.53)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.00 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.46 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.05 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.04 (  0.04)
Overall Timing[ 25/  1]	epoch_time 0.0455 (0.0395)	validation_time 0.0003 (0.0006)	train_time 0.0452 (0.0385)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5026000137925148, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.39it/s] 23%|##3       | 6/26 [00:00<00:00, 26.15it/s] 38%|###8      | 10/26 [00:00<00:00, 29.05it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.98it/s] 69%|######9   | 18/26 [00:00<00:00, 32.11it/s] 85%|########4 | 22/26 [00:00<00:00, 32.96it/s]100%|##########| 26/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.52 (  0.50)	train_minacc   0.46 (  0.52)	train_majacc   0.53 (  0.50)	train_corr   0.00 (  0.00)	l1 14.9806 (14.9843)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.86it/s] 27%|##6       | 7/26 [00:00<00:00, 36.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.99it/s] 50%|#####     | 13/26 [00:00<00:00, 40.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.53it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.53it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 40.19it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.49)	test_corr_d   0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.52 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.46 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.12it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 26/  1]	epoch_time 0.0366 (0.0393)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0384)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5076000110507012, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.74it/s] 19%|#9        | 5/26 [00:00<00:00, 23.58it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.80it/s] 65%|######5   | 17/26 [00:00<00:00, 27.31it/s] 81%|########  | 21/26 [00:00<00:00, 29.31it/s] 96%|#########6| 25/26 [00:00<00:00, 30.87it/s]100%|##########| 26/26 [00:00<00:00, 27.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.51)	train_minacc   0.46 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9972 (14.9878)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.15it/s] 31%|###       | 8/26 [00:00<00:00, 40.74it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.74it/s] 50%|#####     | 13/26 [00:00<00:00, 41.30it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.80it/s] 96%|#########6| 25/26 [00:00<00:00, 48.01it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.52)	test_majacc   0.51 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.51 (  0.50)	test_corr_d   0.03 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.46 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.46 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.84it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Overall Timing[ 27/  1]	epoch_time 0.0371 (0.0393)	validation_time 0.0003 (0.0006)	train_time 0.0367 (0.0384)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5104000121355057, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.34it/s] 15%|#5        | 4/26 [00:00<00:01, 13.25it/s] 23%|##3       | 6/26 [00:00<00:01, 14.61it/s] 31%|###       | 8/26 [00:00<00:01, 15.59it/s] 38%|###8      | 10/26 [00:00<00:00, 16.13it/s] 46%|####6     | 12/26 [00:00<00:00, 16.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 16.69it/s] 62%|######1   | 16/26 [00:01<00:00, 16.91it/s] 69%|######9   | 18/26 [00:01<00:00, 17.03it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.10it/s] 85%|########4 | 22/26 [00:01<00:00, 17.02it/s] 92%|#########2| 24/26 [00:01<00:00, 16.85it/s]100%|##########| 26/26 [00:01<00:00, 16.76it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.51)	train_minacc   0.49 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0215 (15.0102)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 23%|##3       | 6/26 [00:00<00:00, 29.66it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.66it/s] 42%|####2     | 11/26 [00:00<00:00, 37.44it/s] 65%|######5   | 17/26 [00:00<00:00, 40.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.79it/s] 88%|########8 | 23/26 [00:00<00:00, 46.43it/s]100%|##########| 26/26 [00:00<00:00, 37.09it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.53 (  0.52)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.03 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.00 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.59it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 28/  1]	epoch_time 0.0490 (0.0396)	validation_time 0.0009 (0.0006)	train_time 0.0480 (0.0387)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5115000076293945, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 12%|#1        | 3/26 [00:00<00:01, 11.56it/s] 19%|#9        | 5/26 [00:00<00:01, 12.90it/s] 27%|##6       | 7/26 [00:00<00:01, 13.88it/s] 35%|###4      | 9/26 [00:00<00:01, 14.49it/s] 42%|####2     | 11/26 [00:00<00:01, 14.81it/s] 50%|#####     | 13/26 [00:00<00:00, 15.11it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.56it/s] 65%|######5   | 17/26 [00:01<00:00, 15.66it/s] 73%|#######3  | 19/26 [00:01<00:00, 15.93it/s] 81%|########  | 21/26 [00:01<00:00, 16.11it/s] 88%|########8 | 23/26 [00:01<00:00, 16.41it/s] 96%|#########6| 25/26 [00:01<00:00, 16.57it/s]100%|##########| 26/26 [00:01<00:00, 14.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.53 (  0.51)	train_minacc   0.49 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0446 (15.0341)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.68it/s] 27%|##6       | 7/26 [00:00<00:00, 29.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.55it/s] 46%|####6     | 12/26 [00:00<00:00, 36.66it/s] 65%|######5   | 17/26 [00:00<00:00, 39.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 39.45it/s] 85%|########4 | 22/26 [00:00<00:00, 40.95it/s]100%|##########| 26/26 [00:00<00:00, 35.70it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.03 (  0.03)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.49 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.11it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Overall Timing[ 29/  1]	epoch_time 0.0535 (0.0401)	validation_time 0.0004 (0.0006)	train_time 0.0531 (0.0392)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5119000076055527, 0.49500003457069397)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.52it/s] 12%|#1        | 3/26 [00:00<00:02, 10.45it/s] 19%|#9        | 5/26 [00:00<00:01, 12.85it/s] 27%|##6       | 7/26 [00:00<00:01, 14.21it/s] 35%|###4      | 9/26 [00:00<00:01, 15.09it/s] 42%|####2     | 11/26 [00:00<00:00, 15.15it/s] 50%|#####     | 13/26 [00:00<00:00, 15.34it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.76it/s] 65%|######5   | 17/26 [00:01<00:00, 16.16it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.35it/s] 81%|########  | 21/26 [00:01<00:00, 16.44it/s] 88%|########8 | 23/26 [00:01<00:00, 16.78it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 14.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.51 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0658 (15.0562)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.00it/s] 31%|###       | 8/26 [00:00<00:00, 38.00it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.00it/s] 50%|#####     | 13/26 [00:00<00:00, 41.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.61it/s] 96%|#########6| 25/26 [00:00<00:00, 47.44it/s]100%|##########| 26/26 [00:00<00:00, 39.84it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.51 (  0.53)	test_majacc   0.52 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.52 (  0.50)	test_corr_d   0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.52 (  0.52)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Overall Timing[ 30/  1]	epoch_time 0.0506 (0.0404)	validation_time 0.0006 (0.0006)	train_time 0.0499 (0.0395)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5128000147342682, 0.4930000305175781)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.23it/s] 12%|#1        | 3/26 [00:00<00:02, 10.76it/s] 19%|#9        | 5/26 [00:00<00:01, 13.11it/s] 27%|##6       | 7/26 [00:00<00:01, 14.47it/s] 35%|###4      | 9/26 [00:00<00:01, 15.31it/s] 42%|####2     | 11/26 [00:00<00:00, 15.84it/s] 50%|#####     | 13/26 [00:00<00:00, 16.08it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.26it/s] 65%|######5   | 17/26 [00:01<00:00, 16.33it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.29it/s] 81%|########  | 21/26 [00:01<00:00, 16.47it/s] 88%|########8 | 23/26 [00:01<00:00, 16.64it/s] 96%|#########6| 25/26 [00:01<00:00, 16.77it/s]100%|##########| 26/26 [00:01<00:00, 14.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.51 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0848 (15.0763)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 23%|##3       | 6/26 [00:00<00:00, 31.28it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.28it/s] 42%|####2     | 11/26 [00:00<00:00, 38.25it/s] 65%|######5   | 17/26 [00:00<00:00, 42.23it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.23it/s] 88%|########8 | 23/26 [00:00<00:00, 47.48it/s]100%|##########| 26/26 [00:00<00:00, 38.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.02 ( -0.02)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.50)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.01 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.02 (  0.02)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.61it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.05 (  0.05)
Overall Timing[ 31/  1]	epoch_time 0.0506 (0.0407)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0399)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5134000135362148, 0.49900001287460327)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.55it/s] 12%|#1        | 3/26 [00:00<00:01, 11.74it/s] 19%|#9        | 5/26 [00:00<00:01, 13.79it/s] 27%|##6       | 7/26 [00:00<00:01, 15.10it/s] 35%|###4      | 9/26 [00:00<00:01, 15.82it/s] 42%|####2     | 11/26 [00:00<00:00, 16.33it/s] 50%|#####     | 13/26 [00:00<00:00, 16.54it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.77it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.84it/s] 88%|########8 | 23/26 [00:01<00:00, 17.00it/s] 96%|#########6| 25/26 [00:01<00:00, 16.86it/s]100%|##########| 26/26 [00:01<00:00, 15.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.54 (  0.51)	train_minacc   0.51 (  0.52)	train_majacc   0.54 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1020 (15.0943)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 23%|##3       | 6/26 [00:00<00:00, 30.11it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.11it/s] 46%|####6     | 12/26 [00:00<00:00, 37.60it/s] 69%|######9   | 18/26 [00:00<00:00, 44.84it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.84it/s] 92%|#########2| 24/26 [00:00<00:00, 46.26it/s]100%|##########| 26/26 [00:00<00:00, 38.46it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.50)	test_corr_d   0.00 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.28it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 32/  1]	epoch_time 0.0494 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0490 (0.0401)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5144000183343888, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.87it/s] 12%|#1        | 3/26 [00:00<00:02,  9.96it/s] 19%|#9        | 5/26 [00:00<00:01, 12.62it/s] 27%|##6       | 7/26 [00:00<00:01, 14.25it/s] 35%|###4      | 9/26 [00:00<00:01, 15.25it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.26it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.59it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.63it/s] 81%|########  | 21/26 [00:01<00:00, 16.87it/s] 88%|########8 | 23/26 [00:01<00:00, 16.94it/s] 96%|#########6| 25/26 [00:01<00:00, 16.95it/s]100%|##########| 26/26 [00:01<00:00, 14.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.51 (  0.52)	train_majacc   0.55 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1173 (15.1105)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.66it/s] 35%|###4      | 9/26 [00:00<00:00, 42.74it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.74it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.38it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.38it/s]100%|##########| 26/26 [00:00<00:00, 52.90it/s]100%|##########| 26/26 [00:00<00:00, 43.87it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.03 ( -0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.53 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.00 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.41it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Overall Timing[ 33/  1]	epoch_time 0.0490 (0.0412)	validation_time 0.0004 (0.0006)	train_time 0.0485 (0.0404)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5161000151634216, 0.49400001764297485)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.26it/s] 12%|#1        | 3/26 [00:00<00:02, 10.49it/s] 19%|#9        | 5/26 [00:00<00:01, 13.07it/s] 27%|##6       | 7/26 [00:00<00:01, 14.67it/s] 35%|###4      | 9/26 [00:00<00:01, 15.55it/s] 42%|####2     | 11/26 [00:00<00:00, 16.21it/s] 50%|#####     | 13/26 [00:00<00:00, 16.44it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.76it/s] 65%|######5   | 17/26 [00:01<00:00, 16.85it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.95it/s] 81%|########  | 21/26 [00:01<00:00, 16.94it/s] 88%|########8 | 23/26 [00:01<00:00, 17.01it/s] 96%|#########6| 25/26 [00:01<00:00, 17.01it/s]100%|##########| 26/26 [00:01<00:00, 15.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1308 (15.1248)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 27%|##6       | 7/26 [00:00<00:00, 26.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.49it/s] 50%|#####     | 13/26 [00:00<00:00, 37.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 41.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 41.42it/s] 96%|#########6| 25/26 [00:00<00:00, 46.72it/s]100%|##########| 26/26 [00:00<00:00, 36.04it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.01 (  0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.86it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Overall Timing[ 34/  1]	epoch_time 0.0496 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0492 (0.0406)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5175000154972076, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.14it/s] 12%|#1        | 3/26 [00:00<00:01, 12.23it/s] 19%|#9        | 5/26 [00:00<00:01, 14.18it/s] 27%|##6       | 7/26 [00:00<00:01, 15.32it/s] 35%|###4      | 9/26 [00:00<00:01, 15.93it/s] 42%|####2     | 11/26 [00:00<00:00, 16.27it/s] 50%|#####     | 13/26 [00:00<00:00, 16.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.78it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.91it/s] 81%|########  | 21/26 [00:01<00:00, 17.02it/s] 88%|########8 | 23/26 [00:01<00:00, 17.20it/s] 96%|#########6| 25/26 [00:01<00:00, 17.26it/s]100%|##########| 26/26 [00:01<00:00, 15.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1428 (15.1375)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.18it/s] 31%|###       | 8/26 [00:00<00:00, 39.94it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.94it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.04it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.90it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.90it/s]100%|##########| 26/26 [00:00<00:00, 51.81it/s]100%|##########| 26/26 [00:00<00:00, 43.11it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d   0.00 (  0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.52)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Overall Timing[ 35/  1]	epoch_time 0.0490 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0486 (0.0409)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5189000141322613, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.58it/s] 12%|#1        | 3/26 [00:00<00:01, 12.74it/s] 19%|#9        | 5/26 [00:00<00:01, 14.78it/s] 27%|##6       | 7/26 [00:00<00:01, 15.84it/s] 35%|###4      | 9/26 [00:00<00:01, 16.38it/s] 42%|####2     | 11/26 [00:00<00:00, 16.75it/s] 50%|#####     | 13/26 [00:00<00:00, 16.98it/s] 58%|#####7    | 15/26 [00:00<00:00, 17.20it/s] 65%|######5   | 17/26 [00:01<00:00, 17.11it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.15it/s] 81%|########  | 21/26 [00:01<00:00, 17.11it/s] 88%|########8 | 23/26 [00:01<00:00, 17.20it/s] 96%|#########6| 25/26 [00:01<00:00, 17.22it/s]100%|##########| 26/26 [00:01<00:00, 15.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.52)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1533 (15.1487)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.20it/s] 31%|###       | 8/26 [00:00<00:00, 41.94it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.94it/s] 50%|#####     | 13/26 [00:00<00:00, 44.31it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.25it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.25it/s] 96%|#########6| 25/26 [00:00<00:00, 49.41it/s]100%|##########| 26/26 [00:00<00:00, 42.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.55 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.55 (  0.51)	test_corr_d  -0.01 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Overall Timing[ 36/  1]	epoch_time 0.0483 (0.0418)	validation_time 0.0004 (0.0006)	train_time 0.0478 (0.0411)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5189000152945519, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.81it/s] 12%|#1        | 3/26 [00:00<00:01, 12.75it/s] 19%|#9        | 5/26 [00:00<00:01, 14.80it/s] 27%|##6       | 7/26 [00:00<00:01, 15.86it/s] 35%|###4      | 9/26 [00:00<00:01, 16.35it/s] 42%|####2     | 11/26 [00:00<00:00, 16.67it/s] 50%|#####     | 13/26 [00:00<00:00, 16.87it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.82it/s] 65%|######5   | 17/26 [00:01<00:00, 16.90it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.05it/s] 81%|########  | 21/26 [00:01<00:00, 17.01it/s] 88%|########8 | 23/26 [00:01<00:00, 17.07it/s] 96%|#########6| 25/26 [00:01<00:00, 17.13it/s]100%|##########| 26/26 [00:01<00:00, 15.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1624 (15.1584)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.00it/s] 27%|##6       | 7/26 [00:00<00:00, 33.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.41it/s] 46%|####6     | 12/26 [00:00<00:00, 40.41it/s] 69%|######9   | 18/26 [00:00<00:00, 47.52it/s]                                                69%|######9   | 18/26 [00:00<00:00, 47.52it/s] 88%|########8 | 23/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 40.83it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.47it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Overall Timing[ 37/  1]	epoch_time 0.0490 (0.0420)	validation_time 0.0003 (0.0006)	train_time 0.0487 (0.0413)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5200000117421151, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.91it/s] 12%|#1        | 3/26 [00:00<00:02, 10.98it/s] 19%|#9        | 5/26 [00:00<00:01, 13.37it/s] 27%|##6       | 7/26 [00:00<00:01, 14.68it/s] 35%|###4      | 9/26 [00:00<00:01, 15.47it/s] 42%|####2     | 11/26 [00:00<00:00, 16.21it/s] 50%|#####     | 13/26 [00:00<00:00, 16.70it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.96it/s] 65%|######5   | 17/26 [00:01<00:00, 17.04it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.00it/s] 81%|########  | 21/26 [00:01<00:00, 17.06it/s] 88%|########8 | 23/26 [00:01<00:00, 17.09it/s] 96%|#########6| 25/26 [00:01<00:00, 17.02it/s]100%|##########| 26/26 [00:01<00:00, 15.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1704 (15.1670)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 27%|##6       | 7/26 [00:00<00:00, 35.50it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.50it/s] 46%|####6     | 12/26 [00:00<00:00, 41.16it/s] 65%|######5   | 17/26 [00:00<00:00, 43.90it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.90it/s] 88%|########8 | 23/26 [00:00<00:00, 48.28it/s]100%|##########| 26/26 [00:00<00:00, 39.73it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.692 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.49 (  0.51)	test_majacc   0.54 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.54 (  0.51)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.00 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.79it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Overall Timing[ 38/  1]	epoch_time 0.0495 (0.0422)	validation_time 0.0004 (0.0006)	train_time 0.0491 (0.0415)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5214000164270401, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.90it/s] 12%|#1        | 3/26 [00:00<00:02, 10.27it/s] 19%|#9        | 5/26 [00:00<00:01, 12.82it/s] 27%|##6       | 7/26 [00:00<00:01, 14.44it/s] 35%|###4      | 9/26 [00:00<00:01, 15.44it/s] 42%|####2     | 11/26 [00:00<00:00, 16.14it/s] 50%|#####     | 13/26 [00:00<00:00, 16.51it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.83it/s] 65%|######5   | 17/26 [00:01<00:00, 16.95it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.11it/s] 81%|########  | 21/26 [00:01<00:00, 16.99it/s] 88%|########8 | 23/26 [00:01<00:00, 17.07it/s] 96%|#########6| 25/26 [00:01<00:00, 17.13it/s]100%|##########| 26/26 [00:01<00:00, 15.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1774 (15.1744)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.50it/s] 35%|###4      | 9/26 [00:00<00:00, 38.10it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.10it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.61it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.61it/s] 81%|########  | 21/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 41.88it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.69it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Overall Timing[ 39/  1]	epoch_time 0.0492 (0.0424)	validation_time 0.0004 (0.0006)	train_time 0.0488 (0.0416)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5223000162541866, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 12%|#1        | 3/26 [00:00<00:02,  9.95it/s] 19%|#9        | 5/26 [00:00<00:01, 12.71it/s] 27%|##6       | 7/26 [00:00<00:01, 14.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.09it/s] 42%|####2     | 11/26 [00:00<00:00, 15.85it/s] 50%|#####     | 13/26 [00:00<00:00, 16.34it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.66it/s] 65%|######5   | 17/26 [00:01<00:00, 16.91it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.12it/s] 81%|########  | 21/26 [00:01<00:00, 17.21it/s] 88%|########8 | 23/26 [00:01<00:00, 17.26it/s] 96%|#########6| 25/26 [00:01<00:00, 17.24it/s]100%|##########| 26/26 [00:01<00:00, 15.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1835 (15.1809)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.66it/s] 27%|##6       | 7/26 [00:00<00:00, 36.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.25it/s] 50%|#####     | 13/26 [00:00<00:00, 41.75it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.75it/s] 96%|#########6| 25/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 40.62it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.23it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0483 (0.0425)	validation_time 0.0004 (0.0006)	train_time 0.0480 (0.0418)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5227000139057636, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.40it/s] 12%|#1        | 3/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:01, 11.93it/s] 27%|##6       | 7/26 [00:00<00:01, 13.78it/s] 35%|###4      | 9/26 [00:00<00:01, 14.91it/s] 42%|####2     | 11/26 [00:00<00:00, 15.59it/s] 50%|#####     | 13/26 [00:00<00:00, 16.02it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.43it/s] 65%|######5   | 17/26 [00:01<00:00, 16.74it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.98it/s] 88%|########8 | 23/26 [00:01<00:00, 17.17it/s] 96%|#########6| 25/26 [00:01<00:00, 17.22it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.52)	train_corr   0.00 (  0.00)	l1 15.1888 (15.1866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 23.25it/s] 35%|###4      | 9/26 [00:00<00:00, 40.21it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.21it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.08it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.08it/s] 81%|########  | 21/26 [00:00<00:00, 47.93it/s]100%|##########| 26/26 [00:00<00:00, 42.09it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.05it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Overall Timing[ 41/  1]	epoch_time 0.0495 (0.0427)	validation_time 0.0004 (0.0006)	train_time 0.0490 (0.0420)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5231000151634216, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.62it/s] 12%|#1        | 3/26 [00:00<00:02, 10.94it/s] 19%|#9        | 5/26 [00:00<00:01, 13.23it/s] 27%|##6       | 7/26 [00:00<00:01, 14.59it/s] 35%|###4      | 9/26 [00:00<00:01, 15.52it/s] 42%|####2     | 11/26 [00:00<00:00, 16.03it/s] 50%|#####     | 13/26 [00:00<00:00, 16.35it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.54it/s] 65%|######5   | 17/26 [00:01<00:00, 16.55it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.50it/s] 81%|########  | 21/26 [00:01<00:00, 16.39it/s] 88%|########8 | 23/26 [00:01<00:00, 16.54it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.1934 (15.1915)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.77it/s] 31%|###       | 8/26 [00:00<00:00, 38.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.71it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.17it/s]100%|##########| 26/26 [00:00<00:00, 51.00it/s]100%|##########| 26/26 [00:00<00:00, 41.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.12it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Overall Timing[ 42/  1]	epoch_time 0.0491 (0.0429)	validation_time 0.0004 (0.0006)	train_time 0.0486 (0.0421)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5236000151336193, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.74it/s] 12%|#1        | 3/26 [00:00<00:02, 11.47it/s] 19%|#9        | 5/26 [00:00<00:01, 13.56it/s] 27%|##6       | 7/26 [00:00<00:01, 14.78it/s] 35%|###4      | 9/26 [00:00<00:01, 15.37it/s] 42%|####2     | 11/26 [00:00<00:00, 15.78it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.31it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 17.13it/s] 88%|########8 | 23/26 [00:01<00:00, 17.33it/s] 96%|#########6| 25/26 [00:01<00:00, 17.45it/s]100%|##########| 26/26 [00:01<00:00, 15.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.1974 (15.1958)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.21it/s] 35%|###4      | 9/26 [00:00<00:00, 40.62it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.62it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.85it/s] 81%|########  | 21/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 43.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.43it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Overall Timing[ 43/  1]	epoch_time 0.0493 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0489 (0.0423)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5241000116169453, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 12%|#1        | 3/26 [00:00<00:01, 11.52it/s] 19%|#9        | 5/26 [00:00<00:01, 13.75it/s] 27%|##6       | 7/26 [00:00<00:01, 15.11it/s] 35%|###4      | 9/26 [00:00<00:01, 15.87it/s] 42%|####2     | 11/26 [00:00<00:00, 16.41it/s] 50%|#####     | 13/26 [00:00<00:00, 16.67it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.77it/s] 65%|######5   | 17/26 [00:01<00:00, 16.93it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.08it/s] 81%|########  | 21/26 [00:01<00:00, 17.06it/s] 88%|########8 | 23/26 [00:01<00:00, 17.20it/s] 96%|#########6| 25/26 [00:01<00:00, 17.23it/s]100%|##########| 26/26 [00:01<00:00, 15.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.55 (  0.52)	train_minacc   0.54 (  0.51)	train_majacc   0.55 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2010 (15.1996)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.88it/s] 27%|##6       | 7/26 [00:00<00:00, 36.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.17it/s] 46%|####6     | 12/26 [00:00<00:00, 40.79it/s] 69%|######9   | 18/26 [00:00<00:00, 45.96it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.96it/s] 92%|#########2| 24/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 39.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.54 (  0.51)	test_majacc   0.55 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.55 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.34it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Overall Timing[ 44/  1]	epoch_time 0.0502 (0.0432)	validation_time 0.0003 (0.0005)	train_time 0.0499 (0.0424)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5248000125288963, 0.48600003123283386)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.45it/s] 12%|#1        | 3/26 [00:00<00:02,  9.65it/s] 19%|#9        | 5/26 [00:00<00:01, 12.55it/s] 27%|##6       | 7/26 [00:00<00:01, 14.22it/s] 35%|###4      | 9/26 [00:00<00:01, 15.21it/s] 42%|####2     | 11/26 [00:00<00:00, 15.93it/s] 50%|#####     | 13/26 [00:00<00:00, 16.33it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.64it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.86it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.69it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 14.86it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2041 (15.2029)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 27%|##6       | 7/26 [00:00<00:00, 32.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.28it/s] 46%|####6     | 12/26 [00:00<00:00, 37.33it/s] 69%|######9   | 18/26 [00:00<00:00, 44.35it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.35it/s] 92%|#########2| 24/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 38.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.59 (  0.59)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.05 ( -0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.51)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.42it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.48 (  0.48)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.00 (  0.00)
Overall Timing[ 45/  1]	epoch_time 0.0494 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0490 (0.0426)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5258000079095364, 0.484000027179718)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.99it/s] 12%|#1        | 3/26 [00:00<00:02, 10.20it/s] 19%|#9        | 5/26 [00:00<00:01, 12.92it/s] 27%|##6       | 7/26 [00:00<00:01, 14.34it/s] 35%|###4      | 9/26 [00:00<00:01, 15.27it/s] 42%|####2     | 11/26 [00:00<00:00, 15.75it/s] 50%|#####     | 13/26 [00:00<00:00, 16.20it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.47it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.83it/s] 81%|########  | 21/26 [00:01<00:00, 16.91it/s] 88%|########8 | 23/26 [00:01<00:00, 17.16it/s] 96%|#########6| 25/26 [00:01<00:00, 17.33it/s]100%|##########| 26/26 [00:01<00:00, 15.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2068 (15.2058)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 27%|##6       | 7/26 [00:00<00:00, 28.81it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.81it/s] 50%|#####     | 13/26 [00:00<00:00, 35.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.30it/s] 96%|#########6| 25/26 [00:00<00:00, 43.89it/s]100%|##########| 26/26 [00:00<00:00, 35.79it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.61 (  0.61)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.09it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 46/  1]	epoch_time 0.0499 (0.0434)	validation_time 0.0006 (0.0005)	train_time 0.0493 (0.0427)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5266000078618527, 0.48500001430511475)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.64it/s] 12%|#1        | 3/26 [00:00<00:01, 12.50it/s] 19%|#9        | 5/26 [00:00<00:01, 14.58it/s] 27%|##6       | 7/26 [00:00<00:01, 15.55it/s] 35%|###4      | 9/26 [00:00<00:01, 16.09it/s] 42%|####2     | 11/26 [00:00<00:00, 16.49it/s] 50%|#####     | 13/26 [00:00<00:00, 16.78it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.93it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.92it/s] 81%|########  | 21/26 [00:01<00:00, 16.94it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2093 (15.2083)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.06it/s] 35%|###4      | 9/26 [00:00<00:00, 40.66it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.66it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.45it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.45it/s] 81%|########  | 21/26 [00:00<00:00, 49.01it/s]100%|##########| 26/26 [00:00<00:00, 43.11it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.62)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.66it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 47/  1]	epoch_time 0.0491 (0.0436)	validation_time 0.0004 (0.0005)	train_time 0.0487 (0.0429)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.526200009047985, 0.4870000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.18it/s] 12%|#1        | 3/26 [00:00<00:02, 11.35it/s] 19%|#9        | 5/26 [00:00<00:01, 13.09it/s] 27%|##6       | 7/26 [00:00<00:01, 14.51it/s] 35%|###4      | 9/26 [00:00<00:01, 15.44it/s] 42%|####2     | 11/26 [00:00<00:00, 15.79it/s] 50%|#####     | 13/26 [00:00<00:00, 16.08it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.44it/s] 65%|######5   | 17/26 [00:01<00:00, 16.72it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.77it/s] 81%|########  | 21/26 [00:01<00:00, 16.92it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 17.07it/s]100%|##########| 26/26 [00:01<00:00, 15.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.51)	train_majacc   0.56 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2114 (15.2106)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.19it/s] 31%|###       | 8/26 [00:00<00:00, 38.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 47.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.58it/s] 96%|#########6| 25/26 [00:00<00:00, 49.74it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.54 (  0.51)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.22it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 48/  1]	epoch_time 0.0483 (0.0437)	validation_time 0.0004 (0.0005)	train_time 0.0478 (0.0430)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5250000137686729, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.77it/s] 12%|#1        | 3/26 [00:00<00:02,  9.85it/s] 19%|#9        | 5/26 [00:00<00:01, 12.57it/s] 27%|##6       | 7/26 [00:00<00:01, 14.13it/s] 35%|###4      | 9/26 [00:00<00:01, 15.17it/s] 42%|####2     | 11/26 [00:00<00:00, 15.76it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.42it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.92it/s] 88%|########8 | 23/26 [00:01<00:00, 17.09it/s] 96%|#########6| 25/26 [00:01<00:00, 17.23it/s]100%|##########| 26/26 [00:01<00:00, 14.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.20 (  0.20)	train_acc   0.56 (  0.53)	train_minacc   0.54 (  0.51)	train_majacc   0.57 (  0.53)	train_corr   0.00 (  0.00)	l1 15.2133 (15.2126)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 23%|##3       | 6/26 [00:00<00:00, 32.19it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.19it/s] 46%|####6     | 12/26 [00:00<00:00, 42.48it/s] 65%|######5   | 17/26 [00:00<00:00, 43.45it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.45it/s] 88%|########8 | 23/26 [00:00<00:00, 48.56it/s]100%|##########| 26/26 [00:00<00:00, 39.91it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.64 (  0.64)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.06 ( -0.06)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.52)	test_minacc   0.45 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.53)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.53)	test_minacc   0.54 (  0.52)	test_majacc   0.57 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.53)	test_minacc_d   0.54 (  0.52)	test_majacc_d   0.57 (  0.53)	test_corr_d  -0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.89it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 49/  1]	epoch_time 0.0500 (0.0438)	validation_time 0.0005 (0.0005)	train_time 0.0495 (0.0431)
record: (train_acc, test_acc) (0.6242000126242637, 0.7050000429153442)
last accs (train_acc, test_acc) (0.5260000104308128, 0.4910000264644623)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.159 MB of 0.159 MB uploadedwandb: \ 0.159 MB of 0.159 MB uploadedwandb: | 0.159 MB of 0.159 MB uploadedwandb: / 0.181 MB of 0.190 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/epoch_time_val █▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▃▁▁▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/train_time_val █▁▁▁▂▁▂▂▁▁▁▁▂▁▁▁▂▁▂▄▃▁▂▄▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_avg ████▆▆▆▅▅▆▅▆▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_d_avg ████▆▆▆▅▅▆▅▆▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_d_val ████▆▆▆▅▅▆▅▆▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_val ████▆▆▆▅▅▆▅▆▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_avg ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▄▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_d_avg ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▄▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_d_val ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▄▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_val ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▄▆▆▆▆▆▆▆▆▆▅▅▅▅▅▅▅▅▅▅▅▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_corr_d_avg ███▇▆▇▇▆▆▇▆▇▁▂▃▄▄▄▄▃▃▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_corr_d_val ███▇▆▇▇▆▆▇▆▇▁▂▃▄▄▄▄▃▃▄▄▄▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_avg ███████▇██▇█▃▂▁▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_d_avg ███████▇██▇█▃▂▁▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_d_val ███████▇██▇█▃▂▁▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_val ███████▇██▇█▃▂▁▂▂▂▂▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_avg ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_d_avg ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_d_val ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_val ▁▁▂▂▃▃▂▅▅▂▄▂█▇▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/Loss_avg █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/Loss_val █▅▃▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/l1_avg ▃▂▂▁▁▁▂▃▅▆▆▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇▇███████▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_acc_avg ▇███████████▇▃▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_acc_val ████████████▄▃▂▁▁▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_majacc_avg ▇███████▇▇▇▇▆▂▂▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_majacc_val ██████████▇█▃▂▁▁▁▂▂▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_minacc_avg ▂▁▁▂▃▃▃▃▄▄▄▅▇█▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_minacc_val ▁▁▂▂▂▁▁▃▂▂▄▃█▆▆▅▄▄▄▆▅▅▅▅▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_nll_avg ▆▃▂▂▂▂▁▁▁▁▁▁▃▇██████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_nll_val ▃▃▂▂▂▂▁▁▁▁▁▁▇███████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_penalty_avg █▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_penalty_val █▆▅▄▄▄▄▃▃▃▂▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/weight_norm_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/weight_norm_val █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/epoch_time_val 0.05003
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/train_time_val 0.04953
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/diagnostics/validation_time_val 0.00047
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_avg 0.6929
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_d_avg 0.6929
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_d_val 0.6929
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/Loss_val 0.6929
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_avg 0.491
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_d_avg 0.491
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_d_val 0.491
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_acc_val 0.491
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_corr_d_avg -0.00745
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_corr_d_val -0.00745
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_avg 0.56
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_d_avg 0.56
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_d_val 0.56
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_majacc_val 0.56
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_avg 0.48333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_d_avg 0.48333
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_d_val 0.48333
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/test/test_minacc_val 0.48333
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/l1_avg 15.21265
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/l1_val 15.21334
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_acc_avg 0.5251
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_acc_val 0.564
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_majacc_avg 0.52684
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_majacc_val 0.56808
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_minacc_avg 0.5136
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_minacc_val 0.54054
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_nll_avg 0.69306
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_nll_val 0.69259
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/weight_norm_avg 0.19601
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/48/logs/train/weight_norm_val 0.19586
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/7kgrhddh
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_113635-7kgrhddh/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_113922-jx2se145
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/jx2se145
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1166
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6048, 3, 32, 32) (5952, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.55s/it] 19%|#9        | 5/26 [00:01<00:05,  3.92it/s] 35%|###4      | 9/26 [00:01<00:02,  7.71it/s] 50%|#####     | 13/26 [00:01<00:01, 11.71it/s] 65%|######5   | 17/26 [00:02<00:00, 15.50it/s] 81%|########  | 21/26 [00:02<00:00, 19.54it/s] 96%|#########6| 25/26 [00:02<00:00, 23.12it/s]100%|##########| 26/26 [00:02<00:00,  9.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.865 (12.454)	train_nll   0.46 (  0.54)	train_penalty   0.09 (  0.23)	weight_norm   9.41 ( 11.92)	train_acc   0.83 (  0.80)	train_minacc   0.00 (  0.09)	train_majacc   1.00 (  0.93)	train_corr   0.00 (  0.00)	l1 8.5801 (8.2976)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.31it/s] 27%|##6       | 7/26 [00:00<00:00, 34.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.79it/s] 46%|####6     | 12/26 [00:00<00:00, 39.96it/s] 69%|######9   | 18/26 [00:00<00:00, 46.90it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.90it/s] 92%|#########2| 24/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 40.29it/s]
Test: [   0/  26]	Loss 0.399 (0.399)	test_acc   0.86 (  0.86)	test_minacc   0.00 (  0.00)	test_majacc   0.99 (  0.99)	Loss_d 0.399 (0.399)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.00 (  0.00)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.97 (  0.97)
Test: [  10/  26]	Loss 0.431 (0.421)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 0.431 (0.421)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  20/  26]	Loss 0.387 (0.416)	test_acc   0.87 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.387 (0.416)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.97)
Test: [  26/  26]	Loss 0.448 (0.414)	test_acc   0.83 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.448 (0.414)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.98 (  0.97)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]100%|##########| 1/1 [00:00<00:00,  2.55it/s]
Test: [  0/  1]	Loss 1.673 (1.673)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.673 (1.673)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  1/  1]	Loss 1.673 (1.673)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   0.99 (  0.99)	Loss_d 1.673 (1.673)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0771 (0.0771)	validation_time 0.0066 (0.0066)	train_time 0.0653 (0.0653)
record: (train_acc, test_acc) (0.8471000314950943, 0.10500000417232513)
last accs (train_acc, test_acc) (0.8471000314950943, 0.10500000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.63it/s] 35%|###4      | 9/26 [00:00<00:00, 26.71it/s] 50%|#####     | 13/26 [00:00<00:00, 29.88it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.13it/s]100%|##########| 26/26 [00:00<00:00, 28.21it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 5.145 (7.087)	train_nll   0.44 (  0.41)	train_penalty   0.05 (  0.05)	weight_norm   4.70 (  6.68)	train_acc   0.82 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   0.99 (  0.99)	train_corr   0.00 (  0.00)	l1 8.0886 (8.4974)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 27%|##6       | 7/26 [00:00<00:00, 33.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.03it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.03it/s] 96%|#########6| 25/26 [00:00<00:00, 47.23it/s]100%|##########| 26/26 [00:00<00:00, 39.03it/s]
Test: [   0/  26]	Loss 0.386 (0.386)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.386 (0.386)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.399 (0.406)	test_acc   0.85 (  0.84)	test_minacc   0.12 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.399 (0.406)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.12 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.383 (0.401)	test_acc   0.87 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.383 (0.401)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.434 (0.398)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.434 (0.398)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.80it/s]
Test: [  0/  1]	Loss 1.493 (1.493)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.493 (1.493)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.493 (1.493)	test_acc   0.12 (  0.12)	test_minacc   0.03 (  0.03)	test_majacc   0.99 (  0.99)	Loss_d 1.493 (1.493)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.03 (  0.03)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0375 (0.0573)	validation_time 0.0004 (0.0035)	train_time 0.0371 (0.0512)
record: (train_acc, test_acc) (0.8503000255823135, 0.12300000339746475)
last accs (train_acc, test_acc) (0.8503000255823135, 0.12300000339746475)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.64it/s] 35%|###4      | 9/26 [00:00<00:00, 26.87it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 31.45it/s] 81%|########  | 21/26 [00:00<00:00, 32.74it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 3.131 (3.931)	train_nll   0.44 (  0.39)	train_penalty   0.08 (  0.05)	weight_norm   2.69 (  3.54)	train_acc   0.84 (  0.85)	train_minacc   0.12 (  0.07)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6060 (7.3313)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.16it/s] 31%|###       | 8/26 [00:00<00:00, 41.63it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.63it/s] 50%|#####     | 13/26 [00:00<00:00, 44.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.93it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.93it/s] 96%|#########6| 25/26 [00:00<00:00, 48.96it/s]100%|##########| 26/26 [00:00<00:00, 42.29it/s]
Test: [   0/  26]	Loss 0.373 (0.373)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.373 (0.373)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.349 (0.371)	test_acc   0.85 (  0.84)	test_minacc   0.08 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.349 (0.371)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.08 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  20/  26]	Loss 0.349 (0.366)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.349 (0.366)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.411 (0.365)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.06)	test_majacc   0.99 (  0.99)	Loss_d 0.411 (0.365)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.06)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.75it/s]
Test: [  0/  1]	Loss 1.599 (1.599)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.599 (1.599)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.599 (1.599)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.98 (  0.98)	Loss_d 1.599 (1.599)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0368 (0.0505)	validation_time 0.0004 (0.0025)	train_time 0.0363 (0.0463)
record: (train_acc, test_acc) (0.8498000207543374, 0.16900001466274261)
last accs (train_acc, test_acc) (0.8498000207543374, 0.16900001466274261)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.56it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.71it/s] 50%|#####     | 13/26 [00:00<00:00, 30.26it/s] 65%|######5   | 17/26 [00:00<00:00, 29.74it/s] 81%|########  | 21/26 [00:00<00:00, 31.09it/s] 96%|#########6| 25/26 [00:00<00:00, 31.99it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 2.098 (2.505)	train_nll   0.41 (  0.38)	train_penalty   0.04 (  0.04)	weight_norm   1.68 (  2.12)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.08)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.6762 (6.0527)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.28it/s] 23%|##3       | 6/26 [00:00<00:00, 30.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.89it/s] 46%|####6     | 12/26 [00:00<00:00, 37.27it/s] 69%|######9   | 18/26 [00:00<00:00, 44.72it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.72it/s] 92%|#########2| 24/26 [00:00<00:00, 43.31it/s]100%|##########| 26/26 [00:00<00:00, 37.19it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 0.349 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.336 (0.360)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.336 (0.360)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.334 (0.355)	test_acc   0.87 (  0.85)	test_minacc   0.14 (  0.15)	test_majacc   0.98 (  0.98)	Loss_d 0.334 (0.355)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.14 (  0.15)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.397 (0.353)	test_acc   0.83 (  0.85)	test_minacc   0.12 (  0.14)	test_majacc   0.98 (  0.98)	Loss_d 0.397 (0.353)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.12 (  0.14)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.38it/s]
Test: [  0/  1]	Loss 1.481 (1.481)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.481 (1.481)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.481 (1.481)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 1.481 (1.481)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0387 (0.0476)	validation_time 0.0003 (0.0019)	train_time 0.0384 (0.0443)
record: (train_acc, test_acc) (0.8540000251531601, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8540000251531601, 0.21800000965595245)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.46it/s] 23%|##3       | 6/26 [00:00<00:00, 25.14it/s] 38%|###8      | 10/26 [00:00<00:00, 28.46it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.64it/s] 69%|######9   | 18/26 [00:00<00:00, 31.92it/s] 85%|########4 | 22/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.479 (1.720)	train_nll   0.39 (  0.37)	train_penalty   0.04 (  0.03)	weight_norm   1.09 (  1.35)	train_acc   0.83 (  0.85)	train_minacc   0.07 (  0.09)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.7331 (5.6712)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.93it/s] 27%|##6       | 7/26 [00:00<00:00, 38.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.19it/s] 50%|#####     | 13/26 [00:00<00:00, 41.43it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.79it/s] 96%|#########6| 25/26 [00:00<00:00, 47.43it/s]100%|##########| 26/26 [00:00<00:00, 40.28it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.88 (  0.88)	test_minacc   0.22 (  0.22)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.327)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.343 (0.357)	test_acc   0.85 (  0.84)	test_minacc   0.23 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.343 (0.357)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.23 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.91)
Test: [  20/  26]	Loss 0.311 (0.350)	test_acc   0.87 (  0.85)	test_minacc   0.08 (  0.18)	test_majacc   0.99 (  0.97)	Loss_d 0.311 (0.350)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.08 (  0.18)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.93 (  0.91)
Test: [  26/  26]	Loss 0.375 (0.348)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.18)	test_majacc   0.99 (  0.97)	Loss_d 0.375 (0.348)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.60it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.646 (1.646)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.96 (  0.96)	Loss_d 1.646 (1.646)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Overall Timing[  4/  1]	epoch_time 0.0367 (0.0454)	validation_time 0.0006 (0.0017)	train_time 0.0361 (0.0427)
record: (train_acc, test_acc) (0.8540000251531601, 0.21800000965595245)
last accs (train_acc, test_acc) (0.8499000283479691, 0.1770000010728836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.71it/s] 23%|##3       | 6/26 [00:00<00:00, 25.19it/s] 38%|###8      | 10/26 [00:00<00:00, 29.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.59it/s] 69%|######9   | 18/26 [00:00<00:00, 32.84it/s] 85%|########4 | 22/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 33.92it/s]100%|##########| 26/26 [00:00<00:00, 29.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.144 (1.244)	train_nll   0.42 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.73 (  0.89)	train_acc   0.83 (  0.85)	train_minacc   0.17 (  0.17)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 6.2371 (5.9371)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.91it/s] 27%|##6       | 7/26 [00:00<00:00, 26.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.16it/s] 46%|####6     | 12/26 [00:00<00:00, 34.10it/s] 65%|######5   | 17/26 [00:00<00:00, 37.88it/s]                                                65%|######5   | 17/26 [00:00<00:00, 37.88it/s] 88%|########8 | 23/26 [00:00<00:00, 44.00it/s]100%|##########| 26/26 [00:00<00:00, 34.20it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.87 (  0.87)	test_minacc   0.17 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.327 (0.327)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.17 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.324 (0.344)	test_acc   0.86 (  0.85)	test_minacc   0.25 (  0.17)	test_majacc   0.98 (  0.98)	Loss_d 0.324 (0.344)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.25 (  0.17)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.312 (0.338)	test_acc   0.88 (  0.86)	test_minacc   0.20 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.312 (0.338)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.20 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.367 (0.335)	test_acc   0.85 (  0.86)	test_minacc   0.12 (  0.18)	test_majacc   1.00 (  0.98)	Loss_d 0.367 (0.335)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.12 (  0.18)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.568 (1.568)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.568 (1.568)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.568 (1.568)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 1.568 (1.568)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.72 (  0.72)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0388 (0.0443)	validation_time 0.0004 (0.0015)	train_time 0.0383 (0.0419)
record: (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
last accs (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.15it/s] 35%|###4      | 9/26 [00:00<00:00, 26.84it/s] 50%|#####     | 13/26 [00:00<00:00, 28.44it/s] 65%|######5   | 17/26 [00:00<00:00, 29.90it/s] 81%|########  | 21/26 [00:00<00:00, 30.97it/s] 96%|#########6| 25/26 [00:00<00:00, 31.64it/s]100%|##########| 26/26 [00:00<00:00, 26.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.888 (0.946)	train_nll   0.38 (  0.35)	train_penalty   0.04 (  0.03)	weight_norm   0.51 (  0.60)	train_acc   0.84 (  0.85)	train_minacc   0.10 (  0.12)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 7.4188 (6.8298)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 27.88it/s] 35%|###4      | 9/26 [00:00<00:00, 45.26it/s]                                               35%|###4      | 9/26 [00:00<00:00, 45.26it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.90it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.13it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.13it/s]100%|##########| 26/26 [00:00<00:00, 52.95it/s]100%|##########| 26/26 [00:00<00:00, 43.13it/s]
Test: [   0/  26]	Loss 0.330 (0.330)	test_acc   0.87 (  0.87)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.330)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.344 (0.347)	test_acc   0.83 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.344 (0.347)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.95)
Test: [  20/  26]	Loss 0.311 (0.338)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.311 (0.338)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.94)
Test: [  26/  26]	Loss 0.367 (0.337)	test_acc   0.84 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.337)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 1.795 (1.795)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.795 (1.795)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Test: [  1/  1]	Loss 1.795 (1.795)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.795 (1.795)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.92 (  0.92)
Overall Timing[  6/  1]	epoch_time 0.0372 (0.0433)	validation_time 0.0003 (0.0013)	train_time 0.0368 (0.0412)
record: (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
last accs (train_acc, test_acc) (0.8511000255346298, 0.11100000888109207)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.06it/s] 19%|#9        | 5/26 [00:00<00:01, 20.94it/s] 35%|###4      | 9/26 [00:00<00:00, 26.61it/s] 50%|#####     | 13/26 [00:00<00:00, 29.84it/s] 65%|######5   | 17/26 [00:00<00:00, 31.72it/s] 81%|########  | 21/26 [00:00<00:00, 32.82it/s] 96%|#########6| 25/26 [00:00<00:00, 33.34it/s]100%|##########| 26/26 [00:00<00:00, 27.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.722 (0.757)	train_nll   0.39 (  0.34)	train_penalty   0.04 (  0.02)	weight_norm   0.33 (  0.42)	train_acc   0.84 (  0.85)	train_minacc   0.14 (  0.18)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 8.9456 (8.1731)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.42it/s] 31%|###       | 8/26 [00:00<00:00, 41.91it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.91it/s] 50%|#####     | 13/26 [00:00<00:00, 43.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.81it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.81it/s] 96%|#########6| 25/26 [00:00<00:00, 48.48it/s]100%|##########| 26/26 [00:00<00:00, 41.72it/s]
Test: [   0/  26]	Loss 0.313 (0.313)	test_acc   0.86 (  0.86)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.313 (0.313)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.321 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.33 (  0.21)	test_majacc   0.95 (  0.96)	Loss_d 0.321 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.33 (  0.21)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.294 (0.327)	test_acc   0.87 (  0.85)	test_minacc   0.16 (  0.22)	test_majacc   0.98 (  0.96)	Loss_d 0.294 (0.327)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.16 (  0.22)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.93 (  0.90)
Test: [  26/  26]	Loss 0.355 (0.325)	test_acc   0.84 (  0.85)	test_minacc   0.24 (  0.22)	test_majacc   0.97 (  0.96)	Loss_d 0.355 (0.325)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.24 (  0.22)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.25it/s]
Test: [  0/  1]	Loss 1.632 (1.632)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.94 (  0.94)	Loss_d 1.632 (1.632)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.632 (1.632)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.94 (  0.94)	Loss_d 1.632 (1.632)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Overall Timing[  7/  1]	epoch_time 0.0370 (0.0425)	validation_time 0.0004 (0.0012)	train_time 0.0365 (0.0406)
record: (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
last accs (train_acc, test_acc) (0.8517000235915184, 0.2240000069141388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.18it/s] 19%|#9        | 5/26 [00:00<00:00, 24.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.60it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 31.76it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.619 (0.624)	train_nll   0.38 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.24 (  0.28)	train_acc   0.86 (  0.85)	train_minacc   0.33 (  0.21)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 10.9500 (9.8288)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.88it/s] 19%|#9        | 5/26 [00:00<00:00, 22.65it/s]                                               19%|#9        | 5/26 [00:00<00:00, 22.65it/s] 42%|####2     | 11/26 [00:00<00:00, 37.74it/s] 62%|######1   | 16/26 [00:00<00:00, 40.24it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.24it/s] 85%|########4 | 22/26 [00:00<00:00, 46.47it/s]100%|##########| 26/26 [00:00<00:00, 36.62it/s]
Test: [   0/  26]	Loss 0.334 (0.334)	test_acc   0.86 (  0.86)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 0.334 (0.334)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.338 (0.342)	test_acc   0.85 (  0.85)	test_minacc   0.28 (  0.17)	test_majacc   0.97 (  0.97)	Loss_d 0.338 (0.342)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.28 (  0.17)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.86 (  0.88)
Test: [  20/  26]	Loss 0.318 (0.335)	test_acc   0.89 (  0.85)	test_minacc   0.22 (  0.19)	test_majacc   0.99 (  0.97)	Loss_d 0.318 (0.335)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.22 (  0.19)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.90 (  0.88)
Test: [  26/  26]	Loss 0.354 (0.333)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.354 (0.333)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.66it/s]
Test: [  0/  1]	Loss 1.648 (1.648)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.648 (1.648)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
Test: [  1/  1]	Loss 1.648 (1.648)	test_acc   0.26 (  0.26)	test_minacc   0.18 (  0.18)	test_majacc   0.93 (  0.93)	Loss_d 1.648 (1.648)	test_acc_d   0.26 (  0.26)	test_minacc_d   0.18 (  0.18)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.68 (  0.68)
Overall Timing[  8/  1]	epoch_time 0.0379 (0.0420)	validation_time 0.0004 (0.0011)	train_time 0.0375 (0.0403)
record: (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
last accs (train_acc, test_acc) (0.8529000254273414, 0.25600001215934753)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.53it/s] 23%|##3       | 6/26 [00:00<00:00, 26.09it/s] 38%|###8      | 10/26 [00:00<00:00, 29.75it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.24it/s] 69%|######9   | 18/26 [00:00<00:00, 32.76it/s] 85%|########4 | 22/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 29.39it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.556 (0.545)	train_nll   0.37 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.19 (  0.21)	train_acc   0.83 (  0.85)	train_minacc   0.05 (  0.17)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 12.6010 (11.6572)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.69it/s] 31%|###       | 8/26 [00:00<00:00, 35.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.54it/s] 50%|#####     | 13/26 [00:00<00:00, 39.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.30it/s] 96%|#########6| 25/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 38.31it/s]
Test: [   0/  26]	Loss 0.314 (0.314)	test_acc   0.87 (  0.87)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.314 (0.314)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.312 (0.330)	test_acc   0.85 (  0.85)	test_minacc   0.30 (  0.15)	test_majacc   0.96 (  0.97)	Loss_d 0.312 (0.330)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.30 (  0.15)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.88 (  0.90)
Test: [  20/  26]	Loss 0.302 (0.322)	test_acc   0.88 (  0.85)	test_minacc   0.10 (  0.18)	test_majacc   0.99 (  0.97)	Loss_d 0.302 (0.322)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.10 (  0.18)	test_majacc_d   0.99 (  0.97)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.339 (0.320)	test_acc   0.84 (  0.85)	test_minacc   0.14 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.339 (0.320)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.14 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.62it/s]
Test: [  0/  1]	Loss 1.608 (1.608)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.608 (1.608)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.608 (1.608)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   0.98 (  0.98)	Loss_d 1.608 (1.608)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.78 (  0.78)
Overall Timing[  9/  1]	epoch_time 0.0357 (0.0413)	validation_time 0.0004 (0.0010)	train_time 0.0353 (0.0398)
record: (train_acc, test_acc) (0.856300027012825, 0.2720000147819519)
last accs (train_acc, test_acc) (0.8549000253081321, 0.17500001192092896)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.45it/s] 50%|#####     | 13/26 [00:00<00:00, 30.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.62it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.497 (0.497)	train_nll   0.35 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.16)	train_acc   0.86 (  0.85)	train_minacc   0.33 (  0.22)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 14.9675 (13.8256)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.82it/s] 23%|##3       | 6/26 [00:00<00:00, 30.02it/s] 38%|###8      | 10/26 [00:00<00:00, 33.82it/s]                                                38%|###8      | 10/26 [00:00<00:00, 33.82it/s] 62%|######1   | 16/26 [00:00<00:00, 42.83it/s]                                                62%|######1   | 16/26 [00:00<00:00, 42.83it/s] 85%|########4 | 22/26 [00:00<00:00, 45.06it/s]100%|##########| 26/26 [00:00<00:00, 38.18it/s]
Test: [   0/  26]	Loss 0.295 (0.295)	test_acc   0.88 (  0.88)	test_minacc   0.44 (  0.44)	test_majacc   0.95 (  0.95)	Loss_d 0.295 (0.295)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.292 (0.319)	test_acc   0.85 (  0.85)	test_minacc   0.34 (  0.31)	test_majacc   0.95 (  0.94)	Loss_d 0.292 (0.319)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.34 (  0.31)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.275 (0.310)	test_acc   0.89 (  0.86)	test_minacc   0.43 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.275 (0.310)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.43 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.87 (  0.86)
Test: [  26/  26]	Loss 0.320 (0.306)	test_acc   0.85 (  0.86)	test_minacc   0.24 (  0.35)	test_majacc   0.97 (  0.95)	Loss_d 0.320 (0.306)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.24 (  0.35)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.88 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.65it/s]
Test: [  0/  1]	Loss 1.433 (1.433)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.93 (  0.93)	Loss_d 1.433 (1.433)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.433 (1.433)	test_acc   0.42 (  0.42)	test_minacc   0.36 (  0.36)	test_majacc   0.93 (  0.93)	Loss_d 1.433 (1.433)	test_acc_d   0.42 (  0.42)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.56 (  0.56)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[ 10/  1]	epoch_time 0.0376 (0.0410)	validation_time 0.0003 (0.0010)	train_time 0.0372 (0.0395)
record: (train_acc, test_acc) (0.8602000256180763, 0.41700002551078796)
last accs (train_acc, test_acc) (0.8602000256180763, 0.41700002551078796)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.77it/s] 19%|#9        | 5/26 [00:00<00:00, 23.58it/s] 35%|###4      | 9/26 [00:00<00:00, 27.91it/s] 50%|#####     | 13/26 [00:00<00:00, 30.43it/s] 65%|######5   | 17/26 [00:00<00:00, 32.32it/s] 81%|########  | 21/26 [00:00<00:00, 33.35it/s] 96%|#########6| 25/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 28.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.477 (0.465)	train_nll   0.35 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.85 (  0.85)	train_minacc   0.33 (  0.26)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0941 (15.9494)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.76it/s] 27%|##6       | 7/26 [00:00<00:00, 36.78it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.78it/s] 50%|#####     | 13/26 [00:00<00:00, 41.70it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.84it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 40.25it/s]
Test: [   0/  26]	Loss 0.355 (0.355)	test_acc   0.86 (  0.86)	test_minacc   0.26 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.355 (0.355)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.84)
Test: [  10/  26]	Loss 0.354 (0.358)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.22)	test_majacc   0.95 (  0.96)	Loss_d 0.354 (0.358)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.22)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.83 (  0.84)
Test: [  20/  26]	Loss 0.328 (0.351)	test_acc   0.87 (  0.85)	test_minacc   0.29 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.328 (0.351)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.29 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.83)
Test: [  26/  26]	Loss 0.362 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.362 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.90it/s]
Test: [  0/  1]	Loss 1.376 (1.376)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.92 (  0.92)	Loss_d 1.376 (1.376)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.54 (  0.54)
Test: [  1/  1]	Loss 1.376 (1.376)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   0.92 (  0.92)	Loss_d 1.376 (1.376)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.54 (  0.54)
Overall Timing[ 11/  1]	epoch_time 0.0359 (0.0406)	validation_time 0.0004 (0.0009)	train_time 0.0355 (0.0392)
record: (train_acc, test_acc) (0.8602000256180763, 0.41700002551078796)
last accs (train_acc, test_acc) (0.8524000284075737, 0.2850000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.81it/s] 35%|###4      | 9/26 [00:00<00:00, 27.88it/s] 50%|#####     | 13/26 [00:00<00:00, 30.80it/s] 65%|######5   | 17/26 [00:00<00:00, 32.64it/s] 81%|########  | 21/26 [00:00<00:00, 33.87it/s] 96%|#########6| 25/26 [00:00<00:00, 34.44it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.472 (0.448)	train_nll   0.36 (  0.32)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.12)	train_acc   0.82 (  0.85)	train_minacc   0.21 (  0.26)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 18.9735 (18.0164)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.44it/s] 31%|###       | 8/26 [00:00<00:00, 37.73it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.73it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.80it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.05it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 51.07it/s]100%|##########| 26/26 [00:00<00:00, 42.12it/s]
Test: [   0/  26]	Loss 0.309 (0.309)	test_acc   0.85 (  0.85)	test_minacc   0.41 (  0.41)	test_majacc   0.92 (  0.92)	Loss_d 0.309 (0.309)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.291 (0.324)	test_acc   0.89 (  0.85)	test_minacc   0.53 (  0.39)	test_majacc   0.96 (  0.93)	Loss_d 0.291 (0.324)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.53 (  0.39)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.83 (  0.85)
Test: [  20/  26]	Loss 0.291 (0.314)	test_acc   0.88 (  0.86)	test_minacc   0.45 (  0.42)	test_majacc   0.94 (  0.94)	Loss_d 0.291 (0.314)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.45 (  0.42)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.86 (  0.85)
Test: [  26/  26]	Loss 0.329 (0.310)	test_acc   0.86 (  0.86)	test_minacc   0.31 (  0.42)	test_majacc   0.97 (  0.94)	Loss_d 0.329 (0.310)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.31 (  0.42)	test_majacc_d   0.97 (  0.94)	test_corr_d   0.88 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.28it/s]
Test: [  0/  1]	Loss 1.452 (1.452)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.89 (  0.89)	Loss_d 1.452 (1.452)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.452 (1.452)	test_acc   0.44 (  0.44)	test_minacc   0.39 (  0.39)	test_majacc   0.89 (  0.89)	Loss_d 1.452 (1.452)	test_acc_d   0.44 (  0.44)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[ 12/  1]	epoch_time 0.0361 (0.0402)	validation_time 0.0003 (0.0009)	train_time 0.0358 (0.0389)
record: (train_acc, test_acc) (0.8596000214219093, 0.44200003147125244)
last accs (train_acc, test_acc) (0.8596000214219093, 0.44200003147125244)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.60it/s] 19%|#9        | 5/26 [00:00<00:00, 23.43it/s] 35%|###4      | 9/26 [00:00<00:00, 28.05it/s] 50%|#####     | 13/26 [00:00<00:00, 30.82it/s] 65%|######5   | 17/26 [00:00<00:00, 32.21it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.91it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.472 (0.434)	train_nll   0.36 (  0.32)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.11)	train_acc   0.85 (  0.86)	train_minacc   0.38 (  0.31)	train_majacc   0.94 (  0.95)	train_corr   0.00 (  0.00)	l1 20.2305 (19.5640)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.17it/s] 27%|##6       | 7/26 [00:00<00:00, 34.87it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.87it/s] 46%|####6     | 12/26 [00:00<00:00, 38.15it/s] 69%|######9   | 18/26 [00:00<00:00, 45.82it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.82it/s] 92%|#########2| 24/26 [00:00<00:00, 46.98it/s]100%|##########| 26/26 [00:00<00:00, 39.90it/s]
Test: [   0/  26]	Loss 0.310 (0.310)	test_acc   0.87 (  0.87)	test_minacc   0.44 (  0.44)	test_majacc   0.94 (  0.94)	Loss_d 0.310 (0.310)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.85 (  0.85)
Test: [  10/  26]	Loss 0.288 (0.320)	test_acc   0.87 (  0.85)	test_minacc   0.45 (  0.40)	test_majacc   0.95 (  0.94)	Loss_d 0.288 (0.320)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.45 (  0.40)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.289 (0.309)	test_acc   0.89 (  0.86)	test_minacc   0.49 (  0.42)	test_majacc   0.95 (  0.94)	Loss_d 0.289 (0.309)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.49 (  0.42)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.83)
Test: [  26/  26]	Loss 0.315 (0.306)	test_acc   0.84 (  0.86)	test_minacc   0.26 (  0.42)	test_majacc   0.96 (  0.94)	Loss_d 0.315 (0.306)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.26 (  0.42)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.86 (  0.84)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.07it/s]
Test: [  0/  1]	Loss 1.261 (1.261)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.88 (  0.88)	Loss_d 1.261 (1.261)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.39 (  0.39)
Test: [  1/  1]	Loss 1.261 (1.261)	test_acc   0.51 (  0.51)	test_minacc   0.47 (  0.47)	test_majacc   0.88 (  0.88)	Loss_d 1.261 (1.261)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.39 (  0.39)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[ 13/  1]	epoch_time 0.0376 (0.0400)	validation_time 0.0005 (0.0008)	train_time 0.0371 (0.0388)
record: (train_acc, test_acc) (0.864700022816658, 0.5130000114440918)
last accs (train_acc, test_acc) (0.864700022816658, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.67it/s] 23%|##3       | 6/26 [00:00<00:00, 24.80it/s] 38%|###8      | 10/26 [00:00<00:00, 28.48it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.68it/s] 69%|######9   | 18/26 [00:00<00:00, 31.93it/s] 85%|########4 | 22/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.458 (0.424)	train_nll   0.36 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.11)	train_acc   0.85 (  0.86)	train_minacc   0.21 (  0.29)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 21.2853 (20.7815)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.71it/s] 27%|##6       | 7/26 [00:00<00:00, 30.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.68it/s] 46%|####6     | 12/26 [00:00<00:00, 37.97it/s] 65%|######5   | 17/26 [00:00<00:00, 40.59it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.59it/s] 88%|########8 | 23/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 37.05it/s]
Test: [   0/  26]	Loss 0.328 (0.328)	test_acc   0.84 (  0.84)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.94)	Loss_d 0.328 (0.328)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.313 (0.338)	test_acc   0.86 (  0.85)	test_minacc   0.39 (  0.30)	test_majacc   0.96 (  0.95)	Loss_d 0.313 (0.338)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.39 (  0.30)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.84 (  0.87)
Test: [  20/  26]	Loss 0.312 (0.326)	test_acc   0.89 (  0.86)	test_minacc   0.39 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.312 (0.326)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.39 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.87)
Test: [  26/  26]	Loss 0.343 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.31 (  0.33)	test_majacc   0.96 (  0.95)	Loss_d 0.343 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.31 (  0.33)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 1.428 (1.428)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.93 (  0.93)	Loss_d 1.428 (1.428)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.428 (1.428)	test_acc   0.38 (  0.38)	test_minacc   0.31 (  0.31)	test_majacc   0.93 (  0.93)	Loss_d 1.428 (1.428)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.61 (  0.61)
Overall Timing[ 14/  1]	epoch_time 0.0386 (0.0399)	validation_time 0.0003 (0.0008)	train_time 0.0383 (0.0388)
record: (train_acc, test_acc) (0.864700022816658, 0.5130000114440918)
last accs (train_acc, test_acc) (0.8604000223278999, 0.3760000169277191)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 19%|#9        | 5/26 [00:00<00:00, 21.85it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.79it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.47it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 28.59it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.005 (0.169)	train_nll   0.53 (  0.40)	train_penalty   0.00 (  0.01)	weight_norm   0.13 (  0.10)	train_acc   0.73 (  0.80)	train_minacc   0.64 (  0.52)	train_majacc   0.75 (  0.85)	train_corr   0.00 (  0.00)	l1 21.1810 (21.4478)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.89it/s] 31%|###       | 8/26 [00:00<00:00, 40.31it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.31it/s] 50%|#####     | 13/26 [00:00<00:00, 44.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.66it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.66it/s] 96%|#########6| 25/26 [00:00<00:00, 49.78it/s]100%|##########| 26/26 [00:00<00:00, 41.86it/s]
Test: [   0/  26]	Loss 0.563 (0.563)	test_acc   0.71 (  0.71)	test_minacc   0.76 (  0.76)	test_majacc   0.70 (  0.70)	Loss_d 0.563 (0.563)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.76 (  0.76)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.35 (  0.35)
Test: [  10/  26]	Loss 0.580 (0.558)	test_acc   0.72 (  0.73)	test_minacc   0.73 (  0.75)	test_majacc   0.72 (  0.72)	Loss_d 0.580 (0.558)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.73 (  0.75)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.34 (  0.36)
Test: [  20/  26]	Loss 0.539 (0.558)	test_acc   0.75 (  0.73)	test_minacc   0.75 (  0.75)	test_majacc   0.75 (  0.72)	Loss_d 0.539 (0.558)	test_acc_d   0.75 (  0.73)	test_minacc_d   0.75 (  0.75)	test_majacc_d   0.75 (  0.72)	test_corr_d   0.41 (  0.37)
Test: [  26/  26]	Loss 0.540 (0.557)	test_acc   0.72 (  0.73)	test_minacc   0.67 (  0.75)	test_majacc   0.74 (  0.73)	Loss_d 0.540 (0.557)	test_acc_d   0.72 (  0.73)	test_minacc_d   0.67 (  0.75)	test_majacc_d   0.74 (  0.73)	test_corr_d   0.45 (  0.38)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.34it/s]
Test: [  0/  1]	Loss 0.608 (0.608)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.608 (0.608)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.608 (0.608)	test_acc   0.69 (  0.69)	test_minacc   0.69 (  0.69)	test_majacc   0.66 (  0.66)	Loss_d 0.608 (0.608)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.66 (  0.66)	test_corr_d  -0.35 ( -0.35)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/49/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0356 (0.0397)	validation_time 0.0005 (0.0008)	train_time 0.0351 (0.0385)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.80it/s] 15%|#5        | 4/26 [00:00<00:01, 19.44it/s] 27%|##6       | 7/26 [00:00<00:00, 23.87it/s] 42%|####2     | 11/26 [00:00<00:00, 28.72it/s] 58%|#####7    | 15/26 [00:00<00:00, 30.44it/s] 73%|#######3  | 19/26 [00:00<00:00, 32.04it/s] 88%|########8 | 23/26 [00:00<00:00, 33.42it/s]100%|##########| 26/26 [00:00<00:00, 27.99it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.001)	train_nll   0.64 (  0.62)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.62 (  0.65)	train_minacc   0.71 (  0.68)	train_majacc   0.61 (  0.64)	train_corr   0.00 (  0.00)	l1 20.8235 (20.9670)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.60it/s] 31%|###       | 8/26 [00:00<00:00, 40.33it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.33it/s] 50%|#####     | 13/26 [00:00<00:00, 42.90it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 48.02it/s]100%|##########| 26/26 [00:00<00:00, 41.33it/s]
Test: [   0/  26]	Loss 0.653 (0.653)	test_acc   0.62 (  0.62)	test_minacc   0.67 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.653 (0.653)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.22 (  0.22)
Test: [  10/  26]	Loss 0.665 (0.652)	test_acc   0.56 (  0.59)	test_minacc   0.67 (  0.66)	test_majacc   0.54 (  0.58)	Loss_d 0.665 (0.652)	test_acc_d   0.56 (  0.59)	test_minacc_d   0.67 (  0.66)	test_majacc_d   0.54 (  0.58)	test_corr_d   0.20 (  0.22)
Test: [  20/  26]	Loss 0.633 (0.650)	test_acc   0.63 (  0.60)	test_minacc   0.59 (  0.66)	test_majacc   0.63 (  0.59)	Loss_d 0.633 (0.650)	test_acc_d   0.63 (  0.60)	test_minacc_d   0.59 (  0.66)	test_majacc_d   0.63 (  0.59)	test_corr_d   0.28 (  0.23)
Test: [  26/  26]	Loss 0.637 (0.651)	test_acc   0.62 (  0.60)	test_minacc   0.71 (  0.66)	test_majacc   0.61 (  0.59)	Loss_d 0.637 (0.651)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.71 (  0.66)	test_majacc_d   0.61 (  0.59)	test_corr_d   0.27 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.60it/s]
Test: [  0/  1]	Loss 0.655 (0.655)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.52 (  0.52)	Loss_d 0.655 (0.655)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.655 (0.655)	test_acc   0.62 (  0.62)	test_minacc   0.64 (  0.64)	test_majacc   0.52 (  0.52)	Loss_d 0.655 (0.655)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 16/  1]	epoch_time 0.0379 (0.0396)	validation_time 0.0003 (0.0008)	train_time 0.0376 (0.0385)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5988000050783158, 0.625)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.64it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 31.16it/s] 65%|######5   | 17/26 [00:00<00:00, 32.74it/s] 81%|########  | 21/26 [00:00<00:00, 33.86it/s] 96%|#########6| 25/26 [00:00<00:00, 33.79it/s]100%|##########| 26/26 [00:00<00:00, 28.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.56 (  0.58)	train_minacc   0.67 (  0.65)	train_majacc   0.53 (  0.56)	train_corr   0.00 (  0.00)	l1 20.7377 (20.7718)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 23%|##3       | 6/26 [00:00<00:00, 28.15it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.15it/s] 46%|####6     | 12/26 [00:00<00:00, 37.21it/s] 69%|######9   | 18/26 [00:00<00:00, 44.34it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.34it/s] 92%|#########2| 24/26 [00:00<00:00, 45.61it/s]100%|##########| 26/26 [00:00<00:00, 37.53it/s]
Test: [   0/  26]	Loss 0.671 (0.671)	test_acc   0.55 (  0.55)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.671 (0.671)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.680 (0.671)	test_acc   0.53 (  0.55)	test_minacc   0.66 (  0.64)	test_majacc   0.51 (  0.54)	Loss_d 0.680 (0.671)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.51 (  0.54)	test_corr_d   0.13 (  0.14)
Test: [  20/  26]	Loss 0.657 (0.670)	test_acc   0.58 (  0.55)	test_minacc   0.65 (  0.64)	test_majacc   0.57 (  0.54)	Loss_d 0.657 (0.670)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.19 (  0.15)
Test: [  26/  26]	Loss 0.661 (0.671)	test_acc   0.56 (  0.55)	test_minacc   0.67 (  0.64)	test_majacc   0.54 (  0.54)	Loss_d 0.661 (0.671)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.67 (  0.64)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.19 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.83it/s]
Test: [  0/  1]	Loss 0.663 (0.663)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.663 (0.663)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.663 (0.663)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.49 (  0.49)	Loss_d 0.663 (0.663)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 17/  1]	epoch_time 0.0381 (0.0395)	validation_time 0.0009 (0.0008)	train_time 0.0371 (0.0384)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5527000063061714, 0.6110000014305115)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.32it/s] 19%|#9        | 5/26 [00:00<00:00, 21.47it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.13it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.66it/s]100%|##########| 26/26 [00:00<00:00, 28.29it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.55)	train_minacc   0.57 (  0.63)	train_majacc   0.51 (  0.53)	train_corr   0.00 (  0.00)	l1 20.6980 (20.7160)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.72it/s] 19%|#9        | 5/26 [00:00<00:00, 24.32it/s] 38%|###8      | 10/26 [00:00<00:00, 34.57it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.57it/s] 62%|######1   | 16/26 [00:00<00:00, 40.50it/s]                                                62%|######1   | 16/26 [00:00<00:00, 40.50it/s] 85%|########4 | 22/26 [00:00<00:00, 46.55it/s]100%|##########| 26/26 [00:00<00:00, 36.99it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.55 (  0.55)	test_minacc   0.61 (  0.61)	test_majacc   0.54 (  0.54)	Loss_d 0.677 (0.677)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.683 (0.677)	test_acc   0.51 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.49 (  0.53)	Loss_d 0.683 (0.677)	test_acc_d   0.51 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.12 (  0.14)
Test: [  20/  26]	Loss 0.668 (0.676)	test_acc   0.56 (  0.54)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.53)	Loss_d 0.668 (0.676)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.17 (  0.14)
Test: [  26/  26]	Loss 0.671 (0.677)	test_acc   0.52 (  0.54)	test_minacc   0.57 (  0.61)	test_majacc   0.50 (  0.53)	Loss_d 0.671 (0.677)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.57 (  0.61)	test_majacc_d   0.50 (  0.53)	test_corr_d   0.18 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.29it/s]
Test: [  0/  1]	Loss 0.676 (0.676)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.676 (0.676)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.22 ( -0.22)
Test: [  1/  1]	Loss 0.676 (0.676)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.51 (  0.51)	Loss_d 0.676 (0.676)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.22 ( -0.22)
Overall Timing[ 18/  1]	epoch_time 0.0357 (0.0393)	validation_time 0.0004 (0.0008)	train_time 0.0353 (0.0382)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5408000123500823, 0.581000030040741)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.19it/s] 35%|###4      | 9/26 [00:00<00:00, 26.36it/s] 50%|#####     | 13/26 [00:00<00:00, 29.32it/s] 65%|######5   | 17/26 [00:00<00:00, 31.01it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 32.04it/s]100%|##########| 26/26 [00:00<00:00, 27.41it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.52 (  0.52)	train_minacc   0.52 (  0.60)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 20.6781 (20.6866)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.02it/s] 15%|#5        | 4/26 [00:00<00:01, 18.45it/s] 38%|###8      | 10/26 [00:00<00:00, 35.18it/s]                                                38%|###8      | 10/26 [00:00<00:00, 35.18it/s] 62%|######1   | 16/26 [00:00<00:00, 41.01it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.01it/s] 85%|########4 | 22/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.686 (0.686)	test_acc   0.52 (  0.52)	test_minacc   0.57 (  0.57)	test_majacc   0.51 (  0.51)	Loss_d 0.686 (0.686)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.691 (0.686)	test_acc   0.49 (  0.51)	test_minacc   0.55 (  0.58)	test_majacc   0.48 (  0.50)	Loss_d 0.691 (0.686)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.55 (  0.58)	test_majacc_d   0.48 (  0.50)	test_corr_d   0.06 (  0.08)
Test: [  20/  26]	Loss 0.680 (0.686)	test_acc   0.54 (  0.52)	test_minacc   0.53 (  0.58)	test_majacc   0.54 (  0.51)	Loss_d 0.680 (0.686)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.53 (  0.58)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.10 (  0.08)
Test: [  26/  26]	Loss 0.683 (0.686)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.58)	test_majacc   0.51 (  0.51)	Loss_d 0.683 (0.686)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.58)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.11 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.85it/s]
Test: [  0/  1]	Loss 0.682 (0.682)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.682 (0.682)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.682 (0.682)	test_acc   0.57 (  0.57)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.682 (0.682)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 19/  1]	epoch_time 0.0377 (0.0392)	validation_time 0.0004 (0.0007)	train_time 0.0374 (0.0382)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5182000160217285, 0.5670000314712524)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.04it/s] 19%|#9        | 5/26 [00:00<00:00, 24.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.86it/s] 50%|#####     | 13/26 [00:00<00:00, 31.51it/s] 65%|######5   | 17/26 [00:00<00:00, 33.05it/s] 81%|########  | 21/26 [00:00<00:00, 33.79it/s] 96%|#########6| 25/26 [00:00<00:00, 34.41it/s]100%|##########| 26/26 [00:00<00:00, 29.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.50 (  0.51)	train_minacc   0.52 (  0.58)	train_majacc   0.50 (  0.50)	train_corr   0.00 (  0.00)	l1 20.6690 (20.6726)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 27%|##6       | 7/26 [00:00<00:00, 31.57it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.57it/s] 50%|#####     | 13/26 [00:00<00:00, 39.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.30it/s] 96%|#########6| 25/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 38.17it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.50 (  0.50)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.693 (0.690)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.57)	test_majacc   0.45 (  0.50)	Loss_d 0.693 (0.690)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.57)	test_majacc_d   0.45 (  0.50)	test_corr_d   0.03 (  0.04)
Test: [  20/  26]	Loss 0.687 (0.690)	test_acc   0.54 (  0.51)	test_minacc   0.51 (  0.57)	test_majacc   0.54 (  0.50)	Loss_d 0.687 (0.690)	test_acc_d   0.54 (  0.51)	test_minacc_d   0.51 (  0.57)	test_majacc_d   0.54 (  0.50)	test_corr_d   0.05 (  0.04)
Test: [  26/  26]	Loss 0.688 (0.690)	test_acc   0.50 (  0.51)	test_minacc   0.52 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.688 (0.690)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.52 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d   0.06 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.14it/s]
Test: [  0/  1]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.686 (0.686)	test_acc   0.56 (  0.56)	test_minacc   0.57 (  0.57)	test_majacc   0.50 (  0.50)	Loss_d 0.686 (0.686)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 20/  1]	epoch_time 0.0379 (0.0392)	validation_time 0.0005 (0.0007)	train_time 0.0374 (0.0382)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5120000122785568, 0.5610000491142273)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 15%|#5        | 4/26 [00:00<00:01, 19.77it/s] 31%|###       | 8/26 [00:00<00:00, 25.38it/s] 46%|####6     | 12/26 [00:00<00:00, 28.71it/s] 62%|######1   | 16/26 [00:00<00:00, 30.84it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.35it/s] 92%|#########2| 24/26 [00:00<00:00, 33.56it/s]100%|##########| 26/26 [00:00<00:00, 28.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.51)	train_minacc   0.55 (  0.56)	train_majacc   0.52 (  0.50)	train_corr   0.00 (  0.00)	l1 20.6653 (20.6667)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.20it/s] 31%|###       | 8/26 [00:00<00:00, 41.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.54it/s] 50%|#####     | 13/26 [00:00<00:00, 42.37it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.04it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.04it/s] 96%|#########6| 25/26 [00:00<00:00, 47.96it/s]100%|##########| 26/26 [00:00<00:00, 40.52it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.56 (  0.56)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.46 (  0.51)	test_minacc   0.47 (  0.54)	test_majacc   0.46 (  0.50)	Loss_d 0.694 (0.692)	test_acc_d   0.46 (  0.51)	test_minacc_d   0.47 (  0.54)	test_majacc_d   0.46 (  0.50)	test_corr_d  -0.00 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.49 (  0.54)	test_majacc   0.54 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.54 (  0.51)	test_corr_d   0.02 (  0.03)
Test: [  26/  26]	Loss 0.691 (0.692)	test_acc   0.53 (  0.51)	test_minacc   0.55 (  0.54)	test_majacc   0.52 (  0.51)	Loss_d 0.691 (0.692)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.05it/s]
Test: [  0/  1]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.689 (0.689)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.48 (  0.48)	Loss_d 0.689 (0.689)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 21/  1]	epoch_time 0.0383 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0378 (0.0382)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5144000107347966, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 15%|#5        | 4/26 [00:00<00:01, 16.57it/s] 31%|###       | 8/26 [00:00<00:00, 23.95it/s] 46%|####6     | 12/26 [00:00<00:00, 27.97it/s] 62%|######1   | 16/26 [00:00<00:00, 30.38it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.54it/s] 92%|#########2| 24/26 [00:00<00:00, 32.41it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.53 (  0.51)	train_minacc   0.52 (  0.52)	train_majacc   0.53 (  0.51)	train_corr   0.00 (  0.00)	l1 20.6640 (20.6645)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.85it/s] 27%|##6       | 7/26 [00:00<00:00, 34.43it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.43it/s] 50%|#####     | 13/26 [00:00<00:00, 44.27it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 49.86it/s]100%|##########| 26/26 [00:00<00:00, 41.17it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.44 (  0.44)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.44 (  0.44)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.692)	test_acc   0.45 (  0.52)	test_minacc   0.39 (  0.49)	test_majacc   0.47 (  0.52)	Loss_d 0.694 (0.692)	test_acc_d   0.45 (  0.52)	test_minacc_d   0.39 (  0.49)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.41 (  0.49)	test_majacc   0.56 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.41 (  0.49)	test_majacc_d   0.56 (  0.53)	test_corr_d   0.02 (  0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.49)	test_majacc   0.52 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.52 (  0.53)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.44it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 22/  1]	epoch_time 0.0362 (0.0390)	validation_time 0.0003 (0.0007)	train_time 0.0358 (0.0381)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5234000138044357, 0.5360000133514404)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.90it/s] 19%|#9        | 5/26 [00:00<00:00, 21.28it/s] 31%|###       | 8/26 [00:00<00:00, 21.53it/s] 42%|####2     | 11/26 [00:00<00:00, 19.80it/s] 54%|#####3    | 14/26 [00:00<00:00, 19.11it/s] 62%|######1   | 16/26 [00:00<00:00, 18.71it/s] 69%|######9   | 18/26 [00:00<00:00, 18.05it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.67it/s] 85%|########4 | 22/26 [00:01<00:00, 17.37it/s] 92%|#########2| 24/26 [00:01<00:00, 17.24it/s]100%|##########| 26/26 [00:01<00:00, 17.20it/s]100%|##########| 26/26 [00:01<00:00, 17.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 310 tensor(-0.0143, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
rho, theta 419 tensor(-0.0015, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 438 tensor(-0.0007, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 440 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 445 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 452 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 456 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 468 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 477 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 483 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 486 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 494 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 502 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 510 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 485 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 500 tensor(-0.0003, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.006)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.18 (  0.16)	train_acc   0.54 (  0.56)	train_minacc   0.64 (  0.54)	train_majacc   0.51 (  0.57)	train_corr   0.00 (  0.00)	l1 15.0450 (15.6895)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.79it/s] 27%|##6       | 7/26 [00:00<00:00, 31.15it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.15it/s] 46%|####6     | 12/26 [00:00<00:00, 37.52it/s] 69%|######9   | 18/26 [00:00<00:00, 44.89it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.89it/s] 88%|########8 | 23/26 [00:00<00:00, 46.48it/s]100%|##########| 26/26 [00:00<00:00, 38.09it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.57 (  0.57)	test_minacc   0.61 (  0.61)	test_majacc   0.57 (  0.57)	Loss_d 0.691 (0.691)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.13 (  0.13)
Test: [  10/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.53)	test_minacc   0.56 (  0.53)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.48 (  0.52)	test_corr_d   0.05 (  0.10)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.60 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.60 (  0.52)	test_corr_d   0.15 (  0.10)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.51 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.02 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.15it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 23/  1]	epoch_time 0.0464 (0.0393)	validation_time 0.0006 (0.0007)	train_time 0.0458 (0.0384)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5243000113070011, 0.5450000166893005)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.43it/s] 12%|#1        | 3/26 [00:00<00:01, 12.41it/s] 19%|#9        | 5/26 [00:00<00:01, 14.24it/s] 27%|##6       | 7/26 [00:00<00:01, 15.27it/s] 35%|###4      | 9/26 [00:00<00:01, 15.90it/s] 42%|####2     | 11/26 [00:00<00:00, 16.21it/s] 50%|#####     | 13/26 [00:00<00:00, 16.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.61it/s] 65%|######5   | 17/26 [00:01<00:00, 16.82it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.05it/s] 81%|########  | 21/26 [00:01<00:00, 17.12it/s] 88%|########8 | 23/26 [00:01<00:00, 16.93it/s] 96%|#########6| 25/26 [00:01<00:00, 16.99it/s]100%|##########| 26/26 [00:01<00:00, 15.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
rho, theta 505 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
rho, theta 506 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0346 (15.0403)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.21it/s] 31%|###       | 8/26 [00:00<00:00, 39.52it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.52it/s] 50%|#####     | 13/26 [00:00<00:00, 42.62it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.68it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.68it/s] 96%|#########6| 25/26 [00:00<00:00, 48.41it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 24/  1]	epoch_time 0.0495 (0.0397)	validation_time 0.0004 (0.0007)	train_time 0.0491 (0.0388)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5062000125050544, 0.503000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 12%|#1        | 3/26 [00:00<00:02, 11.46it/s] 19%|#9        | 5/26 [00:00<00:01, 14.18it/s] 27%|##6       | 7/26 [00:00<00:01, 15.47it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 16.23it/s] 50%|#####     | 13/26 [00:00<00:00, 16.29it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.87it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.83it/s] 81%|########  | 21/26 [00:01<00:00, 16.88it/s] 88%|########8 | 23/26 [00:01<00:00, 16.95it/s] 96%|#########6| 25/26 [00:01<00:00, 16.93it/s]100%|##########| 26/26 [00:01<00:00, 15.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.50)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0196 (15.0272)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.72it/s] 31%|###       | 8/26 [00:00<00:00, 39.42it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.42it/s] 50%|#####     | 13/26 [00:00<00:00, 41.04it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.05 (  0.01)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.09 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.02it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 25/  1]	epoch_time 0.0510 (0.0401)	validation_time 0.0004 (0.0007)	train_time 0.0506 (0.0393)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5060000123083591, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.16it/s] 12%|#1        | 3/26 [00:00<00:01, 12.14it/s] 19%|#9        | 5/26 [00:00<00:01, 14.27it/s] 27%|##6       | 7/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:01, 16.02it/s] 42%|####2     | 11/26 [00:00<00:00, 16.29it/s] 50%|#####     | 13/26 [00:00<00:00, 16.63it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.75it/s] 65%|######5   | 17/26 [00:01<00:00, 16.94it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.13it/s] 81%|########  | 21/26 [00:01<00:00, 17.01it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 17.03it/s]100%|##########| 26/26 [00:01<00:00, 15.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.50)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0047 (15.0120)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.73it/s] 27%|##6       | 7/26 [00:00<00:00, 33.02it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.02it/s] 50%|#####     | 13/26 [00:00<00:00, 41.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.54it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 40.24it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.02)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.12 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.17it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.12 ( -0.12)
Overall Timing[ 26/  1]	epoch_time 0.0498 (0.0405)	validation_time 0.0004 (0.0007)	train_time 0.0494 (0.0396)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5067000136375427, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.60it/s] 12%|#1        | 3/26 [00:00<00:02, 10.86it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:01, 15.37it/s] 50%|#####     | 13/26 [00:00<00:00, 21.42it/s] 65%|######5   | 17/26 [00:00<00:00, 25.68it/s] 81%|########  | 21/26 [00:01<00:00, 28.48it/s] 96%|#########6| 25/26 [00:01<00:00, 30.08it/s]100%|##########| 26/26 [00:01<00:00, 21.37it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.57 (  0.50)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9916 (14.9979)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.66it/s] 27%|##6       | 7/26 [00:00<00:00, 38.40it/s]                                               27%|##6       | 7/26 [00:00<00:00, 38.40it/s] 50%|#####     | 13/26 [00:00<00:00, 44.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.62it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.62it/s] 96%|#########6| 25/26 [00:00<00:00, 48.39it/s]100%|##########| 26/26 [00:00<00:00, 40.99it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.57 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.57 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 27/  1]	epoch_time 0.0418 (0.0405)	validation_time 0.0003 (0.0006)	train_time 0.0415 (0.0397)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5074000135958194, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.05it/s] 15%|#5        | 4/26 [00:00<00:01, 20.82it/s] 31%|###       | 8/26 [00:00<00:00, 26.77it/s] 46%|####6     | 12/26 [00:00<00:00, 29.69it/s] 62%|######1   | 16/26 [00:00<00:00, 31.38it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.51it/s] 92%|#########2| 24/26 [00:00<00:00, 33.08it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.51)	train_minacc   0.60 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9813 (14.9861)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:01, 21.93it/s] 35%|###4      | 9/26 [00:00<00:00, 38.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 38.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 42.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 42.85it/s] 81%|########  | 21/26 [00:00<00:00, 47.41it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.51)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.04 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.59 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.17 ( -0.17)
Overall Timing[ 28/  1]	epoch_time 0.0365 (0.0404)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0396)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5077000157833099, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 21.96it/s] 35%|###4      | 9/26 [00:00<00:00, 27.51it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 31.50it/s] 81%|########  | 21/26 [00:00<00:00, 32.71it/s] 96%|#########6| 25/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 28.13it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.51)	train_minacc   0.60 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9747 (14.9776)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 27%|##6       | 7/26 [00:00<00:00, 32.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.92it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.92it/s] 96%|#########6| 25/26 [00:00<00:00, 46.88it/s]100%|##########| 26/26 [00:00<00:00, 38.59it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.52)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.45 (  0.51)	test_majacc   0.60 (  0.51)	Loss_d 0.691 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.60 (  0.51)	test_corr_d   0.10 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.18 ( -0.18)
Overall Timing[ 29/  1]	epoch_time 0.0365 (0.0403)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0395)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5094000121951103, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.89it/s] 19%|#9        | 5/26 [00:00<00:01, 20.41it/s] 35%|###4      | 9/26 [00:00<00:00, 25.78it/s] 50%|#####     | 13/26 [00:00<00:00, 29.40it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.38it/s] 96%|#########6| 25/26 [00:00<00:00, 33.19it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.51)	train_minacc   0.60 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9745 (14.9737)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.17it/s] 27%|##6       | 7/26 [00:00<00:00, 37.75it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.75it/s] 50%|#####     | 13/26 [00:00<00:00, 43.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.23it/s] 96%|#########6| 25/26 [00:00<00:00, 48.46it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.65 (  0.65)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.47 (  0.51)	test_minacc   0.55 (  0.52)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.47 (  0.51)	test_minacc_d   0.55 (  0.52)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.45 (  0.52)	test_majacc   0.60 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.60 (  0.51)	test_corr_d   0.10 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.10 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.19 ( -0.19)
Overall Timing[ 30/  1]	epoch_time 0.0377 (0.0402)	validation_time 0.0004 (0.0006)	train_time 0.0372 (0.0394)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5101000109910965, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.25it/s] 23%|##3       | 6/26 [00:00<00:00, 24.90it/s] 38%|###8      | 10/26 [00:00<00:00, 28.10it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.23it/s] 69%|######9   | 18/26 [00:00<00:00, 31.13it/s] 85%|########4 | 22/26 [00:00<00:00, 32.21it/s]100%|##########| 26/26 [00:00<00:00, 32.86it/s]100%|##########| 26/26 [00:00<00:00, 28.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.53 (  0.51)	train_minacc   0.60 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9818 (14.9780)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.33it/s] 31%|###       | 8/26 [00:00<00:00, 40.06it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.06it/s] 50%|#####     | 13/26 [00:00<00:00, 42.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.54it/s] 96%|#########6| 25/26 [00:00<00:00, 49.22it/s]100%|##########| 26/26 [00:00<00:00, 41.60it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.63 (  0.63)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.58 (  0.52)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.03)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.45 (  0.52)	test_majacc   0.60 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.45 (  0.52)	test_majacc_d   0.60 (  0.51)	test_corr_d   0.10 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 31/  1]	epoch_time 0.0366 (0.0401)	validation_time 0.0003 (0.0006)	train_time 0.0363 (0.0393)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5113000120818615, 0.5290000438690186)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 23.27it/s] 35%|###4      | 9/26 [00:00<00:00, 26.76it/s] 50%|#####     | 13/26 [00:00<00:00, 29.47it/s] 65%|######5   | 17/26 [00:00<00:00, 31.00it/s] 81%|########  | 21/26 [00:00<00:00, 32.28it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.60 (  0.52)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9902 (14.9860)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.27it/s] 27%|##6       | 7/26 [00:00<00:00, 31.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.49it/s] 46%|####6     | 12/26 [00:00<00:00, 37.70it/s] 69%|######9   | 18/26 [00:00<00:00, 44.45it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.45it/s] 92%|#########2| 24/26 [00:00<00:00, 47.20it/s]100%|##########| 26/26 [00:00<00:00, 37.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.63 (  0.63)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.05 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.47 (  0.53)	test_majacc   0.59 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.60 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.21it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 32/  1]	epoch_time 0.0375 (0.0400)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0392)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5124000109732151, 0.5320000052452087)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 19%|#9        | 5/26 [00:00<00:00, 22.47it/s] 35%|###4      | 9/26 [00:00<00:00, 27.34it/s] 50%|#####     | 13/26 [00:00<00:00, 29.98it/s] 65%|######5   | 17/26 [00:00<00:00, 31.75it/s] 81%|########  | 21/26 [00:00<00:00, 32.79it/s] 96%|#########6| 25/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 28.42it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.60 (  0.53)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 14.9984 (14.9944)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.47it/s] 35%|###4      | 9/26 [00:00<00:00, 39.06it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.06it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.75it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.75it/s] 81%|########  | 21/26 [00:00<00:00, 47.30it/s]100%|##########| 26/26 [00:00<00:00, 41.66it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.63 (  0.63)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.58 (  0.53)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.58 (  0.53)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.51)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.51)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.60 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.11 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.32it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.20 ( -0.20)
Overall Timing[ 33/  1]	epoch_time 0.0371 (0.0399)	validation_time 0.0005 (0.0006)	train_time 0.0366 (0.0391)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5135000132322312, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 19%|#9        | 5/26 [00:00<00:01, 19.76it/s] 31%|###       | 8/26 [00:00<00:00, 18.13it/s] 38%|###8      | 10/26 [00:00<00:00, 17.69it/s] 46%|####6     | 12/26 [00:00<00:00, 17.25it/s] 54%|#####3    | 14/26 [00:00<00:00, 17.19it/s] 62%|######1   | 16/26 [00:00<00:00, 17.20it/s] 69%|######9   | 18/26 [00:01<00:00, 17.25it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.24it/s] 85%|########4 | 22/26 [00:01<00:00, 17.28it/s] 92%|#########2| 24/26 [00:01<00:00, 17.24it/s]100%|##########| 26/26 [00:01<00:00, 17.34it/s]100%|##########| 26/26 [00:01<00:00, 16.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.51)	train_minacc   0.60 (  0.53)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0061 (15.0024)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 27%|##6       | 7/26 [00:00<00:00, 34.89it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.89it/s] 50%|#####     | 13/26 [00:00<00:00, 40.92it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.50it/s]100%|##########| 26/26 [00:00<00:00, 39.67it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.57 (  0.57)	test_minacc   0.63 (  0.63)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.58 (  0.54)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.54)	test_majacc   0.59 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.10 (  0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.12 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.25it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 34/  1]	epoch_time 0.0485 (0.0402)	validation_time 0.0003 (0.0006)	train_time 0.0481 (0.0394)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5155000068843365, 0.5380000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 12%|#1        | 3/26 [00:00<00:02, 10.55it/s] 19%|#9        | 5/26 [00:00<00:01, 13.06it/s] 27%|##6       | 7/26 [00:00<00:01, 14.45it/s] 35%|###4      | 9/26 [00:00<00:01, 15.24it/s] 42%|####2     | 11/26 [00:00<00:00, 15.80it/s] 50%|#####     | 13/26 [00:00<00:00, 16.09it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.28it/s] 65%|######5   | 17/26 [00:01<00:00, 16.36it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.52it/s] 81%|########  | 21/26 [00:01<00:00, 16.43it/s] 88%|########8 | 23/26 [00:01<00:00, 16.61it/s] 96%|#########6| 25/26 [00:01<00:00, 16.67it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.52)	train_minacc   0.60 (  0.54)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0133 (15.0098)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.87it/s] 23%|##3       | 6/26 [00:00<00:00, 28.58it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.58it/s] 42%|####2     | 11/26 [00:00<00:00, 37.22it/s] 62%|######1   | 16/26 [00:00<00:00, 39.91it/s]                                                62%|######1   | 16/26 [00:00<00:00, 39.91it/s] 85%|########4 | 22/26 [00:00<00:00, 45.55it/s]100%|##########| 26/26 [00:00<00:00, 37.14it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.56 (  0.56)	test_minacc   0.63 (  0.63)	test_majacc   0.55 (  0.55)	Loss_d 0.692 (0.692)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.58 (  0.54)	test_majacc   0.46 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.58 (  0.54)	test_majacc_d   0.46 (  0.51)	test_corr_d  -0.06 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.54)	test_majacc   0.59 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.60 (  0.54)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.12 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.64it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 35/  1]	epoch_time 0.0513 (0.0405)	validation_time 0.0004 (0.0006)	train_time 0.0508 (0.0397)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5161000126600266, 0.5400000214576721)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 12%|#1        | 3/26 [00:00<00:02, 11.24it/s] 19%|#9        | 5/26 [00:00<00:01, 13.47it/s] 27%|##6       | 7/26 [00:00<00:01, 14.62it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 15.86it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.64it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.68it/s] 81%|########  | 21/26 [00:01<00:00, 16.65it/s] 88%|########8 | 23/26 [00:01<00:00, 16.63it/s] 96%|#########6| 25/26 [00:01<00:00, 16.81it/s]100%|##########| 26/26 [00:01<00:00, 15.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.52 (  0.52)	train_minacc   0.62 (  0.54)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0200 (15.0167)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.29it/s] 31%|###       | 8/26 [00:00<00:00, 40.94it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.94it/s] 50%|#####     | 13/26 [00:00<00:00, 42.02it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.32it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.32it/s] 96%|#########6| 25/26 [00:00<00:00, 47.92it/s]100%|##########| 26/26 [00:00<00:00, 41.07it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.00 (  0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.55 (  0.54)	test_majacc   0.47 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.07 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.54)	test_majacc   0.59 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.59 (  0.51)	test_corr_d   0.09 (  0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.62 (  0.54)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.13 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.55 (  0.55)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 36/  1]	epoch_time 0.0505 (0.0407)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0400)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5177000150978566, 0.5480000376701355)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.04it/s] 12%|#1        | 3/26 [00:00<00:01, 12.17it/s] 19%|#9        | 5/26 [00:00<00:01, 14.26it/s] 27%|##6       | 7/26 [00:00<00:01, 15.26it/s] 35%|###4      | 9/26 [00:00<00:01, 15.86it/s] 42%|####2     | 11/26 [00:00<00:00, 16.19it/s] 50%|#####     | 13/26 [00:00<00:00, 16.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.62it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.69it/s] 81%|########  | 21/26 [00:01<00:00, 16.59it/s] 88%|########8 | 23/26 [00:01<00:00, 16.65it/s] 96%|#########6| 25/26 [00:01<00:00, 16.70it/s]100%|##########| 26/26 [00:01<00:00, 15.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.51 (  0.52)	train_minacc   0.57 (  0.53)	train_majacc   0.50 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0262 (15.0231)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 27%|##6       | 7/26 [00:00<00:00, 36.28it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.28it/s] 50%|#####     | 13/26 [00:00<00:00, 41.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.01it/s] 96%|#########6| 25/26 [00:00<00:00, 48.35it/s]100%|##########| 26/26 [00:00<00:00, 40.26it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.63 (  0.63)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.53 (  0.54)	test_majacc   0.47 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.07 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.51 (  0.53)	test_majacc   0.60 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.60 (  0.52)	test_corr_d   0.09 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.57 (  0.53)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.57 (  0.53)	test_majacc_d   0.50 (  0.52)	test_corr_d  -0.13 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.70it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 37/  1]	epoch_time 0.0495 (0.0410)	validation_time 0.0004 (0.0006)	train_time 0.0491 (0.0402)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5182000134885311, 0.5540000200271606)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.69it/s] 12%|#1        | 3/26 [00:00<00:02,  9.85it/s] 19%|#9        | 5/26 [00:00<00:01, 12.51it/s] 27%|##6       | 7/26 [00:00<00:01, 13.96it/s] 35%|###4      | 9/26 [00:00<00:01, 14.81it/s] 42%|####2     | 11/26 [00:00<00:00, 15.48it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.30it/s] 65%|######5   | 17/26 [00:01<00:00, 16.50it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.57it/s] 81%|########  | 21/26 [00:01<00:00, 16.64it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 17.00it/s]100%|##########| 26/26 [00:01<00:00, 14.74it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.51 (  0.52)	train_minacc   0.60 (  0.53)	train_majacc   0.49 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0318 (15.0291)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.89it/s] 31%|###       | 8/26 [00:00<00:00, 36.83it/s]                                               31%|###       | 8/26 [00:00<00:00, 36.83it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.68it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.58it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.58it/s]100%|##########| 26/26 [00:00<00:00, 51.46it/s]100%|##########| 26/26 [00:00<00:00, 40.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.61 (  0.61)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.55 (  0.54)	test_majacc   0.48 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.55 (  0.54)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.07 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.49 (  0.53)	test_majacc   0.59 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.49 (  0.53)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.09 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.52)	test_minacc   0.60 (  0.53)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.49 (  0.52)	test_corr_d  -0.13 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.51it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 38/  1]	epoch_time 0.0506 (0.0412)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0405)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5197000190019607, 0.5509999990463257)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.51it/s] 12%|#1        | 3/26 [00:00<00:01, 12.25it/s] 19%|#9        | 5/26 [00:00<00:01, 14.27it/s] 27%|##6       | 7/26 [00:00<00:01, 15.26it/s] 35%|###4      | 9/26 [00:00<00:01, 15.91it/s] 42%|####2     | 11/26 [00:00<00:00, 16.26it/s] 50%|#####     | 13/26 [00:00<00:00, 16.49it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.63it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.25it/s] 81%|########  | 21/26 [00:01<00:00, 16.44it/s] 88%|########8 | 23/26 [00:01<00:00, 16.56it/s] 96%|#########6| 25/26 [00:01<00:00, 16.73it/s]100%|##########| 26/26 [00:01<00:00, 15.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.50 (  0.52)	train_minacc   0.60 (  0.53)	train_majacc   0.48 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0370 (15.0345)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 27%|##6       | 7/26 [00:00<00:00, 32.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.97it/s] 50%|#####     | 13/26 [00:00<00:00, 38.26it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.00it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.00it/s] 96%|#########6| 25/26 [00:00<00:00, 47.02it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.00 ( -0.00)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.07 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.49 (  0.52)	test_majacc   0.59 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.49 (  0.52)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.09 ( -0.00)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.60 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.13 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.91it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 39/  1]	epoch_time 0.0506 (0.0415)	validation_time 0.0004 (0.0006)	train_time 0.0502 (0.0407)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5182000105381012, 0.5470000505447388)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.17it/s] 12%|#1        | 3/26 [00:00<00:02, 10.30it/s] 19%|#9        | 5/26 [00:00<00:01, 12.86it/s] 27%|##6       | 7/26 [00:00<00:01, 14.25it/s] 35%|###4      | 9/26 [00:00<00:01, 15.17it/s] 42%|####2     | 11/26 [00:00<00:00, 15.73it/s] 50%|#####     | 13/26 [00:00<00:00, 16.11it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.38it/s] 65%|######5   | 17/26 [00:01<00:00, 16.12it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.29it/s] 81%|########  | 21/26 [00:01<00:00, 16.48it/s] 88%|########8 | 23/26 [00:01<00:00, 16.54it/s] 96%|#########6| 25/26 [00:01<00:00, 16.57it/s]100%|##########| 26/26 [00:01<00:00, 14.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.48 (  0.52)	train_minacc   0.57 (  0.52)	train_majacc   0.47 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0417 (15.0394)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.20it/s] 31%|###       | 8/26 [00:00<00:00, 37.15it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.15it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.90it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.90it/s] 96%|#########6| 25/26 [00:00<00:00, 47.73it/s]100%|##########| 26/26 [00:00<00:00, 40.20it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.56)	test_minacc   0.59 (  0.59)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.08 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.47 (  0.51)	test_majacc   0.59 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.57 (  0.52)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.57 (  0.52)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.14 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.55 (  0.55)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 40/  1]	epoch_time 0.0505 (0.0417)	validation_time 0.0004 (0.0006)	train_time 0.0501 (0.0410)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5183000077009201, 0.5390000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.09it/s] 12%|#1        | 3/26 [00:00<00:02, 10.14it/s] 19%|#9        | 5/26 [00:00<00:01, 12.67it/s] 27%|##6       | 7/26 [00:00<00:01, 14.21it/s] 35%|###4      | 9/26 [00:00<00:01, 14.97it/s] 42%|####2     | 11/26 [00:00<00:00, 15.54it/s] 50%|#####     | 13/26 [00:00<00:00, 15.86it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.10it/s] 65%|######5   | 17/26 [00:01<00:00, 16.26it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.49it/s] 81%|########  | 21/26 [00:01<00:00, 16.33it/s] 88%|########8 | 23/26 [00:01<00:00, 16.46it/s] 96%|#########6| 25/26 [00:01<00:00, 16.62it/s]100%|##########| 26/26 [00:01<00:00, 14.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.47 (  0.52)	train_minacc   0.55 (  0.51)	train_majacc   0.45 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0460 (15.0439)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 23%|##3       | 6/26 [00:00<00:00, 31.54it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.54it/s] 42%|####2     | 11/26 [00:00<00:00, 39.65it/s] 65%|######5   | 17/26 [00:00<00:00, 42.57it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.57it/s] 88%|########8 | 23/26 [00:00<00:00, 47.13it/s]100%|##########| 26/26 [00:00<00:00, 38.47it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.57 (  0.57)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.08 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.52)	test_minacc   0.49 (  0.51)	test_majacc   0.59 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.52)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.59 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.52)	test_minacc   0.55 (  0.51)	test_majacc   0.45 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.55 (  0.51)	test_majacc_d   0.45 (  0.52)	test_corr_d  -0.14 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.01it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 41/  1]	epoch_time 0.0515 (0.0419)	validation_time 0.0004 (0.0006)	train_time 0.0511 (0.0412)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5164000123739243, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.53it/s] 12%|#1        | 3/26 [00:00<00:02, 10.77it/s] 19%|#9        | 5/26 [00:00<00:01, 13.25it/s] 27%|##6       | 7/26 [00:00<00:01, 14.66it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 15.95it/s] 50%|#####     | 13/26 [00:00<00:00, 16.39it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.79it/s] 81%|########  | 21/26 [00:01<00:00, 16.82it/s] 88%|########8 | 23/26 [00:01<00:00, 16.84it/s] 96%|#########6| 25/26 [00:01<00:00, 16.89it/s]100%|##########| 26/26 [00:01<00:00, 15.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.45 (  0.51)	train_minacc   0.55 (  0.51)	train_majacc   0.43 (  0.52)	train_corr   0.00 (  0.00)	l1 15.0497 (15.0479)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.29it/s] 15%|#5        | 4/26 [00:00<00:01, 19.78it/s] 38%|###8      | 10/26 [00:00<00:00, 36.43it/s]                                                38%|###8      | 10/26 [00:00<00:00, 36.43it/s] 62%|######1   | 16/26 [00:00<00:00, 41.22it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.22it/s] 85%|########4 | 22/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 37.73it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.56 (  0.56)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.53 (  0.49)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.53 (  0.49)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.08 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.52)	test_minacc   0.49 (  0.50)	test_majacc   0.58 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.52)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.55 (  0.50)	test_majacc   0.43 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.43 (  0.52)	test_corr_d  -0.14 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.67it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 42/  1]	epoch_time 0.0499 (0.0421)	validation_time 0.0004 (0.0006)	train_time 0.0495 (0.0414)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5123000148534774, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.59it/s] 12%|#1        | 3/26 [00:00<00:02, 10.95it/s] 19%|#9        | 5/26 [00:00<00:01, 13.34it/s] 27%|##6       | 7/26 [00:00<00:01, 14.80it/s] 35%|###4      | 9/26 [00:00<00:01, 15.53it/s] 42%|####2     | 11/26 [00:00<00:00, 16.12it/s] 50%|#####     | 13/26 [00:00<00:00, 16.43it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.72it/s] 65%|######5   | 17/26 [00:01<00:00, 16.67it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.92it/s] 96%|#########6| 25/26 [00:01<00:00, 16.98it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.45 (  0.51)	train_minacc   0.55 (  0.49)	train_majacc   0.43 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0531 (15.0514)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.72it/s] 23%|##3       | 6/26 [00:00<00:00, 30.35it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.35it/s] 46%|####6     | 12/26 [00:00<00:00, 38.86it/s] 69%|######9   | 18/26 [00:00<00:00, 45.66it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.66it/s] 92%|#########2| 24/26 [00:00<00:00, 46.71it/s]100%|##########| 26/26 [00:00<00:00, 39.10it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.56 (  0.56)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.53 (  0.47)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.53 (  0.47)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.08 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.51)	test_minacc   0.51 (  0.48)	test_majacc   0.58 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.51)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.58 (  0.52)	test_corr_d   0.09 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.51)	test_minacc   0.55 (  0.49)	test_majacc   0.43 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.51)	test_minacc_d   0.55 (  0.49)	test_majacc_d   0.43 (  0.51)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 43/  1]	epoch_time 0.0502 (0.0423)	validation_time 0.0003 (0.0006)	train_time 0.0498 (0.0416)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5088000102043152, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.80it/s] 12%|#1        | 3/26 [00:00<00:02, 10.78it/s] 19%|#9        | 5/26 [00:00<00:01, 13.23it/s] 27%|##6       | 7/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 16.04it/s] 50%|#####     | 13/26 [00:00<00:00, 16.19it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.41it/s] 65%|######5   | 17/26 [00:01<00:00, 16.32it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.70it/s] 88%|########8 | 23/26 [00:01<00:00, 16.86it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.44 (  0.51)	train_minacc   0.55 (  0.49)	train_majacc   0.42 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0562 (15.0546)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.66it/s] 35%|###4      | 9/26 [00:00<00:00, 39.23it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.53it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.53it/s] 81%|########  | 21/26 [00:00<00:00, 47.61it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.50 (  0.46)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.50 (  0.46)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.51)	test_minacc   0.51 (  0.47)	test_majacc   0.57 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.51)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.57 (  0.51)	test_corr_d   0.09 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.55 (  0.48)	test_majacc   0.42 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.42 (  0.51)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.40it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 44/  1]	epoch_time 0.0492 (0.0424)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0418)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5046000072956085, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.13it/s] 12%|#1        | 3/26 [00:00<00:02, 10.69it/s] 19%|#9        | 5/26 [00:00<00:01, 13.34it/s] 27%|##6       | 7/26 [00:00<00:01, 14.87it/s] 35%|###4      | 9/26 [00:00<00:01, 15.78it/s] 42%|####2     | 11/26 [00:00<00:00, 16.36it/s] 50%|#####     | 13/26 [00:00<00:00, 16.68it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.87it/s] 65%|######5   | 17/26 [00:01<00:00, 17.09it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.25it/s] 81%|########  | 21/26 [00:01<00:00, 17.36it/s] 88%|########8 | 23/26 [00:01<00:00, 17.46it/s] 96%|#########6| 25/26 [00:01<00:00, 17.18it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.45 (  0.50)	train_minacc   0.57 (  0.48)	train_majacc   0.43 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0588 (15.0575)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.83it/s] 27%|##6       | 7/26 [00:00<00:00, 33.53it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.53it/s] 50%|#####     | 13/26 [00:00<00:00, 39.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.99it/s] 96%|#########6| 25/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 38.71it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.48 (  0.45)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.48 (  0.45)	test_majacc_d   0.49 (  0.51)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.50)	test_minacc   0.49 (  0.47)	test_majacc   0.56 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.50)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.56 (  0.51)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.45 (  0.50)	test_minacc   0.57 (  0.48)	test_majacc   0.43 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.45 (  0.50)	test_minacc_d   0.57 (  0.48)	test_majacc_d   0.43 (  0.51)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 45/  1]	epoch_time 0.0500 (0.0426)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0419)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5013000131845474, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 12%|#1        | 3/26 [00:00<00:01, 12.75it/s] 19%|#9        | 5/26 [00:00<00:01, 14.47it/s] 27%|##6       | 7/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:01, 15.82it/s] 42%|####2     | 11/26 [00:00<00:00, 16.29it/s] 50%|#####     | 13/26 [00:00<00:00, 16.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.75it/s] 65%|######5   | 17/26 [00:01<00:00, 16.88it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.94it/s] 81%|########  | 21/26 [00:01<00:00, 16.93it/s] 88%|########8 | 23/26 [00:01<00:00, 16.98it/s] 96%|#########6| 25/26 [00:01<00:00, 17.06it/s]100%|##########| 26/26 [00:01<00:00, 15.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.44 (  0.50)	train_minacc   0.55 (  0.48)	train_majacc   0.42 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0612 (15.0600)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.49it/s] 27%|##6       | 7/26 [00:00<00:00, 36.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.35it/s] 46%|####6     | 12/26 [00:00<00:00, 41.43it/s] 69%|######9   | 18/26 [00:00<00:00, 46.24it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.24it/s] 92%|#########2| 24/26 [00:00<00:00, 48.13it/s]100%|##########| 26/26 [00:00<00:00, 39.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.50)	test_minacc   0.45 (  0.44)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.50 (  0.51)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.56 (  0.50)	test_minacc   0.49 (  0.47)	test_majacc   0.57 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.56 (  0.50)	test_minacc_d   0.49 (  0.47)	test_majacc_d   0.57 (  0.50)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.50)	test_minacc   0.55 (  0.48)	test_majacc   0.42 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.50)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.42 (  0.50)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.97it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 46/  1]	epoch_time 0.0489 (0.0427)	validation_time 0.0003 (0.0005)	train_time 0.0486 (0.0421)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.4972000088989735, 0.5240000486373901)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 12%|#1        | 3/26 [00:00<00:02, 10.37it/s] 19%|#9        | 5/26 [00:00<00:01, 13.09it/s] 27%|##6       | 7/26 [00:00<00:01, 14.36it/s] 35%|###4      | 9/26 [00:00<00:01, 15.16it/s] 42%|####2     | 11/26 [00:00<00:00, 15.77it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.34it/s] 65%|######5   | 17/26 [00:01<00:00, 16.61it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.79it/s] 88%|########8 | 23/26 [00:01<00:00, 16.87it/s] 96%|#########6| 25/26 [00:01<00:00, 16.97it/s]100%|##########| 26/26 [00:01<00:00, 14.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.43 (  0.50)	train_minacc   0.52 (  0.48)	train_majacc   0.41 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0632 (15.0622)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.19it/s] 31%|###       | 8/26 [00:00<00:00, 40.17it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.17it/s] 50%|#####     | 13/26 [00:00<00:00, 42.31it/s] 69%|######9   | 18/26 [00:00<00:00, 45.01it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.01it/s] 92%|#########2| 24/26 [00:00<00:00, 49.44it/s]100%|##########| 26/26 [00:00<00:00, 41.21it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.45 (  0.44)	test_majacc   0.48 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.48 (  0.50)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.49)	test_minacc   0.51 (  0.47)	test_majacc   0.55 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.49)	test_minacc_d   0.51 (  0.47)	test_majacc_d   0.55 (  0.49)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.43 (  0.49)	test_minacc   0.52 (  0.48)	test_majacc   0.41 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.43 (  0.49)	test_minacc_d   0.52 (  0.48)	test_majacc_d   0.41 (  0.49)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.84it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 47/  1]	epoch_time 0.0501 (0.0429)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0422)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.49090000823140145, 0.5230000019073486)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.77it/s] 12%|#1        | 3/26 [00:00<00:02, 10.74it/s] 19%|#9        | 5/26 [00:00<00:01, 13.05it/s] 27%|##6       | 7/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:01, 15.06it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 16.12it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.17it/s] 65%|######5   | 17/26 [00:01<00:00, 16.28it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.35it/s] 81%|########  | 21/26 [00:01<00:00, 16.56it/s] 88%|########8 | 23/26 [00:01<00:00, 16.47it/s] 96%|#########6| 25/26 [00:01<00:00, 16.50it/s]100%|##########| 26/26 [00:01<00:00, 14.82it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.42 (  0.49)	train_minacc   0.55 (  0.48)	train_majacc   0.40 (  0.49)	train_corr   0.00 (  0.00)	l1 15.0650 (15.0641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.08it/s] 27%|##6       | 7/26 [00:00<00:00, 37.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.38it/s] 46%|####6     | 12/26 [00:00<00:00, 42.91it/s] 65%|######5   | 17/26 [00:00<00:00, 43.47it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.47it/s] 88%|########8 | 23/26 [00:00<00:00, 48.31it/s]100%|##########| 26/26 [00:00<00:00, 39.64it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.46 (  0.48)	test_minacc   0.47 (  0.45)	test_majacc   0.46 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.46 (  0.48)	test_minacc_d   0.47 (  0.45)	test_majacc_d   0.46 (  0.49)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.51 (  0.48)	test_majacc   0.54 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.54 (  0.49)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.55 (  0.48)	test_majacc   0.39 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.39 (  0.48)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.19it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 48/  1]	epoch_time 0.0511 (0.0431)	validation_time 0.0004 (0.0005)	train_time 0.0506 (0.0424)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.4840000105500221, 0.527999997138977)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.44it/s] 12%|#1        | 3/26 [00:00<00:02,  9.80it/s] 19%|#9        | 5/26 [00:00<00:01, 12.28it/s] 27%|##6       | 7/26 [00:00<00:01, 13.96it/s] 35%|###4      | 9/26 [00:00<00:01, 14.79it/s] 42%|####2     | 11/26 [00:00<00:00, 15.43it/s] 50%|#####     | 13/26 [00:00<00:00, 15.90it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.15it/s] 65%|######5   | 17/26 [00:01<00:00, 16.12it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.12it/s] 81%|########  | 21/26 [00:01<00:00, 16.23it/s] 88%|########8 | 23/26 [00:01<00:00, 16.39it/s] 96%|#########6| 25/26 [00:01<00:00, 16.55it/s]100%|##########| 26/26 [00:01<00:00, 14.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.42 (  0.48)	train_minacc   0.55 (  0.48)	train_majacc   0.40 (  0.48)	train_corr   0.00 (  0.00)	l1 15.0666 (15.0658)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.96it/s] 27%|##6       | 7/26 [00:00<00:00, 34.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.63it/s] 50%|#####     | 13/26 [00:00<00:00, 40.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.84it/s] 96%|#########6| 25/26 [00:00<00:00, 47.40it/s]100%|##########| 26/26 [00:00<00:00, 40.13it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.52)	test_majacc   0.49 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.01 ( -0.01)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.44 (  0.47)	test_minacc   0.42 (  0.45)	test_majacc   0.44 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.42 (  0.45)	test_majacc_d   0.44 (  0.47)	test_corr_d  -0.08 (  0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.48)	test_minacc   0.51 (  0.48)	test_majacc   0.53 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.48)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.53 (  0.48)	test_corr_d   0.08 ( -0.01)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.42 (  0.48)	test_minacc   0.55 (  0.48)	test_majacc   0.40 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.42 (  0.48)	test_minacc_d   0.55 (  0.48)	test_majacc_d   0.40 (  0.48)	test_corr_d  -0.14 ( -0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.06it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.21 ( -0.21)
Overall Timing[ 49/  1]	epoch_time 0.0507 (0.0432)	validation_time 0.0004 (0.0005)	train_time 0.0503 (0.0426)
record: (train_acc, test_acc) (0.730000031709671, 0.6910000443458557)
last accs (train_acc, test_acc) (0.4752000077962875, 0.5240000486373901)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.162 MB of 0.162 MB uploadedwandb: \ 0.162 MB of 0.162 MB uploadedwandb: | 0.162 MB of 0.162 MB uploadedwandb: / 0.162 MB of 0.162 MB uploadedwandb: - 0.162 MB of 0.162 MB uploadedwandb: \ 0.162 MB of 0.162 MB uploadedwandb: | 0.162 MB of 0.162 MB uploadedwandb: / 0.162 MB of 0.162 MB uploadedwandb: - 0.162 MB of 0.162 MB uploadedwandb: \ 0.162 MB of 0.162 MB uploadedwandb: | 0.184 MB of 0.184 MB uploaded (0.003 MB deduped)wandb: / 0.510 MB of 0.510 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/epoch_time_val █▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▄▃▂▁▁▁▁▁▄▄▃▄▄▄▃▃▃▃▃▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/train_time_val █▁▁▂▂▁▁▂▁▁▁▁▁▂▁▁▂▂▁▃▅▄▂▁▁▁▁▁▅▄▄▄▄▅▄▄▄▄▄▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_avg ▇▆▇▆▇█▇▇▆▆▆▅▁▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_d_avg ▇▆▇▆▇█▇▇▆▆▆▅▁▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_d_val ▇▆▇▆▇█▇▇▆▆▆▅▁▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_val ▇▆▇▆▇█▇▇▆▆▆▅▁▁▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_avg ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_d_avg ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_d_val ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_val ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_corr_d_avg ██▇▇▇█▇▇▆▆▆▅▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_corr_d_val ██▇▇▇█▇▇▆▆▆▅▁▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_avg ████▇█▇▇▇▇▇▆▄▂▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_d_avg ████▇█▇▇▇▇▇▆▄▂▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_d_val ████▇█▇▇▇▇▇▆▄▂▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_val ████▇█▇▇▇▇▇▆▄▂▁▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_avg ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_d_avg ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_d_val ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_val ▁▁▂▂▃▁▂▃▅▃▅▆█▇▇▇▇▇▆▇▆▆▆▆▆▆▆▆▆▇▇▇▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/Loss_val █▅▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/l1_avg ▂▂▂▁▁▁▂▃▅▆▆▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/l1_val ▂▂▁▁▁▂▂▃▅▆▇████████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_acc_avg ▇███████████▇▄▃▂▂▂▂▃▁▁▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_acc_val ▇▇██▇█████▇█▆▄▃▃▂▃▃▃▃▃▃▃▃▃▃▃▂▃▂▂▂▂▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_majacc_avg ▇██████████▇▆▃▂▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_majacc_val █████████▇▇▇▅▃▃▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_minacc_avg ▂▁▁▁▂▂▃▃▃▃▃▄▆██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_minacc_val ▁▁▂▂▃▂▂▄▄▄▃▅▇██▇▆▆▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▇▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_nll_avg ▅▃▂▂▂▂▁▁▁▁▁▁▃▇▇█████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_nll_val ▃▃▃▂▂▂▂▂▁▁▁▁▅▇▇█████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_penalty_val █▅▇▄▃▄▄▂▂▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/epoch_time_val 0.05074
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/train_time_val 0.05035
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/diagnostics/validation_time_val 0.00038
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_d_avg 0.6926
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_d_val 0.6926
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/Loss_val 0.6926
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_avg 0.524
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_d_avg 0.524
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_d_val 0.524
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_acc_val 0.524
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_corr_d_avg -0.20686
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_corr_d_val -0.20686
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_avg 0.51
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_d_avg 0.51
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_d_val 0.51
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_majacc_val 0.51
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_avg 0.52556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_d_avg 0.52556
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_d_val 0.52556
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/test/test_minacc_val 0.52556
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/l1_avg 15.06576
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/l1_val 15.06661
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_acc_avg 0.4798
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_acc_val 0.424
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_majacc_avg 0.48045
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_majacc_val 0.39904
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_minacc_avg 0.47824
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_minacc_val 0.54762
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_nll_avg 0.6931
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_nll_val 0.6934
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/weight_norm_avg 0.18861
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/49/logs/train/weight_norm_val 0.18846
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/jx2se145
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_113922-jx2se145/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_114214-8g28k11d
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8g28k11d
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1216
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (6022, 3, 32, 32) (5978, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:40,  1.60s/it] 19%|#9        | 5/26 [00:01<00:05,  3.78it/s] 35%|###4      | 9/26 [00:01<00:02,  7.41it/s] 50%|#####     | 13/26 [00:01<00:01, 11.20it/s] 65%|######5   | 17/26 [00:02<00:00, 15.17it/s] 81%|########  | 21/26 [00:02<00:00, 19.01it/s] 96%|#########6| 25/26 [00:02<00:00, 22.27it/s]100%|##########| 26/26 [00:02<00:00,  9.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.462 (12.212)	train_nll   0.46 (  0.52)	train_penalty   0.04 (  0.19)	weight_norm   9.00 ( 11.69)	train_acc   0.80 (  0.81)	train_minacc   0.06 (  0.08)	train_majacc   0.97 (  0.94)	train_corr   0.00 (  0.00)	l1 6.3805 (7.6120)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.30it/s] 27%|##6       | 7/26 [00:00<00:00, 36.32it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.32it/s] 46%|####6     | 12/26 [00:00<00:00, 40.92it/s] 69%|######9   | 18/26 [00:00<00:00, 46.16it/s]                                                69%|######9   | 18/26 [00:00<00:00, 46.16it/s] 92%|#########2| 24/26 [00:00<00:00, 47.51it/s]100%|##########| 26/26 [00:00<00:00, 40.46it/s]
Test: [   0/  26]	Loss 0.418 (0.418)	test_acc   0.84 (  0.84)	test_minacc   0.06 (  0.06)	test_majacc   0.97 (  0.97)	Loss_d 0.418 (0.418)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.414 (0.418)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.10)	test_majacc   0.96 (  0.97)	Loss_d 0.414 (0.418)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.10)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.446 (0.420)	test_acc   0.83 (  0.84)	test_minacc   0.09 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 0.446 (0.420)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.93)
Test: [  26/  26]	Loss 0.464 (0.422)	test_acc   0.80 (  0.84)	test_minacc   0.06 (  0.09)	test_majacc   0.97 (  0.97)	Loss_d 0.464 (0.422)	test_acc_d   0.80 (  0.84)	test_minacc_d   0.06 (  0.09)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.330 (1.330)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.330 (1.330)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
Test: [  1/  1]	Loss 1.330 (1.330)	test_acc   0.17 (  0.17)	test_minacc   0.08 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 1.330 (1.330)	test_acc_d   0.17 (  0.17)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.88 (  0.88)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0757 (0.0757)	validation_time 0.0068 (0.0068)	train_time 0.0649 (0.0649)
record: (train_acc, test_acc) (0.8413000223636627, 0.16900001466274261)
last accs (train_acc, test_acc) (0.8413000223636627, 0.16900001466274261)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 19%|#9        | 5/26 [00:00<00:01, 20.70it/s] 35%|###4      | 9/26 [00:00<00:00, 26.56it/s] 50%|#####     | 13/26 [00:00<00:00, 29.76it/s] 65%|######5   | 17/26 [00:00<00:00, 31.82it/s] 81%|########  | 21/26 [00:00<00:00, 33.08it/s] 96%|#########6| 25/26 [00:00<00:00, 33.81it/s]100%|##########| 26/26 [00:00<00:00, 28.28it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.854 (6.703)	train_nll   0.45 (  0.40)	train_penalty   0.05 (  0.05)	weight_norm   4.40 (  6.30)	train_acc   0.82 (  0.85)	train_minacc   0.19 (  0.04)	train_majacc   0.97 (  0.99)	train_corr   0.00 (  0.00)	l1 5.6798 (6.0778)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.68it/s] 35%|###4      | 9/26 [00:00<00:00, 36.88it/s]                                               35%|###4      | 9/26 [00:00<00:00, 36.88it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.31it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.31it/s] 81%|########  | 21/26 [00:00<00:00, 45.73it/s]100%|##########| 26/26 [00:00<00:00, 41.43it/s]
Test: [   0/  26]	Loss 0.391 (0.391)	test_acc   0.85 (  0.85)	test_minacc   0.19 (  0.19)	test_majacc   0.96 (  0.96)	Loss_d 0.391 (0.391)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.390 (0.386)	test_acc   0.84 (  0.84)	test_minacc   0.25 (  0.18)	test_majacc   0.94 (  0.96)	Loss_d 0.390 (0.386)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.25 (  0.18)	test_majacc_d   0.94 (  0.96)	test_corr_d   0.87 (  0.89)
Test: [  20/  26]	Loss 0.390 (0.386)	test_acc   0.86 (  0.85)	test_minacc   0.22 (  0.18)	test_majacc   0.98 (  0.96)	Loss_d 0.390 (0.386)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.22 (  0.18)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.406 (0.386)	test_acc   0.84 (  0.85)	test_minacc   0.19 (  0.18)	test_majacc   1.00 (  0.96)	Loss_d 0.406 (0.386)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.19 (  0.18)	test_majacc_d   1.00 (  0.96)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.63it/s]
Test: [  0/  1]	Loss 1.324 (1.324)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.324 (1.324)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
Test: [  1/  1]	Loss 1.324 (1.324)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.99 (  0.99)	Loss_d 1.324 (1.324)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.75 (  0.75)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0358 (0.0558)	validation_time 0.0003 (0.0036)	train_time 0.0354 (0.0502)
record: (train_acc, test_acc) (0.8465000202059746, 0.23900000751018524)
last accs (train_acc, test_acc) (0.8465000202059746, 0.23900000751018524)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.82it/s] 19%|#9        | 5/26 [00:00<00:00, 24.32it/s] 35%|###4      | 9/26 [00:00<00:00, 29.02it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.42it/s] 81%|########  | 21/26 [00:00<00:00, 33.51it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 29.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.922 (3.702)	train_nll   0.39 (  0.38)	train_penalty   0.03 (  0.04)	weight_norm   2.53 (  3.32)	train_acc   0.84 (  0.85)	train_minacc   0.29 (  0.10)	train_majacc   0.97 (  0.98)	train_corr   0.00 (  0.00)	l1 4.5690 (5.0374)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.31it/s] 23%|##3       | 6/26 [00:00<00:00, 28.89it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.89it/s] 46%|####6     | 12/26 [00:00<00:00, 40.57it/s] 65%|######5   | 17/26 [00:00<00:00, 43.16it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.16it/s] 88%|########8 | 23/26 [00:00<00:00, 46.82it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.82 (  0.82)	test_minacc   0.46 (  0.46)	test_majacc   0.88 (  0.88)	Loss_d 0.377 (0.377)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.88 (  0.88)	test_corr_d   0.79 (  0.79)
Test: [  10/  26]	Loss 0.384 (0.368)	test_acc   0.81 (  0.83)	test_minacc   0.40 (  0.41)	test_majacc   0.88 (  0.90)	Loss_d 0.384 (0.368)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.40 (  0.41)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.79 (  0.81)
Test: [  20/  26]	Loss 0.390 (0.375)	test_acc   0.81 (  0.82)	test_minacc   0.38 (  0.40)	test_majacc   0.90 (  0.90)	Loss_d 0.390 (0.375)	test_acc_d   0.81 (  0.82)	test_minacc_d   0.38 (  0.40)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.81 (  0.81)
Test: [  26/  26]	Loss 0.360 (0.373)	test_acc   0.85 (  0.83)	test_minacc   0.48 (  0.41)	test_majacc   0.94 (  0.90)	Loss_d 0.360 (0.373)	test_acc_d   0.85 (  0.83)	test_minacc_d   0.48 (  0.41)	test_majacc_d   0.94 (  0.90)	test_corr_d   0.81 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.06it/s]
Test: [  0/  1]	Loss 1.285 (1.285)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.95 (  0.95)	Loss_d 1.285 (1.285)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.42 (  0.42)
Test: [  1/  1]	Loss 1.285 (1.285)	test_acc   0.45 (  0.45)	test_minacc   0.40 (  0.40)	test_majacc   0.95 (  0.95)	Loss_d 1.285 (1.285)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.42 (  0.42)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0369 (0.0495)	validation_time 0.0004 (0.0025)	train_time 0.0365 (0.0456)
record: (train_acc, test_acc) (0.8279000277519226, 0.453000009059906)
last accs (train_acc, test_acc) (0.8279000277519226, 0.453000009059906)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.09it/s] 19%|#9        | 5/26 [00:00<00:00, 21.78it/s] 35%|###4      | 9/26 [00:00<00:00, 27.47it/s] 50%|#####     | 13/26 [00:00<00:00, 29.98it/s] 65%|######5   | 17/26 [00:00<00:00, 30.73it/s] 81%|########  | 21/26 [00:00<00:00, 31.46it/s] 96%|#########6| 25/26 [00:00<00:00, 32.18it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.982 (2.380)	train_nll   0.39 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   1.59 (  2.01)	train_acc   0.82 (  0.85)	train_minacc   0.48 (  0.10)	train_majacc   0.91 (  0.98)	train_corr   0.00 (  0.00)	l1 4.5710 (4.4143)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.07it/s] 27%|##6       | 7/26 [00:00<00:00, 34.69it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.69it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.88it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.88it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 39.55it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.86 (  0.86)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.344 (0.344)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.330 (0.347)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.330 (0.347)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.96)
Test: [  20/  26]	Loss 0.379 (0.350)	test_acc   0.84 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.379 (0.350)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  26/  26]	Loss 0.371 (0.350)	test_acc   0.81 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 0.371 (0.350)	test_acc_d   0.81 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.18it/s]
Test: [  0/  1]	Loss 1.916 (1.916)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.916 (1.916)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Test: [  1/  1]	Loss 1.916 (1.916)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.916 (1.916)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.93 (  0.93)
Overall Timing[  3/  1]	epoch_time 0.0368 (0.0463)	validation_time 0.0003 (0.0020)	train_time 0.0365 (0.0433)
record: (train_acc, test_acc) (0.8279000277519226, 0.453000009059906)
last accs (train_acc, test_acc) (0.8504000279307365, 0.11600000411272049)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.59it/s] 19%|#9        | 5/26 [00:00<00:00, 22.72it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 30.08it/s] 65%|######5   | 17/26 [00:00<00:00, 31.81it/s] 81%|########  | 21/26 [00:00<00:00, 33.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.94it/s]100%|##########| 26/26 [00:00<00:00, 28.72it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.399 (1.667)	train_nll   0.36 (  0.37)	train_penalty   0.01 (  0.04)	weight_norm   1.04 (  1.30)	train_acc   0.84 (  0.85)	train_minacc   0.38 (  0.11)	train_majacc   0.95 (  0.98)	train_corr   0.00 (  0.00)	l1 5.3118 (4.7717)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.15it/s] 27%|##6       | 7/26 [00:00<00:00, 28.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.01it/s] 50%|#####     | 13/26 [00:00<00:00, 35.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.38it/s] 96%|#########6| 25/26 [00:00<00:00, 44.13it/s]100%|##########| 26/26 [00:00<00:00, 35.44it/s]
Test: [   0/  26]	Loss 0.365 (0.365)	test_acc   0.85 (  0.85)	test_minacc   0.43 (  0.43)	test_majacc   0.92 (  0.92)	Loss_d 0.365 (0.365)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.351 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.42 (  0.44)	test_majacc   0.92 (  0.93)	Loss_d 0.351 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.42 (  0.44)	test_majacc_d   0.92 (  0.93)	test_corr_d   0.79 (  0.81)
Test: [  20/  26]	Loss 0.373 (0.351)	test_acc   0.85 (  0.85)	test_minacc   0.47 (  0.44)	test_majacc   0.93 (  0.92)	Loss_d 0.373 (0.351)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.47 (  0.44)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.80 (  0.81)
Test: [  26/  26]	Loss 0.316 (0.349)	test_acc   0.87 (  0.85)	test_minacc   0.48 (  0.44)	test_majacc   0.96 (  0.93)	Loss_d 0.316 (0.349)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.48 (  0.44)	test_majacc_d   0.96 (  0.93)	test_corr_d   0.81 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.15it/s]
Test: [  0/  1]	Loss 1.355 (1.355)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.355 (1.355)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.41 (  0.41)
Test: [  1/  1]	Loss 1.355 (1.355)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.93 (  0.93)	Loss_d 1.355 (1.355)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.41 (  0.41)
Overall Timing[  4/  1]	epoch_time 0.0373 (0.0445)	validation_time 0.0003 (0.0016)	train_time 0.0370 (0.0420)
record: (train_acc, test_acc) (0.8279000277519226, 0.453000009059906)
last accs (train_acc, test_acc) (0.8536000220775605, 0.44600000977516174)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.51it/s] 23%|##3       | 6/26 [00:00<00:00, 28.54it/s] 38%|###8      | 10/26 [00:00<00:00, 31.72it/s] 54%|#####3    | 14/26 [00:00<00:00, 33.50it/s] 69%|######9   | 18/26 [00:00<00:00, 33.73it/s] 85%|########4 | 22/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 34.15it/s]100%|##########| 26/26 [00:00<00:00, 30.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 1.046 (1.200)	train_nll   0.37 (  0.36)	train_penalty   0.03 (  0.03)	weight_norm   0.67 (  0.84)	train_acc   0.85 (  0.85)	train_minacc   0.33 (  0.15)	train_majacc   0.98 (  0.97)	train_corr   0.00 (  0.00)	l1 6.4445 (5.9659)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.65it/s] 23%|##3       | 6/26 [00:00<00:00, 28.72it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.72it/s] 42%|####2     | 11/26 [00:00<00:00, 37.37it/s] 62%|######1   | 16/26 [00:00<00:00, 41.90it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.90it/s] 85%|########4 | 22/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 37.81it/s]
Test: [   0/  26]	Loss 0.376 (0.376)	test_acc   0.84 (  0.84)	test_minacc   0.41 (  0.41)	test_majacc   0.91 (  0.91)	Loss_d 0.376 (0.376)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.41 (  0.41)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.76 (  0.76)
Test: [  10/  26]	Loss 0.367 (0.357)	test_acc   0.84 (  0.85)	test_minacc   0.53 (  0.50)	test_majacc   0.90 (  0.91)	Loss_d 0.367 (0.357)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.75 (  0.75)
Test: [  20/  26]	Loss 0.387 (0.365)	test_acc   0.84 (  0.84)	test_minacc   0.59 (  0.50)	test_majacc   0.88 (  0.90)	Loss_d 0.387 (0.365)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.59 (  0.50)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.73 (  0.75)
Test: [  26/  26]	Loss 0.320 (0.361)	test_acc   0.86 (  0.84)	test_minacc   0.54 (  0.51)	test_majacc   0.93 (  0.90)	Loss_d 0.320 (0.361)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.93 (  0.90)	test_corr_d   0.76 (  0.75)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 1.217 (1.217)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 1.217 (1.217)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 1.217 (1.217)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.94 (  0.94)	Loss_d 1.217 (1.217)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.25 (  0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0370 (0.0433)	validation_time 0.0004 (0.0014)	train_time 0.0366 (0.0411)
record: (train_acc, test_acc) (0.8411000260114669, 0.5120000243186951)
last accs (train_acc, test_acc) (0.8411000260114669, 0.5120000243186951)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.23it/s] 23%|##3       | 6/26 [00:00<00:00, 25.60it/s] 38%|###8      | 10/26 [00:00<00:00, 28.50it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.59it/s] 69%|######9   | 18/26 [00:00<00:00, 32.23it/s] 85%|########4 | 22/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 33.90it/s]100%|##########| 26/26 [00:00<00:00, 29.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.790 (0.910)	train_nll   0.34 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.45 (  0.56)	train_acc   0.85 (  0.85)	train_minacc   0.40 (  0.15)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 7.4895 (6.9790)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.13it/s] 23%|##3       | 6/26 [00:00<00:00, 28.12it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.12it/s] 46%|####6     | 12/26 [00:00<00:00, 40.30it/s] 65%|######5   | 17/26 [00:00<00:00, 41.65it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.65it/s] 88%|########8 | 23/26 [00:00<00:00, 46.92it/s]100%|##########| 26/26 [00:00<00:00, 37.50it/s]
Test: [   0/  26]	Loss 0.377 (0.377)	test_acc   0.82 (  0.82)	test_minacc   0.50 (  0.50)	test_majacc   0.87 (  0.87)	Loss_d 0.377 (0.377)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.75 (  0.75)
Test: [  10/  26]	Loss 0.360 (0.355)	test_acc   0.84 (  0.84)	test_minacc   0.65 (  0.60)	test_majacc   0.87 (  0.88)	Loss_d 0.360 (0.355)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.65 (  0.60)	test_majacc_d   0.87 (  0.88)	test_corr_d   0.72 (  0.74)
Test: [  20/  26]	Loss 0.391 (0.364)	test_acc   0.81 (  0.83)	test_minacc   0.56 (  0.58)	test_majacc   0.86 (  0.87)	Loss_d 0.391 (0.364)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.56 (  0.58)	test_majacc_d   0.86 (  0.87)	test_corr_d   0.72 (  0.74)
Test: [  26/  26]	Loss 0.295 (0.362)	test_acc   0.89 (  0.83)	test_minacc   0.67 (  0.58)	test_majacc   0.95 (  0.87)	Loss_d 0.295 (0.362)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.95 (  0.87)	test_corr_d   0.77 (  0.74)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.82it/s]
Test: [  0/  1]	Loss 1.269 (1.269)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.269 (1.269)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
Test: [  1/  1]	Loss 1.269 (1.269)	test_acc   0.55 (  0.55)	test_minacc   0.51 (  0.51)	test_majacc   0.90 (  0.90)	Loss_d 1.269 (1.269)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.25 (  0.25)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  6/  1]	epoch_time 0.0362 (0.0423)	validation_time 0.0004 (0.0013)	train_time 0.0358 (0.0404)
record: (train_acc, test_acc) (0.8295000337362289, 0.5530000329017639)
last accs (train_acc, test_acc) (0.8295000337362289, 0.5530000329017639)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.53it/s] 19%|#9        | 5/26 [00:00<00:00, 21.60it/s] 35%|###4      | 9/26 [00:00<00:00, 25.50it/s] 50%|#####     | 13/26 [00:00<00:00, 28.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.81it/s] 81%|########  | 21/26 [00:00<00:00, 32.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 27.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.664 (0.736)	train_nll   0.34 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.32 (  0.39)	train_acc   0.84 (  0.85)	train_minacc   0.19 (  0.17)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 9.4722 (8.5123)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.30it/s] 27%|##6       | 7/26 [00:00<00:00, 37.55it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.55it/s] 50%|#####     | 13/26 [00:00<00:00, 43.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 49.19it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 49.19it/s] 96%|#########6| 25/26 [00:00<00:00, 48.32it/s]100%|##########| 26/26 [00:00<00:00, 41.31it/s]
Test: [   0/  26]	Loss 0.347 (0.347)	test_acc   0.86 (  0.86)	test_minacc   0.48 (  0.48)	test_majacc   0.92 (  0.92)	Loss_d 0.347 (0.347)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  10/  26]	Loss 0.354 (0.339)	test_acc   0.85 (  0.85)	test_minacc   0.49 (  0.46)	test_majacc   0.90 (  0.92)	Loss_d 0.354 (0.339)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.49 (  0.46)	test_majacc_d   0.90 (  0.92)	test_corr_d   0.83 (  0.83)
Test: [  20/  26]	Loss 0.368 (0.347)	test_acc   0.85 (  0.85)	test_minacc   0.44 (  0.45)	test_majacc   0.93 (  0.92)	Loss_d 0.368 (0.347)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.44 (  0.45)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.84 (  0.83)
Test: [  26/  26]	Loss 0.324 (0.345)	test_acc   0.87 (  0.85)	test_minacc   0.54 (  0.46)	test_majacc   0.95 (  0.92)	Loss_d 0.324 (0.345)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.54 (  0.46)	test_majacc_d   0.95 (  0.92)	test_corr_d   0.82 (  0.83)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.37it/s]
Test: [  0/  1]	Loss 1.496 (1.496)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.97 (  0.97)	Loss_d 1.496 (1.496)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.496 (1.496)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.97 (  0.97)	Loss_d 1.496 (1.496)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.61 (  0.61)
Overall Timing[  7/  1]	epoch_time 0.0367 (0.0416)	validation_time 0.0003 (0.0012)	train_time 0.0363 (0.0399)
record: (train_acc, test_acc) (0.8295000337362289, 0.5530000329017639)
last accs (train_acc, test_acc) (0.8491000272035599, 0.4000000059604645)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.08it/s] 19%|#9        | 5/26 [00:00<00:01, 20.56it/s] 35%|###4      | 9/26 [00:00<00:00, 26.52it/s] 50%|#####     | 13/26 [00:00<00:00, 29.97it/s] 65%|######5   | 17/26 [00:00<00:00, 31.83it/s] 81%|########  | 21/26 [00:00<00:00, 33.11it/s] 96%|#########6| 25/26 [00:00<00:00, 33.85it/s]100%|##########| 26/26 [00:00<00:00, 28.25it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.588 (0.614)	train_nll   0.36 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.23 (  0.27)	train_acc   0.83 (  0.85)	train_minacc   0.12 (  0.22)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 11.2123 (10.3590)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 27%|##6       | 7/26 [00:00<00:00, 31.63it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.63it/s] 50%|#####     | 13/26 [00:00<00:00, 39.39it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.71it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 38.30it/s]
Test: [   0/  26]	Loss 0.343 (0.343)	test_acc   0.85 (  0.85)	test_minacc   0.26 (  0.26)	test_majacc   0.94 (  0.94)	Loss_d 0.343 (0.343)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.26 (  0.26)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.334 (0.318)	test_acc   0.86 (  0.86)	test_minacc   0.36 (  0.33)	test_majacc   0.94 (  0.95)	Loss_d 0.334 (0.318)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.36 (  0.33)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.87 (  0.87)
Test: [  20/  26]	Loss 0.357 (0.326)	test_acc   0.85 (  0.86)	test_minacc   0.34 (  0.33)	test_majacc   0.95 (  0.95)	Loss_d 0.357 (0.326)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.34 (  0.33)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.86 (  0.87)
Test: [  26/  26]	Loss 0.323 (0.325)	test_acc   0.84 (  0.86)	test_minacc   0.29 (  0.33)	test_majacc   0.98 (  0.95)	Loss_d 0.323 (0.325)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.29 (  0.33)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.87 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.99it/s]
Test: [  0/  1]	Loss 1.584 (1.584)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.584 (1.584)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Test: [  1/  1]	Loss 1.584 (1.584)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.584 (1.584)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.63 (  0.63)
Overall Timing[  8/  1]	epoch_time 0.0369 (0.0410)	validation_time 0.0004 (0.0011)	train_time 0.0365 (0.0395)
record: (train_acc, test_acc) (0.8295000337362289, 0.5530000329017639)
last accs (train_acc, test_acc) (0.8609000207185745, 0.3490000069141388)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 19%|#9        | 5/26 [00:00<00:00, 22.41it/s] 35%|###4      | 9/26 [00:00<00:00, 27.55it/s] 50%|#####     | 13/26 [00:00<00:00, 30.27it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.68it/s]100%|##########| 26/26 [00:00<00:00, 28.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.489 (0.520)	train_nll   0.33 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.16 (  0.19)	train_acc   0.86 (  0.85)	train_minacc   0.31 (  0.24)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 13.2827 (12.3037)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.98it/s] 27%|##6       | 7/26 [00:00<00:00, 36.11it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.11it/s] 50%|#####     | 13/26 [00:00<00:00, 41.58it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.16it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.16it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.381 (0.381)	test_acc   0.82 (  0.82)	test_minacc   0.61 (  0.61)	test_majacc   0.86 (  0.86)	Loss_d 0.381 (0.381)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.61 (  0.61)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.72 (  0.72)
Test: [  10/  26]	Loss 0.381 (0.361)	test_acc   0.81 (  0.83)	test_minacc   0.58 (  0.64)	test_majacc   0.84 (  0.86)	Loss_d 0.381 (0.361)	test_acc_d   0.81 (  0.83)	test_minacc_d   0.58 (  0.64)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.71 (  0.70)
Test: [  20/  26]	Loss 0.387 (0.372)	test_acc   0.83 (  0.82)	test_minacc   0.64 (  0.63)	test_majacc   0.86 (  0.86)	Loss_d 0.387 (0.372)	test_acc_d   0.83 (  0.82)	test_minacc_d   0.64 (  0.63)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.69)
Test: [  26/  26]	Loss 0.315 (0.369)	test_acc   0.86 (  0.83)	test_minacc   0.77 (  0.65)	test_majacc   0.88 (  0.86)	Loss_d 0.315 (0.369)	test_acc_d   0.86 (  0.83)	test_minacc_d   0.77 (  0.65)	test_majacc_d   0.88 (  0.86)	test_corr_d   0.66 (  0.69)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.81it/s]
Test: [  0/  1]	Loss 1.195 (1.195)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 1.195 (1.195)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.13 (  0.13)
Test: [  1/  1]	Loss 1.195 (1.195)	test_acc   0.57 (  0.57)	test_minacc   0.54 (  0.54)	test_majacc   0.87 (  0.87)	Loss_d 1.195 (1.195)	test_acc_d   0.57 (  0.57)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.87 (  0.87)	test_corr_d   0.13 (  0.13)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[  9/  1]	epoch_time 0.0362 (0.0406)	validation_time 0.0003 (0.0010)	train_time 0.0359 (0.0391)
record: (train_acc, test_acc) (0.8267000222206116, 0.5700000524520874)
last accs (train_acc, test_acc) (0.8267000222206116, 0.5700000524520874)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.43it/s] 19%|#9        | 5/26 [00:00<00:00, 22.71it/s] 35%|###4      | 9/26 [00:00<00:00, 27.65it/s] 50%|#####     | 13/26 [00:00<00:00, 30.04it/s] 65%|######5   | 17/26 [00:00<00:00, 32.02it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 28.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.464 (0.496)	train_nll   0.31 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.15 (  0.16)	train_acc   0.85 (  0.85)	train_minacc   0.42 (  0.25)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 15.2032 (14.3215)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.61it/s] 23%|##3       | 6/26 [00:00<00:00, 29.06it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.06it/s] 46%|####6     | 12/26 [00:00<00:00, 38.30it/s] 69%|######9   | 18/26 [00:00<00:00, 45.59it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.59it/s] 92%|#########2| 24/26 [00:00<00:00, 45.89it/s]100%|##########| 26/26 [00:00<00:00, 39.39it/s]
Test: [   0/  26]	Loss 0.344 (0.344)	test_acc   0.85 (  0.85)	test_minacc   0.48 (  0.48)	test_majacc   0.91 (  0.91)	Loss_d 0.344 (0.344)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.81 (  0.81)
Test: [  10/  26]	Loss 0.314 (0.319)	test_acc   0.87 (  0.86)	test_minacc   0.51 (  0.51)	test_majacc   0.93 (  0.93)	Loss_d 0.314 (0.319)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.81 (  0.82)
Test: [  20/  26]	Loss 0.343 (0.326)	test_acc   0.85 (  0.86)	test_minacc   0.44 (  0.49)	test_majacc   0.93 (  0.92)	Loss_d 0.343 (0.326)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.93 (  0.92)	test_corr_d   0.82 (  0.81)
Test: [  26/  26]	Loss 0.284 (0.323)	test_acc   0.89 (  0.86)	test_minacc   0.60 (  0.50)	test_majacc   0.96 (  0.92)	Loss_d 0.284 (0.323)	test_acc_d   0.89 (  0.86)	test_minacc_d   0.60 (  0.50)	test_majacc_d   0.96 (  0.92)	test_corr_d   0.80 (  0.81)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.86it/s]
Test: [  0/  1]	Loss 1.410 (1.410)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.91 (  0.91)	Loss_d 1.410 (1.410)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.38 (  0.38)
Test: [  1/  1]	Loss 1.410 (1.410)	test_acc   0.48 (  0.48)	test_minacc   0.43 (  0.43)	test_majacc   0.91 (  0.91)	Loss_d 1.410 (1.410)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.38 (  0.38)
Overall Timing[ 10/  1]	epoch_time 0.0369 (0.0402)	validation_time 0.0005 (0.0010)	train_time 0.0364 (0.0389)
record: (train_acc, test_acc) (0.8267000222206116, 0.5700000524520874)
last accs (train_acc, test_acc) (0.8574000262618064, 0.4780000150203705)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.20it/s] 19%|#9        | 5/26 [00:00<00:00, 21.47it/s] 35%|###4      | 9/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 29.52it/s] 65%|######5   | 17/26 [00:00<00:00, 31.46it/s] 81%|########  | 21/26 [00:00<00:00, 32.81it/s] 96%|#########6| 25/26 [00:00<00:00, 33.86it/s]100%|##########| 26/26 [00:00<00:00, 28.48it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.454 (0.464)	train_nll   0.33 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.84 (  0.85)	train_minacc   0.29 (  0.24)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 17.0810 (16.2363)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.65it/s] 23%|##3       | 6/26 [00:00<00:00, 26.16it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.16it/s] 46%|####6     | 12/26 [00:00<00:00, 39.17it/s] 65%|######5   | 17/26 [00:00<00:00, 41.85it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.85it/s] 88%|########8 | 23/26 [00:00<00:00, 47.05it/s]100%|##########| 26/26 [00:00<00:00, 37.49it/s]
Test: [   0/  26]	Loss 0.385 (0.385)	test_acc   0.82 (  0.82)	test_minacc   0.59 (  0.59)	test_majacc   0.85 (  0.85)	Loss_d 0.385 (0.385)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.85 (  0.85)	test_corr_d   0.73 (  0.73)
Test: [  10/  26]	Loss 0.378 (0.363)	test_acc   0.82 (  0.83)	test_minacc   0.65 (  0.64)	test_majacc   0.84 (  0.86)	Loss_d 0.378 (0.363)	test_acc_d   0.82 (  0.83)	test_minacc_d   0.65 (  0.64)	test_majacc_d   0.84 (  0.86)	test_corr_d   0.69 (  0.71)
Test: [  20/  26]	Loss 0.383 (0.374)	test_acc   0.82 (  0.82)	test_minacc   0.64 (  0.64)	test_majacc   0.86 (  0.86)	Loss_d 0.383 (0.374)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.86 (  0.86)	test_corr_d   0.68 (  0.70)
Test: [  26/  26]	Loss 0.284 (0.369)	test_acc   0.89 (  0.83)	test_minacc   0.81 (  0.65)	test_majacc   0.91 (  0.86)	Loss_d 0.284 (0.369)	test_acc_d   0.89 (  0.83)	test_minacc_d   0.81 (  0.65)	test_majacc_d   0.91 (  0.86)	test_corr_d   0.69 (  0.70)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.62it/s]
Test: [  0/  1]	Loss 1.160 (1.160)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 1.160 (1.160)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
Test: [  1/  1]	Loss 1.160 (1.160)	test_acc   0.58 (  0.58)	test_minacc   0.55 (  0.55)	test_majacc   0.89 (  0.89)	Loss_d 1.160 (1.160)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.55 (  0.55)	test_majacc_d   0.89 (  0.89)	test_corr_d   0.17 (  0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/50/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0376 (0.0400)	validation_time 0.0005 (0.0009)	train_time 0.0371 (0.0387)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 23.31it/s] 35%|###4      | 9/26 [00:00<00:00, 28.80it/s] 50%|#####     | 13/26 [00:00<00:00, 31.66it/s] 65%|######5   | 17/26 [00:00<00:00, 32.26it/s] 81%|########  | 21/26 [00:00<00:00, 33.33it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 29.01it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.439 (0.467)	train_nll   0.32 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.12 (  0.13)	train_acc   0.87 (  0.86)	train_minacc   0.46 (  0.26)	train_majacc   0.97 (  0.96)	train_corr   0.00 (  0.00)	l1 18.2747 (17.7848)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.28it/s] 27%|##6       | 7/26 [00:00<00:00, 36.17it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.17it/s] 50%|#####     | 13/26 [00:00<00:00, 41.61it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.08it/s]100%|##########| 26/26 [00:00<00:00, 39.76it/s]
Test: [   0/  26]	Loss 0.340 (0.340)	test_acc   0.84 (  0.84)	test_minacc   0.50 (  0.50)	test_majacc   0.90 (  0.90)	Loss_d 0.340 (0.340)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.338 (0.325)	test_acc   0.84 (  0.85)	test_minacc   0.56 (  0.53)	test_majacc   0.89 (  0.90)	Loss_d 0.338 (0.325)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.56 (  0.53)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.80 (  0.80)
Test: [  20/  26]	Loss 0.359 (0.333)	test_acc   0.83 (  0.84)	test_minacc   0.53 (  0.52)	test_majacc   0.89 (  0.90)	Loss_d 0.359 (0.333)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.89 (  0.90)	test_corr_d   0.79 (  0.80)
Test: [  26/  26]	Loss 0.306 (0.331)	test_acc   0.89 (  0.85)	test_minacc   0.62 (  0.52)	test_majacc   0.96 (  0.90)	Loss_d 0.306 (0.331)	test_acc_d   0.89 (  0.85)	test_minacc_d   0.62 (  0.52)	test_majacc_d   0.96 (  0.90)	test_corr_d   0.79 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.76it/s]
Test: [  0/  1]	Loss 1.352 (1.352)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.352 (1.352)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.352 (1.352)	test_acc   0.47 (  0.47)	test_minacc   0.42 (  0.42)	test_majacc   0.92 (  0.92)	Loss_d 1.352 (1.352)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.42 (  0.42)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.40 (  0.40)
Overall Timing[ 12/  1]	epoch_time 0.0363 (0.0397)	validation_time 0.0003 (0.0009)	train_time 0.0360 (0.0385)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.8466000269055367, 0.4690000116825104)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.49it/s] 19%|#9        | 5/26 [00:00<00:00, 25.74it/s] 35%|###4      | 9/26 [00:00<00:00, 30.57it/s] 50%|#####     | 13/26 [00:00<00:00, 32.63it/s] 65%|######5   | 17/26 [00:00<00:00, 33.76it/s] 81%|########  | 21/26 [00:00<00:00, 34.45it/s] 96%|#########6| 25/26 [00:00<00:00, 35.08it/s]100%|##########| 26/26 [00:00<00:00, 30.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.435 (0.436)	train_nll   0.34 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.10)	train_acc   0.86 (  0.86)	train_minacc   0.42 (  0.29)	train_majacc   0.96 (  0.96)	train_corr   0.00 (  0.00)	l1 19.2312 (18.9276)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.39it/s] 31%|###       | 8/26 [00:00<00:00, 40.75it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.75it/s] 50%|#####     | 13/26 [00:00<00:00, 41.82it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.73it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.73it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 41.41it/s]
Test: [   0/  26]	Loss 0.348 (0.348)	test_acc   0.85 (  0.85)	test_minacc   0.52 (  0.52)	test_majacc   0.90 (  0.90)	Loss_d 0.348 (0.348)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.90 (  0.90)	test_corr_d   0.80 (  0.80)
Test: [  10/  26]	Loss 0.340 (0.335)	test_acc   0.85 (  0.85)	test_minacc   0.65 (  0.57)	test_majacc   0.88 (  0.90)	Loss_d 0.340 (0.335)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.65 (  0.57)	test_majacc_d   0.88 (  0.90)	test_corr_d   0.76 (  0.79)
Test: [  20/  26]	Loss 0.375 (0.342)	test_acc   0.82 (  0.84)	test_minacc   0.53 (  0.57)	test_majacc   0.88 (  0.89)	Loss_d 0.375 (0.342)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.53 (  0.57)	test_majacc_d   0.88 (  0.89)	test_corr_d   0.77 (  0.78)
Test: [  26/  26]	Loss 0.299 (0.339)	test_acc   0.90 (  0.84)	test_minacc   0.67 (  0.58)	test_majacc   0.95 (  0.89)	Loss_d 0.299 (0.339)	test_acc_d   0.90 (  0.84)	test_minacc_d   0.67 (  0.58)	test_majacc_d   0.95 (  0.89)	test_corr_d   0.80 (  0.78)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.05it/s]
Test: [  0/  1]	Loss 1.273 (1.273)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.93 (  0.93)	Loss_d 1.273 (1.273)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.40 (  0.40)
Test: [  1/  1]	Loss 1.273 (1.273)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.93 (  0.93)	Loss_d 1.273 (1.273)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.40 (  0.40)
Overall Timing[ 13/  1]	epoch_time 0.0360 (0.0395)	validation_time 0.0004 (0.0008)	train_time 0.0355 (0.0383)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.8428000192046166, 0.5170000195503235)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.46it/s] 19%|#9        | 5/26 [00:00<00:01, 18.92it/s] 35%|###4      | 9/26 [00:00<00:00, 25.29it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 31.35it/s] 81%|########  | 21/26 [00:00<00:00, 33.01it/s] 96%|#########6| 25/26 [00:00<00:00, 33.46it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.403 (0.417)	train_nll   0.31 (  0.33)	train_penalty   0.02 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.86 (  0.86)	train_minacc   0.38 (  0.30)	train_majacc   0.98 (  0.96)	train_corr   0.00 (  0.00)	l1 20.1949 (19.7565)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.64it/s] 35%|###4      | 9/26 [00:00<00:00, 42.52it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.00it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.00it/s] 81%|########  | 21/26 [00:00<00:00, 49.50it/s]100%|##########| 26/26 [00:00<00:00, 43.48it/s]
Test: [   0/  26]	Loss 0.346 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.43 (  0.43)	test_majacc   0.91 (  0.91)	Loss_d 0.346 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.91 (  0.91)	test_corr_d   0.82 (  0.82)
Test: [  10/  26]	Loss 0.326 (0.321)	test_acc   0.84 (  0.85)	test_minacc   0.49 (  0.51)	test_majacc   0.90 (  0.91)	Loss_d 0.326 (0.321)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.80 (  0.80)
Test: [  20/  26]	Loss 0.358 (0.329)	test_acc   0.84 (  0.85)	test_minacc   0.53 (  0.51)	test_majacc   0.90 (  0.91)	Loss_d 0.358 (0.329)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.90 (  0.91)	test_corr_d   0.78 (  0.80)
Test: [  26/  26]	Loss 0.277 (0.326)	test_acc   0.92 (  0.85)	test_minacc   0.71 (  0.52)	test_majacc   0.97 (  0.91)	Loss_d 0.277 (0.326)	test_acc_d   0.92 (  0.85)	test_minacc_d   0.71 (  0.52)	test_majacc_d   0.97 (  0.91)	test_corr_d   0.79 (  0.80)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.89it/s]
Test: [  0/  1]	Loss 1.344 (1.344)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 1.344 (1.344)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.44 (  0.44)
Test: [  1/  1]	Loss 1.344 (1.344)	test_acc   0.45 (  0.45)	test_minacc   0.39 (  0.39)	test_majacc   0.92 (  0.92)	Loss_d 1.344 (1.344)	test_acc_d   0.45 (  0.45)	test_minacc_d   0.39 (  0.39)	test_majacc_d   0.92 (  0.92)	test_corr_d   0.44 (  0.44)
Overall Timing[ 14/  1]	epoch_time 0.0361 (0.0392)	validation_time 0.0003 (0.0008)	train_time 0.0358 (0.0381)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.8519000242352486, 0.445000022649765)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 21.93it/s] 35%|###4      | 9/26 [00:00<00:00, 26.80it/s] 50%|#####     | 13/26 [00:00<00:00, 30.08it/s] 65%|######5   | 17/26 [00:00<00:00, 31.96it/s] 81%|########  | 21/26 [00:00<00:00, 33.17it/s] 96%|#########6| 25/26 [00:00<00:00, 33.73it/s]100%|##########| 26/26 [00:00<00:00, 28.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.000 (0.161)	train_nll   0.67 (  0.48)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.57 (  0.74)	train_minacc   0.40 (  0.46)	train_majacc   0.61 (  0.80)	train_corr   0.00 (  0.00)	l1 20.7208 (20.6296)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 27%|##6       | 7/26 [00:00<00:00, 29.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.25it/s] 50%|#####     | 13/26 [00:00<00:00, 40.05it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.14it/s] 96%|#########6| 25/26 [00:00<00:00, 46.94it/s]100%|##########| 26/26 [00:00<00:00, 37.79it/s]
Test: [   0/  26]	Loss 0.717 (0.717)	test_acc   0.46 (  0.46)	test_minacc   0.46 (  0.46)	test_majacc   0.46 (  0.46)	Loss_d 0.717 (0.717)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.46 (  0.46)	test_corr_d  -0.26 ( -0.26)
Test: [  10/  26]	Loss 0.713 (0.708)	test_acc   0.44 (  0.47)	test_minacc   0.56 (  0.50)	test_majacc   0.42 (  0.46)	Loss_d 0.713 (0.708)	test_acc_d   0.44 (  0.47)	test_minacc_d   0.56 (  0.50)	test_majacc_d   0.42 (  0.46)	test_corr_d  -0.20 ( -0.18)
Test: [  20/  26]	Loss 0.707 (0.707)	test_acc   0.46 (  0.47)	test_minacc   0.55 (  0.50)	test_majacc   0.44 (  0.46)	Loss_d 0.707 (0.707)	test_acc_d   0.46 (  0.47)	test_minacc_d   0.55 (  0.50)	test_majacc_d   0.44 (  0.46)	test_corr_d  -0.20 ( -0.20)
Test: [  26/  26]	Loss 0.705 (0.708)	test_acc   0.46 (  0.46)	test_minacc   0.52 (  0.50)	test_majacc   0.45 (  0.46)	Loss_d 0.705 (0.708)	test_acc_d   0.46 (  0.46)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.45 (  0.46)	test_corr_d  -0.15 ( -0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 0.701 (0.701)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.59 (  0.59)	Loss_d 0.701 (0.701)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.701 (0.701)	test_acc   0.48 (  0.48)	test_minacc   0.46 (  0.46)	test_majacc   0.59 (  0.59)	Loss_d 0.701 (0.701)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.07 (  0.07)
Overall Timing[ 15/  1]	epoch_time 0.0363 (0.0390)	validation_time 0.0004 (0.0008)	train_time 0.0359 (0.0380)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.4647000057399273, 0.47700002789497375)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.27it/s] 27%|##6       | 7/26 [00:00<00:00, 28.90it/s] 42%|####2     | 11/26 [00:00<00:00, 31.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 32.85it/s] 73%|#######3  | 19/26 [00:00<00:00, 33.88it/s] 88%|########8 | 23/26 [00:00<00:00, 34.60it/s]100%|##########| 26/26 [00:00<00:00, 30.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.000 (0.000)	train_nll   0.70 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.52 (  0.54)	train_minacc   0.44 (  0.41)	train_majacc   0.54 (  0.57)	train_corr   0.00 (  0.00)	l1 20.5657 (20.6177)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.16it/s] 27%|##6       | 7/26 [00:00<00:00, 36.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.25it/s] 50%|#####     | 13/26 [00:00<00:00, 43.28it/s] 69%|######9   | 18/26 [00:00<00:00, 45.14it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.14it/s] 92%|#########2| 24/26 [00:00<00:00, 49.47it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]
Test: [   0/  26]	Loss 0.701 (0.701)	test_acc   0.47 (  0.47)	test_minacc   0.43 (  0.43)	test_majacc   0.48 (  0.48)	Loss_d 0.701 (0.701)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.14 ( -0.14)
Test: [  10/  26]	Loss 0.697 (0.698)	test_acc   0.51 (  0.50)	test_minacc   0.42 (  0.47)	test_majacc   0.52 (  0.50)	Loss_d 0.697 (0.698)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.42 (  0.47)	test_majacc_d   0.52 (  0.50)	test_corr_d  -0.08 ( -0.07)
Test: [  20/  26]	Loss 0.697 (0.698)	test_acc   0.51 (  0.50)	test_minacc   0.48 (  0.50)	test_majacc   0.51 (  0.50)	Loss_d 0.697 (0.698)	test_acc_d   0.51 (  0.50)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.51 (  0.50)	test_corr_d  -0.12 ( -0.08)
Test: [  26/  26]	Loss 0.700 (0.698)	test_acc   0.53 (  0.50)	test_minacc   0.52 (  0.50)	test_majacc   0.53 (  0.51)	Loss_d 0.700 (0.698)	test_acc_d   0.53 (  0.50)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.06 ( -0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.02it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.43 (  0.43)	test_minacc   0.40 (  0.40)	test_majacc   0.69 (  0.69)	Loss_d 0.703 (0.703)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.20 (  0.20)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.43 (  0.43)	test_minacc   0.40 (  0.40)	test_majacc   0.69 (  0.69)	Loss_d 0.703 (0.703)	test_acc_d   0.43 (  0.43)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.69 (  0.69)	test_corr_d   0.20 (  0.20)
Overall Timing[ 16/  1]	epoch_time 0.0351 (0.0388)	validation_time 0.0004 (0.0008)	train_time 0.0347 (0.0378)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5047000124752522, 0.42900002002716064)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.30it/s] 23%|##3       | 6/26 [00:00<00:00, 24.32it/s] 38%|###8      | 10/26 [00:00<00:00, 28.63it/s] 54%|#####3    | 14/26 [00:00<00:00, 30.97it/s] 69%|######9   | 18/26 [00:00<00:00, 32.33it/s] 85%|########4 | 22/26 [00:00<00:00, 33.48it/s]100%|##########| 26/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.60 (  0.55)	train_minacc   0.29 (  0.46)	train_majacc   0.67 (  0.56)	train_corr   0.00 (  0.00)	l1 20.5478 (20.5552)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.52it/s] 27%|##6       | 7/26 [00:00<00:00, 32.92it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.92it/s] 50%|#####     | 13/26 [00:00<00:00, 38.98it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.74it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.54it/s]100%|##########| 26/26 [00:00<00:00, 38.87it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.56 (  0.56)	test_minacc   0.30 (  0.30)	test_majacc   0.60 (  0.60)	Loss_d 0.691 (0.691)	test_acc_d   0.56 (  0.56)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.686 (0.686)	test_acc   0.63 (  0.62)	test_minacc   0.31 (  0.38)	test_majacc   0.68 (  0.66)	Loss_d 0.686 (0.686)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.31 (  0.38)	test_majacc_d   0.68 (  0.66)	test_corr_d   0.26 (  0.24)
Test: [  20/  26]	Loss 0.687 (0.686)	test_acc   0.60 (  0.61)	test_minacc   0.33 (  0.39)	test_majacc   0.66 (  0.65)	Loss_d 0.687 (0.686)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.33 (  0.39)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.18 (  0.23)
Test: [  26/  26]	Loss 0.686 (0.687)	test_acc   0.60 (  0.61)	test_minacc   0.29 (  0.38)	test_majacc   0.67 (  0.66)	Loss_d 0.686 (0.687)	test_acc_d   0.60 (  0.61)	test_minacc_d   0.29 (  0.38)	test_majacc_d   0.67 (  0.66)	test_corr_d   0.26 (  0.23)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.707 (0.707)	test_acc   0.38 (  0.38)	test_minacc   0.34 (  0.34)	test_majacc   0.75 (  0.75)	Loss_d 0.707 (0.707)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
Test: [  1/  1]	Loss 0.707 (0.707)	test_acc   0.38 (  0.38)	test_minacc   0.34 (  0.34)	test_majacc   0.75 (  0.75)	Loss_d 0.707 (0.707)	test_acc_d   0.38 (  0.38)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.27 (  0.27)
Overall Timing[ 17/  1]	epoch_time 0.0372 (0.0387)	validation_time 0.0004 (0.0007)	train_time 0.0368 (0.0378)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.61350001257658, 0.38100001215934753)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.12it/s] 19%|#9        | 5/26 [00:00<00:00, 24.10it/s] 35%|###4      | 9/26 [00:00<00:00, 28.99it/s] 50%|#####     | 13/26 [00:00<00:00, 31.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.83it/s] 81%|########  | 21/26 [00:00<00:00, 34.11it/s] 96%|#########6| 25/26 [00:00<00:00, 35.03it/s]100%|##########| 26/26 [00:00<00:00, 30.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.60 (  0.55)	train_minacc   0.35 (  0.46)	train_majacc   0.65 (  0.57)	train_corr   0.00 (  0.00)	l1 20.5426 (20.5440)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.77it/s] 27%|##6       | 7/26 [00:00<00:00, 33.90it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.90it/s] 50%|#####     | 13/26 [00:00<00:00, 41.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.65it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.65it/s] 96%|#########6| 25/26 [00:00<00:00, 47.18it/s]100%|##########| 26/26 [00:00<00:00, 39.18it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.35 (  0.35)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.59 (  0.58)	test_minacc   0.35 (  0.41)	test_majacc   0.64 (  0.61)	Loss_d 0.689 (0.689)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.35 (  0.41)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.16 (  0.14)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.57 (  0.58)	test_minacc   0.33 (  0.42)	test_majacc   0.62 (  0.61)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.33 (  0.42)	test_majacc_d   0.62 (  0.61)	test_corr_d   0.09 (  0.13)
Test: [  26/  26]	Loss 0.689 (0.690)	test_acc   0.58 (  0.58)	test_minacc   0.35 (  0.41)	test_majacc   0.64 (  0.61)	Loss_d 0.689 (0.690)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.35 (  0.41)	test_majacc_d   0.64 (  0.61)	test_corr_d   0.16 (  0.13)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.18it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.41 (  0.41)	test_minacc   0.38 (  0.38)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.19 (  0.19)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.41 (  0.41)	test_minacc   0.38 (  0.38)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.19 (  0.19)
Overall Timing[ 18/  1]	epoch_time 0.0368 (0.0386)	validation_time 0.0006 (0.0007)	train_time 0.0361 (0.0377)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5822000092864037, 0.4140000343322754)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.60it/s] 19%|#9        | 5/26 [00:00<00:00, 22.78it/s] 35%|###4      | 9/26 [00:00<00:00, 26.95it/s] 50%|#####     | 13/26 [00:00<00:00, 29.69it/s] 65%|######5   | 17/26 [00:00<00:00, 31.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.59 (  0.55)	train_minacc   0.33 (  0.46)	train_majacc   0.65 (  0.56)	train_corr   0.00 (  0.00)	l1 20.5399 (20.5411)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.42it/s] 31%|###       | 8/26 [00:00<00:00, 38.23it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.23it/s] 54%|#####3    | 14/26 [00:00<00:00, 46.12it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.93it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 51.01it/s]100%|##########| 26/26 [00:00<00:00, 42.65it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.33 (  0.33)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.62 (  0.59)	test_minacc   0.35 (  0.39)	test_majacc   0.66 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.35 (  0.39)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.18 (  0.16)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.57 (  0.59)	test_minacc   0.31 (  0.41)	test_majacc   0.62 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.31 (  0.41)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.11 (  0.15)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.58 (  0.59)	test_minacc   0.33 (  0.40)	test_majacc   0.64 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.18 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.72it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.703 (0.703)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.703 (0.703)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Overall Timing[ 19/  1]	epoch_time 0.0363 (0.0385)	validation_time 0.0003 (0.0007)	train_time 0.0360 (0.0376)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5923000084757805, 0.4000000059604645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.50it/s] 19%|#9        | 5/26 [00:00<00:00, 22.61it/s] 35%|###4      | 9/26 [00:00<00:00, 28.47it/s] 50%|#####     | 13/26 [00:00<00:00, 31.76it/s] 65%|######5   | 17/26 [00:00<00:00, 33.70it/s] 81%|########  | 21/26 [00:00<00:00, 34.83it/s] 96%|#########6| 25/26 [00:00<00:00, 35.12it/s]100%|##########| 26/26 [00:00<00:00, 29.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.58 (  0.55)	train_minacc   0.31 (  0.45)	train_majacc   0.65 (  0.57)	train_corr   0.00 (  0.00)	l1 20.5377 (20.5386)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.46it/s] 27%|##6       | 7/26 [00:00<00:00, 36.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.82it/s] 50%|#####     | 13/26 [00:00<00:00, 42.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.82it/s] 96%|#########6| 25/26 [00:00<00:00, 47.75it/s]100%|##########| 26/26 [00:00<00:00, 40.42it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.53 (  0.53)	test_minacc   0.31 (  0.31)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.689 (0.689)	test_acc   0.62 (  0.59)	test_minacc   0.35 (  0.39)	test_majacc   0.67 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.35 (  0.39)	test_majacc_d   0.67 (  0.63)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.57 (  0.59)	test_minacc   0.33 (  0.40)	test_majacc   0.62 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.10 (  0.15)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.59)	test_minacc   0.31 (  0.40)	test_majacc   0.64 (  0.63)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.31 (  0.40)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.18 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.20it/s]
Test: [  0/  1]	Loss 0.703 (0.703)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.703 (0.703)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.703 (0.703)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.703 (0.703)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Overall Timing[ 20/  1]	epoch_time 0.0353 (0.0384)	validation_time 0.0003 (0.0007)	train_time 0.0350 (0.0375)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5918000096678734, 0.4020000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.29it/s] 35%|###4      | 9/26 [00:00<00:00, 27.53it/s] 50%|#####     | 13/26 [00:00<00:00, 30.57it/s] 65%|######5   | 17/26 [00:00<00:00, 32.46it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.78it/s]100%|##########| 26/26 [00:00<00:00, 28.75it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.58 (  0.55)	train_minacc   0.31 (  0.44)	train_majacc   0.65 (  0.57)	train_corr   0.00 (  0.00)	l1 20.5359 (20.5367)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.63it/s] 31%|###       | 8/26 [00:00<00:00, 38.14it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.14it/s] 50%|#####     | 13/26 [00:00<00:00, 41.95it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.05it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.05it/s]100%|##########| 26/26 [00:00<00:00, 50.32it/s]100%|##########| 26/26 [00:00<00:00, 41.44it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.30 (  0.30)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.62 (  0.59)	test_minacc   0.35 (  0.38)	test_majacc   0.67 (  0.63)	Loss_d 0.689 (0.690)	test_acc_d   0.62 (  0.59)	test_minacc_d   0.35 (  0.38)	test_majacc_d   0.67 (  0.63)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.57 (  0.59)	test_minacc   0.33 (  0.40)	test_majacc   0.62 (  0.63)	Loss_d 0.689 (0.689)	test_acc_d   0.57 (  0.59)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.10 (  0.15)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.59)	test_minacc   0.31 (  0.39)	test_majacc   0.64 (  0.63)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.31 (  0.39)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.17 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.00it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Overall Timing[ 21/  1]	epoch_time 0.0365 (0.0383)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0374)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5920000096559525, 0.40300002694129944)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.06it/s] 19%|#9        | 5/26 [00:00<00:00, 23.21it/s] 35%|###4      | 9/26 [00:00<00:00, 29.12it/s] 50%|#####     | 13/26 [00:00<00:00, 31.89it/s] 65%|######5   | 17/26 [00:00<00:00, 32.90it/s] 81%|########  | 21/26 [00:00<00:00, 33.37it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 29.06it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.12 (  0.12)	train_acc   0.59 (  0.55)	train_minacc   0.31 (  0.44)	train_majacc   0.65 (  0.57)	train_corr   0.00 (  0.00)	l1 20.5342 (20.5349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.25it/s] 27%|##6       | 7/26 [00:00<00:00, 35.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.23it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.23it/s] 96%|#########6| 25/26 [00:00<00:00, 47.11it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.694 (0.694)	test_acc   0.54 (  0.54)	test_minacc   0.30 (  0.30)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.689 (0.690)	test_acc   0.63 (  0.59)	test_minacc   0.35 (  0.38)	test_majacc   0.67 (  0.63)	Loss_d 0.689 (0.690)	test_acc_d   0.63 (  0.59)	test_minacc_d   0.35 (  0.38)	test_majacc_d   0.67 (  0.63)	test_corr_d   0.18 (  0.15)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.57 (  0.60)	test_minacc   0.33 (  0.40)	test_majacc   0.62 (  0.63)	Loss_d 0.690 (0.690)	test_acc_d   0.57 (  0.60)	test_minacc_d   0.33 (  0.40)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.10 (  0.14)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.59)	test_minacc   0.31 (  0.39)	test_majacc   0.65 (  0.63)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.59)	test_minacc_d   0.31 (  0.39)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.17 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.60it/s]
Test: [  0/  1]	Loss 0.702 (0.702)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Test: [  1/  1]	Loss 0.702 (0.702)	test_acc   0.40 (  0.40)	test_minacc   0.36 (  0.36)	test_majacc   0.75 (  0.75)	Loss_d 0.702 (0.702)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.36 (  0.36)	test_majacc_d   0.75 (  0.75)	test_corr_d   0.22 (  0.22)
Overall Timing[ 22/  1]	epoch_time 0.0365 (0.0382)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0373)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5939000097513198, 0.4020000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.73it/s] 15%|#5        | 4/26 [00:00<00:01, 17.65it/s] 31%|###       | 8/26 [00:00<00:00, 25.17it/s] 46%|####6     | 12/26 [00:00<00:00, 29.20it/s] 62%|######1   | 16/26 [00:00<00:00, 30.99it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.51it/s] 92%|#########2| 24/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 27.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 336 tensor(-0.0096, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.008)	train_nll   0.69 (  0.68)	train_penalty   0.00 (  0.01)	weight_norm   0.17 (  0.14)	train_acc   0.53 (  0.59)	train_minacc   0.50 (  0.44)	train_majacc   0.54 (  0.61)	train_corr   0.00 (  0.00)	l1 13.4320 (14.9135)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.83it/s] 27%|##6       | 7/26 [00:00<00:00, 35.76it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.76it/s] 46%|####6     | 12/26 [00:00<00:00, 41.28it/s] 69%|######9   | 18/26 [00:00<00:00, 44.00it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.00it/s] 92%|#########2| 24/26 [00:00<00:00, 48.63it/s]100%|##########| 26/26 [00:00<00:00, 41.03it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.55 (  0.55)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.678 (0.691)	test_acc   0.59 (  0.54)	test_minacc   0.45 (  0.46)	test_majacc   0.61 (  0.56)	Loss_d 0.678 (0.691)	test_acc_d   0.59 (  0.54)	test_minacc_d   0.45 (  0.46)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.21 (  0.19)
Test: [  20/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.54)	test_minacc   0.47 (  0.48)	test_majacc   0.56 (  0.55)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.54)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.21 (  0.19)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.48)	test_majacc   0.54 (  0.55)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.17 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.39it/s]
Test: [  0/  1]	Loss 0.716 (0.716)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.716 (0.716)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.16 (  0.16)
Test: [  1/  1]	Loss 0.716 (0.716)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.716 (0.716)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.16 (  0.16)
Overall Timing[ 23/  1]	epoch_time 0.0363 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0358 (0.0373)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5419000095129013, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:00, 23.63it/s] 35%|###4      | 9/26 [00:00<00:00, 28.31it/s] 50%|#####     | 13/26 [00:00<00:00, 31.05it/s] 65%|######5   | 17/26 [00:00<00:00, 32.50it/s] 81%|########  | 21/26 [00:00<00:00, 33.63it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 29.27it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.18)	train_acc   0.56 (  0.56)	train_minacc   0.52 (  0.47)	train_majacc   0.56 (  0.57)	train_corr   0.00 (  0.00)	l1 12.7916 (12.9740)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.55it/s] 31%|###       | 8/26 [00:00<00:00, 40.28it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.28it/s] 50%|#####     | 13/26 [00:00<00:00, 42.08it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.64it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.64it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 40.35it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.675 (0.684)	test_acc   0.59 (  0.55)	test_minacc   0.45 (  0.47)	test_majacc   0.61 (  0.56)	Loss_d 0.675 (0.684)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.45 (  0.47)	test_majacc_d   0.61 (  0.56)	test_corr_d   0.22 (  0.21)
Test: [  20/  26]	Loss 0.683 (0.684)	test_acc   0.53 (  0.55)	test_minacc   0.45 (  0.49)	test_majacc   0.55 (  0.56)	Loss_d 0.683 (0.684)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.55 (  0.56)	test_corr_d   0.23 (  0.20)
Test: [  26/  26]	Loss 0.679 (0.684)	test_acc   0.56 (  0.55)	test_minacc   0.52 (  0.49)	test_majacc   0.56 (  0.56)	Loss_d 0.679 (0.684)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.52 (  0.49)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.22 (  0.21)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.708 (0.708)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.708 (0.708)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.11 (  0.11)
Test: [  1/  1]	Loss 0.708 (0.708)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.55 (  0.55)	Loss_d 0.708 (0.708)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.11 (  0.11)
Overall Timing[ 24/  1]	epoch_time 0.0378 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0374 (0.0373)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5474000148773194, 0.48900002241134644)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 18.36it/s] 35%|###4      | 9/26 [00:00<00:00, 23.77it/s] 50%|#####     | 13/26 [00:00<00:00, 27.17it/s] 65%|######5   | 17/26 [00:00<00:00, 29.41it/s] 81%|########  | 21/26 [00:00<00:00, 30.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.14it/s]100%|##########| 26/26 [00:00<00:00, 26.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.56 (  0.54)	train_minacc   0.54 (  0.49)	train_majacc   0.56 (  0.55)	train_corr   0.00 (  0.00)	l1 12.6941 (12.7367)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.42it/s] 31%|###       | 8/26 [00:00<00:00, 40.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.23it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.38it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.38it/s] 96%|#########6| 25/26 [00:00<00:00, 48.23it/s]100%|##########| 26/26 [00:00<00:00, 41.33it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.48)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.15 (  0.15)
Test: [  10/  26]	Loss 0.679 (0.687)	test_acc   0.58 (  0.54)	test_minacc   0.47 (  0.49)	test_majacc   0.59 (  0.55)	Loss_d 0.679 (0.687)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.59 (  0.55)	test_corr_d   0.17 (  0.15)
Test: [  20/  26]	Loss 0.686 (0.687)	test_acc   0.53 (  0.54)	test_minacc   0.47 (  0.51)	test_majacc   0.54 (  0.55)	Loss_d 0.686 (0.687)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.19 (  0.15)
Test: [  26/  26]	Loss 0.681 (0.687)	test_acc   0.56 (  0.54)	test_minacc   0.54 (  0.50)	test_majacc   0.56 (  0.55)	Loss_d 0.681 (0.687)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.54 (  0.50)	test_majacc_d   0.56 (  0.55)	test_corr_d   0.18 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.49it/s]
Test: [  0/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.699 (0.699)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.55 (  0.55)	Loss_d 0.699 (0.699)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Overall Timing[ 25/  1]	epoch_time 0.0376 (0.0381)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0373)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5436000126600266, 0.4960000216960907)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.06it/s] 23%|##3       | 6/26 [00:00<00:00, 26.61it/s] 38%|###8      | 10/26 [00:00<00:00, 30.04it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.00it/s] 69%|######9   | 18/26 [00:00<00:00, 33.03it/s] 85%|########4 | 22/26 [00:00<00:00, 33.69it/s]100%|##########| 26/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.62it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.58 (  0.54)	train_minacc   0.60 (  0.51)	train_majacc   0.57 (  0.55)	train_corr   0.00 (  0.00)	l1 12.6499 (12.6684)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 39.30it/s] 35%|###4      | 9/26 [00:00<00:00, 44.43it/s]                                               35%|###4      | 9/26 [00:00<00:00, 44.43it/s] 58%|#####7    | 15/26 [00:00<00:00, 50.35it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 50.35it/s] 81%|########  | 21/26 [00:00<00:00, 48.75it/s]100%|##########| 26/26 [00:00<00:00, 44.79it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.682 (0.689)	test_acc   0.57 (  0.54)	test_minacc   0.49 (  0.50)	test_majacc   0.59 (  0.54)	Loss_d 0.682 (0.689)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.49 (  0.50)	test_majacc_d   0.59 (  0.54)	test_corr_d   0.12 (  0.10)
Test: [  20/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.13 (  0.10)
Test: [  26/  26]	Loss 0.682 (0.689)	test_acc   0.58 (  0.54)	test_minacc   0.60 (  0.52)	test_majacc   0.57 (  0.54)	Loss_d 0.682 (0.689)	test_acc_d   0.58 (  0.54)	test_minacc_d   0.60 (  0.52)	test_majacc_d   0.57 (  0.54)	test_corr_d   0.14 (  0.11)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.90it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 26/  1]	epoch_time 0.0357 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0353 (0.0372)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5399000125527382, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.47it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 28.95it/s] 50%|#####     | 13/26 [00:00<00:00, 32.08it/s] 65%|######5   | 17/26 [00:00<00:00, 33.78it/s] 81%|########  | 21/26 [00:00<00:00, 34.92it/s] 96%|#########6| 25/26 [00:00<00:00, 35.25it/s]100%|##########| 26/26 [00:00<00:00, 30.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.62 (  0.53)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.6196 (12.6330)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.50it/s] 27%|##6       | 7/26 [00:00<00:00, 32.97it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.97it/s] 50%|#####     | 13/26 [00:00<00:00, 41.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.61it/s] 96%|#########6| 25/26 [00:00<00:00, 49.04it/s]100%|##########| 26/26 [00:00<00:00, 40.44it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.53 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.683 (0.690)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.51)	test_majacc   0.58 (  0.54)	Loss_d 0.683 (0.690)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.09 (  0.07)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.07)
Test: [  26/  26]	Loss 0.683 (0.690)	test_acc   0.57 (  0.54)	test_minacc   0.62 (  0.54)	test_majacc   0.56 (  0.54)	Loss_d 0.683 (0.690)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.12 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.29it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 27/  1]	epoch_time 0.0346 (0.0379)	validation_time 0.0004 (0.0006)	train_time 0.0342 (0.0371)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5399000111818314, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.86it/s] 19%|#9        | 5/26 [00:00<00:01, 20.55it/s] 35%|###4      | 9/26 [00:00<00:00, 26.47it/s] 50%|#####     | 13/26 [00:00<00:00, 29.71it/s] 65%|######5   | 17/26 [00:00<00:00, 31.48it/s] 81%|########  | 21/26 [00:00<00:00, 32.20it/s] 96%|#########6| 25/26 [00:00<00:00, 33.22it/s]100%|##########| 26/26 [00:00<00:00, 27.66it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.62 (  0.54)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5989 (12.6081)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.00it/s] 31%|###       | 8/26 [00:00<00:00, 40.26it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.26it/s] 50%|#####     | 13/26 [00:00<00:00, 41.93it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.56it/s] 96%|#########6| 25/26 [00:00<00:00, 47.78it/s]100%|##########| 26/26 [00:00<00:00, 41.25it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.685 (0.690)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.52)	test_majacc   0.58 (  0.54)	Loss_d 0.685 (0.690)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.07 (  0.05)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.04)
Test: [  26/  26]	Loss 0.684 (0.690)	test_acc   0.57 (  0.54)	test_minacc   0.62 (  0.54)	test_majacc   0.55 (  0.54)	Loss_d 0.684 (0.690)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.62 (  0.54)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.46it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 28/  1]	epoch_time 0.0369 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0364 (0.0371)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5398000156283379, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.77it/s] 19%|#9        | 5/26 [00:00<00:00, 24.93it/s] 35%|###4      | 9/26 [00:00<00:00, 28.57it/s] 50%|#####     | 13/26 [00:00<00:00, 31.50it/s] 65%|######5   | 17/26 [00:00<00:00, 32.67it/s] 81%|########  | 21/26 [00:00<00:00, 34.08it/s] 96%|#########6| 25/26 [00:00<00:00, 34.16it/s]100%|##########| 26/26 [00:00<00:00, 29.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.56 (  0.54)	train_minacc   0.62 (  0.54)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5846 (12.5910)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 31%|###       | 8/26 [00:00<00:00, 37.81it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.81it/s] 50%|#####     | 13/26 [00:00<00:00, 40.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.03it/s] 96%|#########6| 25/26 [00:00<00:00, 46.86it/s]100%|##########| 26/26 [00:00<00:00, 39.75it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.54 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.686 (0.691)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.686 (0.691)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.06 (  0.03)
Test: [  20/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.50 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.50 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.03)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.685 (0.691)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 29/  1]	epoch_time 0.0353 (0.0378)	validation_time 0.0003 (0.0006)	train_time 0.0350 (0.0370)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5395000107884407, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.38it/s] 19%|#9        | 5/26 [00:00<00:01, 16.60it/s] 35%|###4      | 9/26 [00:00<00:00, 23.35it/s] 50%|#####     | 13/26 [00:00<00:00, 27.38it/s] 65%|######5   | 17/26 [00:00<00:00, 30.12it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.03it/s]100%|##########| 26/26 [00:00<00:00, 26.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.62 (  0.55)	train_majacc   0.55 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5745 (12.5791)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.39it/s] 23%|##3       | 6/26 [00:00<00:00, 29.01it/s]                                               23%|##3       | 6/26 [00:00<00:00, 29.01it/s] 46%|####6     | 12/26 [00:00<00:00, 37.93it/s] 69%|######9   | 18/26 [00:00<00:00, 44.94it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.94it/s] 92%|#########2| 24/26 [00:00<00:00, 45.77it/s]100%|##########| 26/26 [00:00<00:00, 38.92it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.687 (0.691)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.687 (0.691)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.04 (  0.02)
Test: [  20/  26]	Loss 0.692 (0.691)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.691)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.02)
Test: [  26/  26]	Loss 0.685 (0.691)	test_acc   0.56 (  0.54)	test_minacc   0.62 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.685 (0.691)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.62 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.08 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.88it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 30/  1]	epoch_time 0.0378 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0373 (0.0370)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5405000118911266, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 14.85it/s] 23%|##3       | 6/26 [00:00<00:00, 24.27it/s] 38%|###8      | 10/26 [00:00<00:00, 28.98it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.25it/s] 69%|######9   | 18/26 [00:00<00:00, 32.57it/s] 85%|########4 | 22/26 [00:00<00:00, 33.37it/s]100%|##########| 26/26 [00:00<00:00, 33.57it/s]100%|##########| 26/26 [00:00<00:00, 28.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5677 (12.5707)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.12it/s] 31%|###       | 8/26 [00:00<00:00, 35.56it/s]                                               31%|###       | 8/26 [00:00<00:00, 35.56it/s] 50%|#####     | 13/26 [00:00<00:00, 40.09it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.55it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.55it/s] 96%|#########6| 25/26 [00:00<00:00, 47.60it/s]100%|##########| 26/26 [00:00<00:00, 39.21it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.688 (0.691)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.688 (0.691)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.03 (  0.01)
Test: [  20/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.01)
Test: [  26/  26]	Loss 0.686 (0.691)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.686 (0.691)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.07 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.10 ( -0.10)
Overall Timing[ 31/  1]	epoch_time 0.0358 (0.0377)	validation_time 0.0004 (0.0006)	train_time 0.0354 (0.0370)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5405000109374524, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.74it/s] 23%|##3       | 6/26 [00:00<00:00, 26.15it/s] 38%|###8      | 10/26 [00:00<00:00, 29.76it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.63it/s] 69%|######9   | 18/26 [00:00<00:00, 32.83it/s] 85%|########4 | 22/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 29.49it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5629 (12.5650)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.46it/s] 31%|###       | 8/26 [00:00<00:00, 39.50it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.50it/s] 50%|#####     | 13/26 [00:00<00:00, 41.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.47it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.47it/s] 96%|#########6| 25/26 [00:00<00:00, 47.38it/s]100%|##########| 26/26 [00:00<00:00, 39.69it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.54)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 ( -0.00)
Test: [  26/  26]	Loss 0.687 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.687 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.07 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.36it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.56 (  0.56)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.09 ( -0.09)
Overall Timing[ 32/  1]	epoch_time 0.0359 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0355 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5404000109434128, 0.5200000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.12it/s] 19%|#9        | 5/26 [00:00<00:00, 22.98it/s] 35%|###4      | 9/26 [00:00<00:00, 28.51it/s] 50%|#####     | 13/26 [00:00<00:00, 31.02it/s] 65%|######5   | 17/26 [00:00<00:00, 32.66it/s] 81%|########  | 21/26 [00:00<00:00, 33.64it/s] 96%|#########6| 25/26 [00:00<00:00, 34.20it/s]100%|##########| 26/26 [00:00<00:00, 29.02it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5597 (12.5611)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.80it/s] 27%|##6       | 7/26 [00:00<00:00, 27.21it/s]                                               27%|##6       | 7/26 [00:00<00:00, 27.21it/s] 50%|#####     | 13/26 [00:00<00:00, 35.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.42it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.42it/s] 96%|#########6| 25/26 [00:00<00:00, 44.98it/s]100%|##########| 26/26 [00:00<00:00, 35.38it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.01 ( -0.01)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.06 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.76it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.08 ( -0.08)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.08 ( -0.08)
Overall Timing[ 33/  1]	epoch_time 0.0370 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0366 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.540600013256073, 0.5190000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 15%|#5        | 4/26 [00:00<00:01, 17.58it/s] 31%|###       | 8/26 [00:00<00:00, 24.98it/s] 46%|####6     | 12/26 [00:00<00:00, 28.71it/s] 62%|######1   | 16/26 [00:00<00:00, 30.87it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.42it/s] 92%|#########2| 24/26 [00:00<00:00, 32.97it/s]100%|##########| 26/26 [00:00<00:00, 27.35it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.19 (  0.19)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5578 (12.5586)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.30it/s] 31%|###       | 8/26 [00:00<00:00, 37.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 37.34it/s] 50%|#####     | 13/26 [00:00<00:00, 42.49it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.06it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.06it/s] 92%|#########2| 24/26 [00:00<00:00, 48.45it/s]100%|##########| 26/26 [00:00<00:00, 41.11it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.00 ( -0.01)
Test: [  26/  26]	Loss 0.688 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.688 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.06 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.73it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.07 ( -0.07)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.07 ( -0.07)
Overall Timing[ 34/  1]	epoch_time 0.0369 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0365 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5407000144124031, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 19%|#9        | 5/26 [00:00<00:00, 21.38it/s] 35%|###4      | 9/26 [00:00<00:00, 26.54it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 31.68it/s] 81%|########  | 21/26 [00:00<00:00, 33.13it/s] 96%|#########6| 25/26 [00:00<00:00, 33.87it/s]100%|##########| 26/26 [00:00<00:00, 28.38it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5567 (12.5571)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.75it/s] 31%|###       | 8/26 [00:00<00:00, 41.48it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.48it/s] 50%|#####     | 13/26 [00:00<00:00, 42.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.85it/s] 96%|#########6| 25/26 [00:00<00:00, 48.17it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.54 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.58 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.58 (  0.54)	test_corr_d   0.00 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.692)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.00 ( -0.02)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.06 ( -0.06)
Overall Timing[ 35/  1]	epoch_time 0.0365 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0361 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.54100001090765, 0.5180000066757202)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.79it/s] 19%|#9        | 5/26 [00:00<00:01, 19.28it/s] 35%|###4      | 9/26 [00:00<00:00, 25.10it/s] 50%|#####     | 13/26 [00:00<00:00, 28.25it/s] 65%|######5   | 17/26 [00:00<00:00, 30.39it/s] 81%|########  | 21/26 [00:00<00:00, 31.71it/s] 96%|#########6| 25/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:00<00:00, 26.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5562 (12.5563)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.80it/s] 35%|###4      | 9/26 [00:00<00:00, 40.97it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.31it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.96it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.96it/s]100%|##########| 26/26 [00:00<00:00, 51.54it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.55)	Loss_d 0.691 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.55)	test_corr_d  -0.00 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.02)
Test: [  26/  26]	Loss 0.689 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.55)	test_majacc   0.56 (  0.54)	Loss_d 0.689 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.55)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.05 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.81it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.05 ( -0.05)
Overall Timing[ 36/  1]	epoch_time 0.0368 (0.0376)	validation_time 0.0003 (0.0006)	train_time 0.0365 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5421000156998634, 0.5160000324249268)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.99it/s] 19%|#9        | 5/26 [00:00<00:01, 19.35it/s] 35%|###4      | 9/26 [00:00<00:00, 25.18it/s] 50%|#####     | 13/26 [00:00<00:00, 28.54it/s] 65%|######5   | 17/26 [00:00<00:00, 30.52it/s] 81%|########  | 21/26 [00:00<00:00, 31.40it/s] 96%|#########6| 25/26 [00:00<00:00, 32.16it/s]100%|##########| 26/26 [00:00<00:00, 26.80it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.55)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5561 (12.5561)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.82it/s] 19%|#9        | 5/26 [00:00<00:00, 26.00it/s] 38%|###8      | 10/26 [00:00<00:00, 34.83it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.83it/s] 62%|######1   | 16/26 [00:00<00:00, 38.75it/s]                                                62%|######1   | 16/26 [00:00<00:00, 38.75it/s] 85%|########4 | 22/26 [00:00<00:00, 43.96it/s]100%|##########| 26/26 [00:00<00:00, 36.92it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.58 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.58 (  0.55)	test_corr_d  -0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.01 ( -0.02)
Test: [  26/  26]	Loss 0.690 (0.692)	test_acc   0.57 (  0.54)	test_minacc   0.60 (  0.54)	test_majacc   0.56 (  0.54)	Loss_d 0.690 (0.692)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.56 (  0.54)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.54it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.03 ( -0.03)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.03 ( -0.03)
Overall Timing[ 37/  1]	epoch_time 0.0375 (0.0376)	validation_time 0.0004 (0.0006)	train_time 0.0371 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.543100014269352, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.62it/s] 15%|#5        | 4/26 [00:00<00:01, 18.29it/s] 31%|###       | 8/26 [00:00<00:00, 24.92it/s] 46%|####6     | 12/26 [00:00<00:00, 28.66it/s] 62%|######1   | 16/26 [00:00<00:00, 29.51it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.02it/s] 92%|#########2| 24/26 [00:00<00:00, 31.91it/s]100%|##########| 26/26 [00:00<00:00, 27.26it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.57 (  0.54)	train_minacc   0.60 (  0.54)	train_majacc   0.56 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5562 (12.5561)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.91it/s] 23%|##3       | 6/26 [00:00<00:00, 33.00it/s]                                               23%|##3       | 6/26 [00:00<00:00, 33.00it/s] 46%|####6     | 12/26 [00:00<00:00, 43.48it/s] 65%|######5   | 17/26 [00:00<00:00, 44.14it/s]                                                65%|######5   | 17/26 [00:00<00:00, 44.14it/s] 88%|########8 | 23/26 [00:00<00:00, 48.65it/s]100%|##########| 26/26 [00:00<00:00, 40.55it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.02 (  0.02)
Test: [  10/  26]	Loss 0.691 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.55)	test_corr_d  -0.01 ( -0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.55)	test_majacc   0.55 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.55)	test_majacc_d   0.55 (  0.54)	test_corr_d  -0.01 ( -0.02)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.56 (  0.54)	test_minacc   0.60 (  0.54)	test_majacc   0.55 (  0.54)	Loss_d 0.690 (0.693)	test_acc_d   0.56 (  0.54)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.02 ( -0.02)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.57 (  0.57)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.02 ( -0.02)
Overall Timing[ 38/  1]	epoch_time 0.0374 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0370 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5437000128626823, 0.51500004529953)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 21.13it/s] 35%|###4      | 9/26 [00:00<00:00, 26.57it/s] 50%|#####     | 13/26 [00:00<00:00, 29.88it/s] 65%|######5   | 17/26 [00:00<00:00, 32.25it/s] 81%|########  | 21/26 [00:00<00:00, 33.00it/s] 96%|#########6| 25/26 [00:00<00:00, 33.75it/s]100%|##########| 26/26 [00:00<00:00, 28.36it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.54)	train_minacc   0.60 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 12.5563 (12.5562)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 23%|##3       | 6/26 [00:00<00:00, 27.86it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.86it/s] 46%|####6     | 12/26 [00:00<00:00, 39.21it/s] 65%|######5   | 17/26 [00:00<00:00, 40.79it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.79it/s] 88%|########8 | 23/26 [00:00<00:00, 45.52it/s]100%|##########| 26/26 [00:00<00:00, 37.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.57 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.57 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.48 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.60 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.690 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 39/  1]	epoch_time 0.0374 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5458000138998031, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.91it/s] 19%|#9        | 5/26 [00:00<00:00, 22.43it/s] 35%|###4      | 9/26 [00:00<00:00, 27.23it/s] 50%|#####     | 13/26 [00:00<00:00, 30.14it/s] 65%|######5   | 17/26 [00:00<00:00, 32.35it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.70it/s]100%|##########| 26/26 [00:00<00:00, 28.60it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.55)	train_minacc   0.60 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 12.5565 (12.5564)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.38it/s] 27%|##6       | 7/26 [00:00<00:00, 33.22it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.22it/s] 50%|#####     | 13/26 [00:00<00:00, 39.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.84it/s] 96%|#########6| 25/26 [00:00<00:00, 46.93it/s]100%|##########| 26/26 [00:00<00:00, 38.25it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.59 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.59 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.48 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.60 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.45it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.01 (  0.01)
Overall Timing[ 40/  1]	epoch_time 0.0364 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0360 (0.0369)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5459000160098075, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.14it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 28.38it/s] 50%|#####     | 13/26 [00:00<00:00, 31.00it/s] 65%|######5   | 17/26 [00:00<00:00, 32.47it/s] 81%|########  | 21/26 [00:00<00:00, 33.73it/s] 96%|#########6| 25/26 [00:00<00:00, 34.30it/s]100%|##########| 26/26 [00:00<00:00, 29.20it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.55)	train_minacc   0.60 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 12.5567 (12.5565)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.03it/s] 27%|##6       | 7/26 [00:00<00:00, 30.52it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.52it/s] 50%|#####     | 13/26 [00:00<00:00, 37.51it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.54it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.54it/s] 96%|#########6| 25/26 [00:00<00:00, 44.61it/s]100%|##########| 26/26 [00:00<00:00, 36.65it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.54 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.59 (  0.55)	test_minacc   0.51 (  0.53)	test_majacc   0.60 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.60 (  0.55)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.48 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.48 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.60 (  0.54)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.60 (  0.54)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.91it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.02 (  0.02)
Overall Timing[ 41/  1]	epoch_time 0.0359 (0.0375)	validation_time 0.0004 (0.0005)	train_time 0.0355 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5468000101447106, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 19%|#9        | 5/26 [00:00<00:00, 24.25it/s] 35%|###4      | 9/26 [00:00<00:00, 29.56it/s] 50%|#####     | 13/26 [00:00<00:00, 32.06it/s] 65%|######5   | 17/26 [00:00<00:00, 33.48it/s] 81%|########  | 21/26 [00:00<00:00, 33.43it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 29.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.56 (  0.55)	train_minacc   0.60 (  0.54)	train_majacc   0.55 (  0.55)	train_corr   0.00 (  0.00)	l1 12.5569 (12.5567)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.98it/s] 31%|###       | 8/26 [00:00<00:00, 40.04it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.04it/s] 50%|#####     | 13/26 [00:00<00:00, 42.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.85it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.85it/s] 96%|#########6| 25/26 [00:00<00:00, 48.29it/s]100%|##########| 26/26 [00:00<00:00, 41.30it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.03 (  0.03)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.59 (  0.55)	test_minacc   0.51 (  0.52)	test_majacc   0.60 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.59 (  0.55)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.60 (  0.56)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.48 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.48 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.691 (0.693)	test_acc   0.56 (  0.55)	test_minacc   0.60 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.691 (0.693)	test_acc_d   0.56 (  0.55)	test_minacc_d   0.60 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.71it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.49 (  0.49)	test_majacc   0.57 (  0.57)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.49 (  0.49)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.03 (  0.03)
Overall Timing[ 42/  1]	epoch_time 0.0364 (0.0375)	validation_time 0.0003 (0.0005)	train_time 0.0360 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5474000147581101, 0.5020000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.96it/s] 19%|#9        | 5/26 [00:00<00:00, 21.99it/s] 35%|###4      | 9/26 [00:00<00:00, 27.71it/s] 50%|#####     | 13/26 [00:00<00:00, 31.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.49it/s] 81%|########  | 21/26 [00:00<00:00, 33.97it/s] 96%|#########6| 25/26 [00:00<00:00, 34.05it/s]100%|##########| 26/26 [00:00<00:00, 29.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.55 (  0.55)	train_minacc   0.58 (  0.53)	train_majacc   0.54 (  0.55)	train_corr   0.00 (  0.00)	l1 12.5568 (12.5567)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.43it/s] 31%|###       | 8/26 [00:00<00:00, 38.36it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.36it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.28it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.28it/s] 96%|#########6| 25/26 [00:00<00:00, 49.62it/s]100%|##########| 26/26 [00:00<00:00, 41.96it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.54)	test_minacc   0.52 (  0.52)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.49 (  0.51)	test_majacc   0.60 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.49 (  0.51)	test_majacc_d   0.60 (  0.56)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.47 (  0.53)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.47 (  0.53)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.58 (  0.52)	test_majacc   0.54 (  0.55)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.58 (  0.52)	test_majacc_d   0.54 (  0.55)	test_corr_d   0.03 ( -0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.04 (  0.04)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.04 (  0.04)
Overall Timing[ 43/  1]	epoch_time 0.0369 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0366 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5493000168800354, 0.49000000953674316)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.70it/s] 15%|#5        | 4/26 [00:00<00:01, 20.46it/s] 31%|###       | 8/26 [00:00<00:00, 27.66it/s] 46%|####6     | 12/26 [00:00<00:00, 31.00it/s] 62%|######1   | 16/26 [00:00<00:00, 32.97it/s] 77%|#######6  | 20/26 [00:00<00:00, 34.33it/s] 92%|#########2| 24/26 [00:00<00:00, 34.59it/s]100%|##########| 26/26 [00:00<00:00, 29.58it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.53 (  0.55)	train_minacc   0.54 (  0.52)	train_majacc   0.53 (  0.56)	train_corr   0.00 (  0.00)	l1 12.5566 (12.5565)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.40it/s] 27%|##6       | 7/26 [00:00<00:00, 31.95it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.95it/s] 50%|#####     | 13/26 [00:00<00:00, 39.46it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.40it/s] 92%|#########2| 24/26 [00:00<00:00, 45.85it/s]100%|##########| 26/26 [00:00<00:00, 38.50it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.58 (  0.55)	test_minacc   0.45 (  0.50)	test_majacc   0.61 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.58 (  0.55)	test_minacc_d   0.45 (  0.50)	test_majacc_d   0.61 (  0.56)	test_corr_d  -0.02 ( -0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.55)	test_minacc   0.45 (  0.51)	test_majacc   0.55 (  0.56)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.55)	test_minacc_d   0.45 (  0.51)	test_majacc_d   0.55 (  0.56)	test_corr_d  -0.01 ( -0.01)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.55)	test_minacc   0.54 (  0.51)	test_majacc   0.54 (  0.56)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.55)	test_minacc_d   0.54 (  0.51)	test_majacc_d   0.54 (  0.56)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.31it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.05 (  0.05)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.59 (  0.59)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.05 (  0.05)
Overall Timing[ 44/  1]	epoch_time 0.0360 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0356 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5495000081062317, 0.4830000102519989)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 19%|#9        | 5/26 [00:00<00:00, 22.12it/s] 35%|###4      | 9/26 [00:00<00:00, 27.30it/s] 50%|#####     | 13/26 [00:00<00:00, 29.44it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.72it/s] 96%|#########6| 25/26 [00:00<00:00, 33.49it/s]100%|##########| 26/26 [00:00<00:00, 28.32it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.48 (  0.55)	train_minacc   0.46 (  0.50)	train_majacc   0.49 (  0.56)	train_corr   0.00 (  0.00)	l1 12.5563 (12.5563)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.81it/s] 23%|##3       | 6/26 [00:00<00:00, 32.31it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.31it/s] 42%|####2     | 11/26 [00:00<00:00, 38.39it/s] 65%|######5   | 17/26 [00:00<00:00, 45.87it/s]                                                65%|######5   | 17/26 [00:00<00:00, 45.87it/s] 88%|########8 | 23/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.97it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.55)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.55)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.04 (  0.04)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.57 (  0.54)	test_minacc   0.44 (  0.49)	test_majacc   0.59 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.57 (  0.54)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.59 (  0.54)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.54)	test_minacc   0.42 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.54)	test_minacc_d   0.42 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.01 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.48 (  0.54)	test_minacc   0.46 (  0.49)	test_majacc   0.49 (  0.54)	Loss_d 0.692 (0.693)	test_acc_d   0.48 (  0.54)	test_minacc_d   0.46 (  0.49)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.45it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.58 (  0.58)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.06 (  0.06)
Overall Timing[ 45/  1]	epoch_time 0.0366 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5367000145316124, 0.4790000319480896)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.57it/s] 19%|#9        | 5/26 [00:00<00:01, 18.70it/s] 35%|###4      | 9/26 [00:00<00:00, 24.74it/s] 50%|#####     | 13/26 [00:00<00:00, 27.59it/s] 65%|######5   | 17/26 [00:00<00:00, 29.10it/s] 81%|########  | 21/26 [00:00<00:00, 31.04it/s] 96%|#########6| 25/26 [00:00<00:00, 32.51it/s]100%|##########| 26/26 [00:00<00:00, 26.34it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.47 (  0.53)	train_minacc   0.46 (  0.49)	train_majacc   0.48 (  0.54)	train_corr   0.00 (  0.00)	l1 12.5559 (12.5559)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 24.66it/s] 35%|###4      | 9/26 [00:00<00:00, 39.61it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.61it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.21it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.21it/s] 81%|########  | 21/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 41.74it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.54 (  0.54)	Loss_d 0.693 (0.693)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.45 (  0.49)	test_majacc   0.56 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.56 (  0.53)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.45 (  0.49)	test_majacc   0.51 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.45 (  0.49)	test_majacc_d   0.51 (  0.53)	test_corr_d  -0.02 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.52)	test_minacc   0.46 (  0.48)	test_majacc   0.48 (  0.53)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.52)	test_minacc_d   0.46 (  0.48)	test_majacc_d   0.48 (  0.53)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.15it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.06 (  0.06)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.06 (  0.06)
Overall Timing[ 46/  1]	epoch_time 0.0374 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0371 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5192000159025192, 0.48000001907348633)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.85it/s] 19%|#9        | 5/26 [00:00<00:01, 20.15it/s] 35%|###4      | 9/26 [00:00<00:00, 26.31it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.41it/s] 81%|########  | 21/26 [00:00<00:00, 32.17it/s] 96%|#########6| 25/26 [00:00<00:00, 32.82it/s]100%|##########| 26/26 [00:00<00:00, 27.68it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.47 (  0.52)	train_minacc   0.48 (  0.48)	train_majacc   0.47 (  0.53)	train_corr   0.00 (  0.00)	l1 12.5555 (12.5554)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 15.82it/s] 31%|###       | 8/26 [00:00<00:00, 34.34it/s]                                               31%|###       | 8/26 [00:00<00:00, 34.34it/s] 54%|#####3    | 14/26 [00:00<00:00, 42.89it/s] 77%|#######6  | 20/26 [00:00<00:00, 45.17it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 45.17it/s]100%|##########| 26/26 [00:00<00:00, 49.68it/s]100%|##########| 26/26 [00:00<00:00, 40.15it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.50)	test_minacc   0.42 (  0.48)	test_majacc   0.53 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.50)	test_minacc_d   0.42 (  0.48)	test_majacc_d   0.53 (  0.51)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.47 (  0.49)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.47 (  0.49)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.50)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.51)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.50)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.51)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.88it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.56 (  0.56)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.56 (  0.56)	test_corr_d   0.07 (  0.07)
Overall Timing[ 47/  1]	epoch_time 0.0373 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0369 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.5029000120162964, 0.4780000150203705)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.47it/s] 23%|##3       | 6/26 [00:00<00:00, 26.56it/s] 38%|###8      | 10/26 [00:00<00:00, 30.77it/s] 54%|#####3    | 14/26 [00:00<00:00, 32.77it/s] 69%|######9   | 18/26 [00:00<00:00, 33.66it/s] 85%|########4 | 22/26 [00:00<00:00, 34.36it/s]100%|##########| 26/26 [00:00<00:00, 34.80it/s]100%|##########| 26/26 [00:00<00:00, 30.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.47 (  0.51)	train_minacc   0.48 (  0.48)	train_majacc   0.47 (  0.51)	train_corr   0.00 (  0.00)	l1 12.5549 (12.5549)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 27%|##6       | 7/26 [00:00<00:00, 31.60it/s]                                               27%|##6       | 7/26 [00:00<00:00, 31.60it/s] 50%|#####     | 13/26 [00:00<00:00, 38.28it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.24it/s] 96%|#########6| 25/26 [00:00<00:00, 45.75it/s]100%|##########| 26/26 [00:00<00:00, 37.61it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.49)	test_minacc   0.44 (  0.49)	test_majacc   0.52 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.49)	test_minacc_d   0.44 (  0.49)	test_majacc_d   0.52 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.49)	test_minacc   0.52 (  0.50)	test_majacc   0.48 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.48 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.47 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.47 (  0.50)	Loss_d 0.692 (0.693)	test_acc_d   0.47 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.47 (  0.50)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.85it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.48 (  0.48)	test_minacc   0.47 (  0.47)	test_majacc   0.55 (  0.55)	Loss_d 0.694 (0.694)	test_acc_d   0.48 (  0.48)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.55 (  0.55)	test_corr_d   0.07 (  0.07)
Overall Timing[ 48/  1]	epoch_time 0.0364 (0.0374)	validation_time 0.0003 (0.0005)	train_time 0.0361 (0.0368)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.4931000091135502, 0.4750000238418579)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 19%|#9        | 5/26 [00:00<00:00, 23.80it/s] 35%|###4      | 9/26 [00:00<00:00, 28.87it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 31.98it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.00it/s]100%|##########| 26/26 [00:00<00:00, 29.17it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.47 (  0.50)	train_minacc   0.48 (  0.48)	train_majacc   0.47 (  0.50)	train_corr   0.00 (  0.00)	l1 12.5542 (12.5542)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 27%|##6       | 7/26 [00:00<00:00, 34.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.67it/s] 50%|#####     | 13/26 [00:00<00:00, 39.74it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.26it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.26it/s] 96%|#########6| 25/26 [00:00<00:00, 46.90it/s]100%|##########| 26/26 [00:00<00:00, 39.54it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.46 (  0.46)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.49)	test_minacc   0.44 (  0.48)	test_majacc   0.51 (  0.49)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.49)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.51 (  0.49)	test_corr_d  -0.02 ( -0.00)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.49)	test_minacc   0.53 (  0.50)	test_majacc   0.47 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.49)	test_minacc_d   0.53 (  0.50)	test_majacc_d   0.47 (  0.48)	test_corr_d  -0.02 ( -0.00)
Test: [  26/  26]	Loss 0.692 (0.693)	test_acc   0.46 (  0.49)	test_minacc   0.48 (  0.49)	test_majacc   0.46 (  0.49)	Loss_d 0.692 (0.693)	test_acc_d   0.46 (  0.49)	test_minacc_d   0.48 (  0.49)	test_majacc_d   0.46 (  0.49)	test_corr_d   0.03 (  0.00)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.30it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.47 (  0.47)	test_minacc   0.46 (  0.46)	test_majacc   0.54 (  0.54)	Loss_d 0.695 (0.695)	test_acc_d   0.47 (  0.47)	test_minacc_d   0.46 (  0.46)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Overall Timing[ 49/  1]	epoch_time 0.0365 (0.0374)	validation_time 0.0004 (0.0005)	train_time 0.0361 (0.0367)
record: (train_acc, test_acc) (0.8269000270366669, 0.581000030040741)
last accs (train_acc, test_acc) (0.4862000081539154, 0.4700000286102295)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.096 MB of 0.096 MB uploadedwandb: \ 0.096 MB of 0.096 MB uploadedwandb: | 0.096 MB of 0.096 MB uploadedwandb: / 0.096 MB of 0.096 MB uploadedwandb: - 0.118 MB of 0.124 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/epoch_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/train_time_val █▁▂▂▂▁▁▂▁▂▁▁▁▁▂▁▁▁▁▁▂▁▁▂▂▁▁▂▁▂▂▂▁▁▁▂▁▂▂▁
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_avg ▅▅▄█▄▄▆▆▅▄▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_d_avg ▅▅▄█▄▄▆▆▅▄▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_d_val ▅▅▄█▄▄▆▆▅▄▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_val ▅▅▄█▄▄▆▆▅▄▅▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_avg ▂▃▆▁▇█▅▅▆█▆▇▆▆▅▅▅▅▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_d_avg ▂▃▆▁▇█▅▅▆█▆▇▆▆▅▅▅▅▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_d_val ▂▃▆▁▇█▅▅▆█▆▇▆▆▅▅▅▅▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_val ▂▃▆▁▇█▅▅▆█▆▇▆▆▅▅▅▅▅▆▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_corr_d_avg █▇▅█▃▃▆▆▄▃▄▄▂▃▃▃▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_corr_d_val █▇▅█▃▃▆▆▄▃▄▄▂▃▃▃▃▃▃▃▂▁▁▁▁▁▁▁▁▁▁▂▂▂▂▂▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_avg ██▇█▇▆██▇▆▇▇▂▃▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_d_avg ██▇█▇▆██▇▆▇▇▂▃▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_d_val ██▇█▇▆██▇▆▇▇▂▃▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_val ██▇█▇▆██▇▆▇▇▂▃▄▄▄▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_avg ▂▃▆▁▇█▅▄▆█▆▇▇▆▅▆▆▆▆▇▇▇████████▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_d_avg ▂▃▆▁▇█▅▄▆█▆▇▇▆▅▆▆▆▆▇▇▇████████▇▇▇▇▇▇▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_d_val ▂▃▆▁▇█▅▄▆█▆▇▇▆▅▆▆▆▆▇▇▇████████▇▇▇▇▇▇▇▇▇▇
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_val ▂▃▆▁▇█▅▄▆█▆▇▇▆▅▆▆▆▆▇▇▇████████▇▇▇▇▇▇▇▇▇▇
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/Loss_avg █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/Loss_val █▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/l1_avg ▂▂▁▁▂▂▃▄▅▆▇▇███████▆▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/l1_val ▂▁▁▁▂▂▃▄▆▆▇▇███████▅▅▅▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_acc_avg ▇███████████▆▂▂▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_acc_val ▇▇▇▇██▇▇████▃▂▃▃▃▃▃▂▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▂▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_majacc_avg ▇███████████▅▂▂▂▂▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_majacc_val ███▇█▇██▇██▇▃▂▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_minacc_avg ▁▁▂▂▂▂▃▃▄▄▄▄▇▆▇▇▇▇▆▆▇▇██████████████▇▇▇▇
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_minacc_val ▁▃▄▆▄▅▃▂▅▄▆▅▅▆▄▅▄▄▄▆▇██████████████▇▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_nll_avg ▅▂▂▂▂▁▁▁▁▁▁▁▄███████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_nll_val ▄▄▂▂▂▁▂▂▁▁▁▂████████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_penalty_val ▇█▆▂▅▃▄▅▃▄▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/epoch_time_val 0.03652
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/train_time_val 0.03612
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/diagnostics/validation_time_val 0.00039
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_avg 0.69454
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_d_avg 0.69454
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_d_val 0.69454
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/Loss_val 0.69454
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_avg 0.47
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_d_avg 0.47
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_d_val 0.47
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_acc_val 0.47
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_corr_d_avg 0.07643
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_corr_d_val 0.07643
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_d_avg 0.54
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_d_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_majacc_val 0.54
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_avg 0.46222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_d_avg 0.46222
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_d_val 0.46222
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/test/test_minacc_val 0.46222
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/l1_avg 12.55419
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/l1_val 12.55421
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_acc_avg 0.496
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_acc_val 0.468
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_majacc_avg 0.49863
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_majacc_val 0.46535
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_minacc_avg 0.48266
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_minacc_val 0.47917
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_nll_avg 0.69294
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_nll_val 0.6924
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/weight_norm_avg 0.18094
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/50/logs/train/weight_norm_val 0.18078
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/8g28k11d
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_114214-8g28k11d/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_114446-fokw6foa
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/fokw6foa
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1176
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5972, 3, 32, 32) (6028, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:38,  1.53s/it] 19%|#9        | 5/26 [00:01<00:05,  3.95it/s] 35%|###4      | 9/26 [00:01<00:02,  7.71it/s] 50%|#####     | 13/26 [00:01<00:01, 11.72it/s] 65%|######5   | 17/26 [00:01<00:00, 15.68it/s] 81%|########  | 21/26 [00:02<00:00, 19.28it/s] 96%|#########6| 25/26 [00:02<00:00, 22.63it/s]100%|##########| 26/26 [00:02<00:00,  9.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 8.995 (12.015)	train_nll   0.38 (  0.54)	train_penalty   0.07 (  0.23)	weight_norm   8.61 ( 11.47)	train_acc   0.86 (  0.79)	train_minacc   0.03 (  0.09)	train_majacc   1.00 (  0.92)	train_corr   0.00 (  0.00)	l1 9.4321 (8.2349)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.61it/s] 27%|##6       | 7/26 [00:00<00:00, 37.67it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.67it/s] 50%|#####     | 13/26 [00:00<00:00, 43.40it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.63it/s] 96%|#########6| 25/26 [00:00<00:00, 48.34it/s]100%|##########| 26/26 [00:00<00:00, 41.05it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.84 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.414 (0.414)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.434 (0.415)	test_acc   0.83 (  0.84)	test_minacc   0.03 (  0.02)	test_majacc   0.98 (  0.99)	Loss_d 0.434 (0.415)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.03 (  0.02)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.96)
Test: [  20/  26]	Loss 0.458 (0.410)	test_acc   0.83 (  0.85)	test_minacc   0.04 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.458 (0.410)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.04 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
Test: [  26/  26]	Loss 0.374 (0.408)	test_acc   0.86 (  0.85)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  0.99)	Loss_d 0.374 (0.408)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.97 (  0.96)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]100%|##########| 1/1 [00:00<00:00,  2.56it/s]
Test: [  0/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  1/  1]	Loss 1.852 (1.852)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.852 (1.852)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0733 (0.0733)	validation_time 0.0066 (0.0066)	train_time 0.0645 (0.0645)
record: (train_acc, test_acc) (0.8470000187754632, 0.11300000548362732)
last accs (train_acc, test_acc) (0.8470000187754632, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.04it/s] 19%|#9        | 5/26 [00:00<00:01, 19.96it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 28.91it/s] 65%|######5   | 17/26 [00:00<00:00, 30.94it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 33.10it/s]100%|##########| 26/26 [00:00<00:00, 27.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.453 (6.325)	train_nll   0.38 (  0.41)	train_penalty   0.06 (  0.06)	weight_norm   4.07 (  5.91)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.04)	train_majacc   0.98 (  0.99)	train_corr   0.00 (  0.00)	l1 9.2744 (9.6625)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.57it/s] 31%|###       | 8/26 [00:00<00:00, 40.87it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.87it/s] 50%|#####     | 13/26 [00:00<00:00, 40.98it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.27it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.27it/s] 96%|#########6| 25/26 [00:00<00:00, 47.15it/s]100%|##########| 26/26 [00:00<00:00, 40.85it/s]
Test: [   0/  26]	Loss 0.400 (0.400)	test_acc   0.84 (  0.84)	test_minacc   0.08 (  0.08)	test_majacc   0.97 (  0.97)	Loss_d 0.400 (0.400)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.08 (  0.08)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.416 (0.409)	test_acc   0.84 (  0.84)	test_minacc   0.11 (  0.10)	test_majacc   0.98 (  0.97)	Loss_d 0.416 (0.409)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.11 (  0.10)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
Test: [  20/  26]	Loss 0.419 (0.398)	test_acc   0.83 (  0.85)	test_minacc   0.11 (  0.11)	test_majacc   0.98 (  0.98)	Loss_d 0.419 (0.398)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.340 (0.394)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.340 (0.394)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.76it/s]
Test: [  0/  1]	Loss 1.795 (1.795)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.795 (1.795)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.795 (1.795)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.795 (1.795)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.85 (  0.85)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0364 (0.0548)	validation_time 0.0005 (0.0035)	train_time 0.0359 (0.0502)
record: (train_acc, test_acc) (0.846900021970272, 0.1770000010728836)
last accs (train_acc, test_acc) (0.846900021970272, 0.1770000010728836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.90it/s] 19%|#9        | 5/26 [00:00<00:01, 20.41it/s] 35%|###4      | 9/26 [00:00<00:00, 25.42it/s] 46%|####6     | 12/26 [00:00<00:00, 26.57it/s] 62%|######1   | 16/26 [00:00<00:00, 28.82it/s] 77%|#######6  | 20/26 [00:00<00:00, 29.99it/s] 92%|#########2| 24/26 [00:00<00:00, 31.75it/s]100%|##########| 26/26 [00:00<00:00, 26.61it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.714 (3.465)	train_nll   0.34 (  0.40)	train_penalty   0.04 (  0.05)	weight_norm   2.37 (  3.07)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.06)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 7.5028 (8.3893)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.29it/s] 23%|##3       | 6/26 [00:00<00:00, 25.10it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.10it/s] 42%|####2     | 11/26 [00:00<00:00, 33.95it/s] 65%|######5   | 17/26 [00:00<00:00, 42.34it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.34it/s] 88%|########8 | 23/26 [00:00<00:00, 44.06it/s]100%|##########| 26/26 [00:00<00:00, 36.31it/s]
Test: [   0/  26]	Loss 0.383 (0.383)	test_acc   0.84 (  0.84)	test_minacc   0.15 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 0.383 (0.383)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.400 (0.383)	test_acc   0.83 (  0.84)	test_minacc   0.15 (  0.12)	test_majacc   0.96 (  0.97)	Loss_d 0.400 (0.383)	test_acc_d   0.83 (  0.84)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.96 (  0.97)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.405 (0.372)	test_acc   0.82 (  0.84)	test_minacc   0.11 (  0.13)	test_majacc   0.98 (  0.97)	Loss_d 0.405 (0.372)	test_acc_d   0.82 (  0.84)	test_minacc_d   0.11 (  0.13)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  26/  26]	Loss 0.314 (0.370)	test_acc   0.85 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.97 (  0.97)	Loss_d 0.314 (0.370)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.92 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.51it/s]
Test: [  0/  1]	Loss 1.598 (1.598)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   1.00 (  1.00)	Loss_d 1.598 (1.598)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.598 (1.598)	test_acc   0.22 (  0.22)	test_minacc   0.13 (  0.13)	test_majacc   1.00 (  1.00)	Loss_d 1.598 (1.598)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.13 (  0.13)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.77 (  0.77)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0379 (0.0492)	validation_time 0.0003 (0.0025)	train_time 0.0375 (0.0460)
record: (train_acc, test_acc) (0.8450000265240669, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8450000265240669, 0.22100001573562622)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.61it/s] 19%|#9        | 5/26 [00:00<00:00, 22.62it/s] 35%|###4      | 9/26 [00:00<00:00, 28.29it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.70it/s] 81%|########  | 21/26 [00:00<00:00, 32.80it/s] 96%|#########6| 25/26 [00:00<00:00, 33.61it/s]100%|##########| 26/26 [00:00<00:00, 28.71it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.828 (2.247)	train_nll   0.34 (  0.37)	train_penalty   0.03 (  0.04)	weight_norm   1.49 (  1.88)	train_acc   0.86 (  0.85)	train_minacc   0.03 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.7053 (7.0307)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 27%|##6       | 7/26 [00:00<00:00, 35.68it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.68it/s] 46%|####6     | 12/26 [00:00<00:00, 41.15it/s] 65%|######5   | 17/26 [00:00<00:00, 41.42it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.42it/s] 88%|########8 | 23/26 [00:00<00:00, 46.95it/s]100%|##########| 26/26 [00:00<00:00, 38.94it/s]
Test: [   0/  26]	Loss 0.375 (0.375)	test_acc   0.84 (  0.84)	test_minacc   0.05 (  0.05)	test_majacc   0.98 (  0.98)	Loss_d 0.375 (0.375)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.05 (  0.05)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.392 (0.380)	test_acc   0.84 (  0.85)	test_minacc   0.10 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.392 (0.380)	test_acc_d   0.84 (  0.85)	test_minacc_d   0.10 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.402 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.09 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.402 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.09 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
Test: [  26/  26]	Loss 0.297 (0.366)	test_acc   0.86 (  0.85)	test_minacc   0.15 (  0.12)	test_majacc   0.97 (  0.98)	Loss_d 0.297 (0.366)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.15 (  0.12)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.10it/s]
Test: [  0/  1]	Loss 1.716 (1.716)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.78 (  0.78)
Test: [  1/  1]	Loss 1.716 (1.716)	test_acc   0.20 (  0.20)	test_minacc   0.11 (  0.11)	test_majacc   1.00 (  1.00)	Loss_d 1.716 (1.716)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.11 (  0.11)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.78 (  0.78)
Overall Timing[  3/  1]	epoch_time 0.0375 (0.0462)	validation_time 0.0004 (0.0019)	train_time 0.0371 (0.0438)
record: (train_acc, test_acc) (0.8450000265240669, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8497000207304954, 0.20000000298023224)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 19%|#9        | 5/26 [00:00<00:01, 18.69it/s] 35%|###4      | 9/26 [00:00<00:00, 24.90it/s] 50%|#####     | 13/26 [00:00<00:00, 28.31it/s] 65%|######5   | 17/26 [00:00<00:00, 30.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.06it/s] 96%|#########6| 25/26 [00:00<00:00, 32.66it/s]100%|##########| 26/26 [00:00<00:00, 26.88it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.318 (1.560)	train_nll   0.36 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.96 (  1.20)	train_acc   0.84 (  0.85)	train_minacc   0.00 (  0.13)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.2656 (6.5185)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.02it/s] 31%|###       | 8/26 [00:00<00:00, 39.43it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.43it/s] 50%|#####     | 13/26 [00:00<00:00, 40.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.44it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.44it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.76it/s]
Test: [   0/  26]	Loss 0.379 (0.379)	test_acc   0.83 (  0.83)	test_minacc   0.02 (  0.02)	test_majacc   0.98 (  0.98)	Loss_d 0.379 (0.379)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.94)
Test: [  10/  26]	Loss 0.380 (0.376)	test_acc   0.84 (  0.84)	test_minacc   0.03 (  0.05)	test_majacc   1.00 (  0.98)	Loss_d 0.380 (0.376)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.03 (  0.05)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.391 (0.366)	test_acc   0.83 (  0.85)	test_minacc   0.11 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.391 (0.366)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.11 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.329 (0.366)	test_acc   0.86 (  0.85)	test_minacc   0.06 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.329 (0.366)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.06 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 1.595 (1.595)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.595 (1.595)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Test: [  1/  1]	Loss 1.595 (1.595)	test_acc   0.18 (  0.18)	test_minacc   0.09 (  0.09)	test_majacc   1.00 (  1.00)	Loss_d 1.595 (1.595)	test_acc_d   0.18 (  0.18)	test_minacc_d   0.09 (  0.09)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.84 (  0.84)
Overall Timing[  4/  1]	epoch_time 0.0374 (0.0445)	validation_time 0.0004 (0.0016)	train_time 0.0370 (0.0424)
record: (train_acc, test_acc) (0.8450000265240669, 0.22100001573562622)
last accs (train_acc, test_acc) (0.8487000278830529, 0.1770000010728836)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.45it/s] 19%|#9        | 5/26 [00:00<00:01, 20.61it/s] 35%|###4      | 9/26 [00:00<00:00, 26.66it/s] 50%|#####     | 13/26 [00:00<00:00, 29.48it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.51it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 27.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.998 (1.151)	train_nll   0.34 (  0.36)	train_penalty   0.04 (  0.03)	weight_norm   0.66 (  0.79)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.12)	train_majacc   0.98 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6883 (6.4691)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.93it/s] 27%|##6       | 7/26 [00:00<00:00, 26.12it/s]                                               27%|##6       | 7/26 [00:00<00:00, 26.12it/s] 50%|#####     | 13/26 [00:00<00:00, 34.87it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.10it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.10it/s] 96%|#########6| 25/26 [00:00<00:00, 44.74it/s]100%|##########| 26/26 [00:00<00:00, 34.95it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.96 (  0.96)	Loss_d 0.356 (0.356)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.362 (0.351)	test_acc   0.85 (  0.86)	test_minacc   0.32 (  0.34)	test_majacc   0.95 (  0.95)	Loss_d 0.362 (0.351)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.32 (  0.34)	test_majacc_d   0.95 (  0.95)	test_corr_d   0.84 (  0.85)
Test: [  20/  26]	Loss 0.361 (0.341)	test_acc   0.87 (  0.86)	test_minacc   0.46 (  0.37)	test_majacc   0.96 (  0.95)	Loss_d 0.361 (0.341)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.46 (  0.37)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.303 (0.341)	test_acc   0.87 (  0.86)	test_minacc   0.32 (  0.37)	test_majacc   0.96 (  0.95)	Loss_d 0.303 (0.341)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.32 (  0.37)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.89 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.92it/s]
Test: [  0/  1]	Loss 1.381 (1.381)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.99 (  0.99)	Loss_d 1.381 (1.381)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.58 (  0.58)
Test: [  1/  1]	Loss 1.381 (1.381)	test_acc   0.37 (  0.37)	test_minacc   0.31 (  0.31)	test_majacc   0.99 (  0.99)	Loss_d 1.381 (1.381)	test_acc_d   0.37 (  0.37)	test_minacc_d   0.31 (  0.31)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.58 (  0.58)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0374 (0.0433)	validation_time 0.0004 (0.0014)	train_time 0.0369 (0.0415)
record: (train_acc, test_acc) (0.8592000231146812, 0.37400001287460327)
last accs (train_acc, test_acc) (0.8592000231146812, 0.37400001287460327)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 19%|#9        | 5/26 [00:00<00:00, 22.14it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 28.64it/s] 65%|######5   | 17/26 [00:00<00:00, 29.63it/s] 81%|########  | 21/26 [00:00<00:00, 30.55it/s] 96%|#########6| 25/26 [00:00<00:00, 31.75it/s]100%|##########| 26/26 [00:00<00:00, 27.30it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.743 (0.857)	train_nll   0.34 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.41 (  0.51)	train_acc   0.87 (  0.86)	train_minacc   0.26 (  0.21)	train_majacc   0.97 (  0.97)	train_corr   0.00 (  0.00)	l1 7.7622 (7.2607)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.95it/s] 27%|##6       | 7/26 [00:00<00:00, 34.88it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.88it/s] 50%|#####     | 13/26 [00:00<00:00, 40.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.40it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.40it/s] 96%|#########6| 25/26 [00:00<00:00, 46.83it/s]100%|##########| 26/26 [00:00<00:00, 39.99it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.86 (  0.86)	test_minacc   0.25 (  0.25)	test_majacc   0.97 (  0.97)	Loss_d 0.345 (0.345)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  10/  26]	Loss 0.354 (0.346)	test_acc   0.85 (  0.85)	test_minacc   0.29 (  0.25)	test_majacc   0.96 (  0.96)	Loss_d 0.354 (0.346)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.29 (  0.25)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.90)
Test: [  20/  26]	Loss 0.344 (0.334)	test_acc   0.87 (  0.86)	test_minacc   0.39 (  0.28)	test_majacc   0.98 (  0.96)	Loss_d 0.344 (0.334)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.39 (  0.28)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.88 (  0.89)
Test: [  26/  26]	Loss 0.299 (0.333)	test_acc   0.88 (  0.86)	test_minacc   0.26 (  0.29)	test_majacc   0.97 (  0.96)	Loss_d 0.299 (0.333)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.26 (  0.29)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.92 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.37it/s]
Test: [  0/  1]	Loss 1.508 (1.508)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.508 (1.508)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.508 (1.508)	test_acc   0.35 (  0.35)	test_minacc   0.28 (  0.28)	test_majacc   0.98 (  0.98)	Loss_d 1.508 (1.508)	test_acc_d   0.35 (  0.35)	test_minacc_d   0.28 (  0.28)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.66 (  0.66)
Overall Timing[  6/  1]	epoch_time 0.0385 (0.0426)	validation_time 0.0003 (0.0013)	train_time 0.0381 (0.0410)
record: (train_acc, test_acc) (0.8592000231146812, 0.37400001287460327)
last accs (train_acc, test_acc) (0.8579000280499458, 0.3500000238418579)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 21.88it/s] 35%|###4      | 9/26 [00:00<00:00, 27.56it/s] 50%|#####     | 13/26 [00:00<00:00, 30.34it/s] 65%|######5   | 17/26 [00:00<00:00, 32.07it/s] 81%|########  | 21/26 [00:00<00:00, 33.14it/s] 96%|#########6| 25/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 28.69it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.598 (0.680)	train_nll   0.31 (  0.34)	train_penalty   0.03 (  0.03)	weight_norm   0.28 (  0.34)	train_acc   0.86 (  0.85)	train_minacc   0.18 (  0.17)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 9.7514 (8.6890)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 38%|###8      | 10/26 [00:00<00:00, 34.07it/s]                                                38%|###8      | 10/26 [00:00<00:00, 34.07it/s] 58%|#####7    | 15/26 [00:00<00:00, 38.32it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 38.32it/s] 81%|########  | 21/26 [00:00<00:00, 45.25it/s]100%|##########| 26/26 [00:00<00:00, 37.07it/s]
Test: [   0/  26]	Loss 0.321 (0.321)	test_acc   0.88 (  0.88)	test_minacc   0.43 (  0.43)	test_majacc   0.96 (  0.96)	Loss_d 0.321 (0.321)	test_acc_d   0.88 (  0.88)	test_minacc_d   0.43 (  0.43)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.350 (0.334)	test_acc   0.85 (  0.86)	test_minacc   0.35 (  0.39)	test_majacc   0.95 (  0.94)	Loss_d 0.350 (0.334)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.35 (  0.39)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.85 (  0.86)
Test: [  20/  26]	Loss 0.323 (0.321)	test_acc   0.87 (  0.87)	test_minacc   0.50 (  0.45)	test_majacc   0.95 (  0.94)	Loss_d 0.323 (0.321)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.50 (  0.45)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.83 (  0.85)
Test: [  26/  26]	Loss 0.296 (0.320)	test_acc   0.90 (  0.87)	test_minacc   0.50 (  0.44)	test_majacc   0.96 (  0.94)	Loss_d 0.296 (0.320)	test_acc_d   0.90 (  0.87)	test_minacc_d   0.50 (  0.44)	test_majacc_d   0.96 (  0.94)	test_corr_d   0.88 (  0.85)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.08it/s]
Test: [  0/  1]	Loss 1.413 (1.413)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.98 (  0.98)	Loss_d 1.413 (1.413)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.53 (  0.53)
Test: [  1/  1]	Loss 1.413 (1.413)	test_acc   0.41 (  0.41)	test_minacc   0.35 (  0.35)	test_majacc   0.98 (  0.98)	Loss_d 1.413 (1.413)	test_acc_d   0.41 (  0.41)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.53 (  0.53)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[  7/  1]	epoch_time 0.0367 (0.0419)	validation_time 0.0004 (0.0012)	train_time 0.0363 (0.0404)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.54it/s] 19%|#9        | 5/26 [00:00<00:00, 21.81it/s] 35%|###4      | 9/26 [00:00<00:00, 26.59it/s] 50%|#####     | 13/26 [00:00<00:00, 29.50it/s] 65%|######5   | 17/26 [00:00<00:00, 30.98it/s] 81%|########  | 21/26 [00:00<00:00, 32.12it/s] 96%|#########6| 25/26 [00:00<00:00, 32.74it/s]100%|##########| 26/26 [00:00<00:00, 27.92it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.531 (0.578)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.03)	weight_norm   0.21 (  0.24)	train_acc   0.86 (  0.85)	train_minacc   0.06 (  0.20)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 11.3493 (10.4868)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.49it/s] 27%|##6       | 7/26 [00:00<00:00, 35.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.33it/s] 50%|#####     | 13/26 [00:00<00:00, 40.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.18it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.18it/s] 96%|#########6| 25/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 40.41it/s]
Test: [   0/  26]	Loss 0.359 (0.359)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.13)	test_majacc   0.97 (  0.97)	Loss_d 0.359 (0.359)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.365 (0.357)	test_acc   0.84 (  0.84)	test_minacc   0.11 (  0.10)	test_majacc   0.97 (  0.98)	Loss_d 0.365 (0.357)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.11 (  0.10)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  20/  26]	Loss 0.372 (0.344)	test_acc   0.83 (  0.85)	test_minacc   0.11 (  0.10)	test_majacc   0.98 (  0.98)	Loss_d 0.372 (0.344)	test_acc_d   0.83 (  0.85)	test_minacc_d   0.11 (  0.10)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.90)
Test: [  26/  26]	Loss 0.297 (0.344)	test_acc   0.88 (  0.85)	test_minacc   0.15 (  0.10)	test_majacc   0.99 (  0.98)	Loss_d 0.297 (0.344)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.15 (  0.10)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.91 (  0.90)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.85it/s]
Test: [  0/  1]	Loss 1.554 (1.554)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.554 (1.554)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.72 (  0.72)
Test: [  1/  1]	Loss 1.554 (1.554)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   1.00 (  1.00)	Loss_d 1.554 (1.554)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.72 (  0.72)
Overall Timing[  8/  1]	epoch_time 0.0377 (0.0414)	validation_time 0.0003 (0.0011)	train_time 0.0373 (0.0401)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.847500026345253, 0.23400001227855682)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 19%|#9        | 5/26 [00:00<00:01, 19.89it/s] 35%|###4      | 9/26 [00:00<00:00, 26.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.00it/s] 65%|######5   | 17/26 [00:00<00:00, 31.25it/s] 81%|########  | 21/26 [00:00<00:00, 32.38it/s] 96%|#########6| 25/26 [00:00<00:00, 32.77it/s]100%|##########| 26/26 [00:00<00:00, 27.54it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.479 (0.522)	train_nll   0.33 (  0.34)	train_penalty   0.03 (  0.02)	weight_norm   0.15 (  0.18)	train_acc   0.86 (  0.86)	train_minacc   0.24 (  0.21)	train_majacc   0.96 (  0.97)	train_corr   0.00 (  0.00)	l1 13.6862 (12.4101)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.56it/s] 23%|##3       | 6/26 [00:00<00:00, 27.79it/s]                                               23%|##3       | 6/26 [00:00<00:00, 27.79it/s] 46%|####6     | 12/26 [00:00<00:00, 36.56it/s] 69%|######9   | 18/26 [00:00<00:00, 43.09it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.09it/s] 92%|#########2| 24/26 [00:00<00:00, 44.89it/s]100%|##########| 26/26 [00:00<00:00, 37.35it/s]
Test: [   0/  26]	Loss 0.345 (0.345)	test_acc   0.83 (  0.83)	test_minacc   0.23 (  0.23)	test_majacc   0.93 (  0.93)	Loss_d 0.345 (0.345)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.23 (  0.23)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.336 (0.336)	test_acc   0.86 (  0.86)	test_minacc   0.35 (  0.35)	test_majacc   0.96 (  0.95)	Loss_d 0.336 (0.336)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.35 (  0.35)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.332 (0.323)	test_acc   0.88 (  0.86)	test_minacc   0.43 (  0.38)	test_majacc   0.98 (  0.95)	Loss_d 0.332 (0.323)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.43 (  0.38)	test_majacc_d   0.98 (  0.95)	test_corr_d   0.85 (  0.86)
Test: [  26/  26]	Loss 0.288 (0.321)	test_acc   0.88 (  0.87)	test_minacc   0.38 (  0.38)	test_majacc   0.96 (  0.95)	Loss_d 0.288 (0.321)	test_acc_d   0.88 (  0.87)	test_minacc_d   0.38 (  0.38)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.90 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.03it/s]
Test: [  0/  1]	Loss 1.417 (1.417)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.98 (  0.98)	Loss_d 1.417 (1.417)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.56 (  0.56)
Test: [  1/  1]	Loss 1.417 (1.417)	test_acc   0.39 (  0.39)	test_minacc   0.32 (  0.32)	test_majacc   0.98 (  0.98)	Loss_d 1.417 (1.417)	test_acc_d   0.39 (  0.39)	test_minacc_d   0.32 (  0.32)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.56 (  0.56)
Overall Timing[  9/  1]	epoch_time 0.0368 (0.0409)	validation_time 0.0004 (0.0010)	train_time 0.0364 (0.0397)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8656000245213509, 0.39000001549720764)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.69it/s] 15%|#5        | 4/26 [00:00<00:01, 20.21it/s] 31%|###       | 8/26 [00:00<00:00, 26.24it/s] 46%|####6     | 12/26 [00:00<00:00, 29.18it/s] 62%|######1   | 16/26 [00:00<00:00, 30.18it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.32it/s] 92%|#########2| 24/26 [00:00<00:00, 32.09it/s]100%|##########| 26/26 [00:00<00:00, 27.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.456 (0.473)	train_nll   0.32 (  0.34)	train_penalty   0.02 (  0.02)	weight_norm   0.13 (  0.14)	train_acc   0.86 (  0.85)	train_minacc   0.09 (  0.23)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 15.1551 (14.4310)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.94it/s] 31%|###       | 8/26 [00:00<00:00, 40.96it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.96it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.15it/s] 77%|#######6  | 20/26 [00:00<00:00, 49.28it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 49.28it/s]100%|##########| 26/26 [00:00<00:00, 51.27it/s]100%|##########| 26/26 [00:00<00:00, 42.41it/s]
Test: [   0/  26]	Loss 0.322 (0.322)	test_acc   0.87 (  0.87)	test_minacc   0.33 (  0.33)	test_majacc   0.97 (  0.97)	Loss_d 0.322 (0.322)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.33 (  0.33)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.355 (0.328)	test_acc   0.86 (  0.86)	test_minacc   0.35 (  0.28)	test_majacc   0.95 (  0.96)	Loss_d 0.355 (0.328)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.35 (  0.28)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.87)
Test: [  20/  26]	Loss 0.333 (0.314)	test_acc   0.84 (  0.86)	test_minacc   0.33 (  0.29)	test_majacc   0.96 (  0.96)	Loss_d 0.333 (0.314)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.33 (  0.29)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.288 (0.314)	test_acc   0.87 (  0.86)	test_minacc   0.18 (  0.28)	test_majacc   0.98 (  0.96)	Loss_d 0.288 (0.314)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.18 (  0.28)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.91 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.23it/s]
Test: [  0/  1]	Loss 1.420 (1.420)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   1.00 (  1.00)	Loss_d 1.420 (1.420)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.59 (  0.59)
Test: [  1/  1]	Loss 1.420 (1.420)	test_acc   0.29 (  0.29)	test_minacc   0.21 (  0.21)	test_majacc   1.00 (  1.00)	Loss_d 1.420 (1.420)	test_acc_d   0.29 (  0.29)	test_minacc_d   0.21 (  0.21)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.59 (  0.59)
Overall Timing[ 10/  1]	epoch_time 0.0364 (0.0405)	validation_time 0.0003 (0.0009)	train_time 0.0361 (0.0394)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8596000217199325, 0.29100000858306885)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.00it/s] 19%|#9        | 5/26 [00:00<00:01, 20.05it/s] 35%|###4      | 9/26 [00:00<00:00, 25.92it/s] 50%|#####     | 13/26 [00:00<00:00, 29.45it/s] 65%|######5   | 17/26 [00:00<00:00, 31.47it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.06it/s]100%|##########| 26/26 [00:00<00:00, 27.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.422 (0.442)	train_nll   0.31 (  0.33)	train_penalty   0.03 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.87 (  0.86)	train_minacc   0.06 (  0.26)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 17.1441 (16.2617)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.04it/s] 31%|###       | 8/26 [00:00<00:00, 39.86it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.86it/s] 50%|#####     | 13/26 [00:00<00:00, 41.21it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.99it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.99it/s] 96%|#########6| 25/26 [00:00<00:00, 47.53it/s]100%|##########| 26/26 [00:00<00:00, 40.68it/s]
Test: [   0/  26]	Loss 0.327 (0.327)	test_acc   0.85 (  0.85)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 0.327 (0.327)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.328 (0.323)	test_acc   0.85 (  0.86)	test_minacc   0.10 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.328 (0.323)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.10 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.93)
Test: [  20/  26]	Loss 0.336 (0.310)	test_acc   0.84 (  0.86)	test_minacc   0.13 (  0.10)	test_majacc   0.99 (  0.99)	Loss_d 0.336 (0.310)	test_acc_d   0.84 (  0.86)	test_minacc_d   0.13 (  0.10)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.283 (0.309)	test_acc   0.87 (  0.86)	test_minacc   0.06 (  0.10)	test_majacc   1.00 (  0.99)	Loss_d 0.283 (0.309)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.06 (  0.10)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 58.65it/s]
Test: [  0/  1]	Loss 1.644 (1.644)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.644 (1.644)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.644 (1.644)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   1.00 (  1.00)	Loss_d 1.644 (1.644)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.81 (  0.81)
Overall Timing[ 11/  1]	epoch_time 0.0377 (0.0403)	validation_time 0.0004 (0.0009)	train_time 0.0373 (0.0392)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8569000267386436, 0.164000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.38it/s] 19%|#9        | 5/26 [00:00<00:01, 19.52it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 28.57it/s] 65%|######5   | 17/26 [00:00<00:00, 30.59it/s] 81%|########  | 21/26 [00:00<00:00, 31.81it/s] 96%|#########6| 25/26 [00:00<00:00, 32.73it/s]100%|##########| 26/26 [00:00<00:00, 27.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.405 (0.420)	train_nll   0.30 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.87 (  0.86)	train_minacc   0.06 (  0.25)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 18.6141 (17.9234)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.42it/s] 23%|##3       | 6/26 [00:00<00:00, 26.67it/s]                                               23%|##3       | 6/26 [00:00<00:00, 26.67it/s] 46%|####6     | 12/26 [00:00<00:00, 38.70it/s] 65%|######5   | 17/26 [00:00<00:00, 40.04it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.04it/s] 88%|########8 | 23/26 [00:00<00:00, 45.38it/s]100%|##########| 26/26 [00:00<00:00, 36.24it/s]
Test: [   0/  26]	Loss 0.315 (0.315)	test_acc   0.85 (  0.85)	test_minacc   0.27 (  0.27)	test_majacc   0.96 (  0.96)	Loss_d 0.315 (0.315)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.27 (  0.27)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.324 (0.317)	test_acc   0.85 (  0.86)	test_minacc   0.19 (  0.31)	test_majacc   0.97 (  0.96)	Loss_d 0.324 (0.317)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.19 (  0.31)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.338 (0.307)	test_acc   0.86 (  0.87)	test_minacc   0.47 (  0.35)	test_majacc   0.95 (  0.96)	Loss_d 0.338 (0.307)	test_acc_d   0.86 (  0.87)	test_minacc_d   0.47 (  0.35)	test_majacc_d   0.95 (  0.96)	test_corr_d   0.85 (  0.87)
Test: [  26/  26]	Loss 0.275 (0.308)	test_acc   0.87 (  0.87)	test_minacc   0.26 (  0.35)	test_majacc   0.97 (  0.96)	Loss_d 0.275 (0.308)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.26 (  0.35)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.91 (  0.88)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.23it/s]
Test: [  0/  1]	Loss 1.361 (1.361)	test_acc   0.27 (  0.27)	test_minacc   0.18 (  0.18)	test_majacc   1.00 (  1.00)	Loss_d 1.361 (1.361)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.18 (  0.18)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.64 (  0.64)
Test: [  1/  1]	Loss 1.361 (1.361)	test_acc   0.27 (  0.27)	test_minacc   0.18 (  0.18)	test_majacc   1.00 (  1.00)	Loss_d 1.361 (1.361)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.18 (  0.18)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.64 (  0.64)
Overall Timing[ 12/  1]	epoch_time 0.0373 (0.0401)	validation_time 0.0004 (0.0009)	train_time 0.0369 (0.0390)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8683000260591507, 0.26500001549720764)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.16it/s] 19%|#9        | 5/26 [00:00<00:01, 20.05it/s] 35%|###4      | 9/26 [00:00<00:00, 25.84it/s] 50%|#####     | 13/26 [00:00<00:00, 29.61it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 33.72it/s]100%|##########| 26/26 [00:00<00:00, 27.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.409 (0.415)	train_nll   0.31 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.10 (  0.09)	train_acc   0.87 (  0.86)	train_minacc   0.09 (  0.29)	train_majacc   1.00 (  0.96)	train_corr   0.00 (  0.00)	l1 19.7518 (19.3694)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.16it/s] 50%|#####     | 13/26 [00:00<00:00, 41.73it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.58it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.58it/s] 96%|#########6| 25/26 [00:00<00:00, 48.01it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.326 (0.326)	test_acc   0.87 (  0.87)	test_minacc   0.30 (  0.30)	test_majacc   0.97 (  0.97)	Loss_d 0.326 (0.326)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.30 (  0.30)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.88 (  0.88)
Test: [  10/  26]	Loss 0.336 (0.334)	test_acc   0.85 (  0.86)	test_minacc   0.27 (  0.26)	test_majacc   0.96 (  0.96)	Loss_d 0.336 (0.334)	test_acc_d   0.85 (  0.86)	test_minacc_d   0.27 (  0.26)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.87 (  0.88)
Test: [  20/  26]	Loss 0.337 (0.321)	test_acc   0.86 (  0.86)	test_minacc   0.43 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.337 (0.321)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.43 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.85 (  0.87)
Test: [  26/  26]	Loss 0.286 (0.320)	test_acc   0.88 (  0.86)	test_minacc   0.24 (  0.30)	test_majacc   0.99 (  0.96)	Loss_d 0.286 (0.320)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.24 (  0.30)	test_majacc_d   0.99 (  0.96)	test_corr_d   0.90 (  0.87)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 1.322 (1.322)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.322 (1.322)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.62 (  0.62)
Test: [  1/  1]	Loss 1.322 (1.322)	test_acc   0.30 (  0.30)	test_minacc   0.22 (  0.22)	test_majacc   0.97 (  0.97)	Loss_d 1.322 (1.322)	test_acc_d   0.30 (  0.30)	test_minacc_d   0.22 (  0.22)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.62 (  0.62)
Overall Timing[ 13/  1]	epoch_time 0.0377 (0.0399)	validation_time 0.0003 (0.0008)	train_time 0.0374 (0.0389)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.8625000212192535, 0.2980000078678131)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 23.48it/s] 35%|###4      | 9/26 [00:00<00:00, 27.99it/s] 50%|#####     | 13/26 [00:00<00:00, 30.28it/s] 65%|######5   | 17/26 [00:00<00:00, 31.60it/s] 81%|########  | 21/26 [00:00<00:00, 32.93it/s] 96%|#########6| 25/26 [00:00<00:00, 33.89it/s]100%|##########| 26/26 [00:00<00:00, 28.77it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.415 (0.416)	train_nll   0.31 (  0.32)	train_penalty   0.03 (  0.02)	weight_norm   0.11 (  0.10)	train_acc   0.85 (  0.86)	train_minacc   0.21 (  0.32)	train_majacc   0.95 (  0.96)	train_corr   0.00 (  0.00)	l1 20.8121 (20.4168)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 35.85it/s] 35%|###4      | 9/26 [00:00<00:00, 42.38it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.38it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.57it/s] 77%|#######6  | 20/26 [00:00<00:00, 50.53it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 50.53it/s]100%|##########| 26/26 [00:00<00:00, 47.95it/s]100%|##########| 26/26 [00:00<00:00, 42.46it/s]
Test: [   0/  26]	Loss 0.304 (0.304)	test_acc   0.85 (  0.85)	test_minacc   0.40 (  0.40)	test_majacc   0.93 (  0.93)	Loss_d 0.304 (0.304)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.40 (  0.40)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.87 (  0.87)
Test: [  10/  26]	Loss 0.321 (0.310)	test_acc   0.86 (  0.86)	test_minacc   0.45 (  0.44)	test_majacc   0.94 (  0.93)	Loss_d 0.321 (0.310)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.45 (  0.44)	test_majacc_d   0.94 (  0.93)	test_corr_d   0.86 (  0.86)
Test: [  20/  26]	Loss 0.328 (0.301)	test_acc   0.87 (  0.87)	test_minacc   0.51 (  0.48)	test_majacc   0.95 (  0.94)	Loss_d 0.328 (0.301)	test_acc_d   0.87 (  0.87)	test_minacc_d   0.51 (  0.48)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.84 (  0.86)
Test: [  26/  26]	Loss 0.278 (0.301)	test_acc   0.89 (  0.87)	test_minacc   0.50 (  0.48)	test_majacc   0.95 (  0.94)	Loss_d 0.278 (0.301)	test_acc_d   0.89 (  0.87)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.95 (  0.94)	test_corr_d   0.90 (  0.86)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 1.365 (1.365)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.98 (  0.98)	Loss_d 1.365 (1.365)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.61 (  0.61)
Test: [  1/  1]	Loss 1.365 (1.365)	test_acc   0.40 (  0.40)	test_minacc   0.34 (  0.34)	test_majacc   0.98 (  0.98)	Loss_d 1.365 (1.365)	test_acc_d   0.40 (  0.40)	test_minacc_d   0.34 (  0.34)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.61 (  0.61)
Overall Timing[ 14/  1]	epoch_time 0.0360 (0.0396)	validation_time 0.0004 (0.0008)	train_time 0.0356 (0.0387)
record: (train_acc, test_acc) (0.8679000225663185, 0.4100000262260437)
last accs (train_acc, test_acc) (0.868300019800663, 0.4000000059604645)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 19%|#9        | 5/26 [00:00<00:01, 20.26it/s] 35%|###4      | 9/26 [00:00<00:00, 26.44it/s] 50%|#####     | 13/26 [00:00<00:00, 29.74it/s] 65%|######5   | 17/26 [00:00<00:00, 31.51it/s] 81%|########  | 21/26 [00:00<00:00, 32.61it/s] 96%|#########6| 25/26 [00:00<00:00, 32.95it/s]100%|##########| 26/26 [00:00<00:00, 27.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.013 (0.171)	train_nll   0.46 (  0.40)	train_penalty   0.01 (  0.01)	weight_norm   0.12 (  0.11)	train_acc   0.79 (  0.81)	train_minacc   0.71 (  0.52)	train_majacc   0.81 (  0.86)	train_corr   0.00 (  0.00)	l1 20.7575 (20.8820)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.67it/s] 35%|###4      | 9/26 [00:00<00:00, 39.37it/s]                                               35%|###4      | 9/26 [00:00<00:00, 39.37it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.09it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.09it/s] 81%|########  | 21/26 [00:00<00:00, 47.45it/s]100%|##########| 26/26 [00:00<00:00, 42.31it/s]
Test: [   0/  26]	Loss 0.493 (0.493)	test_acc   0.76 (  0.76)	test_minacc   0.68 (  0.68)	test_majacc   0.77 (  0.77)	Loss_d 0.493 (0.493)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.53 (  0.53)
Test: [  10/  26]	Loss 0.516 (0.496)	test_acc   0.75 (  0.77)	test_minacc   0.69 (  0.74)	test_majacc   0.77 (  0.77)	Loss_d 0.516 (0.496)	test_acc_d   0.75 (  0.77)	test_minacc_d   0.69 (  0.74)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.49 (  0.49)
Test: [  20/  26]	Loss 0.475 (0.493)	test_acc   0.79 (  0.76)	test_minacc   0.80 (  0.75)	test_majacc   0.79 (  0.77)	Loss_d 0.475 (0.493)	test_acc_d   0.79 (  0.76)	test_minacc_d   0.80 (  0.75)	test_majacc_d   0.79 (  0.77)	test_corr_d   0.48 (  0.48)
Test: [  26/  26]	Loss 0.475 (0.494)	test_acc   0.76 (  0.76)	test_minacc   0.71 (  0.75)	test_majacc   0.77 (  0.77)	Loss_d 0.475 (0.494)	test_acc_d   0.76 (  0.76)	test_minacc_d   0.71 (  0.75)	test_majacc_d   0.77 (  0.77)	test_corr_d   0.54 (  0.49)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 0.641 (0.641)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.78 (  0.78)	Loss_d 0.641 (0.641)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.21 ( -0.21)
Test: [  1/  1]	Loss 0.641 (0.641)	test_acc   0.69 (  0.69)	test_minacc   0.68 (  0.68)	test_majacc   0.78 (  0.78)	Loss_d 0.641 (0.641)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.78 (  0.78)	test_corr_d  -0.21 ( -0.21)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/51/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0355 (0.0394)	validation_time 0.0003 (0.0008)	train_time 0.0352 (0.0385)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 15%|#5        | 4/26 [00:00<00:01, 18.54it/s] 31%|###       | 8/26 [00:00<00:00, 25.07it/s] 46%|####6     | 12/26 [00:00<00:00, 28.76it/s] 62%|######1   | 16/26 [00:00<00:00, 30.73it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.96it/s] 92%|#########2| 24/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 27.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.001 (0.002)	train_nll   0.61 (  0.60)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.14)	train_acc   0.64 (  0.67)	train_minacc   0.68 (  0.74)	train_majacc   0.64 (  0.66)	train_corr   0.00 (  0.00)	l1 20.4953 (20.6220)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.94it/s] 27%|##6       | 7/26 [00:00<00:00, 37.99it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.99it/s] 50%|#####     | 13/26 [00:00<00:00, 42.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.17it/s] 96%|#########6| 25/26 [00:00<00:00, 48.07it/s]100%|##########| 26/26 [00:00<00:00, 40.43it/s]
Test: [   0/  26]	Loss 0.615 (0.615)	test_acc   0.63 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.63 (  0.63)	Loss_d 0.615 (0.615)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.32 (  0.32)
Test: [  10/  26]	Loss 0.622 (0.622)	test_acc   0.64 (  0.63)	test_minacc   0.65 (  0.65)	test_majacc   0.64 (  0.63)	Loss_d 0.622 (0.622)	test_acc_d   0.64 (  0.63)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.64 (  0.63)	test_corr_d   0.27 (  0.28)
Test: [  20/  26]	Loss 0.604 (0.620)	test_acc   0.67 (  0.64)	test_minacc   0.76 (  0.66)	test_majacc   0.65 (  0.63)	Loss_d 0.604 (0.620)	test_acc_d   0.67 (  0.64)	test_minacc_d   0.76 (  0.66)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.27 (  0.28)
Test: [  26/  26]	Loss 0.601 (0.620)	test_acc   0.65 (  0.63)	test_minacc   0.65 (  0.66)	test_majacc   0.65 (  0.63)	Loss_d 0.601 (0.620)	test_acc_d   0.65 (  0.63)	test_minacc_d   0.65 (  0.66)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.35 (  0.28)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.89it/s]
Test: [  0/  1]	Loss 0.645 (0.645)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.60 (  0.60)	Loss_d 0.645 (0.645)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Test: [  1/  1]	Loss 0.645 (0.645)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.60 (  0.60)	Loss_d 0.645 (0.645)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.24 ( -0.24)
Overall Timing[ 16/  1]	epoch_time 0.0370 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0367 (0.0384)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.6348000087141991, 0.659000039100647)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.93it/s] 19%|#9        | 5/26 [00:00<00:01, 18.97it/s] 35%|###4      | 9/26 [00:00<00:00, 24.93it/s] 50%|#####     | 13/26 [00:00<00:00, 28.46it/s] 65%|######5   | 17/26 [00:00<00:00, 29.91it/s] 81%|########  | 21/26 [00:00<00:00, 31.09it/s] 96%|#########6| 25/26 [00:00<00:00, 31.54it/s]100%|##########| 26/26 [00:00<00:00, 26.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.000 (0.001)	train_nll   0.65 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.61)	train_minacc   0.65 (  0.65)	train_majacc   0.59 (  0.60)	train_corr   0.00 (  0.00)	l1 20.3251 (20.3937)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.48it/s] 23%|##3       | 6/26 [00:00<00:00, 32.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.76it/s] 46%|####6     | 12/26 [00:00<00:00, 42.73it/s] 65%|######5   | 17/26 [00:00<00:00, 42.97it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.97it/s] 88%|########8 | 23/26 [00:00<00:00, 48.00it/s]100%|##########| 26/26 [00:00<00:00, 39.59it/s]
Test: [   0/  26]	Loss 0.654 (0.654)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.61 (  0.61)	Loss_d 0.654 (0.654)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.656 (0.661)	test_acc   0.59 (  0.60)	test_minacc   0.66 (  0.64)	test_majacc   0.57 (  0.59)	Loss_d 0.656 (0.661)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.66 (  0.64)	test_majacc_d   0.57 (  0.59)	test_corr_d   0.13 (  0.16)
Test: [  20/  26]	Loss 0.648 (0.661)	test_acc   0.62 (  0.60)	test_minacc   0.76 (  0.65)	test_majacc   0.59 (  0.59)	Loss_d 0.648 (0.661)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.76 (  0.65)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.17 (  0.15)
Test: [  26/  26]	Loss 0.652 (0.661)	test_acc   0.60 (  0.60)	test_minacc   0.65 (  0.65)	test_majacc   0.59 (  0.59)	Loss_d 0.652 (0.661)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.22 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.49it/s]
Test: [  0/  1]	Loss 0.644 (0.644)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.57 (  0.57)	Loss_d 0.644 (0.644)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.644 (0.644)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.57 (  0.57)	Loss_d 0.644 (0.644)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.57 (  0.57)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 17/  1]	epoch_time 0.0376 (0.0392)	validation_time 0.0003 (0.0007)	train_time 0.0373 (0.0383)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5974000030755997, 0.656000018119812)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.84it/s] 35%|###4      | 9/26 [00:00<00:00, 28.27it/s] 50%|#####     | 13/26 [00:00<00:00, 30.70it/s] 65%|######5   | 17/26 [00:00<00:00, 32.43it/s] 81%|########  | 21/26 [00:00<00:00, 33.35it/s] 96%|#########6| 25/26 [00:00<00:00, 32.07it/s]100%|##########| 26/26 [00:00<00:00, 28.31it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.58)	train_minacc   0.65 (  0.64)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 20.2776 (20.2973)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.45it/s] 27%|##6       | 7/26 [00:00<00:00, 28.08it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.08it/s] 50%|#####     | 13/26 [00:00<00:00, 35.89it/s] 73%|#######3  | 19/26 [00:00<00:00, 42.63it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 42.63it/s] 96%|#########6| 25/26 [00:00<00:00, 44.48it/s]100%|##########| 26/26 [00:00<00:00, 35.62it/s]
Test: [   0/  26]	Loss 0.669 (0.669)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.60 (  0.60)	Loss_d 0.669 (0.669)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.669 (0.674)	test_acc   0.58 (  0.58)	test_minacc   0.66 (  0.62)	test_majacc   0.57 (  0.58)	Loss_d 0.669 (0.674)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.66 (  0.62)	test_majacc_d   0.57 (  0.58)	test_corr_d   0.07 (  0.11)
Test: [  20/  26]	Loss 0.668 (0.675)	test_acc   0.61 (  0.58)	test_minacc   0.73 (  0.62)	test_majacc   0.58 (  0.58)	Loss_d 0.668 (0.675)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.73 (  0.62)	test_majacc_d   0.58 (  0.58)	test_corr_d   0.12 (  0.10)
Test: [  26/  26]	Loss 0.670 (0.675)	test_acc   0.60 (  0.58)	test_minacc   0.65 (  0.62)	test_majacc   0.60 (  0.57)	Loss_d 0.670 (0.675)	test_acc_d   0.60 (  0.58)	test_minacc_d   0.65 (  0.62)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.17 (  0.10)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.84it/s]
Test: [  0/  1]	Loss 0.655 (0.655)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.655 (0.655)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.655 (0.655)	test_acc   0.64 (  0.64)	test_minacc   0.65 (  0.65)	test_majacc   0.54 (  0.54)	Loss_d 0.655 (0.655)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 18/  1]	epoch_time 0.0373 (0.0391)	validation_time 0.0004 (0.0007)	train_time 0.0369 (0.0382)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5820000076889992, 0.6360000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.41it/s] 15%|#5        | 4/26 [00:00<00:01, 18.98it/s] 31%|###       | 8/26 [00:00<00:00, 25.90it/s] 46%|####6     | 12/26 [00:00<00:00, 29.05it/s] 62%|######1   | 16/26 [00:00<00:00, 30.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.30it/s] 92%|#########2| 24/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 27.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.68)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.58)	train_minacc   0.68 (  0.62)	train_majacc   0.59 (  0.57)	train_corr   0.00 (  0.00)	l1 20.2556 (20.2657)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.38it/s] 27%|##6       | 7/26 [00:00<00:00, 37.05it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.05it/s] 50%|#####     | 13/26 [00:00<00:00, 42.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.95it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.95it/s] 96%|#########6| 25/26 [00:00<00:00, 47.26it/s]100%|##########| 26/26 [00:00<00:00, 41.24it/s]
Test: [   0/  26]	Loss 0.677 (0.677)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.59 (  0.59)	Loss_d 0.677 (0.677)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.59 (  0.59)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.676 (0.680)	test_acc   0.57 (  0.58)	test_minacc   0.61 (  0.60)	test_majacc   0.56 (  0.58)	Loss_d 0.676 (0.680)	test_acc_d   0.57 (  0.58)	test_minacc_d   0.61 (  0.60)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.03 (  0.08)
Test: [  20/  26]	Loss 0.677 (0.681)	test_acc   0.61 (  0.58)	test_minacc   0.69 (  0.61)	test_majacc   0.59 (  0.57)	Loss_d 0.677 (0.681)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.69 (  0.61)	test_majacc_d   0.59 (  0.57)	test_corr_d   0.08 (  0.07)
Test: [  26/  26]	Loss 0.678 (0.681)	test_acc   0.61 (  0.58)	test_minacc   0.68 (  0.61)	test_majacc   0.60 (  0.57)	Loss_d 0.678 (0.681)	test_acc_d   0.61 (  0.58)	test_minacc_d   0.68 (  0.61)	test_majacc_d   0.60 (  0.57)	test_corr_d   0.14 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.09it/s]
Test: [  0/  1]	Loss 0.664 (0.664)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.53 (  0.53)	Loss_d 0.664 (0.664)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.32 ( -0.32)
Test: [  1/  1]	Loss 0.664 (0.664)	test_acc   0.63 (  0.63)	test_minacc   0.64 (  0.64)	test_majacc   0.53 (  0.53)	Loss_d 0.664 (0.664)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.53 (  0.53)	test_corr_d  -0.32 ( -0.32)
Overall Timing[ 19/  1]	epoch_time 0.0352 (0.0389)	validation_time 0.0003 (0.0007)	train_time 0.0349 (0.0381)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.578200013935566, 0.628000020980835)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.92it/s] 19%|#9        | 5/26 [00:00<00:00, 22.13it/s] 35%|###4      | 9/26 [00:00<00:00, 27.49it/s] 50%|#####     | 13/26 [00:00<00:00, 30.77it/s] 65%|######5   | 17/26 [00:00<00:00, 32.23it/s] 81%|########  | 21/26 [00:00<00:00, 33.40it/s] 96%|#########6| 25/26 [00:00<00:00, 34.27it/s]100%|##########| 26/26 [00:00<00:00, 28.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.61 (  0.58)	train_minacc   0.65 (  0.60)	train_majacc   0.61 (  0.57)	train_corr   0.00 (  0.00)	l1 20.2416 (20.2488)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.97it/s] 31%|###       | 8/26 [00:00<00:00, 39.99it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.99it/s] 54%|#####3    | 14/26 [00:00<00:00, 43.19it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.57it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.57it/s]100%|##########| 26/26 [00:00<00:00, 51.81it/s]100%|##########| 26/26 [00:00<00:00, 42.06it/s]
Test: [   0/  26]	Loss 0.682 (0.682)	test_acc   0.59 (  0.59)	test_minacc   0.57 (  0.57)	test_majacc   0.60 (  0.60)	Loss_d 0.682 (0.682)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.682 (0.685)	test_acc   0.56 (  0.58)	test_minacc   0.60 (  0.59)	test_majacc   0.55 (  0.58)	Loss_d 0.682 (0.685)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.60 (  0.59)	test_majacc_d   0.55 (  0.58)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.684 (0.686)	test_acc   0.59 (  0.58)	test_minacc   0.61 (  0.59)	test_majacc   0.59 (  0.58)	Loss_d 0.684 (0.686)	test_acc_d   0.59 (  0.58)	test_minacc_d   0.61 (  0.59)	test_majacc_d   0.59 (  0.58)	test_corr_d   0.04 (  0.03)
Test: [  26/  26]	Loss 0.685 (0.686)	test_acc   0.62 (  0.58)	test_minacc   0.62 (  0.59)	test_majacc   0.62 (  0.58)	Loss_d 0.685 (0.686)	test_acc_d   0.62 (  0.58)	test_minacc_d   0.62 (  0.59)	test_majacc_d   0.62 (  0.58)	test_corr_d   0.10 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.22it/s]
Test: [  0/  1]	Loss 0.671 (0.671)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.671 (0.671)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.671 (0.671)	test_acc   0.61 (  0.61)	test_minacc   0.62 (  0.62)	test_majacc   0.55 (  0.55)	Loss_d 0.671 (0.671)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.55 (  0.55)	test_corr_d  -0.33 ( -0.33)
Overall Timing[ 20/  1]	epoch_time 0.0371 (0.0388)	validation_time 0.0005 (0.0007)	train_time 0.0367 (0.0380)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5810000094175338, 0.6130000352859497)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 19%|#9        | 5/26 [00:00<00:00, 23.13it/s] 35%|###4      | 9/26 [00:00<00:00, 28.18it/s] 50%|#####     | 13/26 [00:00<00:00, 31.16it/s] 65%|######5   | 17/26 [00:00<00:00, 31.88it/s] 81%|########  | 21/26 [00:00<00:00, 33.34it/s] 96%|#########6| 25/26 [00:00<00:00, 33.39it/s]100%|##########| 26/26 [00:00<00:00, 29.08it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.62 (  0.59)	train_minacc   0.53 (  0.54)	train_majacc   0.63 (  0.60)	train_corr   0.00 (  0.00)	l1 20.2321 (20.2369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.13it/s] 27%|##6       | 7/26 [00:00<00:00, 35.33it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.33it/s] 50%|#####     | 13/26 [00:00<00:00, 39.86it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.11it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.11it/s] 96%|#########6| 25/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 39.57it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.61 (  0.61)	test_minacc   0.50 (  0.50)	test_majacc   0.63 (  0.63)	Loss_d 0.687 (0.687)	test_acc_d   0.61 (  0.61)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.687 (0.689)	test_acc   0.60 (  0.60)	test_minacc   0.44 (  0.51)	test_majacc   0.63 (  0.62)	Loss_d 0.687 (0.689)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.44 (  0.51)	test_majacc_d   0.63 (  0.62)	test_corr_d  -0.08 ( -0.01)
Test: [  20/  26]	Loss 0.690 (0.690)	test_acc   0.58 (  0.60)	test_minacc   0.56 (  0.51)	test_majacc   0.59 (  0.62)	Loss_d 0.690 (0.690)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.56 (  0.51)	test_majacc_d   0.59 (  0.62)	test_corr_d  -0.02 ( -0.01)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.62 (  0.60)	test_minacc   0.53 (  0.51)	test_majacc   0.63 (  0.61)	Loss_d 0.690 (0.690)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.63 (  0.61)	test_corr_d   0.04 ( -0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.32it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.679 (0.679)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.35 ( -0.35)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.54 (  0.54)	Loss_d 0.679 (0.679)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.35 ( -0.35)
Overall Timing[ 21/  1]	epoch_time 0.0366 (0.0387)	validation_time 0.0003 (0.0007)	train_time 0.0362 (0.0379)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5978000131845475, 0.5139999985694885)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.13it/s] 19%|#9        | 5/26 [00:00<00:00, 22.42it/s] 35%|###4      | 9/26 [00:00<00:00, 27.09it/s] 50%|#####     | 13/26 [00:00<00:00, 29.67it/s] 65%|######5   | 17/26 [00:00<00:00, 31.67it/s] 81%|########  | 21/26 [00:00<00:00, 32.99it/s] 96%|#########6| 25/26 [00:00<00:00, 33.83it/s]100%|##########| 26/26 [00:00<00:00, 28.70it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.15 (  0.15)	train_acc   0.60 (  0.59)	train_minacc   0.47 (  0.49)	train_majacc   0.62 (  0.61)	train_corr   0.00 (  0.00)	l1 20.2266 (20.2292)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 27%|##6       | 7/26 [00:00<00:00, 37.82it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.82it/s] 46%|####6     | 12/26 [00:00<00:00, 41.24it/s] 65%|######5   | 17/26 [00:00<00:00, 43.13it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.13it/s] 88%|########8 | 23/26 [00:00<00:00, 48.21it/s]100%|##########| 26/26 [00:00<00:00, 39.85it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.60 (  0.60)	test_minacc   0.45 (  0.45)	test_majacc   0.63 (  0.63)	Loss_d 0.691 (0.691)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.63 (  0.63)	test_corr_d  -0.04 ( -0.04)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.62 (  0.60)	test_minacc   0.44 (  0.48)	test_majacc   0.65 (  0.62)	Loss_d 0.690 (0.692)	test_acc_d   0.62 (  0.60)	test_minacc_d   0.44 (  0.48)	test_majacc_d   0.65 (  0.62)	test_corr_d  -0.14 ( -0.04)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.56 (  0.60)	test_minacc   0.50 (  0.48)	test_majacc   0.57 (  0.62)	Loss_d 0.693 (0.692)	test_acc_d   0.56 (  0.60)	test_minacc_d   0.50 (  0.48)	test_majacc_d   0.57 (  0.62)	test_corr_d  -0.09 ( -0.04)
Test: [  26/  26]	Loss 0.692 (0.692)	test_acc   0.60 (  0.59)	test_minacc   0.47 (  0.48)	test_majacc   0.62 (  0.61)	Loss_d 0.692 (0.692)	test_acc_d   0.60 (  0.59)	test_minacc_d   0.47 (  0.48)	test_majacc_d   0.62 (  0.61)	test_corr_d  -0.00 ( -0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.50it/s]
Test: [  0/  1]	Loss 0.687 (0.687)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.687 (0.687)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.687 (0.687)	test_acc   0.49 (  0.49)	test_minacc   0.48 (  0.48)	test_majacc   0.56 (  0.56)	Loss_d 0.687 (0.687)	test_acc_d   0.49 (  0.49)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.56 (  0.56)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 22/  1]	epoch_time 0.0368 (0.0386)	validation_time 0.0003 (0.0006)	train_time 0.0364 (0.0379)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.594000006556511, 0.4910000264644623)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.35it/s] 15%|#5        | 4/26 [00:00<00:01, 16.02it/s] 31%|###       | 8/26 [00:00<00:00, 21.82it/s] 42%|####2     | 11/26 [00:00<00:00, 19.97it/s] 54%|#####3    | 14/26 [00:00<00:00, 18.93it/s] 62%|######1   | 16/26 [00:00<00:00, 18.38it/s] 69%|######9   | 18/26 [00:00<00:00, 17.96it/s] 77%|#######6  | 20/26 [00:01<00:00, 17.46it/s] 85%|########4 | 22/26 [00:01<00:00, 17.26it/s] 92%|#########2| 24/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 16.87it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 320 tensor(-0.0130, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
rho, theta 414 tensor(-0.0018, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
rho, theta 458 tensor(-0.0006, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 463 tensor(-0.0005, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
rho, theta 473 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
rho, theta 478 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
rho, theta 487 tensor(-0.0004, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
rho, theta 489 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
rho, theta 492 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
rho, theta 496 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
rho, theta 500 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
rho, theta 507 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
rho, theta 510 tensor(-0.0001, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
rho, theta 496 tensor(-0.0003, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [23][  26/  26]	Loss 0.000 (0.006)	train_nll   0.69 (  0.70)	train_penalty   0.00 (  0.01)	weight_norm   0.20 (  0.17)	train_acc   0.49 (  0.53)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.53)	train_corr   0.00 (  0.00)	l1 15.0379 (15.6369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.15it/s] 27%|##6       | 7/26 [00:00<00:00, 35.80it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.80it/s] 50%|#####     | 13/26 [00:00<00:00, 40.95it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.80it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.80it/s] 96%|#########6| 25/26 [00:00<00:00, 47.03it/s]100%|##########| 26/26 [00:00<00:00, 39.94it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.695 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 57.67it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 23/  1]	epoch_time 0.0467 (0.0389)	validation_time 0.0004 (0.0006)	train_time 0.0463 (0.0382)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.506600009560585, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 12%|#1        | 3/26 [00:00<00:02, 11.32it/s] 19%|#9        | 5/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:01, 15.51it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.28it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.49it/s] 65%|######5   | 17/26 [00:01<00:00, 16.65it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.78it/s] 81%|########  | 21/26 [00:01<00:00, 16.72it/s] 88%|########8 | 23/26 [00:01<00:00, 16.31it/s] 96%|#########6| 25/26 [00:01<00:00, 15.95it/s]100%|##########| 26/26 [00:01<00:00, 15.03it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
rho, theta 504 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
rho, theta 508 tensor(-0.0002, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0070 (15.0271)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.03it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 50%|#####     | 13/26 [00:00<00:00, 40.76it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.82it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.82it/s] 96%|#########6| 25/26 [00:00<00:00, 46.70it/s]100%|##########| 26/26 [00:00<00:00, 38.63it/s]
Test: [   0/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.56 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.57 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.696 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.696 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.05)
Test: [  26/  26]	Loss 0.695 (0.694)	test_acc   0.49 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.50)	Loss_d 0.695 (0.694)	test_acc_d   0.49 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.50)	test_corr_d   0.09 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.67it/s]
Test: [  0/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.695 (0.695)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.50)	Loss_d 0.695 (0.695)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 24/  1]	epoch_time 0.0503 (0.0394)	validation_time 0.0003 (0.0006)	train_time 0.0499 (0.0387)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5046000128388405, 0.5)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.21it/s] 15%|#5        | 4/26 [00:00<00:01, 15.31it/s] 31%|###       | 8/26 [00:00<00:00, 22.80it/s] 46%|####6     | 12/26 [00:00<00:00, 27.11it/s] 62%|######1   | 16/26 [00:00<00:00, 30.06it/s] 77%|#######6  | 20/26 [00:00<00:00, 31.17it/s] 92%|#########2| 24/26 [00:00<00:00, 32.26it/s]100%|##########| 26/26 [00:01<00:00, 24.84it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.49 (  0.50)	train_minacc   0.50 (  0.50)	train_majacc   0.49 (  0.50)	train_corr   0.00 (  0.00)	l1 15.0025 (14.9922)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.95it/s] 27%|##6       | 7/26 [00:00<00:00, 35.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.96it/s] 50%|#####     | 13/26 [00:00<00:00, 40.88it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.29it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.29it/s] 96%|#########6| 25/26 [00:00<00:00, 47.33it/s]100%|##########| 26/26 [00:00<00:00, 39.53it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.45 (  0.45)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.45 (  0.45)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.56 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.57 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.56 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.57 (  0.52)	test_corr_d  -0.00 (  0.06)
Test: [  20/  26]	Loss 0.695 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.695 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.10 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.41it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 25/  1]	epoch_time 0.0384 (0.0394)	validation_time 0.0004 (0.0006)	train_time 0.0381 (0.0387)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5059000104367734, 0.49800002574920654)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.30it/s] 12%|#1        | 3/26 [00:00<00:02,  9.04it/s] 19%|#9        | 5/26 [00:00<00:01, 11.86it/s] 27%|##6       | 7/26 [00:00<00:01, 13.52it/s] 35%|###4      | 9/26 [00:00<00:01, 14.47it/s] 42%|####2     | 11/26 [00:00<00:00, 15.21it/s] 50%|#####     | 13/26 [00:00<00:00, 15.74it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.05it/s] 65%|######5   | 17/26 [00:01<00:00, 16.40it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.66it/s] 81%|########  | 21/26 [00:01<00:00, 16.86it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 16.90it/s]100%|##########| 26/26 [00:01<00:00, 14.57it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0506 (15.0272)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.03it/s] 31%|###       | 8/26 [00:00<00:00, 41.18it/s]                                               31%|###       | 8/26 [00:00<00:00, 41.18it/s] 50%|#####     | 13/26 [00:00<00:00, 42.42it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.33it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.33it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 41.15it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.56 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.56 (  0.52)	test_corr_d   0.01 (  0.07)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.05 (  0.07)
Test: [  26/  26]	Loss 0.694 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.694 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.79it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 26/  1]	epoch_time 0.0509 (0.0398)	validation_time 0.0003 (0.0006)	train_time 0.0506 (0.0391)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5069000097513199, 0.4970000088214874)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.94it/s] 12%|#1        | 3/26 [00:00<00:01, 12.20it/s] 19%|#9        | 5/26 [00:00<00:01, 14.34it/s] 27%|##6       | 7/26 [00:00<00:01, 15.42it/s] 35%|###4      | 9/26 [00:00<00:01, 15.83it/s] 42%|####2     | 11/26 [00:00<00:00, 16.28it/s] 50%|#####     | 13/26 [00:00<00:00, 16.52it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.58it/s] 65%|######5   | 17/26 [00:01<00:00, 16.73it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.80it/s] 81%|########  | 21/26 [00:01<00:00, 16.77it/s] 88%|########8 | 23/26 [00:01<00:00, 16.84it/s] 96%|#########6| 25/26 [00:01<00:00, 16.88it/s]100%|##########| 26/26 [00:01<00:00, 15.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.22 (  0.22)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.0906 (15.0714)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.26it/s] 27%|##6       | 7/26 [00:00<00:00, 35.91it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.91it/s] 50%|#####     | 13/26 [00:00<00:00, 42.96it/s] 69%|######9   | 18/26 [00:00<00:00, 44.33it/s]                                                69%|######9   | 18/26 [00:00<00:00, 44.33it/s] 92%|#########2| 24/26 [00:00<00:00, 47.83it/s]100%|##########| 26/26 [00:00<00:00, 40.63it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.48 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.48 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.06 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.50 (  0.50)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 27/  1]	epoch_time 0.0494 (0.0401)	validation_time 0.0004 (0.0006)	train_time 0.0490 (0.0394)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5088000114262105, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.73it/s] 12%|#1        | 3/26 [00:00<00:02, 10.49it/s] 19%|#9        | 5/26 [00:00<00:01, 12.97it/s] 27%|##6       | 7/26 [00:00<00:01, 14.41it/s] 35%|###4      | 9/26 [00:00<00:01, 15.17it/s] 42%|####2     | 11/26 [00:00<00:00, 15.68it/s] 50%|#####     | 13/26 [00:00<00:00, 16.04it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.31it/s] 65%|######5   | 17/26 [00:01<00:00, 16.51it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.66it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.72it/s] 96%|#########6| 25/26 [00:01<00:00, 16.64it/s]100%|##########| 26/26 [00:01<00:00, 15.00it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.22)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1227 (15.1071)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.64it/s] 27%|##6       | 7/26 [00:00<00:00, 29.20it/s]                                               27%|##6       | 7/26 [00:00<00:00, 29.20it/s] 50%|#####     | 13/26 [00:00<00:00, 37.94it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.75it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.75it/s] 96%|#########6| 25/26 [00:00<00:00, 45.27it/s]100%|##########| 26/26 [00:00<00:00, 36.87it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.689 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.48 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.689 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.694 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.50)	test_majacc   0.50 (  0.51)	Loss_d 0.694 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.06 (  0.09)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.52it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 28/  1]	epoch_time 0.0497 (0.0405)	validation_time 0.0004 (0.0006)	train_time 0.0493 (0.0398)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5090000131130219, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:06,  3.89it/s] 12%|#1        | 3/26 [00:00<00:02,  8.94it/s] 19%|#9        | 5/26 [00:00<00:01, 11.84it/s] 27%|##6       | 7/26 [00:00<00:01, 13.74it/s] 35%|###4      | 9/26 [00:00<00:01, 14.89it/s] 42%|####2     | 11/26 [00:00<00:00, 15.58it/s] 50%|#####     | 13/26 [00:00<00:00, 16.02it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.42it/s] 65%|######5   | 17/26 [00:01<00:00, 16.60it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.65it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.75it/s] 96%|#########6| 25/26 [00:01<00:00, 16.79it/s]100%|##########| 26/26 [00:01<00:00, 14.53it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.50)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1496 (15.1363)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.26it/s] 31%|###       | 8/26 [00:00<00:00, 40.54it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.54it/s] 50%|#####     | 13/26 [00:00<00:00, 41.72it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.61it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.61it/s] 96%|#########6| 25/26 [00:00<00:00, 47.25it/s]100%|##########| 26/26 [00:00<00:00, 40.69it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.53 (  0.53)	test_minacc   0.47 (  0.47)	test_majacc   0.54 (  0.54)	Loss_d 0.691 (0.691)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.54 (  0.52)	test_minacc   0.48 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.48 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.02 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.06 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.50)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.50)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.13 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 29/  1]	epoch_time 0.0503 (0.0408)	validation_time 0.0004 (0.0006)	train_time 0.0499 (0.0401)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.510800014168024, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.74it/s] 12%|#1        | 3/26 [00:00<00:02,  9.75it/s] 19%|#9        | 5/26 [00:00<00:01, 12.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.05it/s] 35%|###4      | 9/26 [00:00<00:01, 14.96it/s] 42%|####2     | 11/26 [00:00<00:00, 15.69it/s] 50%|#####     | 13/26 [00:00<00:00, 16.11it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.29it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.49it/s] 81%|########  | 21/26 [00:01<00:00, 16.67it/s] 88%|########8 | 23/26 [00:01<00:00, 16.80it/s] 96%|#########6| 25/26 [00:01<00:00, 16.87it/s]100%|##########| 26/26 [00:01<00:00, 14.78it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 780 400
penalty weights 10000.0
args.step pgd_anneal_iters 780 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 781 400
penalty weights 10000.0
args.step pgd_anneal_iters 781 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 782 400
penalty weights 10000.0
args.step pgd_anneal_iters 782 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 783 400
penalty weights 10000.0
args.step pgd_anneal_iters 783 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 784 400
penalty weights 10000.0
args.step pgd_anneal_iters 784 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 785 400
penalty weights 10000.0
args.step pgd_anneal_iters 785 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 786 400
penalty weights 10000.0
args.step pgd_anneal_iters 786 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 787 400
penalty weights 10000.0
args.step pgd_anneal_iters 787 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 788 400
penalty weights 10000.0
args.step pgd_anneal_iters 788 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 789 400
penalty weights 10000.0
args.step pgd_anneal_iters 789 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 790 400
penalty weights 10000.0
args.step pgd_anneal_iters 790 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 791 400
penalty weights 10000.0
args.step pgd_anneal_iters 791 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 792 400
penalty weights 10000.0
args.step pgd_anneal_iters 792 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 793 400
penalty weights 10000.0
args.step pgd_anneal_iters 793 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 794 400
penalty weights 10000.0
args.step pgd_anneal_iters 794 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 795 400
penalty weights 10000.0
args.step pgd_anneal_iters 795 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 796 400
penalty weights 10000.0
args.step pgd_anneal_iters 796 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 797 400
penalty weights 10000.0
args.step pgd_anneal_iters 797 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 798 400
penalty weights 10000.0
args.step pgd_anneal_iters 798 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 799 400
penalty weights 10000.0
args.step pgd_anneal_iters 799 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 800 400
penalty weights 10000.0
args.step pgd_anneal_iters 800 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 801 400
penalty weights 10000.0
args.step pgd_anneal_iters 801 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 802 400
penalty weights 10000.0
args.step pgd_anneal_iters 802 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 803 400
penalty weights 10000.0
args.step pgd_anneal_iters 803 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 804 400
penalty weights 10000.0
args.step pgd_anneal_iters 804 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 805 400
penalty weights 10000.0
args.step pgd_anneal_iters 805 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [30][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1733 (15.1614)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.89it/s] 23%|##3       | 6/26 [00:00<00:00, 32.29it/s]                                               23%|##3       | 6/26 [00:00<00:00, 32.29it/s] 42%|####2     | 11/26 [00:00<00:00, 38.39it/s] 65%|######5   | 17/26 [00:00<00:00, 43.19it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.19it/s] 88%|########8 | 23/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 36.74it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.47 (  0.47)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.47 (  0.47)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.01 (  0.08)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.06 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.12 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.72it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 30/  1]	epoch_time 0.0511 (0.0411)	validation_time 0.0005 (0.0006)	train_time 0.0506 (0.0405)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5111000118255615, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.50it/s] 12%|#1        | 3/26 [00:00<00:01, 11.64it/s] 19%|#9        | 5/26 [00:00<00:01, 13.83it/s] 27%|##6       | 7/26 [00:00<00:01, 14.92it/s] 35%|###4      | 9/26 [00:00<00:01, 15.54it/s] 42%|####2     | 11/26 [00:00<00:00, 16.06it/s] 50%|#####     | 13/26 [00:00<00:00, 16.36it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.42it/s] 65%|######5   | 17/26 [00:01<00:00, 16.49it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.49it/s] 81%|########  | 21/26 [00:01<00:00, 16.52it/s] 88%|########8 | 23/26 [00:01<00:00, 16.71it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 806 400
penalty weights 10000.0
args.step pgd_anneal_iters 806 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 807 400
penalty weights 10000.0
args.step pgd_anneal_iters 807 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 808 400
penalty weights 10000.0
args.step pgd_anneal_iters 808 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 809 400
penalty weights 10000.0
args.step pgd_anneal_iters 809 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 810 400
penalty weights 10000.0
args.step pgd_anneal_iters 810 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 811 400
penalty weights 10000.0
args.step pgd_anneal_iters 811 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 812 400
penalty weights 10000.0
args.step pgd_anneal_iters 812 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 813 400
penalty weights 10000.0
args.step pgd_anneal_iters 813 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 814 400
penalty weights 10000.0
args.step pgd_anneal_iters 814 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 815 400
penalty weights 10000.0
args.step pgd_anneal_iters 815 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 816 400
penalty weights 10000.0
args.step pgd_anneal_iters 816 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 817 400
penalty weights 10000.0
args.step pgd_anneal_iters 817 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 818 400
penalty weights 10000.0
args.step pgd_anneal_iters 818 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 819 400
penalty weights 10000.0
args.step pgd_anneal_iters 819 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 820 400
penalty weights 10000.0
args.step pgd_anneal_iters 820 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 821 400
penalty weights 10000.0
args.step pgd_anneal_iters 821 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 822 400
penalty weights 10000.0
args.step pgd_anneal_iters 822 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 823 400
penalty weights 10000.0
args.step pgd_anneal_iters 823 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 824 400
penalty weights 10000.0
args.step pgd_anneal_iters 824 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 825 400
penalty weights 10000.0
args.step pgd_anneal_iters 825 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 826 400
penalty weights 10000.0
args.step pgd_anneal_iters 826 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 827 400
penalty weights 10000.0
args.step pgd_anneal_iters 827 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 828 400
penalty weights 10000.0
args.step pgd_anneal_iters 828 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 829 400
penalty weights 10000.0
args.step pgd_anneal_iters 829 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 830 400
penalty weights 10000.0
args.step pgd_anneal_iters 830 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 831 400
penalty weights 10000.0
args.step pgd_anneal_iters 831 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [31][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.1950 (15.1841)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.42it/s] 23%|##3       | 6/26 [00:00<00:00, 28.76it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.76it/s] 46%|####6     | 12/26 [00:00<00:00, 40.08it/s] 65%|######5   | 17/26 [00:00<00:00, 41.08it/s]                                                65%|######5   | 17/26 [00:00<00:00, 41.08it/s] 88%|########8 | 23/26 [00:00<00:00, 46.13it/s]100%|##########| 26/26 [00:00<00:00, 36.94it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.01 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.52)	test_corr_d   0.05 (  0.08)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 56.87it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 31/  1]	epoch_time 0.0508 (0.0414)	validation_time 0.0004 (0.0006)	train_time 0.0504 (0.0408)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5113000079989434, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.17it/s] 12%|#1        | 3/26 [00:00<00:02, 10.98it/s] 19%|#9        | 5/26 [00:00<00:01, 13.38it/s] 27%|##6       | 7/26 [00:00<00:01, 14.71it/s] 35%|###4      | 9/26 [00:00<00:01, 15.45it/s] 42%|####2     | 11/26 [00:00<00:00, 15.87it/s] 50%|#####     | 13/26 [00:00<00:00, 16.24it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.43it/s] 65%|######5   | 17/26 [00:01<00:00, 16.65it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.81it/s] 81%|########  | 21/26 [00:01<00:00, 16.74it/s] 88%|########8 | 23/26 [00:01<00:00, 16.86it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.22it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 832 400
penalty weights 10000.0
args.step pgd_anneal_iters 832 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 833 400
penalty weights 10000.0
args.step pgd_anneal_iters 833 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 834 400
penalty weights 10000.0
args.step pgd_anneal_iters 834 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 835 400
penalty weights 10000.0
args.step pgd_anneal_iters 835 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 836 400
penalty weights 10000.0
args.step pgd_anneal_iters 836 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 837 400
penalty weights 10000.0
args.step pgd_anneal_iters 837 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 838 400
penalty weights 10000.0
args.step pgd_anneal_iters 838 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 839 400
penalty weights 10000.0
args.step pgd_anneal_iters 839 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 840 400
penalty weights 10000.0
args.step pgd_anneal_iters 840 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 841 400
penalty weights 10000.0
args.step pgd_anneal_iters 841 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 842 400
penalty weights 10000.0
args.step pgd_anneal_iters 842 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 843 400
penalty weights 10000.0
args.step pgd_anneal_iters 843 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 844 400
penalty weights 10000.0
args.step pgd_anneal_iters 844 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 845 400
penalty weights 10000.0
args.step pgd_anneal_iters 845 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 846 400
penalty weights 10000.0
args.step pgd_anneal_iters 846 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 847 400
penalty weights 10000.0
args.step pgd_anneal_iters 847 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 848 400
penalty weights 10000.0
args.step pgd_anneal_iters 848 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 849 400
penalty weights 10000.0
args.step pgd_anneal_iters 849 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 850 400
penalty weights 10000.0
args.step pgd_anneal_iters 850 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 851 400
penalty weights 10000.0
args.step pgd_anneal_iters 851 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 852 400
penalty weights 10000.0
args.step pgd_anneal_iters 852 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 853 400
penalty weights 10000.0
args.step pgd_anneal_iters 853 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 854 400
penalty weights 10000.0
args.step pgd_anneal_iters 854 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 855 400
penalty weights 10000.0
args.step pgd_anneal_iters 855 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 856 400
penalty weights 10000.0
args.step pgd_anneal_iters 856 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 857 400
penalty weights 10000.0
args.step pgd_anneal_iters 857 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [32][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2149 (15.2048)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.62it/s] 27%|##6       | 7/26 [00:00<00:00, 36.24it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.24it/s] 50%|#####     | 13/26 [00:00<00:00, 41.68it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.74it/s] 96%|#########6| 25/26 [00:00<00:00, 47.77it/s]100%|##########| 26/26 [00:00<00:00, 40.91it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.11)
Test: [  10/  26]	Loss 0.690 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.690 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.01 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.05 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.11 (  0.07)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.14it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 32/  1]	epoch_time 0.0503 (0.0417)	validation_time 0.0003 (0.0006)	train_time 0.0499 (0.0411)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5109000121355056, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.69it/s] 12%|#1        | 3/26 [00:00<00:02, 10.78it/s] 19%|#9        | 5/26 [00:00<00:01, 13.36it/s] 27%|##6       | 7/26 [00:00<00:01, 14.76it/s] 35%|###4      | 9/26 [00:00<00:01, 15.65it/s] 42%|####2     | 11/26 [00:00<00:00, 16.22it/s] 50%|#####     | 13/26 [00:00<00:00, 16.60it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.83it/s] 65%|######5   | 17/26 [00:01<00:00, 17.00it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.08it/s] 81%|########  | 21/26 [00:01<00:00, 17.13it/s] 88%|########8 | 23/26 [00:01<00:00, 17.25it/s] 96%|#########6| 25/26 [00:01<00:00, 17.08it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 858 400
penalty weights 10000.0
args.step pgd_anneal_iters 858 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 859 400
penalty weights 10000.0
args.step pgd_anneal_iters 859 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 860 400
penalty weights 10000.0
args.step pgd_anneal_iters 860 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 861 400
penalty weights 10000.0
args.step pgd_anneal_iters 861 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 862 400
penalty weights 10000.0
args.step pgd_anneal_iters 862 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 863 400
penalty weights 10000.0
args.step pgd_anneal_iters 863 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 864 400
penalty weights 10000.0
args.step pgd_anneal_iters 864 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 865 400
penalty weights 10000.0
args.step pgd_anneal_iters 865 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 866 400
penalty weights 10000.0
args.step pgd_anneal_iters 866 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 867 400
penalty weights 10000.0
args.step pgd_anneal_iters 867 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 868 400
penalty weights 10000.0
args.step pgd_anneal_iters 868 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 869 400
penalty weights 10000.0
args.step pgd_anneal_iters 869 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 870 400
penalty weights 10000.0
args.step pgd_anneal_iters 870 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 871 400
penalty weights 10000.0
args.step pgd_anneal_iters 871 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 872 400
penalty weights 10000.0
args.step pgd_anneal_iters 872 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 873 400
penalty weights 10000.0
args.step pgd_anneal_iters 873 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 874 400
penalty weights 10000.0
args.step pgd_anneal_iters 874 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 875 400
penalty weights 10000.0
args.step pgd_anneal_iters 875 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 876 400
penalty weights 10000.0
args.step pgd_anneal_iters 876 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 877 400
penalty weights 10000.0
args.step pgd_anneal_iters 877 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 878 400
penalty weights 10000.0
args.step pgd_anneal_iters 878 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 879 400
penalty weights 10000.0
args.step pgd_anneal_iters 879 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 880 400
penalty weights 10000.0
args.step pgd_anneal_iters 880 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 881 400
penalty weights 10000.0
args.step pgd_anneal_iters 881 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 882 400
penalty weights 10000.0
args.step pgd_anneal_iters 882 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 883 400
penalty weights 10000.0
args.step pgd_anneal_iters 883 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [33][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.47 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2333 (15.2239)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.03it/s] 27%|##6       | 7/26 [00:00<00:00, 32.27it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.27it/s] 50%|#####     | 13/26 [00:00<00:00, 39.07it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.30it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.30it/s] 96%|#########6| 25/26 [00:00<00:00, 45.90it/s]100%|##########| 26/26 [00:00<00:00, 38.21it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d   0.00 (  0.07)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.04 (  0.07)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.49 (  0.51)	test_minacc   0.47 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.47 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.33it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.01 ( -0.01)
Overall Timing[ 33/  1]	epoch_time 0.0495 (0.0419)	validation_time 0.0003 (0.0006)	train_time 0.0491 (0.0413)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5111000147759914, 0.5090000033378601)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 12%|#1        | 3/26 [00:00<00:01, 11.53it/s] 19%|#9        | 5/26 [00:00<00:01, 13.66it/s] 27%|##6       | 7/26 [00:00<00:01, 14.79it/s] 35%|###4      | 9/26 [00:00<00:01, 15.57it/s] 42%|####2     | 11/26 [00:00<00:00, 16.17it/s] 50%|#####     | 13/26 [00:00<00:00, 16.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.40it/s] 65%|######5   | 17/26 [00:01<00:00, 16.28it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.37it/s] 81%|########  | 21/26 [00:01<00:00, 16.32it/s] 88%|########8 | 23/26 [00:01<00:00, 16.57it/s] 96%|#########6| 25/26 [00:01<00:00, 16.69it/s]100%|##########| 26/26 [00:01<00:00, 15.23it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 884 400
penalty weights 10000.0
args.step pgd_anneal_iters 884 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 885 400
penalty weights 10000.0
args.step pgd_anneal_iters 885 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 886 400
penalty weights 10000.0
args.step pgd_anneal_iters 886 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 887 400
penalty weights 10000.0
args.step pgd_anneal_iters 887 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 888 400
penalty weights 10000.0
args.step pgd_anneal_iters 888 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 889 400
penalty weights 10000.0
args.step pgd_anneal_iters 889 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 890 400
penalty weights 10000.0
args.step pgd_anneal_iters 890 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 891 400
penalty weights 10000.0
args.step pgd_anneal_iters 891 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 892 400
penalty weights 10000.0
args.step pgd_anneal_iters 892 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 893 400
penalty weights 10000.0
args.step pgd_anneal_iters 893 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 894 400
penalty weights 10000.0
args.step pgd_anneal_iters 894 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 895 400
penalty weights 10000.0
args.step pgd_anneal_iters 895 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 896 400
penalty weights 10000.0
args.step pgd_anneal_iters 896 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 897 400
penalty weights 10000.0
args.step pgd_anneal_iters 897 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 898 400
penalty weights 10000.0
args.step pgd_anneal_iters 898 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 899 400
penalty weights 10000.0
args.step pgd_anneal_iters 899 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 900 400
penalty weights 10000.0
args.step pgd_anneal_iters 900 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 901 400
penalty weights 10000.0
args.step pgd_anneal_iters 901 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 902 400
penalty weights 10000.0
args.step pgd_anneal_iters 902 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 903 400
penalty weights 10000.0
args.step pgd_anneal_iters 903 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 904 400
penalty weights 10000.0
args.step pgd_anneal_iters 904 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 905 400
penalty weights 10000.0
args.step pgd_anneal_iters 905 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 906 400
penalty weights 10000.0
args.step pgd_anneal_iters 906 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 907 400
penalty weights 10000.0
args.step pgd_anneal_iters 907 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 908 400
penalty weights 10000.0
args.step pgd_anneal_iters 908 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 909 400
penalty weights 10000.0
args.step pgd_anneal_iters 909 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [34][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2504 (15.2417)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.60it/s] 27%|##6       | 7/26 [00:00<00:00, 30.35it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.35it/s] 50%|#####     | 13/26 [00:00<00:00, 38.06it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.41it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.41it/s] 96%|#########6| 25/26 [00:00<00:00, 45.48it/s]100%|##########| 26/26 [00:00<00:00, 37.18it/s]
Test: [   0/  26]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.10 (  0.10)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.00 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.10 (  0.06)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.53it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 34/  1]	epoch_time 0.0500 (0.0421)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0415)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5115000161230564, 0.5120000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.37it/s] 12%|#1        | 3/26 [00:00<00:01, 12.33it/s] 19%|#9        | 5/26 [00:00<00:01, 14.39it/s] 27%|##6       | 7/26 [00:00<00:01, 15.34it/s] 35%|###4      | 9/26 [00:00<00:01, 16.03it/s] 42%|####2     | 11/26 [00:00<00:00, 16.37it/s] 50%|#####     | 13/26 [00:00<00:00, 16.50it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.65it/s] 65%|######5   | 17/26 [00:01<00:00, 16.74it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.90it/s] 81%|########  | 21/26 [00:01<00:00, 16.92it/s] 88%|########8 | 23/26 [00:01<00:00, 16.96it/s] 96%|#########6| 25/26 [00:01<00:00, 16.92it/s]100%|##########| 26/26 [00:01<00:00, 15.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 910 400
penalty weights 10000.0
args.step pgd_anneal_iters 910 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 911 400
penalty weights 10000.0
args.step pgd_anneal_iters 911 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 912 400
penalty weights 10000.0
args.step pgd_anneal_iters 912 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 913 400
penalty weights 10000.0
args.step pgd_anneal_iters 913 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 914 400
penalty weights 10000.0
args.step pgd_anneal_iters 914 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 915 400
penalty weights 10000.0
args.step pgd_anneal_iters 915 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 916 400
penalty weights 10000.0
args.step pgd_anneal_iters 916 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 917 400
penalty weights 10000.0
args.step pgd_anneal_iters 917 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 918 400
penalty weights 10000.0
args.step pgd_anneal_iters 918 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 919 400
penalty weights 10000.0
args.step pgd_anneal_iters 919 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 920 400
penalty weights 10000.0
args.step pgd_anneal_iters 920 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 921 400
penalty weights 10000.0
args.step pgd_anneal_iters 921 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 922 400
penalty weights 10000.0
args.step pgd_anneal_iters 922 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 923 400
penalty weights 10000.0
args.step pgd_anneal_iters 923 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 924 400
penalty weights 10000.0
args.step pgd_anneal_iters 924 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 925 400
penalty weights 10000.0
args.step pgd_anneal_iters 925 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 926 400
penalty weights 10000.0
args.step pgd_anneal_iters 926 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 927 400
penalty weights 10000.0
args.step pgd_anneal_iters 927 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 928 400
penalty weights 10000.0
args.step pgd_anneal_iters 928 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 929 400
penalty weights 10000.0
args.step pgd_anneal_iters 929 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 930 400
penalty weights 10000.0
args.step pgd_anneal_iters 930 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 931 400
penalty weights 10000.0
args.step pgd_anneal_iters 931 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 932 400
penalty weights 10000.0
args.step pgd_anneal_iters 932 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 933 400
penalty weights 10000.0
args.step pgd_anneal_iters 933 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 934 400
penalty weights 10000.0
args.step pgd_anneal_iters 934 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 935 400
penalty weights 10000.0
args.step pgd_anneal_iters 935 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [35][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2664 (15.2582)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 27%|##6       | 7/26 [00:00<00:00, 28.41it/s]                                               27%|##6       | 7/26 [00:00<00:00, 28.41it/s] 50%|#####     | 13/26 [00:00<00:00, 36.56it/s] 73%|#######3  | 19/26 [00:00<00:00, 43.84it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 43.84it/s] 96%|#########6| 25/26 [00:00<00:00, 45.50it/s]100%|##########| 26/26 [00:00<00:00, 35.98it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.00 (  0.06)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.04it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 35/  1]	epoch_time 0.0502 (0.0424)	validation_time 0.0004 (0.0005)	train_time 0.0499 (0.0418)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5114000077843666, 0.5130000114440918)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.81it/s] 12%|#1        | 3/26 [00:00<00:02, 11.15it/s] 19%|#9        | 5/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:01, 14.85it/s] 35%|###4      | 9/26 [00:00<00:01, 15.61it/s] 42%|####2     | 11/26 [00:00<00:00, 16.18it/s] 50%|#####     | 13/26 [00:00<00:00, 16.45it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.60it/s] 65%|######5   | 17/26 [00:01<00:00, 16.69it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.76it/s] 81%|########  | 21/26 [00:01<00:00, 16.81it/s] 88%|########8 | 23/26 [00:01<00:00, 16.73it/s] 96%|#########6| 25/26 [00:01<00:00, 16.07it/s]100%|##########| 26/26 [00:01<00:00, 15.07it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 936 400
penalty weights 10000.0
args.step pgd_anneal_iters 936 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 937 400
penalty weights 10000.0
args.step pgd_anneal_iters 937 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 938 400
penalty weights 10000.0
args.step pgd_anneal_iters 938 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 939 400
penalty weights 10000.0
args.step pgd_anneal_iters 939 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 940 400
penalty weights 10000.0
args.step pgd_anneal_iters 940 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 941 400
penalty weights 10000.0
args.step pgd_anneal_iters 941 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 942 400
penalty weights 10000.0
args.step pgd_anneal_iters 942 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 943 400
penalty weights 10000.0
args.step pgd_anneal_iters 943 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 944 400
penalty weights 10000.0
args.step pgd_anneal_iters 944 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 945 400
penalty weights 10000.0
args.step pgd_anneal_iters 945 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 946 400
penalty weights 10000.0
args.step pgd_anneal_iters 946 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 947 400
penalty weights 10000.0
args.step pgd_anneal_iters 947 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 948 400
penalty weights 10000.0
args.step pgd_anneal_iters 948 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 949 400
penalty weights 10000.0
args.step pgd_anneal_iters 949 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 950 400
penalty weights 10000.0
args.step pgd_anneal_iters 950 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 951 400
penalty weights 10000.0
args.step pgd_anneal_iters 951 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 952 400
penalty weights 10000.0
args.step pgd_anneal_iters 952 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 953 400
penalty weights 10000.0
args.step pgd_anneal_iters 953 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 954 400
penalty weights 10000.0
args.step pgd_anneal_iters 954 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 955 400
penalty weights 10000.0
args.step pgd_anneal_iters 955 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 956 400
penalty weights 10000.0
args.step pgd_anneal_iters 956 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 957 400
penalty weights 10000.0
args.step pgd_anneal_iters 957 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 958 400
penalty weights 10000.0
args.step pgd_anneal_iters 958 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 959 400
penalty weights 10000.0
args.step pgd_anneal_iters 959 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 960 400
penalty weights 10000.0
args.step pgd_anneal_iters 960 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 961 400
penalty weights 10000.0
args.step pgd_anneal_iters 961 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [36][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2814 (15.2737)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.05it/s] 23%|##3       | 6/26 [00:00<00:00, 28.51it/s]                                               23%|##3       | 6/26 [00:00<00:00, 28.51it/s] 42%|####2     | 11/26 [00:00<00:00, 37.29it/s] 65%|######5   | 17/26 [00:00<00:00, 43.39it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.39it/s] 85%|########4 | 22/26 [00:00<00:00, 45.21it/s]100%|##########| 26/26 [00:00<00:00, 37.55it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.50 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.692)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.03 (  0.06)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.09 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.50 (  0.50)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 36/  1]	epoch_time 0.0501 (0.0426)	validation_time 0.0003 (0.0005)	train_time 0.0498 (0.0420)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5109000124633313, 0.5110000371932983)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.88it/s] 12%|#1        | 3/26 [00:00<00:01, 12.47it/s] 19%|#9        | 5/26 [00:00<00:01, 14.17it/s] 27%|##6       | 7/26 [00:00<00:01, 15.18it/s] 35%|###4      | 9/26 [00:00<00:01, 15.74it/s] 42%|####2     | 11/26 [00:00<00:00, 16.01it/s] 50%|#####     | 13/26 [00:00<00:00, 16.05it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.17it/s] 65%|######5   | 17/26 [00:01<00:00, 16.36it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.41it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.67it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.33it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 962 400
penalty weights 10000.0
args.step pgd_anneal_iters 962 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 963 400
penalty weights 10000.0
args.step pgd_anneal_iters 963 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 964 400
penalty weights 10000.0
args.step pgd_anneal_iters 964 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 965 400
penalty weights 10000.0
args.step pgd_anneal_iters 965 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 966 400
penalty weights 10000.0
args.step pgd_anneal_iters 966 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 967 400
penalty weights 10000.0
args.step pgd_anneal_iters 967 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 968 400
penalty weights 10000.0
args.step pgd_anneal_iters 968 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 969 400
penalty weights 10000.0
args.step pgd_anneal_iters 969 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 970 400
penalty weights 10000.0
args.step pgd_anneal_iters 970 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 971 400
penalty weights 10000.0
args.step pgd_anneal_iters 971 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 972 400
penalty weights 10000.0
args.step pgd_anneal_iters 972 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 973 400
penalty weights 10000.0
args.step pgd_anneal_iters 973 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 974 400
penalty weights 10000.0
args.step pgd_anneal_iters 974 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 975 400
penalty weights 10000.0
args.step pgd_anneal_iters 975 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 976 400
penalty weights 10000.0
args.step pgd_anneal_iters 976 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 977 400
penalty weights 10000.0
args.step pgd_anneal_iters 977 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 978 400
penalty weights 10000.0
args.step pgd_anneal_iters 978 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 979 400
penalty weights 10000.0
args.step pgd_anneal_iters 979 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 980 400
penalty weights 10000.0
args.step pgd_anneal_iters 980 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 981 400
penalty weights 10000.0
args.step pgd_anneal_iters 981 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 982 400
penalty weights 10000.0
args.step pgd_anneal_iters 982 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 983 400
penalty weights 10000.0
args.step pgd_anneal_iters 983 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 984 400
penalty weights 10000.0
args.step pgd_anneal_iters 984 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 985 400
penalty weights 10000.0
args.step pgd_anneal_iters 985 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 986 400
penalty weights 10000.0
args.step pgd_anneal_iters 986 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 987 400
penalty weights 10000.0
args.step pgd_anneal_iters 987 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [37][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.2954 (15.2882)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.38it/s] 27%|##6       | 7/26 [00:00<00:00, 37.19it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.19it/s] 50%|#####     | 13/26 [00:00<00:00, 41.38it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.26it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.26it/s] 96%|#########6| 25/26 [00:00<00:00, 47.28it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.09 (  0.09)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.01 (  0.05)
Test: [  20/  26]	Loss 0.693 (0.692)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.692)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.08 (  0.05)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.08it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.49)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.49)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 37/  1]	epoch_time 0.0506 (0.0428)	validation_time 0.0004 (0.0005)	train_time 0.0502 (0.0422)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5105000090003013, 0.5100000500679016)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.31it/s] 12%|#1        | 3/26 [00:00<00:02, 10.57it/s] 19%|#9        | 5/26 [00:00<00:01, 13.06it/s] 27%|##6       | 7/26 [00:00<00:01, 14.63it/s] 35%|###4      | 9/26 [00:00<00:01, 15.41it/s] 42%|####2     | 11/26 [00:00<00:00, 16.05it/s] 50%|#####     | 13/26 [00:00<00:00, 16.48it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.67it/s] 65%|######5   | 17/26 [00:01<00:00, 16.66it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.87it/s] 81%|########  | 21/26 [00:01<00:00, 16.92it/s] 88%|########8 | 23/26 [00:01<00:00, 17.02it/s] 96%|#########6| 25/26 [00:01<00:00, 17.03it/s]100%|##########| 26/26 [00:01<00:00, 15.14it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 988 400
penalty weights 10000.0
args.step pgd_anneal_iters 988 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 989 400
penalty weights 10000.0
args.step pgd_anneal_iters 989 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 990 400
penalty weights 10000.0
args.step pgd_anneal_iters 990 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 991 400
penalty weights 10000.0
args.step pgd_anneal_iters 991 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 992 400
penalty weights 10000.0
args.step pgd_anneal_iters 992 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 993 400
penalty weights 10000.0
args.step pgd_anneal_iters 993 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 994 400
penalty weights 10000.0
args.step pgd_anneal_iters 994 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 995 400
penalty weights 10000.0
args.step pgd_anneal_iters 995 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 996 400
penalty weights 10000.0
args.step pgd_anneal_iters 996 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 997 400
penalty weights 10000.0
args.step pgd_anneal_iters 997 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 998 400
penalty weights 10000.0
args.step pgd_anneal_iters 998 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 999 400
penalty weights 10000.0
args.step pgd_anneal_iters 999 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1000 400
penalty weights 10000.0
args.step pgd_anneal_iters 1000 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1001 400
penalty weights 10000.0
args.step pgd_anneal_iters 1001 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1002 400
penalty weights 10000.0
args.step pgd_anneal_iters 1002 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1003 400
penalty weights 10000.0
args.step pgd_anneal_iters 1003 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1004 400
penalty weights 10000.0
args.step pgd_anneal_iters 1004 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1005 400
penalty weights 10000.0
args.step pgd_anneal_iters 1005 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1006 400
penalty weights 10000.0
args.step pgd_anneal_iters 1006 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1007 400
penalty weights 10000.0
args.step pgd_anneal_iters 1007 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1008 400
penalty weights 10000.0
args.step pgd_anneal_iters 1008 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1009 400
penalty weights 10000.0
args.step pgd_anneal_iters 1009 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1010 400
penalty weights 10000.0
args.step pgd_anneal_iters 1010 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1011 400
penalty weights 10000.0
args.step pgd_anneal_iters 1011 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1012 400
penalty weights 10000.0
args.step pgd_anneal_iters 1012 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1013 400
penalty weights 10000.0
args.step pgd_anneal_iters 1013 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [38][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3085 (15.3017)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.36it/s] 27%|##6       | 7/26 [00:00<00:00, 35.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.51it/s] 46%|####6     | 12/26 [00:00<00:00, 40.28it/s] 65%|######5   | 17/26 [00:00<00:00, 40.51it/s]                                                65%|######5   | 17/26 [00:00<00:00, 40.51it/s] 88%|########8 | 23/26 [00:00<00:00, 45.64it/s]100%|##########| 26/26 [00:00<00:00, 38.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.691 (0.692)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.691 (0.692)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.52)	test_minacc   0.51 (  0.52)	test_majacc   0.50 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.52)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.50 (  0.52)	test_corr_d   0.02 (  0.05)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.08 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.99it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 38/  1]	epoch_time 0.0502 (0.0430)	validation_time 0.0004 (0.0005)	train_time 0.0498 (0.0424)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5108000159561634, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.20it/s] 12%|#1        | 3/26 [00:00<00:01, 12.52it/s] 19%|#9        | 5/26 [00:00<00:01, 14.51it/s] 27%|##6       | 7/26 [00:00<00:01, 15.43it/s] 35%|###4      | 9/26 [00:00<00:01, 16.08it/s] 42%|####2     | 11/26 [00:00<00:00, 16.42it/s] 50%|#####     | 13/26 [00:00<00:00, 16.56it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.70it/s] 65%|######5   | 17/26 [00:01<00:00, 16.79it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.75it/s] 81%|########  | 21/26 [00:01<00:00, 16.77it/s] 88%|########8 | 23/26 [00:01<00:00, 16.75it/s] 96%|#########6| 25/26 [00:01<00:00, 16.84it/s]100%|##########| 26/26 [00:01<00:00, 15.56it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1014 400
penalty weights 10000.0
args.step pgd_anneal_iters 1014 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1015 400
penalty weights 10000.0
args.step pgd_anneal_iters 1015 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1016 400
penalty weights 10000.0
args.step pgd_anneal_iters 1016 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1017 400
penalty weights 10000.0
args.step pgd_anneal_iters 1017 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1018 400
penalty weights 10000.0
args.step pgd_anneal_iters 1018 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1019 400
penalty weights 10000.0
args.step pgd_anneal_iters 1019 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1020 400
penalty weights 10000.0
args.step pgd_anneal_iters 1020 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1021 400
penalty weights 10000.0
args.step pgd_anneal_iters 1021 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1022 400
penalty weights 10000.0
args.step pgd_anneal_iters 1022 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1023 400
penalty weights 10000.0
args.step pgd_anneal_iters 1023 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1024 400
penalty weights 10000.0
args.step pgd_anneal_iters 1024 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1025 400
penalty weights 10000.0
args.step pgd_anneal_iters 1025 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1026 400
penalty weights 10000.0
args.step pgd_anneal_iters 1026 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1027 400
penalty weights 10000.0
args.step pgd_anneal_iters 1027 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1028 400
penalty weights 10000.0
args.step pgd_anneal_iters 1028 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1029 400
penalty weights 10000.0
args.step pgd_anneal_iters 1029 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1030 400
penalty weights 10000.0
args.step pgd_anneal_iters 1030 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1031 400
penalty weights 10000.0
args.step pgd_anneal_iters 1031 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1032 400
penalty weights 10000.0
args.step pgd_anneal_iters 1032 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1033 400
penalty weights 10000.0
args.step pgd_anneal_iters 1033 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1034 400
penalty weights 10000.0
args.step pgd_anneal_iters 1034 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1035 400
penalty weights 10000.0
args.step pgd_anneal_iters 1035 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1036 400
penalty weights 10000.0
args.step pgd_anneal_iters 1036 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1037 400
penalty weights 10000.0
args.step pgd_anneal_iters 1037 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1038 400
penalty weights 10000.0
args.step pgd_anneal_iters 1038 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1039 400
penalty weights 10000.0
args.step pgd_anneal_iters 1039 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [39][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3206 (15.3143)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.10it/s] 27%|##6       | 7/26 [00:00<00:00, 32.61it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.61it/s] 50%|#####     | 13/26 [00:00<00:00, 39.29it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.52it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.52it/s] 96%|#########6| 25/26 [00:00<00:00, 46.78it/s]100%|##########| 26/26 [00:00<00:00, 38.69it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.48 (  0.48)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.48 (  0.48)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.01 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.07 (  0.04)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.33it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d  -0.00 ( -0.00)
Overall Timing[ 39/  1]	epoch_time 0.0495 (0.0431)	validation_time 0.0004 (0.0005)	train_time 0.0491 (0.0426)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.510500012487173, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.47it/s] 12%|#1        | 3/26 [00:00<00:02, 10.88it/s] 19%|#9        | 5/26 [00:00<00:01, 13.45it/s] 27%|##6       | 7/26 [00:00<00:01, 14.89it/s] 35%|###4      | 9/26 [00:00<00:01, 15.70it/s] 42%|####2     | 11/26 [00:00<00:00, 16.22it/s] 50%|#####     | 13/26 [00:00<00:00, 16.59it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.87it/s] 65%|######5   | 17/26 [00:01<00:00, 16.99it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.10it/s] 81%|########  | 21/26 [00:01<00:00, 17.19it/s] 88%|########8 | 23/26 [00:01<00:00, 17.29it/s] 96%|#########6| 25/26 [00:01<00:00, 17.26it/s]100%|##########| 26/26 [00:01<00:00, 15.43it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1040 400
penalty weights 10000.0
args.step pgd_anneal_iters 1040 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1041 400
penalty weights 10000.0
args.step pgd_anneal_iters 1041 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1042 400
penalty weights 10000.0
args.step pgd_anneal_iters 1042 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1043 400
penalty weights 10000.0
args.step pgd_anneal_iters 1043 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1044 400
penalty weights 10000.0
args.step pgd_anneal_iters 1044 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1045 400
penalty weights 10000.0
args.step pgd_anneal_iters 1045 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1046 400
penalty weights 10000.0
args.step pgd_anneal_iters 1046 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1047 400
penalty weights 10000.0
args.step pgd_anneal_iters 1047 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1048 400
penalty weights 10000.0
args.step pgd_anneal_iters 1048 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1049 400
penalty weights 10000.0
args.step pgd_anneal_iters 1049 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1050 400
penalty weights 10000.0
args.step pgd_anneal_iters 1050 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1051 400
penalty weights 10000.0
args.step pgd_anneal_iters 1051 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1052 400
penalty weights 10000.0
args.step pgd_anneal_iters 1052 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1053 400
penalty weights 10000.0
args.step pgd_anneal_iters 1053 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1054 400
penalty weights 10000.0
args.step pgd_anneal_iters 1054 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1055 400
penalty weights 10000.0
args.step pgd_anneal_iters 1055 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1056 400
penalty weights 10000.0
args.step pgd_anneal_iters 1056 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1057 400
penalty weights 10000.0
args.step pgd_anneal_iters 1057 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1058 400
penalty weights 10000.0
args.step pgd_anneal_iters 1058 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1059 400
penalty weights 10000.0
args.step pgd_anneal_iters 1059 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1060 400
penalty weights 10000.0
args.step pgd_anneal_iters 1060 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1061 400
penalty weights 10000.0
args.step pgd_anneal_iters 1061 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1062 400
penalty weights 10000.0
args.step pgd_anneal_iters 1062 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1063 400
penalty weights 10000.0
args.step pgd_anneal_iters 1063 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1064 400
penalty weights 10000.0
args.step pgd_anneal_iters 1064 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1065 400
penalty weights 10000.0
args.step pgd_anneal_iters 1065 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [40][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.49 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.49 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3319 (15.3260)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.51it/s] 23%|##3       | 6/26 [00:00<00:00, 30.47it/s]                                               23%|##3       | 6/26 [00:00<00:00, 30.47it/s] 46%|####6     | 12/26 [00:00<00:00, 38.64it/s] 69%|######9   | 18/26 [00:00<00:00, 45.58it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.58it/s] 92%|#########2| 24/26 [00:00<00:00, 46.07it/s]100%|##########| 26/26 [00:00<00:00, 38.76it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.02 (  0.04)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.49 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.49 (  0.52)	test_corr_d   0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.49 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.49 (  0.51)	test_corr_d   0.07 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.92it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 40/  1]	epoch_time 0.0493 (0.0433)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0427)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5112000136077404, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.33it/s] 12%|#1        | 3/26 [00:00<00:02, 11.21it/s] 19%|#9        | 5/26 [00:00<00:01, 13.52it/s] 27%|##6       | 7/26 [00:00<00:01, 14.76it/s] 35%|###4      | 9/26 [00:00<00:01, 15.49it/s] 42%|####2     | 11/26 [00:00<00:00, 15.82it/s] 50%|#####     | 13/26 [00:00<00:00, 16.23it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.50it/s] 65%|######5   | 17/26 [00:01<00:00, 16.63it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.61it/s] 81%|########  | 21/26 [00:01<00:00, 16.62it/s] 88%|########8 | 23/26 [00:01<00:00, 16.80it/s] 96%|#########6| 25/26 [00:01<00:00, 16.75it/s]100%|##########| 26/26 [00:01<00:00, 15.19it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1066 400
penalty weights 10000.0
args.step pgd_anneal_iters 1066 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1067 400
penalty weights 10000.0
args.step pgd_anneal_iters 1067 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1068 400
penalty weights 10000.0
args.step pgd_anneal_iters 1068 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1069 400
penalty weights 10000.0
args.step pgd_anneal_iters 1069 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1070 400
penalty weights 10000.0
args.step pgd_anneal_iters 1070 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1071 400
penalty weights 10000.0
args.step pgd_anneal_iters 1071 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1072 400
penalty weights 10000.0
args.step pgd_anneal_iters 1072 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1073 400
penalty weights 10000.0
args.step pgd_anneal_iters 1073 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1074 400
penalty weights 10000.0
args.step pgd_anneal_iters 1074 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1075 400
penalty weights 10000.0
args.step pgd_anneal_iters 1075 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1076 400
penalty weights 10000.0
args.step pgd_anneal_iters 1076 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1077 400
penalty weights 10000.0
args.step pgd_anneal_iters 1077 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1078 400
penalty weights 10000.0
args.step pgd_anneal_iters 1078 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1079 400
penalty weights 10000.0
args.step pgd_anneal_iters 1079 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1080 400
penalty weights 10000.0
args.step pgd_anneal_iters 1080 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1081 400
penalty weights 10000.0
args.step pgd_anneal_iters 1081 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1082 400
penalty weights 10000.0
args.step pgd_anneal_iters 1082 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1083 400
penalty weights 10000.0
args.step pgd_anneal_iters 1083 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1084 400
penalty weights 10000.0
args.step pgd_anneal_iters 1084 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1085 400
penalty weights 10000.0
args.step pgd_anneal_iters 1085 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1086 400
penalty weights 10000.0
args.step pgd_anneal_iters 1086 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1087 400
penalty weights 10000.0
args.step pgd_anneal_iters 1087 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1088 400
penalty weights 10000.0
args.step pgd_anneal_iters 1088 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1089 400
penalty weights 10000.0
args.step pgd_anneal_iters 1089 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1090 400
penalty weights 10000.0
args.step pgd_anneal_iters 1090 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1091 400
penalty weights 10000.0
args.step pgd_anneal_iters 1091 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [41][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.50 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.50 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3423 (15.3369)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.78it/s] 27%|##6       | 7/26 [00:00<00:00, 35.16it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.16it/s] 50%|#####     | 13/26 [00:00<00:00, 40.83it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.76it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.76it/s] 96%|#########6| 25/26 [00:00<00:00, 46.32it/s]100%|##########| 26/26 [00:00<00:00, 39.41it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.53 (  0.53)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.07 (  0.07)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.50 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.00 (  0.04)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.50 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.50 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.50 (  0.51)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 41/  1]	epoch_time 0.0502 (0.0435)	validation_time 0.0003 (0.0005)	train_time 0.0498 (0.0429)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5128000168800354, 0.5070000290870667)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.92it/s] 12%|#1        | 3/26 [00:00<00:02, 10.14it/s] 19%|#9        | 5/26 [00:00<00:01, 12.66it/s] 27%|##6       | 7/26 [00:00<00:01, 14.11it/s] 35%|###4      | 9/26 [00:00<00:01, 15.12it/s] 42%|####2     | 11/26 [00:00<00:00, 15.63it/s] 50%|#####     | 13/26 [00:00<00:00, 16.01it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.24it/s] 65%|######5   | 17/26 [00:01<00:00, 16.46it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.78it/s] 88%|########8 | 23/26 [00:01<00:00, 16.89it/s] 96%|#########6| 25/26 [00:01<00:00, 16.91it/s]100%|##########| 26/26 [00:01<00:00, 14.93it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1092 400
penalty weights 10000.0
args.step pgd_anneal_iters 1092 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1093 400
penalty weights 10000.0
args.step pgd_anneal_iters 1093 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1094 400
penalty weights 10000.0
args.step pgd_anneal_iters 1094 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1095 400
penalty weights 10000.0
args.step pgd_anneal_iters 1095 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1096 400
penalty weights 10000.0
args.step pgd_anneal_iters 1096 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1097 400
penalty weights 10000.0
args.step pgd_anneal_iters 1097 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1098 400
penalty weights 10000.0
args.step pgd_anneal_iters 1098 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1099 400
penalty weights 10000.0
args.step pgd_anneal_iters 1099 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1100 400
penalty weights 10000.0
args.step pgd_anneal_iters 1100 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1101 400
penalty weights 10000.0
args.step pgd_anneal_iters 1101 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1102 400
penalty weights 10000.0
args.step pgd_anneal_iters 1102 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1103 400
penalty weights 10000.0
args.step pgd_anneal_iters 1103 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1104 400
penalty weights 10000.0
args.step pgd_anneal_iters 1104 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1105 400
penalty weights 10000.0
args.step pgd_anneal_iters 1105 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1106 400
penalty weights 10000.0
args.step pgd_anneal_iters 1106 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1107 400
penalty weights 10000.0
args.step pgd_anneal_iters 1107 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1108 400
penalty weights 10000.0
args.step pgd_anneal_iters 1108 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1109 400
penalty weights 10000.0
args.step pgd_anneal_iters 1109 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1110 400
penalty weights 10000.0
args.step pgd_anneal_iters 1110 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1111 400
penalty weights 10000.0
args.step pgd_anneal_iters 1111 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1112 400
penalty weights 10000.0
args.step pgd_anneal_iters 1112 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1113 400
penalty weights 10000.0
args.step pgd_anneal_iters 1113 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1114 400
penalty weights 10000.0
args.step pgd_anneal_iters 1114 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1115 400
penalty weights 10000.0
args.step pgd_anneal_iters 1115 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1116 400
penalty weights 10000.0
args.step pgd_anneal_iters 1116 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1117 400
penalty weights 10000.0
args.step pgd_anneal_iters 1117 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [42][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.51 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3518 (15.3469)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.83it/s] 31%|###       | 8/26 [00:00<00:00, 40.09it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.09it/s] 50%|#####     | 13/26 [00:00<00:00, 40.53it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.17it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.17it/s] 96%|#########6| 25/26 [00:00<00:00, 46.28it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.51)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.51)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.06 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.68it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 42/  1]	epoch_time 0.0495 (0.0436)	validation_time 0.0004 (0.0005)	train_time 0.0491 (0.0430)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5110000139176846, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.39it/s] 12%|#1        | 3/26 [00:00<00:02,  9.68it/s] 19%|#9        | 5/26 [00:00<00:01, 12.48it/s] 27%|##6       | 7/26 [00:00<00:01, 14.16it/s] 35%|###4      | 9/26 [00:00<00:01, 15.19it/s] 42%|####2     | 11/26 [00:00<00:00, 15.89it/s] 50%|#####     | 13/26 [00:00<00:00, 16.29it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.61it/s] 65%|######5   | 17/26 [00:01<00:00, 16.80it/s] 73%|#######3  | 19/26 [00:01<00:00, 17.00it/s] 81%|########  | 21/26 [00:01<00:00, 16.93it/s] 88%|########8 | 23/26 [00:01<00:00, 17.02it/s] 96%|#########6| 25/26 [00:01<00:00, 17.05it/s]100%|##########| 26/26 [00:01<00:00, 14.95it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1118 400
penalty weights 10000.0
args.step pgd_anneal_iters 1118 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1119 400
penalty weights 10000.0
args.step pgd_anneal_iters 1119 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1120 400
penalty weights 10000.0
args.step pgd_anneal_iters 1120 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1121 400
penalty weights 10000.0
args.step pgd_anneal_iters 1121 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1122 400
penalty weights 10000.0
args.step pgd_anneal_iters 1122 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1123 400
penalty weights 10000.0
args.step pgd_anneal_iters 1123 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1124 400
penalty weights 10000.0
args.step pgd_anneal_iters 1124 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1125 400
penalty weights 10000.0
args.step pgd_anneal_iters 1125 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1126 400
penalty weights 10000.0
args.step pgd_anneal_iters 1126 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1127 400
penalty weights 10000.0
args.step pgd_anneal_iters 1127 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1128 400
penalty weights 10000.0
args.step pgd_anneal_iters 1128 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1129 400
penalty weights 10000.0
args.step pgd_anneal_iters 1129 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1130 400
penalty weights 10000.0
args.step pgd_anneal_iters 1130 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1131 400
penalty weights 10000.0
args.step pgd_anneal_iters 1131 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1132 400
penalty weights 10000.0
args.step pgd_anneal_iters 1132 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1133 400
penalty weights 10000.0
args.step pgd_anneal_iters 1133 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1134 400
penalty weights 10000.0
args.step pgd_anneal_iters 1134 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1135 400
penalty weights 10000.0
args.step pgd_anneal_iters 1135 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1136 400
penalty weights 10000.0
args.step pgd_anneal_iters 1136 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1137 400
penalty weights 10000.0
args.step pgd_anneal_iters 1137 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1138 400
penalty weights 10000.0
args.step pgd_anneal_iters 1138 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1139 400
penalty weights 10000.0
args.step pgd_anneal_iters 1139 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1140 400
penalty weights 10000.0
args.step pgd_anneal_iters 1140 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1141 400
penalty weights 10000.0
args.step pgd_anneal_iters 1141 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1142 400
penalty weights 10000.0
args.step pgd_anneal_iters 1142 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1143 400
penalty weights 10000.0
args.step pgd_anneal_iters 1143 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [43][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.51 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3605 (15.3559)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.42it/s] 27%|##6       | 7/26 [00:00<00:00, 36.07it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.07it/s] 50%|#####     | 13/26 [00:00<00:00, 43.30it/s] 69%|######9   | 18/26 [00:00<00:00, 45.05it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.05it/s] 92%|#########2| 24/26 [00:00<00:00, 49.50it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.53 (  0.53)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.50)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.50)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.03 (  0.03)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.52)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.54it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 43/  1]	epoch_time 0.0507 (0.0438)	validation_time 0.0003 (0.0005)	train_time 0.0503 (0.0432)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5121000138521195, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.83it/s] 12%|#1        | 3/26 [00:00<00:02,  9.90it/s] 19%|#9        | 5/26 [00:00<00:01, 12.54it/s] 27%|##6       | 7/26 [00:00<00:01, 13.89it/s] 35%|###4      | 9/26 [00:00<00:01, 14.89it/s] 42%|####2     | 11/26 [00:00<00:00, 15.43it/s] 50%|#####     | 13/26 [00:00<00:00, 15.76it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.96it/s] 65%|######5   | 17/26 [00:01<00:00, 16.17it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.44it/s] 81%|########  | 21/26 [00:01<00:00, 16.60it/s] 88%|########8 | 23/26 [00:01<00:00, 16.55it/s] 96%|#########6| 25/26 [00:01<00:00, 16.51it/s]100%|##########| 26/26 [00:01<00:00, 14.64it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1144 400
penalty weights 10000.0
args.step pgd_anneal_iters 1144 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1145 400
penalty weights 10000.0
args.step pgd_anneal_iters 1145 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1146 400
penalty weights 10000.0
args.step pgd_anneal_iters 1146 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1147 400
penalty weights 10000.0
args.step pgd_anneal_iters 1147 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1148 400
penalty weights 10000.0
args.step pgd_anneal_iters 1148 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1149 400
penalty weights 10000.0
args.step pgd_anneal_iters 1149 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1150 400
penalty weights 10000.0
args.step pgd_anneal_iters 1150 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1151 400
penalty weights 10000.0
args.step pgd_anneal_iters 1151 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1152 400
penalty weights 10000.0
args.step pgd_anneal_iters 1152 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1153 400
penalty weights 10000.0
args.step pgd_anneal_iters 1153 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1154 400
penalty weights 10000.0
args.step pgd_anneal_iters 1154 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1155 400
penalty weights 10000.0
args.step pgd_anneal_iters 1155 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1156 400
penalty weights 10000.0
args.step pgd_anneal_iters 1156 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1157 400
penalty weights 10000.0
args.step pgd_anneal_iters 1157 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1158 400
penalty weights 10000.0
args.step pgd_anneal_iters 1158 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1159 400
penalty weights 10000.0
args.step pgd_anneal_iters 1159 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1160 400
penalty weights 10000.0
args.step pgd_anneal_iters 1160 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1161 400
penalty weights 10000.0
args.step pgd_anneal_iters 1161 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1162 400
penalty weights 10000.0
args.step pgd_anneal_iters 1162 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1163 400
penalty weights 10000.0
args.step pgd_anneal_iters 1163 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1164 400
penalty weights 10000.0
args.step pgd_anneal_iters 1164 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1165 400
penalty weights 10000.0
args.step pgd_anneal_iters 1165 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1166 400
penalty weights 10000.0
args.step pgd_anneal_iters 1166 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1167 400
penalty weights 10000.0
args.step pgd_anneal_iters 1167 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1168 400
penalty weights 10000.0
args.step pgd_anneal_iters 1168 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1169 400
penalty weights 10000.0
args.step pgd_anneal_iters 1169 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [44][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.51 (  0.51)	train_minacc   0.50 (  0.51)	train_majacc   0.51 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3682 (15.3641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.84it/s] 31%|###       | 8/26 [00:00<00:00, 42.24it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.24it/s] 50%|#####     | 13/26 [00:00<00:00, 43.15it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.83it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.83it/s] 96%|#########6| 25/26 [00:00<00:00, 48.33it/s]100%|##########| 26/26 [00:00<00:00, 41.76it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.06 (  0.06)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.54 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.54 (  0.52)	test_corr_d  -0.03 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.51)	test_minacc   0.51 (  0.52)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.51)	test_minacc_d   0.51 (  0.52)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.01 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.05 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.10it/s]
Test: [  0/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.694 (0.694)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.694 (0.694)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 44/  1]	epoch_time 0.0501 (0.0439)	validation_time 0.0004 (0.0005)	train_time 0.0496 (0.0433)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5117000150382519, 0.5080000162124634)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.23it/s] 12%|#1        | 3/26 [00:00<00:02, 11.10it/s] 19%|#9        | 5/26 [00:00<00:01, 13.28it/s] 27%|##6       | 7/26 [00:00<00:01, 14.58it/s] 35%|###4      | 9/26 [00:00<00:01, 15.33it/s] 42%|####2     | 11/26 [00:00<00:00, 15.75it/s] 50%|#####     | 13/26 [00:00<00:00, 16.01it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.25it/s] 65%|######5   | 17/26 [00:01<00:00, 16.43it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.39it/s] 81%|########  | 21/26 [00:01<00:00, 16.55it/s] 88%|########8 | 23/26 [00:01<00:00, 16.70it/s] 96%|#########6| 25/26 [00:01<00:00, 16.83it/s]100%|##########| 26/26 [00:01<00:00, 15.11it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1170 400
penalty weights 10000.0
args.step pgd_anneal_iters 1170 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1171 400
penalty weights 10000.0
args.step pgd_anneal_iters 1171 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1172 400
penalty weights 10000.0
args.step pgd_anneal_iters 1172 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1173 400
penalty weights 10000.0
args.step pgd_anneal_iters 1173 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1174 400
penalty weights 10000.0
args.step pgd_anneal_iters 1174 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1175 400
penalty weights 10000.0
args.step pgd_anneal_iters 1175 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1176 400
penalty weights 10000.0
args.step pgd_anneal_iters 1176 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1177 400
penalty weights 10000.0
args.step pgd_anneal_iters 1177 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1178 400
penalty weights 10000.0
args.step pgd_anneal_iters 1178 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1179 400
penalty weights 10000.0
args.step pgd_anneal_iters 1179 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1180 400
penalty weights 10000.0
args.step pgd_anneal_iters 1180 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1181 400
penalty weights 10000.0
args.step pgd_anneal_iters 1181 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1182 400
penalty weights 10000.0
args.step pgd_anneal_iters 1182 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1183 400
penalty weights 10000.0
args.step pgd_anneal_iters 1183 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1184 400
penalty weights 10000.0
args.step pgd_anneal_iters 1184 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1185 400
penalty weights 10000.0
args.step pgd_anneal_iters 1185 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1186 400
penalty weights 10000.0
args.step pgd_anneal_iters 1186 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1187 400
penalty weights 10000.0
args.step pgd_anneal_iters 1187 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1188 400
penalty weights 10000.0
args.step pgd_anneal_iters 1188 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1189 400
penalty weights 10000.0
args.step pgd_anneal_iters 1189 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1190 400
penalty weights 10000.0
args.step pgd_anneal_iters 1190 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1191 400
penalty weights 10000.0
args.step pgd_anneal_iters 1191 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1192 400
penalty weights 10000.0
args.step pgd_anneal_iters 1192 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1193 400
penalty weights 10000.0
args.step pgd_anneal_iters 1193 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1194 400
penalty weights 10000.0
args.step pgd_anneal_iters 1194 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1195 400
penalty weights 10000.0
args.step pgd_anneal_iters 1195 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [45][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3751 (15.3714)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 25.94it/s] 35%|###4      | 9/26 [00:00<00:00, 40.20it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.20it/s] 58%|#####7    | 15/26 [00:00<00:00, 46.89it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 46.89it/s] 81%|########  | 21/26 [00:00<00:00, 47.27it/s]100%|##########| 26/26 [00:00<00:00, 42.25it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.48 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.47 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.48 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.47 (  0.51)	test_corr_d  -0.02 (  0.03)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.10it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.51 (  0.51)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.51 (  0.51)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 45/  1]	epoch_time 0.0506 (0.0440)	validation_time 0.0004 (0.0005)	train_time 0.0503 (0.0435)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5123000177443028, 0.5060000419616699)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.20it/s] 12%|#1        | 3/26 [00:00<00:02,  9.42it/s] 19%|#9        | 5/26 [00:00<00:01, 12.28it/s] 27%|##6       | 7/26 [00:00<00:01, 13.97it/s] 35%|###4      | 9/26 [00:00<00:01, 15.05it/s] 42%|####2     | 11/26 [00:00<00:00, 15.81it/s] 50%|#####     | 13/26 [00:00<00:00, 16.29it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.59it/s] 65%|######5   | 17/26 [00:01<00:00, 16.83it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.96it/s] 81%|########  | 21/26 [00:01<00:00, 16.84it/s] 88%|########8 | 23/26 [00:01<00:00, 16.83it/s] 96%|#########6| 25/26 [00:01<00:00, 16.95it/s]100%|##########| 26/26 [00:01<00:00, 14.85it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1196 400
penalty weights 10000.0
args.step pgd_anneal_iters 1196 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1197 400
penalty weights 10000.0
args.step pgd_anneal_iters 1197 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1198 400
penalty weights 10000.0
args.step pgd_anneal_iters 1198 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1199 400
penalty weights 10000.0
args.step pgd_anneal_iters 1199 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1200 400
penalty weights 10000.0
args.step pgd_anneal_iters 1200 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1201 400
penalty weights 10000.0
args.step pgd_anneal_iters 1201 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1202 400
penalty weights 10000.0
args.step pgd_anneal_iters 1202 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1203 400
penalty weights 10000.0
args.step pgd_anneal_iters 1203 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1204 400
penalty weights 10000.0
args.step pgd_anneal_iters 1204 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1205 400
penalty weights 10000.0
args.step pgd_anneal_iters 1205 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1206 400
penalty weights 10000.0
args.step pgd_anneal_iters 1206 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1207 400
penalty weights 10000.0
args.step pgd_anneal_iters 1207 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1208 400
penalty weights 10000.0
args.step pgd_anneal_iters 1208 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1209 400
penalty weights 10000.0
args.step pgd_anneal_iters 1209 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1210 400
penalty weights 10000.0
args.step pgd_anneal_iters 1210 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1211 400
penalty weights 10000.0
args.step pgd_anneal_iters 1211 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1212 400
penalty weights 10000.0
args.step pgd_anneal_iters 1212 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1213 400
penalty weights 10000.0
args.step pgd_anneal_iters 1213 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1214 400
penalty weights 10000.0
args.step pgd_anneal_iters 1214 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1215 400
penalty weights 10000.0
args.step pgd_anneal_iters 1215 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1216 400
penalty weights 10000.0
args.step pgd_anneal_iters 1216 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1217 400
penalty weights 10000.0
args.step pgd_anneal_iters 1217 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1218 400
penalty weights 10000.0
args.step pgd_anneal_iters 1218 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1219 400
penalty weights 10000.0
args.step pgd_anneal_iters 1219 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1220 400
penalty weights 10000.0
args.step pgd_anneal_iters 1220 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1221 400
penalty weights 10000.0
args.step pgd_anneal_iters 1221 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [46][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3812 (15.3779)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.41it/s] 27%|##6       | 7/26 [00:00<00:00, 35.79it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.79it/s] 50%|#####     | 13/26 [00:00<00:00, 40.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.22it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.22it/s] 96%|#########6| 25/26 [00:00<00:00, 47.56it/s]100%|##########| 26/26 [00:00<00:00, 40.10it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.54 (  0.52)	test_minacc   0.52 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.54 (  0.52)	test_minacc_d   0.52 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.51)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.31it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 46/  1]	epoch_time 0.0506 (0.0442)	validation_time 0.0003 (0.0005)	train_time 0.0503 (0.0436)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5125000154078007, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.92it/s] 12%|#1        | 3/26 [00:00<00:01, 12.12it/s] 19%|#9        | 5/26 [00:00<00:01, 14.06it/s] 27%|##6       | 7/26 [00:00<00:01, 15.08it/s] 35%|###4      | 9/26 [00:00<00:01, 15.51it/s] 42%|####2     | 11/26 [00:00<00:00, 15.99it/s] 50%|#####     | 13/26 [00:00<00:00, 16.17it/s] 58%|#####7    | 15/26 [00:00<00:00, 16.43it/s] 65%|######5   | 17/26 [00:01<00:00, 16.68it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.89it/s] 81%|########  | 21/26 [00:01<00:00, 16.84it/s] 88%|########8 | 23/26 [00:01<00:00, 16.94it/s] 96%|#########6| 25/26 [00:01<00:00, 17.03it/s]100%|##########| 26/26 [00:01<00:00, 15.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1222 400
penalty weights 10000.0
args.step pgd_anneal_iters 1222 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1223 400
penalty weights 10000.0
args.step pgd_anneal_iters 1223 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1224 400
penalty weights 10000.0
args.step pgd_anneal_iters 1224 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1225 400
penalty weights 10000.0
args.step pgd_anneal_iters 1225 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1226 400
penalty weights 10000.0
args.step pgd_anneal_iters 1226 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1227 400
penalty weights 10000.0
args.step pgd_anneal_iters 1227 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1228 400
penalty weights 10000.0
args.step pgd_anneal_iters 1228 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1229 400
penalty weights 10000.0
args.step pgd_anneal_iters 1229 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1230 400
penalty weights 10000.0
args.step pgd_anneal_iters 1230 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1231 400
penalty weights 10000.0
args.step pgd_anneal_iters 1231 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1232 400
penalty weights 10000.0
args.step pgd_anneal_iters 1232 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1233 400
penalty weights 10000.0
args.step pgd_anneal_iters 1233 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1234 400
penalty weights 10000.0
args.step pgd_anneal_iters 1234 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1235 400
penalty weights 10000.0
args.step pgd_anneal_iters 1235 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1236 400
penalty weights 10000.0
args.step pgd_anneal_iters 1236 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1237 400
penalty weights 10000.0
args.step pgd_anneal_iters 1237 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1238 400
penalty weights 10000.0
args.step pgd_anneal_iters 1238 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1239 400
penalty weights 10000.0
args.step pgd_anneal_iters 1239 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1240 400
penalty weights 10000.0
args.step pgd_anneal_iters 1240 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1241 400
penalty weights 10000.0
args.step pgd_anneal_iters 1241 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1242 400
penalty weights 10000.0
args.step pgd_anneal_iters 1242 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1243 400
penalty weights 10000.0
args.step pgd_anneal_iters 1243 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1244 400
penalty weights 10000.0
args.step pgd_anneal_iters 1244 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1245 400
penalty weights 10000.0
args.step pgd_anneal_iters 1245 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1246 400
penalty weights 10000.0
args.step pgd_anneal_iters 1246 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1247 400
penalty weights 10000.0
args.step pgd_anneal_iters 1247 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [47][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3866 (15.3837)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.30it/s] 27%|##6       | 7/26 [00:00<00:00, 32.51it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.51it/s] 46%|####6     | 12/26 [00:00<00:00, 36.68it/s] 69%|######9   | 18/26 [00:00<00:00, 43.63it/s]                                                69%|######9   | 18/26 [00:00<00:00, 43.63it/s] 92%|#########2| 24/26 [00:00<00:00, 44.62it/s]100%|##########| 26/26 [00:00<00:00, 37.33it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.692 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.53 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.692 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.02)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.00it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.48 (  0.48)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.48 (  0.48)	test_corr_d   0.00 (  0.00)
Overall Timing[ 47/  1]	epoch_time 0.0487 (0.0443)	validation_time 0.0003 (0.0005)	train_time 0.0484 (0.0437)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5129000142216682, 0.5049999952316284)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.32it/s] 12%|#1        | 3/26 [00:00<00:02, 11.29it/s] 19%|#9        | 5/26 [00:00<00:01, 13.63it/s] 27%|##6       | 7/26 [00:00<00:01, 14.80it/s] 35%|###4      | 9/26 [00:00<00:01, 15.48it/s] 42%|####2     | 11/26 [00:00<00:00, 15.98it/s] 50%|#####     | 13/26 [00:00<00:00, 16.18it/s] 58%|#####7    | 15/26 [00:01<00:00, 16.36it/s] 65%|######5   | 17/26 [00:01<00:00, 16.42it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.60it/s] 81%|########  | 21/26 [00:01<00:00, 16.56it/s] 88%|########8 | 23/26 [00:01<00:00, 16.59it/s] 96%|#########6| 25/26 [00:01<00:00, 16.68it/s]100%|##########| 26/26 [00:01<00:00, 15.15it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1248 400
penalty weights 10000.0
args.step pgd_anneal_iters 1248 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1249 400
penalty weights 10000.0
args.step pgd_anneal_iters 1249 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1250 400
penalty weights 10000.0
args.step pgd_anneal_iters 1250 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1251 400
penalty weights 10000.0
args.step pgd_anneal_iters 1251 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1252 400
penalty weights 10000.0
args.step pgd_anneal_iters 1252 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1253 400
penalty weights 10000.0
args.step pgd_anneal_iters 1253 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1254 400
penalty weights 10000.0
args.step pgd_anneal_iters 1254 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1255 400
penalty weights 10000.0
args.step pgd_anneal_iters 1255 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1256 400
penalty weights 10000.0
args.step pgd_anneal_iters 1256 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1257 400
penalty weights 10000.0
args.step pgd_anneal_iters 1257 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1258 400
penalty weights 10000.0
args.step pgd_anneal_iters 1258 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1259 400
penalty weights 10000.0
args.step pgd_anneal_iters 1259 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1260 400
penalty weights 10000.0
args.step pgd_anneal_iters 1260 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1261 400
penalty weights 10000.0
args.step pgd_anneal_iters 1261 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1262 400
penalty weights 10000.0
args.step pgd_anneal_iters 1262 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1263 400
penalty weights 10000.0
args.step pgd_anneal_iters 1263 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1264 400
penalty weights 10000.0
args.step pgd_anneal_iters 1264 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1265 400
penalty weights 10000.0
args.step pgd_anneal_iters 1265 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1266 400
penalty weights 10000.0
args.step pgd_anneal_iters 1266 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1267 400
penalty weights 10000.0
args.step pgd_anneal_iters 1267 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1268 400
penalty weights 10000.0
args.step pgd_anneal_iters 1268 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1269 400
penalty weights 10000.0
args.step pgd_anneal_iters 1269 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1270 400
penalty weights 10000.0
args.step pgd_anneal_iters 1270 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1271 400
penalty weights 10000.0
args.step pgd_anneal_iters 1271 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1272 400
penalty weights 10000.0
args.step pgd_anneal_iters 1272 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1273 400
penalty weights 10000.0
args.step pgd_anneal_iters 1273 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [48][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3913 (15.3887)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.56it/s] 35%|###4      | 9/26 [00:00<00:00, 43.37it/s]                                               35%|###4      | 9/26 [00:00<00:00, 43.37it/s] 54%|#####3    | 14/26 [00:00<00:00, 44.20it/s] 77%|#######6  | 20/26 [00:00<00:00, 48.93it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 48.93it/s]100%|##########| 26/26 [00:00<00:00, 52.38it/s]100%|##########| 26/26 [00:00<00:00, 42.76it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.53 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.02)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 61.63it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.47 (  0.47)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.47 (  0.47)	test_corr_d   0.00 (  0.00)
Overall Timing[ 48/  1]	epoch_time 0.0492 (0.0444)	validation_time 0.0004 (0.0005)	train_time 0.0488 (0.0438)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.5133000141978263, 0.5040000081062317)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.31it/s] 12%|#1        | 3/26 [00:00<00:02, 10.90it/s] 19%|#9        | 5/26 [00:00<00:01, 13.03it/s] 27%|##6       | 7/26 [00:00<00:01, 14.23it/s] 35%|###4      | 9/26 [00:00<00:01, 14.97it/s] 42%|####2     | 11/26 [00:00<00:00, 15.60it/s] 50%|#####     | 13/26 [00:00<00:00, 15.71it/s] 58%|#####7    | 15/26 [00:01<00:00, 15.75it/s] 65%|######5   | 17/26 [00:01<00:00, 15.84it/s] 73%|#######3  | 19/26 [00:01<00:00, 16.15it/s] 81%|########  | 21/26 [00:01<00:00, 16.24it/s] 88%|########8 | 23/26 [00:01<00:00, 16.41it/s] 96%|#########6| 25/26 [00:01<00:00, 16.51it/s]100%|##########| 26/26 [00:01<00:00, 14.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1274 400
penalty weights 10000.0
args.step pgd_anneal_iters 1274 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1275 400
penalty weights 10000.0
args.step pgd_anneal_iters 1275 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1276 400
penalty weights 10000.0
args.step pgd_anneal_iters 1276 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1277 400
penalty weights 10000.0
args.step pgd_anneal_iters 1277 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1278 400
penalty weights 10000.0
args.step pgd_anneal_iters 1278 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1279 400
penalty weights 10000.0
args.step pgd_anneal_iters 1279 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1280 400
penalty weights 10000.0
args.step pgd_anneal_iters 1280 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1281 400
penalty weights 10000.0
args.step pgd_anneal_iters 1281 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1282 400
penalty weights 10000.0
args.step pgd_anneal_iters 1282 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1283 400
penalty weights 10000.0
args.step pgd_anneal_iters 1283 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1284 400
penalty weights 10000.0
args.step pgd_anneal_iters 1284 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1285 400
penalty weights 10000.0
args.step pgd_anneal_iters 1285 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1286 400
penalty weights 10000.0
args.step pgd_anneal_iters 1286 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1287 400
penalty weights 10000.0
args.step pgd_anneal_iters 1287 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1288 400
penalty weights 10000.0
args.step pgd_anneal_iters 1288 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1289 400
penalty weights 10000.0
args.step pgd_anneal_iters 1289 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1290 400
penalty weights 10000.0
args.step pgd_anneal_iters 1290 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1291 400
penalty weights 10000.0
args.step pgd_anneal_iters 1291 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1292 400
penalty weights 10000.0
args.step pgd_anneal_iters 1292 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1293 400
penalty weights 10000.0
args.step pgd_anneal_iters 1293 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1294 400
penalty weights 10000.0
args.step pgd_anneal_iters 1294 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1295 400
penalty weights 10000.0
args.step pgd_anneal_iters 1295 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1296 400
penalty weights 10000.0
args.step pgd_anneal_iters 1296 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1297 400
penalty weights 10000.0
args.step pgd_anneal_iters 1297 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1298 400
penalty weights 10000.0
args.step pgd_anneal_iters 1298 600
dim_v 512
retunring when rho == dim_v - 1
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 1299 400
penalty weights 10000.0
args.step pgd_anneal_iters 1299 600
dim_v 512
retunring when rho == dim_v - 1
Epoch: [49][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.21 (  0.21)	train_acc   0.52 (  0.51)	train_minacc   0.50 (  0.52)	train_majacc   0.52 (  0.51)	train_corr   0.00 (  0.00)	l1 15.3954 (15.3931)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.20it/s] 27%|##6       | 7/26 [00:00<00:00, 37.25it/s]                                               27%|##6       | 7/26 [00:00<00:00, 37.25it/s] 50%|#####     | 13/26 [00:00<00:00, 42.12it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.34it/s] 96%|#########6| 25/26 [00:00<00:00, 47.09it/s]100%|##########| 26/26 [00:00<00:00, 40.34it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.50 (  0.50)	test_majacc   0.52 (  0.52)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.50 (  0.50)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.05 (  0.05)
Test: [  10/  26]	Loss 0.693 (0.693)	test_acc   0.55 (  0.52)	test_minacc   0.53 (  0.51)	test_majacc   0.55 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.55 (  0.52)	test_minacc_d   0.53 (  0.51)	test_majacc_d   0.55 (  0.52)	test_corr_d  -0.04 (  0.01)
Test: [  20/  26]	Loss 0.693 (0.693)	test_acc   0.49 (  0.52)	test_minacc   0.53 (  0.52)	test_majacc   0.48 (  0.52)	Loss_d 0.693 (0.693)	test_acc_d   0.49 (  0.52)	test_minacc_d   0.53 (  0.52)	test_majacc_d   0.48 (  0.52)	test_corr_d  -0.02 (  0.02)
Test: [  26/  26]	Loss 0.693 (0.693)	test_acc   0.52 (  0.51)	test_minacc   0.50 (  0.52)	test_majacc   0.52 (  0.51)	Loss_d 0.693 (0.693)	test_acc_d   0.52 (  0.51)	test_minacc_d   0.50 (  0.52)	test_majacc_d   0.52 (  0.51)	test_corr_d   0.04 (  0.01)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.39it/s]
Test: [  0/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Test: [  1/  1]	Loss 0.693 (0.693)	test_acc   0.50 (  0.50)	test_minacc   0.51 (  0.51)	test_majacc   0.46 (  0.46)	Loss_d 0.693 (0.693)	test_acc_d   0.50 (  0.50)	test_minacc_d   0.51 (  0.51)	test_majacc_d   0.46 (  0.46)	test_corr_d   0.00 (  0.00)
Overall Timing[ 49/  1]	epoch_time 0.0507 (0.0445)	validation_time 0.0004 (0.0005)	train_time 0.0503 (0.0440)
record: (train_acc, test_acc) (0.7632000303268432, 0.6910000443458557)
last accs (train_acc, test_acc) (0.513500015348196, 0.5020000338554382)
done saving aggregate.csv to ./aggregate.csv
wandb: - 0.156 MB of 0.156 MB uploadedwandb: \ 0.156 MB of 0.156 MB uploadedwandb: | 0.156 MB of 0.156 MB uploadedwandb: / 0.156 MB of 0.156 MB uploadedwandb: - 0.178 MB of 0.186 MB uploaded (0.003 MB deduped)wandb: \ 0.515 MB of 0.515 MB uploaded (0.003 MB deduped)wandb: 
wandb: Run history:
wandb:                                                                           global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/epoch_time_val █▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▃▂▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃▄
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/train_time_val █▁▂▁▁▂▁▂▁▂▁▂▁▁▂▁▁▁▁▄▂▅▄▄▅▅▅▄▅▄▅▄▄▅▄▅▅▅▄▅
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/validation_time_val █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/global_step ▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_avg ██▇▇▅▆▅▆▅▇▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_d_avg ██▇▇▅▆▅▆▅▇▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_d_val ██▇▇▅▆▅▆▅▇▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_val ██▇▇▅▆▅▆▅▇▅▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_avg ▁▂▂▂▄▄▅▂▃▂▃▃███▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_d_avg ▁▂▂▂▄▄▅▂▃▂▃▃███▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_d_val ▁▂▂▂▄▄▅▂▃▂▃▃███▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_val ▁▂▂▂▄▄▅▂▃▂▃▃███▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_corr_d_avg █▇▇▇▆▆▆▇▆▇▆▆▂▂▁▁▁▁▁▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_corr_d_val █▇▇▇▆▆▆▇▆▇▆▆▂▂▁▁▁▁▁▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_avg ████████████▅▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_d_avg ████████████▅▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_d_val ████████████▅▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_val ████████████▅▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_avg ▁▂▂▂▄▄▄▂▃▂▃▃████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_d_avg ▁▂▂▂▄▄▄▂▃▂▃▃████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_d_val ▁▂▂▂▄▄▄▂▃▂▃▃████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_val ▁▂▂▂▄▄▄▂▃▂▃▃████▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/Loss_avg █▅▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/Loss_val █▄▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/l1_avg ▂▃▂▁▁▁▂▃▅▆▇▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/l1_val ▂▂▁▁▁▂▃▃▅▆▇▇███████▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅▅
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_acc_avg ▇███████████▇▄▃▃▂▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_acc_val ████████████▇▄▃▃▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_corr_avg ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_corr_val ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_majacc_avg ▇███████████▆▃▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_majacc_val ██████▇█████▅▃▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_minacc_avg ▂▁▁▂▂▃▂▃▃▃▃▄▆█▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_minacc_val ▁▁▂▁▁▃▃▁▂▁▁▂██▇▇▇▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆▆
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_nll_avg ▅▃▂▂▂▁▁▁▁▁▁▁▂▆▇▇████████████████████████
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_nll_val ▂▂▂▂▂▂▁▁▁▁▁▁▄▆▇█████████████████████████
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_penalty_avg █▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_penalty_val █▇▅▅▅▄▄▃▄▄▄▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/weight_norm_avg █▅▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/weight_norm_val █▄▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
wandb: 
wandb: Run summary:
wandb:                                                                           global_step 49
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/epoch_time_val 0.05066
wandb:      resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/train_time_val 0.05028
wandb: resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/diagnostics/validation_time_val 0.00036
wandb:                     resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/global_step 49
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_avg 0.69347
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_d_avg 0.69347
wandb:                 resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_d_val 0.69347
wandb:                   resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/Loss_val 0.69347
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_avg 0.502
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_d_avg 0.502
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_d_val 0.502
wandb:               resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_acc_val 0.502
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_corr_d_avg 0.00127
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_corr_d_val 0.00127
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_avg 0.46
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_d_avg 0.46
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_d_val 0.46
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_majacc_val 0.46
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_avg 0.50667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_d_avg 0.50667
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_d_val 0.50667
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/test/test_minacc_val 0.50667
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/Loss_avg 9e-05
wandb:                  resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/Loss_val 9e-05
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/l1_avg 15.39315
wandb:                    resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/l1_val 15.39543
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_acc_avg 0.5133
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_acc_val 0.52
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_corr_avg 0.0
wandb:            resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_corr_val 0.0
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_majacc_avg 0.51184
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_majacc_val 0.52315
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_minacc_avg 0.52027
wandb:          resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_minacc_val 0.5
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_nll_avg 0.69299
wandb:             resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_nll_val 0.69331
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_penalty_avg 0.0
wandb:         resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/train_penalty_val 0.0
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/weight_norm_avg 0.2081
wandb:           resnet18-usc-unsigned/baseline/prune_rate=1.0/51/logs/train/weight_norm_val 0.20792
wandb: 
wandb: 🚀 View run name_random at: https://wandb.ai/janezdu-uiuc/irm/runs/fokw6foa
wandb: ⭐️ View project at: https://wandb.ai/janezdu-uiuc/irm
wandb: Synced 5 W&B file(s), 0 media file(s), 2 artifact file(s) and 1 other file(s)
wandb: Find logs at: ./wandb/run-20240907_114446-fokw6foa/logs
wandb: WARNING The new W&B backend becomes opt-out in version 0.18.0; try it out with `wandb.require("core")`! See https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: janezdu (janezdu-uiuc). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.17.9 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.7
wandb: Run data is saved locally in /scratch/users/zd16/sparseIRM-resnet-ver/wandb/run-20240907_114735-8n8garhs
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run name_random
wandb: ⭐️ View project at https://wandb.ai/janezdu-uiuc/irm
wandb: 🚀 View run at https://wandb.ai/janezdu-uiuc/irm/runs/8n8garhs
=> Reading YAML config from configs/smallscale/resnet18/resnet18-usc-unsigned.yaml
Namespace(data='dataset/', optimizer='adam', weight_opt='adam', set='mnistcifar', arch='ResNet18', config='configs/smallscale/resnet18/resnet18-usc-unsigned.yaml', log_dir=None, workers=4, epochs=50, start_epoch=None, batch_size=390, lr=0.006, warmup_length=0, momentum=0.9, weight_decay=0.0, print_freq=10, num_classes=1, resume='', resume_train_weights='', evaluate=False, pretrained=None, pretrained_distill=None, alpha_distill=0.95, T_distill=2, seed=0, multigpu=[0], lr_policy='cosine_lr', lr_adjust=30, lr_gamma=0.1, name='baseline', save_every=-1, prune_rate=1.0, param_prune_rate=0.0, pr_start=1.0, low_data=1, width_mult=1.0, nesterov=False, threetimes=False, random_subnet=False, one_batch=False, conv_type='DenseConv', freeze_weights=False, st=False, mode='fan_in', nonlinearity='relu', bn_type='LearnedBatchNorm', init='kaiming_normal', no_bn_decay=False, scale_fan=False, first_layer_dense=False, last_layer_dense=True, approx=False, zero=False, flip=False, bs=False, gumbel_sample=False, multiply_prob=False, no_multiply=False, multiply_cont=False, multiply_prob_bs=False, indiv=False, label_smoothing=None, first_layer_type=None, trainer='default', score_init_constant=1.0, K=1, update_freq=20, D=0.01, T=1, TA=True, TA2=False, TA_grow=False, center=False, straight_through=False, PLA_factor=0.1, PLA_patience=10, gradient_loss_para=0, abs_loss_para=0, thres=0.9, runs_name='name_random', resume_compare_loss1='', resume_compare_loss2='', init_weights='', trained_mask='', weight_rescaling=False, constrain_by_layer=False, weight_rescaling_data=False, use_running_stats=False, not_clipping=False, rescaling_para=False, lasso_para=0, dont_freeze_weights=False, iterative=True, prob_by_weight=False, rescale_at_fix_subnet=False, train_weights_at_the_same_time=False, sample_from_training_set=False, load_true_para=False, distill=False, finetune=False, stablize=False, prev_best=0, weight_opt_lr=0.0006, n=500, ts=0.28, te=0.6, d=20000, s=80, c=0.75, init_prob=False, thres_before=0.001, wide_ratio=0.001, noise=1, cal_p_q=False, just_finetune=False, snip=False, envs_num=2, l2_regularizer_weight=0.001, data_num=50000, env_type='linear', irm_type='irmv1', hidden_dim=390, penalty_anneal_iters=400, penalty_weight=10000.0, grayscale_model=0, weight_lr_schedule=False, fix_subnet=False, freeze_weight=False, step='ours', prior_sd_coef=0, dim_inv=2, variance_gamma=1.0, dim_spu=10, image_scale=32, cons_ratio='0.999_0.7_0.1', noise_ratio=0.2, step_gamma=0.1, step_round=3, inner_steps=1, use_pgd=True, z=15.0, pgd_anneal_iters=600)
=> Creating model 'ResNet18'
Here!!!!!!!!
==> Conv Type: DenseConv
==> BN Type: LearnedBatchNorm
<class 'torch.nn.modules.conv.Conv2d'>
<class 'torch.nn.modules.batchnorm.BatchNorm2d'>
==> Building first layer with <class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
<class 'torch.nn.modules.conv.Conv2d'>
init by 1
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (fc): Linear(in_features=512, out_features=1, bias=True)
)
=> Parallelizing on [0] gpus
<DEBUG> gradient to module.conv1.weight
<DEBUG> gradient to module.bn1.weight
<DEBUG> gradient to module.bn1.bias
<DEBUG> gradient to module.layer1.0.conv1.weight
<DEBUG> gradient to module.layer1.0.bn1.weight
<DEBUG> gradient to module.layer1.0.bn1.bias
<DEBUG> gradient to module.layer1.0.conv2.weight
<DEBUG> gradient to module.layer1.0.bn2.weight
<DEBUG> gradient to module.layer1.0.bn2.bias
<DEBUG> gradient to module.layer1.1.conv1.weight
<DEBUG> gradient to module.layer1.1.bn1.weight
<DEBUG> gradient to module.layer1.1.bn1.bias
<DEBUG> gradient to module.layer1.1.conv2.weight
<DEBUG> gradient to module.layer1.1.bn2.weight
<DEBUG> gradient to module.layer1.1.bn2.bias
<DEBUG> gradient to module.layer2.0.conv1.weight
<DEBUG> gradient to module.layer2.0.bn1.weight
<DEBUG> gradient to module.layer2.0.bn1.bias
<DEBUG> gradient to module.layer2.0.conv2.weight
<DEBUG> gradient to module.layer2.0.bn2.weight
<DEBUG> gradient to module.layer2.0.bn2.bias
<DEBUG> gradient to module.layer2.0.downsample.0.weight
<DEBUG> gradient to module.layer2.0.downsample.1.weight
<DEBUG> gradient to module.layer2.0.downsample.1.bias
<DEBUG> gradient to module.layer2.1.conv1.weight
<DEBUG> gradient to module.layer2.1.bn1.weight
<DEBUG> gradient to module.layer2.1.bn1.bias
<DEBUG> gradient to module.layer2.1.conv2.weight
<DEBUG> gradient to module.layer2.1.bn2.weight
<DEBUG> gradient to module.layer2.1.bn2.bias
<DEBUG> gradient to module.layer3.0.conv1.weight
<DEBUG> gradient to module.layer3.0.bn1.weight
<DEBUG> gradient to module.layer3.0.bn1.bias
<DEBUG> gradient to module.layer3.0.conv2.weight
<DEBUG> gradient to module.layer3.0.bn2.weight
<DEBUG> gradient to module.layer3.0.bn2.bias
<DEBUG> gradient to module.layer3.0.downsample.0.weight
<DEBUG> gradient to module.layer3.0.downsample.1.weight
<DEBUG> gradient to module.layer3.0.downsample.1.bias
<DEBUG> gradient to module.layer3.1.conv1.weight
<DEBUG> gradient to module.layer3.1.bn1.weight
<DEBUG> gradient to module.layer3.1.bn1.bias
<DEBUG> gradient to module.layer3.1.conv2.weight
<DEBUG> gradient to module.layer3.1.bn2.weight
<DEBUG> gradient to module.layer3.1.bn2.bias
<DEBUG> gradient to module.layer4.0.conv1.weight
<DEBUG> gradient to module.layer4.0.bn1.weight
<DEBUG> gradient to module.layer4.0.bn1.bias
<DEBUG> gradient to module.layer4.0.conv2.weight
<DEBUG> gradient to module.layer4.0.bn2.weight
<DEBUG> gradient to module.layer4.0.bn2.bias
<DEBUG> gradient to module.layer4.0.downsample.0.weight
<DEBUG> gradient to module.layer4.0.downsample.1.weight
<DEBUG> gradient to module.layer4.0.downsample.1.bias
<DEBUG> gradient to module.layer4.1.conv1.weight
<DEBUG> gradient to module.layer4.1.bn1.weight
<DEBUG> gradient to module.layer4.1.bn1.bias
<DEBUG> gradient to module.layer4.1.conv2.weight
<DEBUG> gradient to module.layer4.1.bn2.weight
<DEBUG> gradient to module.layer4.1.bn2.bias
<DEBUG> gradient to module.fc.weight
<DEBUG> gradient to module.fc.bias
Files already downloaded and verified
Files already downloaded and verified
Adding Noise to Label, len(Y)=12000, Label_noise=1222
Xmp (7877, 3, 32, 32) (6903, 3, 32, 32)
Xcp (5994, 3, 32, 32) (6006, 3, 32, 32)
env=0 2497 2497 3 3
xn 2500 xp 2500
env=1 1750 1750 750 750
xn 2500 xp 2500
env=2 50 50 450 450
xn 500 xp 500
=> Creating model 'EBD'
EBD(
  (embedings): Embedding(2, 1)
)
=> Parallelizing on [0] gpus
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:01<00:39,  1.60s/it] 19%|#9        | 5/26 [00:01<00:05,  3.81it/s] 35%|###4      | 9/26 [00:01<00:02,  7.47it/s] 50%|#####     | 13/26 [00:01<00:01, 11.43it/s] 65%|######5   | 17/26 [00:02<00:00, 15.47it/s] 81%|########  | 21/26 [00:02<00:00, 19.31it/s] 96%|#########6| 25/26 [00:02<00:00, 22.53it/s]100%|##########| 26/26 [00:02<00:00,  9.76it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 0 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 1 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 2 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 3 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 4 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 5 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 6 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 7 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 8 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 9 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 10 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 11 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 12 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 13 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 14 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 15 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 16 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 17 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 18 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 19 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 20 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 21 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 22 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 23 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 24 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 25 400
penalty weights 0.0
Epoch: [0][  26/  26]	Loss 9.474 (12.243)	train_nll   0.37 (  0.54)	train_penalty   0.04 (  0.27)	weight_norm   9.11 ( 11.70)	train_acc   0.87 (  0.81)	train_minacc   0.00 (  0.07)	train_majacc   1.00 (  0.94)	train_corr   0.00 (  0.00)	l1 6.9729 (8.2457)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 29.49it/s] 35%|###4      | 9/26 [00:00<00:00, 44.02it/s]                                               35%|###4      | 9/26 [00:00<00:00, 44.02it/s] 58%|#####7    | 15/26 [00:00<00:00, 44.83it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 44.83it/s] 81%|########  | 21/26 [00:00<00:00, 48.72it/s]100%|##########| 26/26 [00:00<00:00, 43.32it/s]
Test: [   0/  26]	Loss 0.453 (0.453)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.453 (0.453)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.365 (0.428)	test_acc   0.88 (  0.84)	test_minacc   0.02 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.365 (0.428)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.02 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.388 (0.419)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   0.99 (  1.00)	Loss_d 0.388 (0.419)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.98 (  0.99)
Test: [  26/  26]	Loss 0.367 (0.418)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.367 (0.418)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]100%|##########| 1/1 [00:00<00:00,  2.54it/s]
Test: [  0/  1]	Loss 1.834 (1.834)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.834 (1.834)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.834 (1.834)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.834 (1.834)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  0/  1]	epoch_time 0.0771 (0.0771)	validation_time 0.0066 (0.0066)	train_time 0.0655 (0.0655)
record: (train_acc, test_acc) (0.8478000237941742, 0.10200000554323196)
last accs (train_acc, test_acc) (0.8478000237941742, 0.10200000554323196)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 16.48it/s] 23%|##3       | 6/26 [00:00<00:00, 26.41it/s] 38%|###8      | 10/26 [00:00<00:00, 30.00it/s] 54%|#####3    | 14/26 [00:00<00:00, 31.58it/s] 69%|######9   | 18/26 [00:00<00:00, 32.68it/s] 85%|########4 | 22/26 [00:00<00:00, 34.03it/s]100%|##########| 26/26 [00:00<00:00, 34.07it/s]100%|##########| 26/26 [00:00<00:00, 29.83it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 26 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 27 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 28 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 29 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 30 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 31 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 32 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 33 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 34 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 35 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 36 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 37 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 38 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 39 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 40 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 41 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 42 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 43 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 44 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 45 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 46 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 47 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 48 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 49 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 50 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 51 400
penalty weights 0.0
Epoch: [1][  26/  26]	Loss 4.898 (6.860)	train_nll   0.36 (  0.41)	train_penalty   0.04 (  0.06)	weight_norm   4.54 (  6.45)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.01)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 6.2444 (6.6292)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 27%|##6       | 7/26 [00:00<00:00, 33.93it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.93it/s] 50%|#####     | 13/26 [00:00<00:00, 40.77it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.74it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.74it/s] 96%|#########6| 25/26 [00:00<00:00, 46.51it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.453 (0.453)	test_acc   0.83 (  0.83)	test_minacc   0.03 (  0.03)	test_majacc   1.00 (  1.00)	Loss_d 0.453 (0.453)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.03 (  0.03)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.98 (  0.98)
Test: [  10/  26]	Loss 0.348 (0.416)	test_acc   0.89 (  0.84)	test_minacc   0.04 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.348 (0.416)	test_acc_d   0.89 (  0.84)	test_minacc_d   0.04 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  20/  26]	Loss 0.389 (0.405)	test_acc   0.85 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.389 (0.405)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  26/  26]	Loss 0.358 (0.404)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 0.358 (0.404)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.57it/s]
Test: [  0/  1]	Loss 1.843 (1.843)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.843 (1.843)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
Test: [  1/  1]	Loss 1.843 (1.843)	test_acc   0.10 (  0.10)	test_minacc   0.00 (  0.00)	test_majacc   1.00 (  1.00)	Loss_d 1.843 (1.843)	test_acc_d   0.10 (  0.10)	test_minacc_d   0.00 (  0.00)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.99 (  0.99)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  1/  1]	epoch_time 0.0357 (0.0564)	validation_time 0.0004 (0.0035)	train_time 0.0353 (0.0504)
record: (train_acc, test_acc) (0.8489000248908997, 0.10300000756978989)
last accs (train_acc, test_acc) (0.8489000248908997, 0.10300000756978989)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.48it/s] 19%|#9        | 5/26 [00:00<00:00, 23.12it/s] 35%|###4      | 9/26 [00:00<00:00, 28.28it/s] 50%|#####     | 13/26 [00:00<00:00, 31.29it/s] 65%|######5   | 17/26 [00:00<00:00, 33.08it/s] 81%|########  | 21/26 [00:00<00:00, 34.33it/s] 96%|#########6| 25/26 [00:00<00:00, 34.46it/s]100%|##########| 26/26 [00:00<00:00, 29.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 52 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 53 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 54 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 55 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 56 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 57 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 58 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 59 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 60 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 61 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 62 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 63 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 64 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 65 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 66 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 67 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 68 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 69 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 70 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 71 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 72 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 73 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 74 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 75 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 76 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 77 400
penalty weights 0.0
Epoch: [2][  26/  26]	Loss 2.948 (3.830)	train_nll   0.33 (  0.40)	train_penalty   0.02 (  0.05)	weight_norm   2.62 (  3.43)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.03)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.4377 (5.8269)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.45it/s] 27%|##6       | 7/26 [00:00<00:00, 36.74it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.74it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.69it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.69it/s] 96%|#########6| 25/26 [00:00<00:00, 47.37it/s]100%|##########| 26/26 [00:00<00:00, 40.78it/s]
Test: [   0/  26]	Loss 0.439 (0.439)	test_acc   0.82 (  0.82)	test_minacc   0.06 (  0.06)	test_majacc   0.98 (  0.98)	Loss_d 0.439 (0.439)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.06 (  0.06)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.358 (0.402)	test_acc   0.88 (  0.84)	test_minacc   0.02 (  0.04)	test_majacc   1.00 (  0.99)	Loss_d 0.358 (0.402)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.02 (  0.04)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.95 (  0.94)
Test: [  20/  26]	Loss 0.360 (0.396)	test_acc   0.86 (  0.84)	test_minacc   0.11 (  0.05)	test_majacc   0.98 (  0.99)	Loss_d 0.360 (0.396)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.11 (  0.05)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.93 (  0.94)
Test: [  26/  26]	Loss 0.319 (0.392)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.319 (0.392)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.94 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.50it/s]
Test: [  0/  1]	Loss 1.731 (1.731)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.731 (1.731)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
Test: [  1/  1]	Loss 1.731 (1.731)	test_acc   0.13 (  0.13)	test_minacc   0.04 (  0.04)	test_majacc   0.97 (  0.97)	Loss_d 1.731 (1.731)	test_acc_d   0.13 (  0.13)	test_minacc_d   0.04 (  0.04)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.89 (  0.89)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  2/  1]	epoch_time 0.0352 (0.0494)	validation_time 0.0005 (0.0025)	train_time 0.0347 (0.0451)
record: (train_acc, test_acc) (0.845900023162365, 0.1340000033378601)
last accs (train_acc, test_acc) (0.845900023162365, 0.1340000033378601)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.27it/s] 19%|#9        | 5/26 [00:00<00:01, 19.99it/s] 35%|###4      | 9/26 [00:00<00:00, 25.81it/s] 50%|#####     | 13/26 [00:00<00:00, 28.81it/s] 65%|######5   | 17/26 [00:00<00:00, 30.90it/s] 81%|########  | 21/26 [00:00<00:00, 32.10it/s] 96%|#########6| 25/26 [00:00<00:00, 32.65it/s]100%|##########| 26/26 [00:00<00:00, 27.45it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 78 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 79 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 80 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 81 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 82 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 83 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 84 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 85 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 86 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 87 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 88 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 89 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 90 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 91 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 92 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 93 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 94 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 95 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 96 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 97 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 98 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 99 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 100 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 101 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 102 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 103 400
penalty weights 0.0
Epoch: [3][  26/  26]	Loss 1.964 (2.463)	train_nll   0.32 (  0.40)	train_penalty   0.02 (  0.05)	weight_norm   1.65 (  2.07)	train_acc   0.88 (  0.85)	train_minacc   0.03 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1281 (5.2217)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.01it/s] 27%|##6       | 7/26 [00:00<00:00, 32.49it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.49it/s] 50%|#####     | 13/26 [00:00<00:00, 39.79it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.34it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.34it/s] 96%|#########6| 25/26 [00:00<00:00, 46.57it/s]100%|##########| 26/26 [00:00<00:00, 38.74it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.83 (  0.83)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 0.414 (0.414)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.324 (0.383)	test_acc   0.88 (  0.84)	test_minacc   0.07 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.324 (0.383)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.07 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.332 (0.375)	test_acc   0.86 (  0.84)	test_minacc   0.09 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.332 (0.375)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.09 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.291 (0.370)	test_acc   0.88 (  0.85)	test_minacc   0.06 (  0.05)	test_majacc   1.00 (  0.99)	Loss_d 0.291 (0.370)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.06 (  0.05)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 65.80it/s]
Test: [  0/  1]	Loss 1.646 (1.646)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.646 (1.646)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
Test: [  1/  1]	Loss 1.646 (1.646)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.99 (  0.99)	Loss_d 1.646 (1.646)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.86 (  0.86)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  3/  1]	epoch_time 0.0366 (0.0462)	validation_time 0.0004 (0.0020)	train_time 0.0362 (0.0429)
record: (train_acc, test_acc) (0.8464000266194344, 0.1600000113248825)
last accs (train_acc, test_acc) (0.8464000266194344, 0.1600000113248825)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:01, 20.72it/s] 31%|###       | 8/26 [00:00<00:00, 24.13it/s] 46%|####6     | 12/26 [00:00<00:00, 28.25it/s] 62%|######1   | 16/26 [00:00<00:00, 30.55it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.02it/s] 92%|#########2| 24/26 [00:00<00:00, 32.98it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 104 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 105 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 106 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 107 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 108 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 109 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 110 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 111 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 112 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 113 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 114 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 115 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 116 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 117 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 118 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 119 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 120 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 121 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 122 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 123 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 124 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 125 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 126 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 127 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 128 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 129 400
penalty weights 0.0
Epoch: [4][  26/  26]	Loss 1.359 (1.708)	train_nll   0.30 (  0.39)	train_penalty   0.02 (  0.04)	weight_norm   1.06 (  1.32)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.04)	train_majacc   1.00 (  0.99)	train_corr   0.00 (  0.00)	l1 5.1321 (5.0909)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.00it/s] 19%|#9        | 5/26 [00:00<00:00, 23.24it/s]                                               19%|#9        | 5/26 [00:00<00:00, 23.24it/s] 42%|####2     | 11/26 [00:00<00:00, 34.61it/s] 65%|######5   | 17/26 [00:00<00:00, 42.30it/s]                                                65%|######5   | 17/26 [00:00<00:00, 42.30it/s] 88%|########8 | 23/26 [00:00<00:00, 44.08it/s]100%|##########| 26/26 [00:00<00:00, 36.88it/s]
Test: [   0/  26]	Loss 0.397 (0.397)	test_acc   0.83 (  0.83)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.397 (0.397)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.96 (  0.96)
Test: [  10/  26]	Loss 0.314 (0.368)	test_acc   0.88 (  0.84)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  1.00)	Loss_d 0.314 (0.368)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.321 (0.362)	test_acc   0.85 (  0.85)	test_minacc   0.02 (  0.02)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.362)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.02 (  0.02)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  26/  26]	Loss 0.286 (0.358)	test_acc   0.87 (  0.85)	test_minacc   0.00 (  0.02)	test_majacc   1.00 (  0.99)	Loss_d 0.286 (0.358)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.00 (  0.02)	test_majacc_d   1.00 (  0.99)	test_corr_d   0.96 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.96it/s]
Test: [  0/  1]	Loss 1.831 (1.831)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.831 (1.831)	test_acc   0.12 (  0.12)	test_minacc   0.02 (  0.02)	test_majacc   1.00 (  1.00)	Loss_d 1.831 (1.831)	test_acc_d   0.12 (  0.12)	test_minacc_d   0.02 (  0.02)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  4/  1]	epoch_time 0.0362 (0.0442)	validation_time 0.0004 (0.0017)	train_time 0.0358 (0.0415)
record: (train_acc, test_acc) (0.8464000266194344, 0.1600000113248825)
last accs (train_acc, test_acc) (0.8480000214576722, 0.12000000476837158)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.54it/s] 19%|#9        | 5/26 [00:00<00:00, 22.67it/s] 35%|###4      | 9/26 [00:00<00:00, 28.03it/s] 50%|#####     | 13/26 [00:00<00:00, 31.27it/s] 65%|######5   | 17/26 [00:00<00:00, 33.05it/s] 81%|########  | 21/26 [00:00<00:00, 32.83it/s] 96%|#########6| 25/26 [00:00<00:00, 33.64it/s]100%|##########| 26/26 [00:00<00:00, 28.81it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 130 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 131 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 132 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 133 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 134 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 135 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 136 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 137 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 138 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 139 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 140 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 141 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 142 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 143 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 144 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 145 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 146 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 147 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 148 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 149 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 150 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 151 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 152 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 153 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 154 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 155 400
penalty weights 0.0
Epoch: [5][  26/  26]	Loss 0.968 (1.221)	train_nll   0.29 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.68 (  0.85)	train_acc   0.90 (  0.85)	train_minacc   0.25 (  0.07)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 5.7661 (5.4171)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.55it/s] 27%|##6       | 7/26 [00:00<00:00, 35.47it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.47it/s] 50%|#####     | 13/26 [00:00<00:00, 41.41it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.99it/s]100%|##########| 26/26 [00:00<00:00, 39.89it/s]
Test: [   0/  26]	Loss 0.417 (0.417)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.98 (  0.98)	Loss_d 0.417 (0.417)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.333 (0.378)	test_acc   0.87 (  0.84)	test_minacc   0.16 (  0.15)	test_majacc   0.96 (  0.96)	Loss_d 0.333 (0.378)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.16 (  0.15)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.92 (  0.91)
Test: [  20/  26]	Loss 0.314 (0.371)	test_acc   0.86 (  0.84)	test_minacc   0.18 (  0.16)	test_majacc   0.98 (  0.96)	Loss_d 0.314 (0.371)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.18 (  0.16)	test_majacc_d   0.98 (  0.96)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.260 (0.363)	test_acc   0.90 (  0.85)	test_minacc   0.41 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.260 (0.363)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.41 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.80it/s]
Test: [  0/  1]	Loss 1.689 (1.689)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.94 (  0.94)	Loss_d 1.689 (1.689)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.689 (1.689)	test_acc   0.23 (  0.23)	test_minacc   0.15 (  0.15)	test_majacc   0.94 (  0.94)	Loss_d 1.689 (1.689)	test_acc_d   0.23 (  0.23)	test_minacc_d   0.15 (  0.15)	test_majacc_d   0.94 (  0.94)	test_corr_d   0.79 (  0.79)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  5/  1]	epoch_time 0.0353 (0.0427)	validation_time 0.0003 (0.0015)	train_time 0.0350 (0.0404)
record: (train_acc, test_acc) (0.8473000251650811, 0.23000000417232513)
last accs (train_acc, test_acc) (0.8473000251650811, 0.23000000417232513)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:01, 20.99it/s] 35%|###4      | 9/26 [00:00<00:00, 26.97it/s] 50%|#####     | 13/26 [00:00<00:00, 29.93it/s] 65%|######5   | 17/26 [00:00<00:00, 31.84it/s] 81%|########  | 21/26 [00:00<00:00, 33.01it/s] 96%|#########6| 25/26 [00:00<00:00, 34.32it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 156 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 157 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 158 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 159 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 160 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 161 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 162 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 163 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 164 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 165 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 166 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 167 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 168 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 169 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 170 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 171 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 172 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 173 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 174 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 175 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 176 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 177 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 178 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 179 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 180 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 181 400
penalty weights 0.0
Epoch: [6][  26/  26]	Loss 0.756 (0.931)	train_nll   0.28 (  0.37)	train_penalty   0.02 (  0.04)	weight_norm   0.47 (  0.56)	train_acc   0.89 (  0.85)	train_minacc   0.12 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 6.6809 (6.0551)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 15%|#5        | 4/26 [00:00<00:00, 36.10it/s] 35%|###4      | 9/26 [00:00<00:00, 42.24it/s]                                               35%|###4      | 9/26 [00:00<00:00, 42.24it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.35it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.35it/s] 81%|########  | 21/26 [00:00<00:00, 47.67it/s]100%|##########| 26/26 [00:00<00:00, 43.66it/s]
Test: [   0/  26]	Loss 0.405 (0.405)	test_acc   0.83 (  0.83)	test_minacc   0.09 (  0.09)	test_majacc   0.99 (  0.99)	Loss_d 0.405 (0.405)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.09 (  0.09)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.92 (  0.92)
Test: [  10/  26]	Loss 0.320 (0.363)	test_acc   0.87 (  0.84)	test_minacc   0.11 (  0.11)	test_majacc   0.97 (  0.98)	Loss_d 0.320 (0.363)	test_acc_d   0.87 (  0.84)	test_minacc_d   0.11 (  0.11)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  20/  26]	Loss 0.332 (0.357)	test_acc   0.86 (  0.85)	test_minacc   0.09 (  0.11)	test_majacc   0.99 (  0.98)	Loss_d 0.332 (0.357)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.09 (  0.11)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.265 (0.351)	test_acc   0.90 (  0.85)	test_minacc   0.34 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.265 (0.351)	test_acc_d   0.90 (  0.85)	test_minacc_d   0.34 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.92 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.15it/s]
Test: [  0/  1]	Loss 1.728 (1.728)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.728 (1.728)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.81 (  0.81)
Test: [  1/  1]	Loss 1.728 (1.728)	test_acc   0.20 (  0.20)	test_minacc   0.12 (  0.12)	test_majacc   0.96 (  0.96)	Loss_d 1.728 (1.728)	test_acc_d   0.20 (  0.20)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.81 (  0.81)
Overall Timing[  6/  1]	epoch_time 0.0359 (0.0417)	validation_time 0.0004 (0.0013)	train_time 0.0355 (0.0397)
record: (train_acc, test_acc) (0.8473000251650811, 0.23000000417232513)
last accs (train_acc, test_acc) (0.8508000224232674, 0.20200000703334808)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.70it/s] 19%|#9        | 5/26 [00:00<00:01, 20.96it/s] 35%|###4      | 9/26 [00:00<00:00, 25.73it/s] 50%|#####     | 13/26 [00:00<00:00, 29.46it/s] 65%|######5   | 17/26 [00:00<00:00, 31.30it/s] 81%|########  | 21/26 [00:00<00:00, 32.55it/s] 96%|#########6| 25/26 [00:00<00:00, 33.16it/s]100%|##########| 26/26 [00:00<00:00, 28.09it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 182 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 183 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 184 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 185 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 186 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 187 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 188 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 189 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 190 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 191 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 192 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 193 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 194 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 195 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 196 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 197 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 198 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 199 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 200 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 201 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 202 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 203 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 204 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 205 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 206 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 207 400
penalty weights 0.0
Epoch: [7][  26/  26]	Loss 0.591 (0.740)	train_nll   0.28 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.32 (  0.38)	train_acc   0.87 (  0.85)	train_minacc   0.03 (  0.11)	train_majacc   1.00 (  0.98)	train_corr   0.00 (  0.00)	l1 8.2644 (7.3858)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.03it/s] 27%|##6       | 7/26 [00:00<00:00, 33.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 33.77it/s] 50%|#####     | 13/26 [00:00<00:00, 40.20it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.94it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.94it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 39.48it/s]
Test: [   0/  26]	Loss 0.414 (0.414)	test_acc   0.83 (  0.83)	test_minacc   0.04 (  0.04)	test_majacc   1.00 (  1.00)	Loss_d 0.414 (0.414)	test_acc_d   0.83 (  0.83)	test_minacc_d   0.04 (  0.04)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.95 (  0.95)
Test: [  10/  26]	Loss 0.321 (0.371)	test_acc   0.88 (  0.84)	test_minacc   0.07 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.321 (0.371)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.07 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
Test: [  20/  26]	Loss 0.319 (0.364)	test_acc   0.86 (  0.85)	test_minacc   0.05 (  0.04)	test_majacc   0.99 (  0.99)	Loss_d 0.319 (0.364)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.05 (  0.04)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.96 (  0.95)
Test: [  26/  26]	Loss 0.273 (0.359)	test_acc   0.87 (  0.85)	test_minacc   0.09 (  0.05)	test_majacc   0.99 (  0.99)	Loss_d 0.273 (0.359)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.09 (  0.05)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.95 (  0.95)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.40it/s]
Test: [  0/  1]	Loss 1.919 (1.919)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Test: [  1/  1]	Loss 1.919 (1.919)	test_acc   0.11 (  0.11)	test_minacc   0.01 (  0.01)	test_majacc   1.00 (  1.00)	Loss_d 1.919 (1.919)	test_acc_d   0.11 (  0.11)	test_minacc_d   0.01 (  0.01)	test_majacc_d   1.00 (  1.00)	test_corr_d   0.91 (  0.91)
Overall Timing[  7/  1]	epoch_time 0.0369 (0.0411)	validation_time 0.0003 (0.0012)	train_time 0.0366 (0.0393)
record: (train_acc, test_acc) (0.8473000251650811, 0.23000000417232513)
last accs (train_acc, test_acc) (0.8496000190377235, 0.11300000548362732)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.67it/s] 15%|#5        | 4/26 [00:00<00:01, 20.15it/s] 31%|###       | 8/26 [00:00<00:00, 27.04it/s] 46%|####6     | 12/26 [00:00<00:00, 30.74it/s] 62%|######1   | 16/26 [00:00<00:00, 32.23it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.80it/s] 92%|#########2| 24/26 [00:00<00:00, 33.14it/s]100%|##########| 26/26 [00:00<00:00, 28.55it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 208 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 209 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 210 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 211 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 212 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 213 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 214 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 215 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 216 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 217 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 218 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 219 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 220 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 221 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 222 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 223 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 224 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 225 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 226 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 227 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 228 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 229 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 230 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 231 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 232 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 233 400
penalty weights 0.0
Epoch: [8][  26/  26]	Loss 0.508 (0.618)	train_nll   0.29 (  0.36)	train_penalty   0.02 (  0.03)	weight_norm   0.22 (  0.26)	train_acc   0.88 (  0.85)	train_minacc   0.16 (  0.11)	train_majacc   0.99 (  0.98)	train_corr   0.00 (  0.00)	l1 9.8095 (9.0644)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.55it/s] 23%|##3       | 6/26 [00:00<00:00, 31.07it/s]                                               23%|##3       | 6/26 [00:00<00:00, 31.07it/s] 46%|####6     | 12/26 [00:00<00:00, 42.49it/s] 65%|######5   | 17/26 [00:00<00:00, 43.40it/s]                                                65%|######5   | 17/26 [00:00<00:00, 43.40it/s] 85%|########4 | 22/26 [00:00<00:00, 45.05it/s]100%|##########| 26/26 [00:00<00:00, 39.37it/s]
Test: [   0/  26]	Loss 0.408 (0.408)	test_acc   0.82 (  0.82)	test_minacc   0.16 (  0.16)	test_majacc   0.96 (  0.96)	Loss_d 0.408 (0.408)	test_acc_d   0.82 (  0.82)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.336 (0.371)	test_acc   0.85 (  0.84)	test_minacc   0.20 (  0.20)	test_majacc   0.94 (  0.95)	Loss_d 0.336 (0.371)	test_acc_d   0.85 (  0.84)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.94 (  0.95)	test_corr_d   0.89 (  0.89)
Test: [  20/  26]	Loss 0.333 (0.367)	test_acc   0.86 (  0.84)	test_minacc   0.21 (  0.20)	test_majacc   0.97 (  0.95)	Loss_d 0.333 (0.367)	test_acc_d   0.86 (  0.84)	test_minacc_d   0.21 (  0.20)	test_majacc_d   0.97 (  0.95)	test_corr_d   0.91 (  0.89)
Test: [  26/  26]	Loss 0.290 (0.361)	test_acc   0.88 (  0.84)	test_minacc   0.34 (  0.22)	test_majacc   0.96 (  0.95)	Loss_d 0.290 (0.361)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.34 (  0.22)	test_majacc_d   0.96 (  0.95)	test_corr_d   0.88 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.63it/s]
Test: [  0/  1]	Loss 1.504 (1.504)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.504 (1.504)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
Test: [  1/  1]	Loss 1.504 (1.504)	test_acc   0.27 (  0.27)	test_minacc   0.20 (  0.20)	test_majacc   0.96 (  0.96)	Loss_d 1.504 (1.504)	test_acc_d   0.27 (  0.27)	test_minacc_d   0.20 (  0.20)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.73 (  0.73)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[  8/  1]	epoch_time 0.0368 (0.0407)	validation_time 0.0004 (0.0011)	train_time 0.0364 (0.0390)
record: (train_acc, test_acc) (0.8421000224351883, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8421000224351883, 0.27300000190734863)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.19it/s] 19%|#9        | 5/26 [00:00<00:01, 19.78it/s] 35%|###4      | 9/26 [00:00<00:00, 25.71it/s] 50%|#####     | 13/26 [00:00<00:00, 29.09it/s] 65%|######5   | 17/26 [00:00<00:00, 31.04it/s] 81%|########  | 21/26 [00:00<00:00, 32.62it/s] 96%|#########6| 25/26 [00:00<00:00, 33.74it/s]100%|##########| 26/26 [00:00<00:00, 27.89it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 234 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 235 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 236 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 237 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 238 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 239 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 240 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 241 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 242 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 243 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 244 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 245 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 246 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 247 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 248 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 249 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 250 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 251 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 252 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 253 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 254 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 255 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 256 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 257 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 258 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 259 400
penalty weights 0.0
Epoch: [9][  26/  26]	Loss 0.440 (0.541)	train_nll   0.27 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.17 (  0.20)	train_acc   0.87 (  0.85)	train_minacc   0.00 (  0.17)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 11.5922 (10.6667)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.31it/s] 27%|##6       | 7/26 [00:00<00:00, 34.96it/s]                                               27%|##6       | 7/26 [00:00<00:00, 34.96it/s] 46%|####6     | 12/26 [00:00<00:00, 38.40it/s] 69%|######9   | 18/26 [00:00<00:00, 45.98it/s]                                                69%|######9   | 18/26 [00:00<00:00, 45.98it/s] 92%|#########2| 24/26 [00:00<00:00, 45.97it/s]100%|##########| 26/26 [00:00<00:00, 39.82it/s]
Test: [   0/  26]	Loss 0.396 (0.396)	test_acc   0.84 (  0.84)	test_minacc   0.13 (  0.13)	test_majacc   0.99 (  0.99)	Loss_d 0.396 (0.396)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.13 (  0.13)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.93)
Test: [  10/  26]	Loss 0.315 (0.360)	test_acc   0.88 (  0.84)	test_minacc   0.09 (  0.08)	test_majacc   0.98 (  0.99)	Loss_d 0.315 (0.360)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.09 (  0.08)	test_majacc_d   0.98 (  0.99)	test_corr_d   0.94 (  0.93)
Test: [  20/  26]	Loss 0.309 (0.353)	test_acc   0.86 (  0.85)	test_minacc   0.11 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.309 (0.353)	test_acc_d   0.86 (  0.85)	test_minacc_d   0.11 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.94 (  0.94)
Test: [  26/  26]	Loss 0.265 (0.348)	test_acc   0.88 (  0.85)	test_minacc   0.16 (  0.08)	test_majacc   0.99 (  0.99)	Loss_d 0.265 (0.348)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.16 (  0.08)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.93 (  0.94)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.72it/s]
Test: [  0/  1]	Loss 1.754 (1.754)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.754 (1.754)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Test: [  1/  1]	Loss 1.754 (1.754)	test_acc   0.16 (  0.16)	test_minacc   0.07 (  0.07)	test_majacc   0.98 (  0.98)	Loss_d 1.754 (1.754)	test_acc_d   0.16 (  0.16)	test_minacc_d   0.07 (  0.07)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.85 (  0.85)
Overall Timing[  9/  1]	epoch_time 0.0375 (0.0403)	validation_time 0.0004 (0.0010)	train_time 0.0371 (0.0388)
record: (train_acc, test_acc) (0.8421000224351883, 0.27300000190734863)
last accs (train_acc, test_acc) (0.8512000230550766, 0.164000004529953)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.48it/s] 19%|#9        | 5/26 [00:00<00:00, 21.63it/s] 35%|###4      | 9/26 [00:00<00:00, 26.85it/s] 50%|#####     | 13/26 [00:00<00:00, 29.31it/s] 65%|######5   | 17/26 [00:00<00:00, 31.20it/s] 81%|########  | 21/26 [00:00<00:00, 32.33it/s] 96%|#########6| 25/26 [00:00<00:00, 32.94it/s]100%|##########| 26/26 [00:00<00:00, 28.10it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 260 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 261 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 262 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 263 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 264 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 265 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 266 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 267 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 268 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 269 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 270 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 271 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 272 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 273 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 274 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 275 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 276 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 277 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 278 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 279 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 280 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 281 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 282 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 283 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 284 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 285 400
penalty weights 0.0
Epoch: [10][  26/  26]	Loss 0.396 (0.499)	train_nll   0.27 (  0.35)	train_penalty   0.02 (  0.03)	weight_norm   0.13 (  0.15)	train_acc   0.89 (  0.85)	train_minacc   0.12 (  0.16)	train_majacc   1.00 (  0.97)	train_corr   0.00 (  0.00)	l1 13.2766 (12.4009)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.97it/s] 35%|###4      | 9/26 [00:00<00:00, 40.32it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.32it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.67it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.74it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.74it/s]100%|##########| 26/26 [00:00<00:00, 50.95it/s]100%|##########| 26/26 [00:00<00:00, 42.33it/s]
Test: [   0/  26]	Loss 0.378 (0.378)	test_acc   0.84 (  0.84)	test_minacc   0.19 (  0.19)	test_majacc   0.97 (  0.97)	Loss_d 0.378 (0.378)	test_acc_d   0.84 (  0.84)	test_minacc_d   0.19 (  0.19)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.299 (0.350)	test_acc   0.88 (  0.84)	test_minacc   0.13 (  0.12)	test_majacc   0.98 (  0.98)	Loss_d 0.299 (0.350)	test_acc_d   0.88 (  0.84)	test_minacc_d   0.13 (  0.12)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  20/  26]	Loss 0.300 (0.341)	test_acc   0.88 (  0.85)	test_minacc   0.21 (  0.12)	test_majacc   0.99 (  0.98)	Loss_d 0.300 (0.341)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.21 (  0.12)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.93)
Test: [  26/  26]	Loss 0.245 (0.336)	test_acc   0.91 (  0.85)	test_minacc   0.31 (  0.14)	test_majacc   1.00 (  0.98)	Loss_d 0.245 (0.336)	test_acc_d   0.91 (  0.85)	test_minacc_d   0.31 (  0.14)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.93 (  0.93)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.67it/s]
Test: [  0/  1]	Loss 1.687 (1.687)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.687 (1.687)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Test: [  1/  1]	Loss 1.687 (1.687)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.687 (1.687)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.77 (  0.77)
Overall Timing[ 10/  1]	epoch_time 0.0359 (0.0399)	validation_time 0.0006 (0.0010)	train_time 0.0353 (0.0385)
record: (train_acc, test_acc) (0.8421000224351883, 0.27300000190734863)
last accs (train_acc, test_acc) (0.853000027358532, 0.21900001168251038)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.24it/s] 15%|#5        | 4/26 [00:00<00:01, 15.77it/s] 31%|###       | 8/26 [00:00<00:00, 23.28it/s] 46%|####6     | 12/26 [00:00<00:00, 27.52it/s] 62%|######1   | 16/26 [00:00<00:00, 30.44it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.43it/s] 92%|#########2| 24/26 [00:00<00:00, 33.80it/s]100%|##########| 26/26 [00:00<00:00, 26.96it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 286 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 287 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 288 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 289 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 290 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 291 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 292 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 293 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 294 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 295 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 296 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 297 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 298 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 299 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 300 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 301 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 302 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 303 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 304 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 305 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 306 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 307 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 308 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 309 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 310 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 311 400
penalty weights 0.0
Epoch: [11][  26/  26]	Loss 0.361 (0.457)	train_nll   0.25 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.11 (  0.12)	train_acc   0.89 (  0.85)	train_minacc   0.25 (  0.23)	train_majacc   0.99 (  0.97)	train_corr   0.00 (  0.00)	l1 14.8132 (13.9799)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 17.01it/s] 35%|###4      | 9/26 [00:00<00:00, 40.51it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.51it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.48it/s] 77%|#######6  | 20/26 [00:00<00:00, 47.16it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 47.16it/s]100%|##########| 26/26 [00:00<00:00, 50.88it/s]100%|##########| 26/26 [00:00<00:00, 41.98it/s]
Test: [   0/  26]	Loss 0.358 (0.358)	test_acc   0.85 (  0.85)	test_minacc   0.37 (  0.37)	test_majacc   0.96 (  0.96)	Loss_d 0.358 (0.358)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.37 (  0.37)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.86 (  0.86)
Test: [  10/  26]	Loss 0.300 (0.328)	test_acc   0.87 (  0.85)	test_minacc   0.20 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.300 (0.328)	test_acc_d   0.87 (  0.85)	test_minacc_d   0.20 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.90 (  0.88)
Test: [  20/  26]	Loss 0.282 (0.321)	test_acc   0.87 (  0.86)	test_minacc   0.35 (  0.30)	test_majacc   0.96 (  0.96)	Loss_d 0.282 (0.321)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.35 (  0.30)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.89 (  0.89)
Test: [  26/  26]	Loss 0.234 (0.316)	test_acc   0.91 (  0.86)	test_minacc   0.50 (  0.31)	test_majacc   0.97 (  0.96)	Loss_d 0.234 (0.316)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.50 (  0.31)	test_majacc_d   0.97 (  0.96)	test_corr_d   0.90 (  0.89)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.45it/s]
Test: [  0/  1]	Loss 1.572 (1.572)	test_acc   0.31 (  0.31)	test_minacc   0.25 (  0.25)	test_majacc   0.93 (  0.93)	Loss_d 1.572 (1.572)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.66 (  0.66)
Test: [  1/  1]	Loss 1.572 (1.572)	test_acc   0.31 (  0.31)	test_minacc   0.25 (  0.25)	test_majacc   0.93 (  0.93)	Loss_d 1.572 (1.572)	test_acc_d   0.31 (  0.31)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.93 (  0.93)	test_corr_d   0.66 (  0.66)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[ 11/  1]	epoch_time 0.0380 (0.0398)	validation_time 0.0004 (0.0009)	train_time 0.0376 (0.0384)
record: (train_acc, test_acc) (0.8609000270962716, 0.3140000104904175)
last accs (train_acc, test_acc) (0.8609000270962716, 0.3140000104904175)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.33it/s] 19%|#9        | 5/26 [00:00<00:00, 22.92it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 30.56it/s] 65%|######5   | 17/26 [00:00<00:00, 32.15it/s] 81%|########  | 21/26 [00:00<00:00, 32.52it/s] 96%|#########6| 25/26 [00:00<00:00, 32.85it/s]100%|##########| 26/26 [00:00<00:00, 28.65it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 312 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 313 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 314 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 315 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 316 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 317 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 318 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 319 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 320 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 321 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 322 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 323 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 324 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 325 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 326 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 327 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 328 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 329 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 330 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 331 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 332 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 333 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 334 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 335 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 336 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 337 400
penalty weights 0.0
Epoch: [12][  26/  26]	Loss 0.347 (0.440)	train_nll   0.25 (  0.34)	train_penalty   0.01 (  0.02)	weight_norm   0.10 (  0.10)	train_acc   0.89 (  0.85)	train_minacc   0.22 (  0.23)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 16.1501 (15.4951)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 19.76it/s] 31%|###       | 8/26 [00:00<00:00, 42.80it/s]                                               31%|###       | 8/26 [00:00<00:00, 42.80it/s] 50%|#####     | 13/26 [00:00<00:00, 42.99it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.78it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.78it/s] 96%|#########6| 25/26 [00:00<00:00, 48.06it/s]100%|##########| 26/26 [00:00<00:00, 41.95it/s]
Test: [   0/  26]	Loss 0.356 (0.356)	test_acc   0.85 (  0.85)	test_minacc   0.24 (  0.24)	test_majacc   0.98 (  0.98)	Loss_d 0.356 (0.356)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.24 (  0.24)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.288 (0.329)	test_acc   0.88 (  0.86)	test_minacc   0.13 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.288 (0.329)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.13 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.94 (  0.92)
Test: [  20/  26]	Loss 0.288 (0.321)	test_acc   0.87 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.288 (0.321)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  26/  26]	Loss 0.240 (0.317)	test_acc   0.91 (  0.86)	test_minacc   0.34 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.240 (0.317)	test_acc_d   0.91 (  0.86)	test_minacc_d   0.34 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.28it/s]
Test: [  0/  1]	Loss 1.678 (1.678)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.678 (1.678)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.678 (1.678)	test_acc   0.22 (  0.22)	test_minacc   0.14 (  0.14)	test_majacc   0.96 (  0.96)	Loss_d 1.678 (1.678)	test_acc_d   0.22 (  0.22)	test_minacc_d   0.14 (  0.14)	test_majacc_d   0.96 (  0.96)	test_corr_d   0.79 (  0.79)
Overall Timing[ 12/  1]	epoch_time 0.0354 (0.0394)	validation_time 0.0003 (0.0009)	train_time 0.0351 (0.0381)
record: (train_acc, test_acc) (0.8609000270962716, 0.3140000104904175)
last accs (train_acc, test_acc) (0.8612000268697738, 0.21800000965595245)
current lr:  0.006
current prune rate:  1
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.43it/s] 19%|#9        | 5/26 [00:00<00:00, 24.31it/s] 35%|###4      | 9/26 [00:00<00:00, 28.48it/s] 50%|#####     | 13/26 [00:00<00:00, 30.36it/s] 65%|######5   | 17/26 [00:00<00:00, 32.13it/s] 81%|########  | 21/26 [00:00<00:00, 33.09it/s] 96%|#########6| 25/26 [00:00<00:00, 33.53it/s]100%|##########| 26/26 [00:00<00:00, 29.12it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 338 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 339 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 340 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 341 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 342 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 343 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 344 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 345 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 346 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 347 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 348 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 349 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 350 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 351 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 352 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 353 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 354 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 355 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 356 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 357 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 358 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 359 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 360 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 361 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 362 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 363 400
penalty weights 0.0
Epoch: [13][  26/  26]	Loss 0.342 (0.424)	train_nll   0.26 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.09 (  0.09)	train_acc   0.88 (  0.85)	train_minacc   0.09 (  0.28)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 17.1778 (16.6624)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.13it/s] 35%|###4      | 9/26 [00:00<00:00, 40.42it/s]                                               35%|###4      | 9/26 [00:00<00:00, 40.42it/s] 58%|#####7    | 15/26 [00:00<00:00, 47.85it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 47.85it/s] 81%|########  | 21/26 [00:00<00:00, 47.54it/s]100%|##########| 26/26 [00:00<00:00, 42.49it/s]
Test: [   0/  26]	Loss 0.360 (0.360)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 0.360 (0.360)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.89 (  0.89)
Test: [  10/  26]	Loss 0.315 (0.337)	test_acc   0.88 (  0.85)	test_minacc   0.07 (  0.18)	test_majacc   0.98 (  0.98)	Loss_d 0.315 (0.337)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.07 (  0.18)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.93 (  0.92)
Test: [  20/  26]	Loss 0.317 (0.331)	test_acc   0.86 (  0.86)	test_minacc   0.23 (  0.18)	test_majacc   0.97 (  0.98)	Loss_d 0.317 (0.331)	test_acc_d   0.86 (  0.86)	test_minacc_d   0.23 (  0.18)	test_majacc_d   0.97 (  0.98)	test_corr_d   0.92 (  0.92)
Test: [  26/  26]	Loss 0.258 (0.326)	test_acc   0.88 (  0.86)	test_minacc   0.12 (  0.17)	test_majacc   1.00 (  0.98)	Loss_d 0.258 (0.326)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.12 (  0.17)	test_majacc_d   1.00 (  0.98)	test_corr_d   0.93 (  0.92)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.27it/s]
Test: [  0/  1]	Loss 1.594 (1.594)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.594 (1.594)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Test: [  1/  1]	Loss 1.594 (1.594)	test_acc   0.21 (  0.21)	test_minacc   0.12 (  0.12)	test_majacc   0.99 (  0.99)	Loss_d 1.594 (1.594)	test_acc_d   0.21 (  0.21)	test_minacc_d   0.12 (  0.12)	test_majacc_d   0.99 (  0.99)	test_corr_d   0.79 (  0.79)
Overall Timing[ 13/  1]	epoch_time 0.0345 (0.0391)	validation_time 0.0003 (0.0008)	train_time 0.0342 (0.0379)
record: (train_acc, test_acc) (0.8609000270962716, 0.3140000104904175)
last accs (train_acc, test_acc) (0.8579000191688537, 0.21000000834465027)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.84it/s] 19%|#9        | 5/26 [00:00<00:00, 22.32it/s] 35%|###4      | 9/26 [00:00<00:00, 27.92it/s] 50%|#####     | 13/26 [00:00<00:00, 31.03it/s] 65%|######5   | 17/26 [00:00<00:00, 32.78it/s] 81%|########  | 21/26 [00:00<00:00, 34.12it/s] 96%|#########6| 25/26 [00:00<00:00, 34.74it/s]100%|##########| 26/26 [00:00<00:00, 29.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 364 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 365 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 366 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 367 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 368 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 369 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 370 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 371 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 372 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 373 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 374 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 375 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 376 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 377 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 378 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 379 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 380 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 381 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 382 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 383 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 384 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 385 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 386 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 387 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 388 400
penalty weights 0.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 389 400
penalty weights 0.0
Epoch: [14][  26/  26]	Loss 0.361 (0.419)	train_nll   0.28 (  0.33)	train_penalty   0.01 (  0.02)	weight_norm   0.08 (  0.09)	train_acc   0.88 (  0.85)	train_minacc   0.12 (  0.25)	train_majacc   0.99 (  0.96)	train_corr   0.00 (  0.00)	l1 18.0738 (17.5332)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.86it/s] 31%|###       | 8/26 [00:00<00:00, 40.70it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.70it/s] 50%|#####     | 13/26 [00:00<00:00, 41.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.14it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.14it/s] 96%|#########6| 25/26 [00:00<00:00, 47.87it/s]100%|##########| 26/26 [00:00<00:00, 41.79it/s]
Test: [   0/  26]	Loss 0.349 (0.349)	test_acc   0.85 (  0.85)	test_minacc   0.25 (  0.25)	test_majacc   0.98 (  0.98)	Loss_d 0.349 (0.349)	test_acc_d   0.85 (  0.85)	test_minacc_d   0.25 (  0.25)	test_majacc_d   0.98 (  0.98)	test_corr_d   0.90 (  0.90)
Test: [  10/  26]	Loss 0.297 (0.327)	test_acc   0.88 (  0.85)	test_minacc   0.11 (  0.18)	test_majacc   0.98 (  0.97)	Loss_d 0.297 (0.327)	test_acc_d   0.88 (  0.85)	test_minacc_d   0.11 (  0.18)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.93 (  0.91)
Test: [  20/  26]	Loss 0.292 (0.324)	test_acc   0.87 (  0.86)	test_minacc   0.23 (  0.19)	test_majacc   0.98 (  0.97)	Loss_d 0.292 (0.324)	test_acc_d   0.87 (  0.86)	test_minacc_d   0.23 (  0.19)	test_majacc_d   0.98 (  0.97)	test_corr_d   0.91 (  0.91)
Test: [  26/  26]	Loss 0.260 (0.321)	test_acc   0.88 (  0.86)	test_minacc   0.19 (  0.18)	test_majacc   0.99 (  0.98)	Loss_d 0.260 (0.321)	test_acc_d   0.88 (  0.86)	test_minacc_d   0.19 (  0.18)	test_majacc_d   0.99 (  0.98)	test_corr_d   0.92 (  0.91)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 62.19it/s]
Test: [  0/  1]	Loss 1.506 (1.506)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.506 (1.506)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Test: [  1/  1]	Loss 1.506 (1.506)	test_acc   0.24 (  0.24)	test_minacc   0.16 (  0.16)	test_majacc   0.97 (  0.97)	Loss_d 1.506 (1.506)	test_acc_d   0.24 (  0.24)	test_minacc_d   0.16 (  0.16)	test_majacc_d   0.97 (  0.97)	test_corr_d   0.76 (  0.76)
Overall Timing[ 14/  1]	epoch_time 0.0362 (0.0389)	validation_time 0.0004 (0.0008)	train_time 0.0357 (0.0377)
record: (train_acc, test_acc) (0.8609000270962716, 0.3140000104904175)
last accs (train_acc, test_acc) (0.8563000239133834, 0.2370000183582306)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.09it/s] 19%|#9        | 5/26 [00:00<00:00, 23.07it/s] 35%|###4      | 9/26 [00:00<00:00, 27.58it/s] 46%|####6     | 12/26 [00:00<00:00, 27.85it/s] 62%|######1   | 16/26 [00:00<00:00, 30.13it/s] 73%|#######3  | 19/26 [00:00<00:00, 29.84it/s] 88%|########8 | 23/26 [00:00<00:00, 31.17it/s]100%|##########| 26/26 [00:00<00:00, 27.51it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 390 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 391 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 392 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 393 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 394 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 395 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 396 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 397 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 398 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 399 400
penalty weights 0.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 400 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 401 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 402 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 403 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 404 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 405 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 406 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 407 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 408 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 409 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 410 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 411 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 412 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 413 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 414 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 415 400
penalty weights 10000.0
Epoch: [15][  26/  26]	Loss 0.002 (0.169)	train_nll   0.56 (  0.41)	train_penalty   0.00 (  0.01)	weight_norm   0.11 (  0.09)	train_acc   0.70 (  0.80)	train_minacc   0.69 (  0.44)	train_majacc   0.70 (  0.87)	train_corr   0.00 (  0.00)	l1 18.1041 (18.2315)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.00it/s] 27%|##6       | 7/26 [00:00<00:00, 35.98it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.98it/s] 50%|#####     | 13/26 [00:00<00:00, 41.64it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.71it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.71it/s] 96%|#########6| 25/26 [00:00<00:00, 48.12it/s]100%|##########| 26/26 [00:00<00:00, 40.67it/s]
Test: [   0/  26]	Loss 0.571 (0.571)	test_acc   0.69 (  0.69)	test_minacc   0.65 (  0.65)	test_majacc   0.70 (  0.70)	Loss_d 0.571 (0.571)	test_acc_d   0.69 (  0.69)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.70 (  0.70)	test_corr_d   0.37 (  0.37)
Test: [  10/  26]	Loss 0.555 (0.547)	test_acc   0.71 (  0.71)	test_minacc   0.58 (  0.70)	test_majacc   0.73 (  0.72)	Loss_d 0.555 (0.547)	test_acc_d   0.71 (  0.71)	test_minacc_d   0.58 (  0.70)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.47 (  0.40)
Test: [  20/  26]	Loss 0.522 (0.547)	test_acc   0.73 (  0.72)	test_minacc   0.70 (  0.71)	test_majacc   0.73 (  0.72)	Loss_d 0.522 (0.547)	test_acc_d   0.73 (  0.72)	test_minacc_d   0.70 (  0.71)	test_majacc_d   0.73 (  0.72)	test_corr_d   0.44 (  0.40)
Test: [  26/  26]	Loss 0.552 (0.548)	test_acc   0.72 (  0.71)	test_minacc   0.72 (  0.70)	test_majacc   0.72 (  0.72)	Loss_d 0.552 (0.548)	test_acc_d   0.72 (  0.71)	test_minacc_d   0.72 (  0.70)	test_majacc_d   0.72 (  0.72)	test_corr_d   0.42 (  0.41)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.18it/s]
Test: [  0/  1]	Loss 0.678 (0.678)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.72 (  0.72)	Loss_d 0.678 (0.678)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.17 ( -0.17)
Test: [  1/  1]	Loss 0.678 (0.678)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.72 (  0.72)	Loss_d 0.678 (0.678)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.72 (  0.72)	test_corr_d  -0.17 ( -0.17)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[ 15/  1]	epoch_time 0.0382 (0.0389)	validation_time 0.0005 (0.0008)	train_time 0.0378 (0.0377)
record: (train_acc, test_acc) (0.7142000303268433, 0.6440000534057617)
last accs (train_acc, test_acc) (0.7142000303268433, 0.6440000534057617)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 19%|#9        | 5/26 [00:00<00:00, 21.50it/s] 35%|###4      | 9/26 [00:00<00:00, 27.12it/s] 50%|#####     | 13/26 [00:00<00:00, 30.01it/s] 65%|######5   | 17/26 [00:00<00:00, 31.44it/s] 81%|########  | 21/26 [00:00<00:00, 32.54it/s] 96%|#########6| 25/26 [00:00<00:00, 32.99it/s]100%|##########| 26/26 [00:00<00:00, 28.04it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 416 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 417 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 418 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 419 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 420 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 421 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 422 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 423 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 424 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 425 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 426 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 427 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 428 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 429 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 430 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 431 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 432 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 433 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 434 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 435 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 436 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 437 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 438 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 439 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 440 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 441 400
penalty weights 10000.0
Epoch: [16][  26/  26]	Loss 0.002 (0.002)	train_nll   0.64 (  0.59)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.12)	train_acc   0.66 (  0.69)	train_minacc   0.69 (  0.70)	train_majacc   0.66 (  0.69)	train_corr   0.00 (  0.00)	l1 17.8371 (17.9336)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.57it/s] 27%|##6       | 7/26 [00:00<00:00, 36.71it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.71it/s] 50%|#####     | 13/26 [00:00<00:00, 42.45it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.03it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.03it/s] 96%|#########6| 25/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 40.59it/s]
Test: [   0/  26]	Loss 0.629 (0.629)	test_acc   0.64 (  0.64)	test_minacc   0.69 (  0.69)	test_majacc   0.63 (  0.63)	Loss_d 0.629 (0.629)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.637 (0.623)	test_acc   0.64 (  0.66)	test_minacc   0.60 (  0.70)	test_majacc   0.65 (  0.65)	Loss_d 0.637 (0.623)	test_acc_d   0.64 (  0.66)	test_minacc_d   0.60 (  0.70)	test_majacc_d   0.65 (  0.65)	test_corr_d   0.27 (  0.23)
Test: [  20/  26]	Loss 0.599 (0.624)	test_acc   0.69 (  0.66)	test_minacc   0.74 (  0.71)	test_majacc   0.68 (  0.65)	Loss_d 0.599 (0.624)	test_acc_d   0.69 (  0.66)	test_minacc_d   0.74 (  0.71)	test_majacc_d   0.68 (  0.65)	test_corr_d   0.26 (  0.22)
Test: [  26/  26]	Loss 0.648 (0.625)	test_acc   0.66 (  0.66)	test_minacc   0.66 (  0.69)	test_majacc   0.66 (  0.65)	Loss_d 0.648 (0.625)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.66 (  0.69)	test_majacc_d   0.66 (  0.65)	test_corr_d   0.18 (  0.22)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 60.63it/s]
Test: [  0/  1]	Loss 0.619 (0.619)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.619 (0.619)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.33 ( -0.33)
Test: [  1/  1]	Loss 0.619 (0.619)	test_acc   0.66 (  0.66)	test_minacc   0.67 (  0.67)	test_majacc   0.62 (  0.62)	Loss_d 0.619 (0.619)	test_acc_d   0.66 (  0.66)	test_minacc_d   0.67 (  0.67)	test_majacc_d   0.62 (  0.62)	test_corr_d  -0.33 ( -0.33)
==> New best, saving at runs/resnet18-usc-unsigned/baseline/prune_rate=1.0/52/checkpoints/model_best.pth
Overall Timing[ 16/  1]	epoch_time 0.0357 (0.0387)	validation_time 0.0004 (0.0008)	train_time 0.0352 (0.0376)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.99it/s] 19%|#9        | 5/26 [00:00<00:00, 22.75it/s] 35%|###4      | 9/26 [00:00<00:00, 26.36it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 31.52it/s] 81%|########  | 21/26 [00:00<00:00, 32.89it/s] 96%|#########6| 25/26 [00:00<00:00, 33.15it/s]100%|##########| 26/26 [00:00<00:00, 28.50it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 442 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 443 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 444 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 445 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 446 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 447 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 448 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 449 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 450 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 451 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 452 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 453 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 454 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 455 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 456 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 457 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 458 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 459 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 460 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 461 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 462 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 463 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 464 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 465 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 466 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 467 400
penalty weights 10000.0
Epoch: [17][  26/  26]	Loss 0.001 (0.001)	train_nll   0.66 (  0.63)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.65 (  0.65)	train_minacc   0.62 (  0.69)	train_majacc   0.65 (  0.65)	train_corr   0.00 (  0.00)	l1 17.7413 (17.7641)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 28.45it/s] 31%|###       | 8/26 [00:00<00:00, 38.03it/s]                                               31%|###       | 8/26 [00:00<00:00, 38.03it/s] 54%|#####3    | 14/26 [00:00<00:00, 45.92it/s] 77%|#######6  | 20/26 [00:00<00:00, 46.72it/s]                                                77%|#######6  | 20/26 [00:00<00:00, 46.72it/s]100%|##########| 26/26 [00:00<00:00, 49.69it/s]100%|##########| 26/26 [00:00<00:00, 41.83it/s]
Test: [   0/  26]	Loss 0.639 (0.639)	test_acc   0.63 (  0.63)	test_minacc   0.69 (  0.69)	test_majacc   0.62 (  0.62)	Loss_d 0.639 (0.639)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.69 (  0.69)	test_majacc_d   0.62 (  0.62)	test_corr_d   0.17 (  0.17)
Test: [  10/  26]	Loss 0.646 (0.634)	test_acc   0.62 (  0.64)	test_minacc   0.60 (  0.68)	test_majacc   0.63 (  0.63)	Loss_d 0.646 (0.634)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.60 (  0.68)	test_majacc_d   0.63 (  0.63)	test_corr_d   0.24 (  0.21)
Test: [  20/  26]	Loss 0.615 (0.635)	test_acc   0.66 (  0.64)	test_minacc   0.68 (  0.69)	test_majacc   0.66 (  0.63)	Loss_d 0.615 (0.635)	test_acc_d   0.66 (  0.64)	test_minacc_d   0.68 (  0.69)	test_majacc_d   0.66 (  0.63)	test_corr_d   0.23 (  0.20)
Test: [  26/  26]	Loss 0.657 (0.636)	test_acc   0.65 (  0.64)	test_minacc   0.62 (  0.68)	test_majacc   0.66 (  0.64)	Loss_d 0.657 (0.636)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.62 (  0.68)	test_majacc_d   0.66 (  0.64)	test_corr_d   0.15 (  0.20)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.88it/s]
Test: [  0/  1]	Loss 0.627 (0.627)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.60 (  0.60)	Loss_d 0.627 (0.627)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.31 ( -0.31)
Test: [  1/  1]	Loss 0.627 (0.627)	test_acc   0.65 (  0.65)	test_minacc   0.65 (  0.65)	test_majacc   0.60 (  0.60)	Loss_d 0.627 (0.627)	test_acc_d   0.65 (  0.65)	test_minacc_d   0.65 (  0.65)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.31 ( -0.31)
Overall Timing[ 17/  1]	epoch_time 0.0362 (0.0385)	validation_time 0.0004 (0.0008)	train_time 0.0358 (0.0375)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6420000129342079, 0.6450000405311584)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 13.85it/s] 23%|##3       | 6/26 [00:00<00:00, 23.83it/s] 38%|###8      | 10/26 [00:00<00:00, 27.30it/s] 54%|#####3    | 14/26 [00:00<00:00, 29.70it/s] 69%|######9   | 18/26 [00:00<00:00, 31.50it/s] 85%|########4 | 22/26 [00:00<00:00, 32.39it/s]100%|##########| 26/26 [00:00<00:00, 33.77it/s]100%|##########| 26/26 [00:00<00:00, 28.63it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 468 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 469 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 470 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 471 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 472 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 473 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 474 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 475 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 476 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 477 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 478 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 479 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 480 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 481 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 482 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 483 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 484 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 485 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 486 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 487 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 488 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 489 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 490 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 491 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 492 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 493 400
penalty weights 10000.0
Epoch: [18][  26/  26]	Loss 0.001 (0.001)	train_nll   0.66 (  0.64)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.65 (  0.64)	train_minacc   0.62 (  0.68)	train_majacc   0.65 (  0.64)	train_corr   0.00 (  0.00)	l1 17.7089 (17.7112)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.25it/s] 31%|###       | 8/26 [00:00<00:00, 40.78it/s]                                               31%|###       | 8/26 [00:00<00:00, 40.78it/s] 50%|#####     | 13/26 [00:00<00:00, 42.50it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.79it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.79it/s] 96%|#########6| 25/26 [00:00<00:00, 48.55it/s]100%|##########| 26/26 [00:00<00:00, 41.63it/s]
Test: [   0/  26]	Loss 0.646 (0.646)	test_acc   0.63 (  0.63)	test_minacc   0.71 (  0.71)	test_majacc   0.61 (  0.61)	Loss_d 0.646 (0.646)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.16 (  0.16)
Test: [  10/  26]	Loss 0.653 (0.640)	test_acc   0.62 (  0.64)	test_minacc   0.60 (  0.68)	test_majacc   0.62 (  0.63)	Loss_d 0.653 (0.640)	test_acc_d   0.62 (  0.64)	test_minacc_d   0.60 (  0.68)	test_majacc_d   0.62 (  0.63)	test_corr_d   0.22 (  0.20)
Test: [  20/  26]	Loss 0.628 (0.641)	test_acc   0.65 (  0.64)	test_minacc   0.68 (  0.68)	test_majacc   0.65 (  0.63)	Loss_d 0.628 (0.641)	test_acc_d   0.65 (  0.64)	test_minacc_d   0.68 (  0.68)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.21 (  0.19)
Test: [  26/  26]	Loss 0.659 (0.643)	test_acc   0.64 (  0.64)	test_minacc   0.62 (  0.67)	test_majacc   0.65 (  0.63)	Loss_d 0.659 (0.643)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.62 (  0.67)	test_majacc_d   0.65 (  0.63)	test_corr_d   0.14 (  0.19)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 64.07it/s]
Test: [  0/  1]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.30 ( -0.30)
Test: [  1/  1]	Loss 0.633 (0.633)	test_acc   0.64 (  0.64)	test_minacc   0.64 (  0.64)	test_majacc   0.60 (  0.60)	Loss_d 0.633 (0.633)	test_acc_d   0.64 (  0.64)	test_minacc_d   0.64 (  0.64)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.30 ( -0.30)
Overall Timing[ 18/  1]	epoch_time 0.0349 (0.0383)	validation_time 0.0003 (0.0007)	train_time 0.0346 (0.0373)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6353000132441521, 0.6370000243186951)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.24it/s] 19%|#9        | 5/26 [00:00<00:00, 22.55it/s] 35%|###4      | 9/26 [00:00<00:00, 28.15it/s] 50%|#####     | 13/26 [00:00<00:00, 30.18it/s] 65%|######5   | 17/26 [00:00<00:00, 31.09it/s] 81%|########  | 21/26 [00:00<00:00, 32.41it/s] 96%|#########6| 25/26 [00:00<00:00, 33.43it/s]100%|##########| 26/26 [00:00<00:00, 28.47it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 494 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 495 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 496 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 497 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 498 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 499 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 500 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 501 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 502 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 503 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 504 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 505 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 506 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 507 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 508 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 509 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 510 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 511 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 512 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 513 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 514 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 515 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 516 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 517 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 518 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 519 400
penalty weights 10000.0
Epoch: [19][  26/  26]	Loss 0.000 (0.000)	train_nll   0.66 (  0.65)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.62 (  0.63)	train_minacc   0.66 (  0.67)	train_majacc   0.61 (  0.62)	train_corr   0.00 (  0.00)	l1 17.6843 (17.6851)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.52it/s] 27%|##6       | 7/26 [00:00<00:00, 30.85it/s]                                               27%|##6       | 7/26 [00:00<00:00, 30.85it/s] 50%|#####     | 13/26 [00:00<00:00, 38.19it/s] 73%|#######3  | 19/26 [00:00<00:00, 45.01it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 45.01it/s] 96%|#########6| 25/26 [00:00<00:00, 45.91it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.654 (0.654)	test_acc   0.62 (  0.62)	test_minacc   0.71 (  0.71)	test_majacc   0.60 (  0.60)	Loss_d 0.654 (0.654)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.60 (  0.60)	test_corr_d   0.14 (  0.14)
Test: [  10/  26]	Loss 0.662 (0.650)	test_acc   0.59 (  0.62)	test_minacc   0.56 (  0.66)	test_majacc   0.59 (  0.61)	Loss_d 0.662 (0.650)	test_acc_d   0.59 (  0.62)	test_minacc_d   0.56 (  0.66)	test_majacc_d   0.59 (  0.61)	test_corr_d   0.19 (  0.18)
Test: [  20/  26]	Loss 0.644 (0.651)	test_acc   0.63 (  0.62)	test_minacc   0.74 (  0.67)	test_majacc   0.61 (  0.61)	Loss_d 0.644 (0.651)	test_acc_d   0.63 (  0.62)	test_minacc_d   0.74 (  0.67)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.18 (  0.17)
Test: [  26/  26]	Loss 0.664 (0.652)	test_acc   0.62 (  0.62)	test_minacc   0.66 (  0.66)	test_majacc   0.61 (  0.61)	Loss_d 0.664 (0.652)	test_acc_d   0.62 (  0.62)	test_minacc_d   0.66 (  0.66)	test_majacc_d   0.61 (  0.61)	test_corr_d   0.12 (  0.17)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.89it/s]
Test: [  0/  1]	Loss 0.641 (0.641)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.641 (0.641)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.29 ( -0.29)
Test: [  1/  1]	Loss 0.641 (0.641)	test_acc   0.63 (  0.63)	test_minacc   0.63 (  0.63)	test_majacc   0.60 (  0.60)	Loss_d 0.641 (0.641)	test_acc_d   0.63 (  0.63)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.60 (  0.60)	test_corr_d  -0.29 ( -0.29)
Overall Timing[ 19/  1]	epoch_time 0.0366 (0.0383)	validation_time 0.0003 (0.0007)	train_time 0.0363 (0.0373)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6195000082850456, 0.6270000338554382)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.48it/s] 19%|#9        | 5/26 [00:00<00:01, 19.42it/s] 35%|###4      | 9/26 [00:00<00:00, 26.00it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.99it/s] 81%|########  | 21/26 [00:00<00:00, 33.38it/s] 96%|#########6| 25/26 [00:00<00:00, 34.02it/s]100%|##########| 26/26 [00:00<00:00, 27.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 520 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 521 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 522 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 523 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 524 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 525 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 526 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 527 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 528 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 529 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 530 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 531 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 532 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 533 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 534 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 535 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 536 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 537 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 538 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 539 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 540 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 541 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 542 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 543 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 544 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 545 400
penalty weights 10000.0
Epoch: [20][  26/  26]	Loss 0.000 (0.000)	train_nll   0.67 (  0.66)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.58 (  0.61)	train_minacc   0.62 (  0.64)	train_majacc   0.57 (  0.60)	train_corr   0.00 (  0.00)	l1 17.6635 (17.6672)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.31it/s] 27%|##6       | 7/26 [00:00<00:00, 35.59it/s]                                               27%|##6       | 7/26 [00:00<00:00, 35.59it/s] 50%|#####     | 13/26 [00:00<00:00, 42.34it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.56it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.56it/s] 96%|#########6| 25/26 [00:00<00:00, 46.65it/s]100%|##########| 26/26 [00:00<00:00, 39.80it/s]
Test: [   0/  26]	Loss 0.665 (0.665)	test_acc   0.59 (  0.59)	test_minacc   0.71 (  0.71)	test_majacc   0.57 (  0.57)	Loss_d 0.665 (0.665)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.71 (  0.71)	test_majacc_d   0.57 (  0.57)	test_corr_d   0.12 (  0.12)
Test: [  10/  26]	Loss 0.671 (0.663)	test_acc   0.58 (  0.60)	test_minacc   0.53 (  0.64)	test_majacc   0.58 (  0.60)	Loss_d 0.671 (0.663)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.53 (  0.64)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.15 (  0.15)
Test: [  20/  26]	Loss 0.663 (0.664)	test_acc   0.59 (  0.60)	test_minacc   0.70 (  0.64)	test_majacc   0.58 (  0.60)	Loss_d 0.663 (0.664)	test_acc_d   0.59 (  0.60)	test_minacc_d   0.70 (  0.64)	test_majacc_d   0.58 (  0.60)	test_corr_d   0.13 (  0.14)
Test: [  26/  26]	Loss 0.673 (0.664)	test_acc   0.58 (  0.60)	test_minacc   0.62 (  0.63)	test_majacc   0.57 (  0.60)	Loss_d 0.673 (0.664)	test_acc_d   0.58 (  0.60)	test_minacc_d   0.62 (  0.63)	test_majacc_d   0.57 (  0.60)	test_corr_d   0.08 (  0.14)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.96it/s]
Test: [  0/  1]	Loss 0.651 (0.651)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.651 (0.651)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.651 (0.651)	test_acc   0.60 (  0.60)	test_minacc   0.60 (  0.60)	test_majacc   0.58 (  0.58)	Loss_d 0.651 (0.651)	test_acc_d   0.60 (  0.60)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.58 (  0.58)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 20/  1]	epoch_time 0.0372 (0.0382)	validation_time 0.0006 (0.0007)	train_time 0.0366 (0.0372)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.6021000102162362, 0.6010000109672546)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.44it/s] 19%|#9        | 5/26 [00:00<00:00, 21.29it/s] 35%|###4      | 9/26 [00:00<00:00, 26.86it/s] 50%|#####     | 13/26 [00:00<00:00, 30.06it/s] 65%|######5   | 17/26 [00:00<00:00, 32.00it/s] 81%|########  | 21/26 [00:00<00:00, 33.29it/s] 96%|#########6| 25/26 [00:00<00:00, 33.67it/s]100%|##########| 26/26 [00:00<00:00, 28.40it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 546 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 547 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 548 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 549 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 550 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 551 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 552 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 553 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 554 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 555 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 556 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 557 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 558 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 559 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 560 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 561 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 562 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 563 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 564 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 565 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 566 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 567 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 568 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 569 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 570 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 571 400
penalty weights 10000.0
Epoch: [21][  26/  26]	Loss 0.000 (0.000)	train_nll   0.68 (  0.67)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.53 (  0.59)	train_minacc   0.62 (  0.62)	train_majacc   0.52 (  0.58)	train_corr   0.00 (  0.00)	l1 17.6480 (17.6551)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.42it/s] 31%|###       | 8/26 [00:00<00:00, 39.10it/s]                                               31%|###       | 8/26 [00:00<00:00, 39.10it/s] 50%|#####     | 13/26 [00:00<00:00, 41.65it/s] 73%|#######3  | 19/26 [00:00<00:00, 48.21it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 48.21it/s] 96%|#########6| 25/26 [00:00<00:00, 48.25it/s]100%|##########| 26/26 [00:00<00:00, 40.60it/s]
Test: [   0/  26]	Loss 0.680 (0.680)	test_acc   0.55 (  0.55)	test_minacc   0.63 (  0.63)	test_majacc   0.53 (  0.53)	Loss_d 0.680 (0.680)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.08 (  0.08)
Test: [  10/  26]	Loss 0.682 (0.680)	test_acc   0.56 (  0.58)	test_minacc   0.56 (  0.60)	test_majacc   0.56 (  0.58)	Loss_d 0.682 (0.680)	test_acc_d   0.56 (  0.58)	test_minacc_d   0.56 (  0.60)	test_majacc_d   0.56 (  0.58)	test_corr_d   0.08 (  0.09)
Test: [  20/  26]	Loss 0.684 (0.680)	test_acc   0.54 (  0.58)	test_minacc   0.65 (  0.61)	test_majacc   0.52 (  0.57)	Loss_d 0.684 (0.680)	test_acc_d   0.54 (  0.58)	test_minacc_d   0.65 (  0.61)	test_majacc_d   0.52 (  0.57)	test_corr_d   0.06 (  0.09)
Test: [  26/  26]	Loss 0.684 (0.681)	test_acc   0.53 (  0.57)	test_minacc   0.62 (  0.60)	test_majacc   0.52 (  0.57)	Loss_d 0.684 (0.681)	test_acc_d   0.53 (  0.57)	test_minacc_d   0.62 (  0.60)	test_majacc_d   0.52 (  0.57)	test_corr_d   0.04 (  0.08)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.44it/s]
Test: [  0/  1]	Loss 0.670 (0.670)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.23 ( -0.23)
Test: [  1/  1]	Loss 0.670 (0.670)	test_acc   0.58 (  0.58)	test_minacc   0.59 (  0.59)	test_majacc   0.54 (  0.54)	Loss_d 0.670 (0.670)	test_acc_d   0.58 (  0.58)	test_minacc_d   0.59 (  0.59)	test_majacc_d   0.54 (  0.54)	test_corr_d  -0.23 ( -0.23)
Overall Timing[ 21/  1]	epoch_time 0.0362 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0357 (0.0372)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5737000155448914, 0.5820000171661377)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  6.74it/s] 19%|#9        | 5/26 [00:00<00:00, 21.06it/s] 31%|###       | 8/26 [00:00<00:00, 23.59it/s] 46%|####6     | 12/26 [00:00<00:00, 28.54it/s] 62%|######1   | 16/26 [00:00<00:00, 30.85it/s] 77%|#######6  | 20/26 [00:00<00:00, 32.26it/s] 92%|#########2| 24/26 [00:00<00:00, 33.47it/s]100%|##########| 26/26 [00:00<00:00, 27.67it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 572 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 573 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 574 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 575 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 576 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 577 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 578 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 579 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 580 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 581 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 582 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 583 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 584 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 585 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 586 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 587 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 588 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 589 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 590 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 591 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 592 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 593 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 594 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 595 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 596 400
penalty weights 10000.0
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 597 400
penalty weights 10000.0
Epoch: [22][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.13 (  0.13)	train_acc   0.50 (  0.54)	train_minacc   0.62 (  0.60)	train_majacc   0.48 (  0.53)	train_corr   0.00 (  0.00)	l1 17.6383 (17.6429)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.11it/s] 27%|##6       | 7/26 [00:00<00:00, 32.77it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.77it/s] 50%|#####     | 13/26 [00:00<00:00, 40.11it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.07it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.07it/s] 96%|#########6| 25/26 [00:00<00:00, 47.14it/s]100%|##########| 26/26 [00:00<00:00, 39.03it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.52 (  0.52)	test_minacc   0.63 (  0.63)	test_majacc   0.49 (  0.49)	Loss_d 0.688 (0.688)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.63 (  0.63)	test_majacc_d   0.49 (  0.49)	test_corr_d   0.01 (  0.01)
Test: [  10/  26]	Loss 0.687 (0.687)	test_acc   0.55 (  0.55)	test_minacc   0.58 (  0.62)	test_majacc   0.55 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.55 (  0.55)	test_minacc_d   0.58 (  0.62)	test_majacc_d   0.55 (  0.54)	test_corr_d   0.04 (  0.04)
Test: [  20/  26]	Loss 0.690 (0.688)	test_acc   0.52 (  0.55)	test_minacc   0.68 (  0.62)	test_majacc   0.49 (  0.54)	Loss_d 0.690 (0.688)	test_acc_d   0.52 (  0.55)	test_minacc_d   0.68 (  0.62)	test_majacc_d   0.49 (  0.54)	test_corr_d  -0.00 (  0.04)
Test: [  26/  26]	Loss 0.690 (0.688)	test_acc   0.49 (  0.55)	test_minacc   0.62 (  0.62)	test_majacc   0.47 (  0.53)	Loss_d 0.690 (0.688)	test_acc_d   0.49 (  0.55)	test_minacc_d   0.62 (  0.62)	test_majacc_d   0.47 (  0.53)	test_corr_d  -0.01 (  0.03)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.21it/s]
Test: [  0/  1]	Loss 0.679 (0.679)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.679 (0.679)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Test: [  1/  1]	Loss 0.679 (0.679)	test_acc   0.59 (  0.59)	test_minacc   0.60 (  0.60)	test_majacc   0.50 (  0.50)	Loss_d 0.679 (0.679)	test_acc_d   0.59 (  0.59)	test_minacc_d   0.60 (  0.60)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.27 ( -0.27)
Overall Timing[ 22/  1]	epoch_time 0.0380 (0.0381)	validation_time 0.0004 (0.0007)	train_time 0.0376 (0.0372)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5451000127494335, 0.5940000414848328)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.75it/s] 15%|#5        | 4/26 [00:00<00:01, 18.16it/s] 31%|###       | 8/26 [00:00<00:00, 25.52it/s] 42%|####2     | 11/26 [00:00<00:00, 26.04it/s] 58%|#####7    | 15/26 [00:00<00:00, 28.84it/s] 73%|#######3  | 19/26 [00:00<00:00, 30.14it/s] 88%|########8 | 23/26 [00:00<00:00, 31.71it/s]100%|##########| 26/26 [00:00<00:00, 26.90it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 598 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 599 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 600 400
penalty weights 10000.0
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 601 400
penalty weights 10000.0
args.step pgd_anneal_iters 601 600
dim_v 512
rho, theta 359 tensor(-0.0176, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 602 400
penalty weights 10000.0
args.step pgd_anneal_iters 602 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 603 400
penalty weights 10000.0
args.step pgd_anneal_iters 603 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 604 400
penalty weights 10000.0
args.step pgd_anneal_iters 604 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 605 400
penalty weights 10000.0
args.step pgd_anneal_iters 605 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 606 400
penalty weights 10000.0
args.step pgd_anneal_iters 606 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 607 400
penalty weights 10000.0
args.step pgd_anneal_iters 607 600
dim_v 512
rho, theta 421 tensor(-0.0021, device='cuda:0')
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 608 400
penalty weights 10000.0
args.step pgd_anneal_iters 608 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 609 400
penalty weights 10000.0
args.step pgd_anneal_iters 609 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 610 400
penalty weights 10000.0
args.step pgd_anneal_iters 610 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 611 400
penalty weights 10000.0
args.step pgd_anneal_iters 611 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 612 400
penalty weights 10000.0
args.step pgd_anneal_iters 612 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 613 400
penalty weights 10000.0
args.step pgd_anneal_iters 613 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 614 400
penalty weights 10000.0
args.step pgd_anneal_iters 614 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 615 400
penalty weights 10000.0
args.step pgd_anneal_iters 615 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 616 400
penalty weights 10000.0
args.step pgd_anneal_iters 616 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 617 400
penalty weights 10000.0
args.step pgd_anneal_iters 617 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 618 400
penalty weights 10000.0
args.step pgd_anneal_iters 618 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 619 400
penalty weights 10000.0
args.step pgd_anneal_iters 619 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 620 400
penalty weights 10000.0
args.step pgd_anneal_iters 620 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 621 400
penalty weights 10000.0
args.step pgd_anneal_iters 621 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 622 400
penalty weights 10000.0
args.step pgd_anneal_iters 622 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 623 400
penalty weights 10000.0
args.step pgd_anneal_iters 623 600
dim_v 512
Epoch: [23][  26/  26]	Loss 0.000 (0.006)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.01)	weight_norm   0.17 (  0.15)	train_acc   0.53 (  0.56)	train_minacc   0.50 (  0.58)	train_majacc   0.54 (  0.56)	train_corr   0.00 (  0.00)	l1 14.9877 (15.2982)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.86it/s] 19%|#9        | 5/26 [00:00<00:00, 25.97it/s]                                               19%|#9        | 5/26 [00:00<00:00, 25.97it/s] 42%|####2     | 11/26 [00:00<00:00, 39.13it/s] 62%|######1   | 16/26 [00:00<00:00, 41.56it/s]                                                62%|######1   | 16/26 [00:00<00:00, 41.56it/s] 85%|########4 | 22/26 [00:00<00:00, 46.85it/s]100%|##########| 26/26 [00:00<00:00, 38.64it/s]
Test: [   0/  26]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.51 (  0.51)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.691 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.49 (  0.54)	test_majacc   0.53 (  0.53)	Loss_d 0.691 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.49 (  0.54)	test_majacc_d   0.53 (  0.53)	test_corr_d   0.11 (  0.16)
Test: [  20/  26]	Loss 0.699 (0.690)	test_acc   0.48 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.47 (  0.53)	Loss_d 0.699 (0.690)	test_acc_d   0.48 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.47 (  0.53)	test_corr_d   0.13 (  0.15)
Test: [  26/  26]	Loss 0.690 (0.690)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.690 (0.690)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.10 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.93it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 23/  1]	epoch_time 0.0373 (0.0381)	validation_time 0.0003 (0.0007)	train_time 0.0370 (0.0372)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.529300012588501, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  6.10it/s] 19%|#9        | 5/26 [00:00<00:01, 19.75it/s] 35%|###4      | 9/26 [00:00<00:00, 26.16it/s] 50%|#####     | 13/26 [00:00<00:00, 29.68it/s] 65%|######5   | 17/26 [00:00<00:00, 31.59it/s] 81%|########  | 21/26 [00:00<00:00, 32.95it/s] 96%|#########6| 25/26 [00:00<00:00, 33.99it/s]100%|##########| 26/26 [00:00<00:00, 26.79it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 624 400
penalty weights 10000.0
args.step pgd_anneal_iters 624 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 625 400
penalty weights 10000.0
args.step pgd_anneal_iters 625 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 626 400
penalty weights 10000.0
args.step pgd_anneal_iters 626 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 627 400
penalty weights 10000.0
args.step pgd_anneal_iters 627 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 628 400
penalty weights 10000.0
args.step pgd_anneal_iters 628 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 629 400
penalty weights 10000.0
args.step pgd_anneal_iters 629 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 630 400
penalty weights 10000.0
args.step pgd_anneal_iters 630 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 631 400
penalty weights 10000.0
args.step pgd_anneal_iters 631 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 632 400
penalty weights 10000.0
args.step pgd_anneal_iters 632 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 633 400
penalty weights 10000.0
args.step pgd_anneal_iters 633 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 634 400
penalty weights 10000.0
args.step pgd_anneal_iters 634 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 635 400
penalty weights 10000.0
args.step pgd_anneal_iters 635 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 636 400
penalty weights 10000.0
args.step pgd_anneal_iters 636 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 637 400
penalty weights 10000.0
args.step pgd_anneal_iters 637 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 638 400
penalty weights 10000.0
args.step pgd_anneal_iters 638 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 639 400
penalty weights 10000.0
args.step pgd_anneal_iters 639 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 640 400
penalty weights 10000.0
args.step pgd_anneal_iters 640 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 641 400
penalty weights 10000.0
args.step pgd_anneal_iters 641 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 642 400
penalty weights 10000.0
args.step pgd_anneal_iters 642 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 643 400
penalty weights 10000.0
args.step pgd_anneal_iters 643 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 644 400
penalty weights 10000.0
args.step pgd_anneal_iters 644 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 645 400
penalty weights 10000.0
args.step pgd_anneal_iters 645 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 646 400
penalty weights 10000.0
args.step pgd_anneal_iters 646 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 647 400
penalty weights 10000.0
args.step pgd_anneal_iters 647 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 648 400
penalty weights 10000.0
args.step pgd_anneal_iters 648 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 649 400
penalty weights 10000.0
args.step pgd_anneal_iters 649 600
dim_v 512
Epoch: [24][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.53)	train_minacc   0.50 (  0.52)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 14.8837 (14.9509)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.47it/s] 27%|##6       | 7/26 [00:00<00:00, 36.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.38it/s] 50%|#####     | 13/26 [00:00<00:00, 39.97it/s] 73%|#######3  | 19/26 [00:00<00:00, 46.24it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 46.24it/s] 96%|#########6| 25/26 [00:00<00:00, 47.10it/s]100%|##########| 26/26 [00:00<00:00, 40.13it/s]
Test: [   0/  26]	Loss 0.690 (0.690)	test_acc   0.52 (  0.52)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.690 (0.690)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.690 (0.688)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.688)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.16)
Test: [  20/  26]	Loss 0.697 (0.689)	test_acc   0.49 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.48 (  0.53)	Loss_d 0.697 (0.689)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.48 (  0.53)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.689 (0.689)	test_acc   0.54 (  0.53)	test_minacc   0.50 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.689 (0.689)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.50 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.11 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 54.96it/s]
Test: [  0/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.692 (0.692)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.51 (  0.51)	Loss_d 0.692 (0.692)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 24/  1]	epoch_time 0.0374 (0.0380)	validation_time 0.0004 (0.0007)	train_time 0.0370 (0.0372)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.531600015938282, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.65it/s] 19%|#9        | 5/26 [00:00<00:00, 23.71it/s] 35%|###4      | 9/26 [00:00<00:00, 27.68it/s] 50%|#####     | 13/26 [00:00<00:00, 29.77it/s] 65%|######5   | 17/26 [00:00<00:00, 30.35it/s] 81%|########  | 21/26 [00:00<00:00, 31.75it/s] 96%|#########6| 25/26 [00:00<00:00, 32.32it/s]100%|##########| 26/26 [00:00<00:00, 27.97it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 650 400
penalty weights 10000.0
args.step pgd_anneal_iters 650 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 651 400
penalty weights 10000.0
args.step pgd_anneal_iters 651 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 652 400
penalty weights 10000.0
args.step pgd_anneal_iters 652 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 653 400
penalty weights 10000.0
args.step pgd_anneal_iters 653 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 654 400
penalty weights 10000.0
args.step pgd_anneal_iters 654 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 655 400
penalty weights 10000.0
args.step pgd_anneal_iters 655 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 656 400
penalty weights 10000.0
args.step pgd_anneal_iters 656 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 657 400
penalty weights 10000.0
args.step pgd_anneal_iters 657 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 658 400
penalty weights 10000.0
args.step pgd_anneal_iters 658 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 659 400
penalty weights 10000.0
args.step pgd_anneal_iters 659 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 660 400
penalty weights 10000.0
args.step pgd_anneal_iters 660 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 661 400
penalty weights 10000.0
args.step pgd_anneal_iters 661 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 662 400
penalty weights 10000.0
args.step pgd_anneal_iters 662 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 663 400
penalty weights 10000.0
args.step pgd_anneal_iters 663 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 664 400
penalty weights 10000.0
args.step pgd_anneal_iters 664 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 665 400
penalty weights 10000.0
args.step pgd_anneal_iters 665 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 666 400
penalty weights 10000.0
args.step pgd_anneal_iters 666 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 667 400
penalty weights 10000.0
args.step pgd_anneal_iters 667 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 668 400
penalty weights 10000.0
args.step pgd_anneal_iters 668 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 669 400
penalty weights 10000.0
args.step pgd_anneal_iters 669 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 670 400
penalty weights 10000.0
args.step pgd_anneal_iters 670 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 671 400
penalty weights 10000.0
args.step pgd_anneal_iters 671 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 672 400
penalty weights 10000.0
args.step pgd_anneal_iters 672 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 673 400
penalty weights 10000.0
args.step pgd_anneal_iters 673 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 674 400
penalty weights 10000.0
args.step pgd_anneal_iters 674 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 675 400
penalty weights 10000.0
args.step pgd_anneal_iters 675 600
dim_v 512
Epoch: [25][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.54)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.7960 (14.8338)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s] 12%|#1        | 3/26 [00:00<00:00, 26.20it/s] 35%|###4      | 9/26 [00:00<00:00, 37.81it/s]                                               35%|###4      | 9/26 [00:00<00:00, 37.81it/s] 58%|#####7    | 15/26 [00:00<00:00, 45.67it/s]                                                58%|#####7    | 15/26 [00:00<00:00, 45.67it/s] 81%|########  | 21/26 [00:00<00:00, 46.52it/s]100%|##########| 26/26 [00:00<00:00, 41.84it/s]
Test: [   0/  26]	Loss 0.687 (0.687)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.687 (0.687)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.688 (0.685)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.685)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.17)
Test: [  20/  26]	Loss 0.694 (0.686)	test_acc   0.50 (  0.54)	test_minacc   0.54 (  0.54)	test_majacc   0.49 (  0.54)	Loss_d 0.694 (0.686)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.54 (  0.54)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.687 (0.686)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.686)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.16)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 66.13it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.15 ( -0.15)
Overall Timing[ 25/  1]	epoch_time 0.0363 (0.0380)	validation_time 0.0004 (0.0006)	train_time 0.0359 (0.0371)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5381000134348869, 0.5260000228881836)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  8.56it/s] 19%|#9        | 5/26 [00:00<00:00, 22.35it/s] 35%|###4      | 9/26 [00:00<00:00, 27.96it/s] 50%|#####     | 13/26 [00:00<00:00, 31.14it/s] 65%|######5   | 17/26 [00:00<00:00, 33.16it/s] 81%|########  | 21/26 [00:00<00:00, 34.29it/s] 96%|#########6| 25/26 [00:00<00:00, 34.67it/s]100%|##########| 26/26 [00:00<00:00, 29.44it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 676 400
penalty weights 10000.0
args.step pgd_anneal_iters 676 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 677 400
penalty weights 10000.0
args.step pgd_anneal_iters 677 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 678 400
penalty weights 10000.0
args.step pgd_anneal_iters 678 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 679 400
penalty weights 10000.0
args.step pgd_anneal_iters 679 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 680 400
penalty weights 10000.0
args.step pgd_anneal_iters 680 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 681 400
penalty weights 10000.0
args.step pgd_anneal_iters 681 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 682 400
penalty weights 10000.0
args.step pgd_anneal_iters 682 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 683 400
penalty weights 10000.0
args.step pgd_anneal_iters 683 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 684 400
penalty weights 10000.0
args.step pgd_anneal_iters 684 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 685 400
penalty weights 10000.0
args.step pgd_anneal_iters 685 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 686 400
penalty weights 10000.0
args.step pgd_anneal_iters 686 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 687 400
penalty weights 10000.0
args.step pgd_anneal_iters 687 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 688 400
penalty weights 10000.0
args.step pgd_anneal_iters 688 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 689 400
penalty weights 10000.0
args.step pgd_anneal_iters 689 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 690 400
penalty weights 10000.0
args.step pgd_anneal_iters 690 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 691 400
penalty weights 10000.0
args.step pgd_anneal_iters 691 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 692 400
penalty weights 10000.0
args.step pgd_anneal_iters 692 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 693 400
penalty weights 10000.0
args.step pgd_anneal_iters 693 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 694 400
penalty weights 10000.0
args.step pgd_anneal_iters 694 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 695 400
penalty weights 10000.0
args.step pgd_anneal_iters 695 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 696 400
penalty weights 10000.0
args.step pgd_anneal_iters 696 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 697 400
penalty weights 10000.0
args.step pgd_anneal_iters 697 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 698 400
penalty weights 10000.0
args.step pgd_anneal_iters 698 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 699 400
penalty weights 10000.0
args.step pgd_anneal_iters 699 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 700 400
penalty weights 10000.0
args.step pgd_anneal_iters 700 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 701 400
penalty weights 10000.0
args.step pgd_anneal_iters 701 600
dim_v 512
Epoch: [26][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.54)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.7603 (14.7788)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.23it/s] 27%|##6       | 7/26 [00:00<00:00, 36.01it/s]                                               27%|##6       | 7/26 [00:00<00:00, 36.01it/s] 50%|#####     | 13/26 [00:00<00:00, 41.32it/s] 73%|#######3  | 19/26 [00:00<00:00, 47.43it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 47.43it/s] 96%|#########6| 25/26 [00:00<00:00, 47.71it/s]100%|##########| 26/26 [00:00<00:00, 40.33it/s]
Test: [   0/  26]	Loss 0.688 (0.688)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.688 (0.688)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.19 (  0.19)
Test: [  10/  26]	Loss 0.689 (0.686)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.686)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.16)
Test: [  20/  26]	Loss 0.694 (0.687)	test_acc   0.50 (  0.54)	test_minacc   0.53 (  0.54)	test_majacc   0.49 (  0.54)	Loss_d 0.694 (0.687)	test_acc_d   0.50 (  0.54)	test_minacc_d   0.53 (  0.54)	test_majacc_d   0.49 (  0.54)	test_corr_d   0.14 (  0.16)
Test: [  26/  26]	Loss 0.687 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.687 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 63.30it/s]
Test: [  0/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.690 (0.690)	test_acc   0.53 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.51 (  0.51)	Loss_d 0.690 (0.690)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.51 (  0.51)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 26/  1]	epoch_time 0.0360 (0.0379)	validation_time 0.0003 (0.0006)	train_time 0.0357 (0.0371)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5373000134825706, 0.5270000100135803)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:02,  9.02it/s] 19%|#9        | 5/26 [00:00<00:00, 23.55it/s] 35%|###4      | 9/26 [00:00<00:00, 28.74it/s] 50%|#####     | 13/26 [00:00<00:00, 31.44it/s] 65%|######5   | 17/26 [00:00<00:00, 33.28it/s] 81%|########  | 21/26 [00:00<00:00, 33.76it/s] 96%|#########6| 25/26 [00:00<00:00, 34.12it/s]100%|##########| 26/26 [00:00<00:00, 29.46it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 702 400
penalty weights 10000.0
args.step pgd_anneal_iters 702 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 703 400
penalty weights 10000.0
args.step pgd_anneal_iters 703 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 704 400
penalty weights 10000.0
args.step pgd_anneal_iters 704 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 705 400
penalty weights 10000.0
args.step pgd_anneal_iters 705 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 706 400
penalty weights 10000.0
args.step pgd_anneal_iters 706 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 707 400
penalty weights 10000.0
args.step pgd_anneal_iters 707 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 708 400
penalty weights 10000.0
args.step pgd_anneal_iters 708 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 709 400
penalty weights 10000.0
args.step pgd_anneal_iters 709 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 710 400
penalty weights 10000.0
args.step pgd_anneal_iters 710 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 711 400
penalty weights 10000.0
args.step pgd_anneal_iters 711 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 712 400
penalty weights 10000.0
args.step pgd_anneal_iters 712 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 713 400
penalty weights 10000.0
args.step pgd_anneal_iters 713 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 714 400
penalty weights 10000.0
args.step pgd_anneal_iters 714 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 715 400
penalty weights 10000.0
args.step pgd_anneal_iters 715 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 716 400
penalty weights 10000.0
args.step pgd_anneal_iters 716 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 717 400
penalty weights 10000.0
args.step pgd_anneal_iters 717 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 718 400
penalty weights 10000.0
args.step pgd_anneal_iters 718 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 719 400
penalty weights 10000.0
args.step pgd_anneal_iters 719 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 720 400
penalty weights 10000.0
args.step pgd_anneal_iters 720 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 721 400
penalty weights 10000.0
args.step pgd_anneal_iters 721 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 722 400
penalty weights 10000.0
args.step pgd_anneal_iters 722 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 723 400
penalty weights 10000.0
args.step pgd_anneal_iters 723 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 724 400
penalty weights 10000.0
args.step pgd_anneal_iters 724 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 725 400
penalty weights 10000.0
args.step pgd_anneal_iters 725 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 726 400
penalty weights 10000.0
args.step pgd_anneal_iters 726 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 727 400
penalty weights 10000.0
args.step pgd_anneal_iters 727 600
dim_v 512
Epoch: [27][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.54)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.54)	train_corr   0.00 (  0.00)	l1 14.7309 (14.7479)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  7.26it/s] 23%|##3       | 6/26 [00:00<00:00, 25.52it/s]                                               23%|##3       | 6/26 [00:00<00:00, 25.52it/s] 46%|####6     | 12/26 [00:00<00:00, 37.45it/s] 69%|######9   | 18/26 [00:00<00:00, 41.55it/s]                                                69%|######9   | 18/26 [00:00<00:00, 41.55it/s] 92%|#########2| 24/26 [00:00<00:00, 46.59it/s]100%|##########| 26/26 [00:00<00:00, 37.51it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.57 (  0.57)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.57 (  0.57)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.689 (0.687)	test_acc   0.53 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.689 (0.687)	test_acc_d   0.53 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.16)
Test: [  20/  26]	Loss 0.695 (0.688)	test_acc   0.50 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.688)	test_acc_d   0.50 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.13 (  0.15)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.54)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.54)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.11 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 59.58it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 27/  1]	epoch_time 0.0360 (0.0378)	validation_time 0.0005 (0.0006)	train_time 0.0355 (0.0370)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.5352000101208687, 0.5220000147819519)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:04,  5.75it/s] 19%|#9        | 5/26 [00:00<00:01, 18.94it/s] 35%|###4      | 9/26 [00:00<00:00, 25.61it/s] 50%|#####     | 13/26 [00:00<00:00, 29.36it/s] 65%|######5   | 17/26 [00:00<00:00, 31.65it/s] 81%|########  | 21/26 [00:00<00:00, 33.12it/s] 96%|#########6| 25/26 [00:00<00:00, 33.62it/s]100%|##########| 26/26 [00:00<00:00, 27.52it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 728 400
penalty weights 10000.0
args.step pgd_anneal_iters 728 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 729 400
penalty weights 10000.0
args.step pgd_anneal_iters 729 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 730 400
penalty weights 10000.0
args.step pgd_anneal_iters 730 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 731 400
penalty weights 10000.0
args.step pgd_anneal_iters 731 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 732 400
penalty weights 10000.0
args.step pgd_anneal_iters 732 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 733 400
penalty weights 10000.0
args.step pgd_anneal_iters 733 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 734 400
penalty weights 10000.0
args.step pgd_anneal_iters 734 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 735 400
penalty weights 10000.0
args.step pgd_anneal_iters 735 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 736 400
penalty weights 10000.0
args.step pgd_anneal_iters 736 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 737 400
penalty weights 10000.0
args.step pgd_anneal_iters 737 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 738 400
penalty weights 10000.0
args.step pgd_anneal_iters 738 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 739 400
penalty weights 10000.0
args.step pgd_anneal_iters 739 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 740 400
penalty weights 10000.0
args.step pgd_anneal_iters 740 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 741 400
penalty weights 10000.0
args.step pgd_anneal_iters 741 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 742 400
penalty weights 10000.0
args.step pgd_anneal_iters 742 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 743 400
penalty weights 10000.0
args.step pgd_anneal_iters 743 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 744 400
penalty weights 10000.0
args.step pgd_anneal_iters 744 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 745 400
penalty weights 10000.0
args.step pgd_anneal_iters 745 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 746 400
penalty weights 10000.0
args.step pgd_anneal_iters 746 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 747 400
penalty weights 10000.0
args.step pgd_anneal_iters 747 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 748 400
penalty weights 10000.0
args.step pgd_anneal_iters 748 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 749 400
penalty weights 10000.0
args.step pgd_anneal_iters 749 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 750 400
penalty weights 10000.0
args.step pgd_anneal_iters 750 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 751 400
penalty weights 10000.0
args.step pgd_anneal_iters 751 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 752 400
penalty weights 10000.0
args.step pgd_anneal_iters 752 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 753 400
penalty weights 10000.0
args.step pgd_anneal_iters 753 600
dim_v 512
Epoch: [28][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.53)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 14.7008 (14.7180)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  8%|7         | 2/26 [00:00<00:01, 18.47it/s] 27%|##6       | 7/26 [00:00<00:00, 32.38it/s]                                               27%|##6       | 7/26 [00:00<00:00, 32.38it/s] 50%|#####     | 13/26 [00:00<00:00, 43.22it/s] 73%|#######3  | 19/26 [00:00<00:00, 44.98it/s]                                                73%|#######3  | 19/26 [00:00<00:00, 44.98it/s] 96%|#########6| 25/26 [00:00<00:00, 49.64it/s]100%|##########| 26/26 [00:00<00:00, 41.35it/s]
Test: [   0/  26]	Loss 0.689 (0.689)	test_acc   0.53 (  0.53)	test_minacc   0.56 (  0.56)	test_majacc   0.52 (  0.52)	Loss_d 0.689 (0.689)	test_acc_d   0.53 (  0.53)	test_minacc_d   0.56 (  0.56)	test_majacc_d   0.52 (  0.52)	test_corr_d   0.18 (  0.18)
Test: [  10/  26]	Loss 0.690 (0.687)	test_acc   0.54 (  0.54)	test_minacc   0.51 (  0.54)	test_majacc   0.54 (  0.54)	Loss_d 0.690 (0.687)	test_acc_d   0.54 (  0.54)	test_minacc_d   0.51 (  0.54)	test_majacc_d   0.54 (  0.54)	test_corr_d   0.10 (  0.16)
Test: [  20/  26]	Loss 0.695 (0.688)	test_acc   0.49 (  0.53)	test_minacc   0.51 (  0.53)	test_majacc   0.49 (  0.53)	Loss_d 0.695 (0.688)	test_acc_d   0.49 (  0.53)	test_minacc_d   0.51 (  0.53)	test_majacc_d   0.49 (  0.53)	test_corr_d   0.13 (  0.15)
Test: [  26/  26]	Loss 0.688 (0.688)	test_acc   0.54 (  0.53)	test_minacc   0.53 (  0.53)	test_majacc   0.54 (  0.53)	Loss_d 0.688 (0.688)	test_acc_d   0.54 (  0.53)	test_minacc_d   0.53 (  0.53)	test_majacc_d   0.54 (  0.53)	test_corr_d   0.10 (  0.15)
  0%|          | 0/1 [00:00<?, ?it/s]                                       0%|          | 0/1 [00:00<?, ?it/s]100%|##########| 1/1 [00:00<00:00, 67.03it/s]
Test: [  0/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Test: [  1/  1]	Loss 0.691 (0.691)	test_acc   0.52 (  0.52)	test_minacc   0.52 (  0.52)	test_majacc   0.50 (  0.50)	Loss_d 0.691 (0.691)	test_acc_d   0.52 (  0.52)	test_minacc_d   0.52 (  0.52)	test_majacc_d   0.50 (  0.50)	test_corr_d  -0.14 ( -0.14)
Overall Timing[ 28/  1]	epoch_time 0.0379 (0.0378)	validation_time 0.0004 (0.0006)	train_time 0.0375 (0.0370)
record: (train_acc, test_acc) (0.6567000145912171, 0.6630000472068787)
last accs (train_acc, test_acc) (0.534000013679266, 0.5210000276565552)
current lr:  0.006
current prune rate:  1.0
  0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:05,  4.58it/s] 19%|#9        | 5/26 [00:00<00:01, 17.01it/s] 35%|###4      | 9/26 [00:00<00:00, 23.42it/s] 50%|#####     | 13/26 [00:00<00:00, 27.53it/s] 65%|######5   | 17/26 [00:00<00:00, 29.86it/s] 81%|########  | 21/26 [00:00<00:00, 31.96it/s] 96%|#########6| 25/26 [00:00<00:00, 33.33it/s]100%|##########| 26/26 [00:00<00:00, 26.24it/s]
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 754 400
penalty weights 10000.0
args.step pgd_anneal_iters 754 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 755 400
penalty weights 10000.0
args.step pgd_anneal_iters 755 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 756 400
penalty weights 10000.0
args.step pgd_anneal_iters 756 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 757 400
penalty weights 10000.0
args.step pgd_anneal_iters 757 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 758 400
penalty weights 10000.0
args.step pgd_anneal_iters 758 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 759 400
penalty weights 10000.0
args.step pgd_anneal_iters 759 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 760 400
penalty weights 10000.0
args.step pgd_anneal_iters 760 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 761 400
penalty weights 10000.0
args.step pgd_anneal_iters 761 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 762 400
penalty weights 10000.0
args.step pgd_anneal_iters 762 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 763 400
penalty weights 10000.0
args.step pgd_anneal_iters 763 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 764 400
penalty weights 10000.0
args.step pgd_anneal_iters 764 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 765 400
penalty weights 10000.0
args.step pgd_anneal_iters 765 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 766 400
penalty weights 10000.0
args.step pgd_anneal_iters 766 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 767 400
penalty weights 10000.0
args.step pgd_anneal_iters 767 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 768 400
penalty weights 10000.0
args.step pgd_anneal_iters 768 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 769 400
penalty weights 10000.0
args.step pgd_anneal_iters 769 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 770 400
penalty weights 10000.0
args.step pgd_anneal_iters 770 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 771 400
penalty weights 10000.0
args.step pgd_anneal_iters 771 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 772 400
penalty weights 10000.0
args.step pgd_anneal_iters 772 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 773 400
penalty weights 10000.0
args.step pgd_anneal_iters 773 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 774 400
penalty weights 10000.0
args.step pgd_anneal_iters 774 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 775 400
penalty weights 10000.0
args.step pgd_anneal_iters 775 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 776 400
penalty weights 10000.0
args.step pgd_anneal_iters 776 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 777 400
penalty weights 10000.0
args.step pgd_anneal_iters 777 600
dim_v 512
torch.Size([390, 3, 64, 32]) torch.Size([390, 1])
args.step args.penalty_anneal_iters 778 400
penalty weights 10000.0
args.step pgd_anneal_iters 778 600
dim_v 512
torch.Size([250, 3, 64, 32]) torch.Size([250, 1])
args.step args.penalty_anneal_iters 779 400
penalty weights 10000.0
args.step pgd_anneal_iters 779 600
dim_v 512
Epoch: [29][  26/  26]	Loss 0.000 (0.000)	train_nll   0.69 (  0.69)	train_penalty   0.00 (  0.00)	weight_norm   0.18 (  0.18)	train_acc   0.54 (  0.53)	train_minacc   0.53 (  0.53)	train_majacc   0.54 (  0.53)	train_corr   0.00 (  0.00)	l1 14.6711 (14.6879)
  0%|          | 0/26 [00:00<?, ?it/s]                                        0%|          | 0/26 [00:00<?, ?it/s]  4%|3         | 1/26 [00:00<00:03,  8.32it/s]slurmstepd: error: *** JOB 13978175 ON ccc0284 CANCELLED AT 2024-09-07T11:48:58 ***
